{"version":3,"file":"pubkeyCache.js","sourceRoot":"","sources":["../../../src/utils/pubkeyCache.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAE5C,MAAM,WAAW,GAA8B,EAAE,CAAC;AAElD;;GAEG;AACH,MAAM,OAAO,eAAgB,SAAQ,SAAS;IAG5C,YAAY,KAAwB;QAClC,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;IAClC,CAAC;IAEQ,MAAM,CAAC,KAAgB;QAC9B,IAAI,KAAK,YAAY,eAAe,EAAE;YACpC,OAAO,KAAK,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC;SACvC;QACD,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAEQ,QAAQ;QACf,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAEQ,QAAQ;QACf,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;CACF;AAED,MAAM,oBAAoB,GAAG,CAAC,EAAU,EAAa,EAAE;IACrD,MAAM,MAAM,GAAG,WAAW,CAAC,EAAE,CAAC,CAAC;IAC/B,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC,GAAG,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;KACpD;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,EAA0C,EAC/B,EAAE;IACb,IAAI,OAAO,EAAE,KAAK,QAAQ,EAAE;QAC1B,OAAO,oBAAoB,CAAC,EAAE,CAAC,CAAC;KACjC;SAAM,IAAI,EAAE,YAAY,SAAS,EAAE;QAClC,OAAO,oBAAoB,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC5C;SAAM;QACL,OAAO,oBAAoB,CAAC,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC3D;AACH,CAAC,CAAC;AAEF,MAAM,QAAQ,GAA8B,EAAE,CAAC;AAE/C;;;;GAIG;AACH,MAAM,WAAW,GAAG,CAAC,KAAiC,EAAc,EAAE;IACpE,OAAO,UAAU,CAAC,IAAI,CACpB,KAAK,CAAC,MAAM,CAAC,CAAC,GAAa,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,CAC7D,CAAC;AACJ,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,KAAiC,EACjC,SAAoB,EACpB,EAAE;IACF,MAAM,eAAe,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;IAC3C,MAAM,QAAQ,GAAG,GAAG,eAAe,CAAC,QAAQ,EAAE,IAAI,SAAS,CAAC,QAAQ,EAAE,EAAE,CAAC;IACzE,MAAM,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAClC,IAAI,MAAM,EAAE;QACV,OAAO,MAAM,CAAC;KACf;IACD,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,sBAAsB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IACjE,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC","sourcesContent":["import type { PublicKeyInitData } from \"@solana/web3.js\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst pubkeyCache: Record<string, PublicKey> = {};\n\n/**\n * PublicKey with a cached base58 value.\n */\nexport class CachedPublicKey extends PublicKey {\n  private readonly _base58: string;\n\n  constructor(value: PublicKeyInitData) {\n    super(value);\n    this._base58 = super.toBase58();\n  }\n\n  override equals(other: PublicKey): boolean {\n    if (other instanceof CachedPublicKey) {\n      return other._base58 === this._base58;\n    }\n    return super.equals(other);\n  }\n\n  override toString() {\n    return this._base58;\n  }\n\n  override toBase58(): string {\n    return this._base58;\n  }\n}\n\nconst getOrCreatePublicKey = (pk: string): PublicKey => {\n  const cached = pubkeyCache[pk];\n  if (!cached) {\n    return (pubkeyCache[pk] = new CachedPublicKey(pk));\n  }\n  return cached;\n};\n\n/**\n * Gets or parses a PublicKey.\n * @param pk\n * @returns\n */\nexport const getPublicKey = (\n  pk: string | PublicKey | PublicKeyInitData\n): PublicKey => {\n  if (typeof pk === \"string\") {\n    return getOrCreatePublicKey(pk);\n  } else if (pk instanceof PublicKey) {\n    return getOrCreatePublicKey(pk.toString());\n  } else {\n    return getOrCreatePublicKey(new PublicKey(pk).toString());\n  }\n};\n\nconst gpaCache: Record<string, PublicKey> = {};\n\n/**\n * Concatenates seeds to generate a unique number array.\n * @param seeds\n * @returns\n */\nconst concatSeeds = (seeds: Array<Buffer | Uint8Array>): Uint8Array => {\n  return Uint8Array.from(\n    seeds.reduce((acc: number[], seed) => [...acc, ...seed], [])\n  );\n};\n\n/**\n * Gets a cached program address for the given seeds.\n * @param seeds\n * @param programId\n * @returns\n */\nexport const getProgramAddress = (\n  seeds: Array<Buffer | Uint8Array>,\n  programId: PublicKey\n) => {\n  const normalizedSeeds = concatSeeds(seeds);\n  const cacheKey = `${normalizedSeeds.toString()}_${programId.toString()}`;\n  const cached = gpaCache[cacheKey];\n  if (cached) {\n    return cached;\n  }\n  const [key] = PublicKey.findProgramAddressSync(seeds, programId);\n  return (gpaCache[cacheKey] = getPublicKey(key));\n};\n"]}