{"version":3,"file":"TransactionReceipt.js","sourceRoot":"","sources":["../../../src/transaction/TransactionReceipt.ts"],"names":[],"mappings":";;;;AAMA,4EAAsD;AAItD,8CAAkD;AAClD,kDAAoD;AACpD,mEAA6D;AAW7D;;;;;GAKG;AACI,MAAM,sBAAsB,GAAG,KAAK,EACzC,EAAmC,EACN,EAAE;IAC/B,MAAM,GAAG,GAAG,MAAM,IAAA,wBAAc,EAAC,EAAE,CAAC,CAAC;IACrC,IAAI,GAAG,YAAY,kBAAkB,EAAE;QACrC,OAAO,GAAG,CAAC;KACZ;IAED,IAAI,OAA2B,CAAC;IAChC,IAAI,GAAG,YAAY,0CAAkB,EAAE;QACrC,OAAO,GAAG,GAAG,CAAC;KACf;SAAM;QACL,OAAO,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC;YACvB,SAAS,EAAE,KAAK;SACjB,CAAC,CAAC;KACJ;IACD,OAAO,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;AAC9B,CAAC,CAAC;AAjBW,QAAA,sBAAsB,0BAiBjC;AAEF;;GAEG;AACH,MAAa,kBAAkB;IAC7B;IACE;;OAEG;IACM,SAA+B;IACxC;;OAEG;IACM,QAA4D;QAJ5D,cAAS,GAAT,SAAS,CAAsB;QAI/B,aAAQ,GAAR,QAAQ,CAAoD;IACpE,CAAC;IAEJ;;OAEG;IACH,SAAS,CAAkB,WAA2B;;QACpD,MAAM,IAAI,GAAG,MAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,0CAAE,WAAW,CAAC;QAC7C,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3B,OAAO,WAAW,CAAC,IAAI,CAAC,CAAC;SAC1B;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;OAEG;IACH,SAAS;;QACP,OAAO,CAAC,GAAG,CAAC,MAAA,MAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,0CAAE,WAAW,0CAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED;;;OAGG;IACH,IAAI,YAAY;;QACd,MAAM,IAAI,GAAG,MAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,0CAAE,WAAW,CAAC;QAC7C,IAAA,wBAAS,EAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAC3B,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACzC,IAAA,wBAAS,EAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;QACxC,MAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACxC,IAAA,wBAAS,EAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAC/B,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACH,0BAA0B,CAAC,UAAmB,cAAc;QAC1D,OAAO,IAAA,0BAAc,EAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;CACF;AApDD,gDAoDC","sourcesContent":["import type {\n  Cluster,\n  TransactionResponse,\n  TransactionSignature,\n  VersionedTransactionResponse,\n} from \"@solana/web3.js\";\nimport { default as invariant } from \"tiny-invariant\";\n\nimport type { Event, EventParser } from \"../interfaces.js\";\nimport type { PromiseOrValue } from \"../utils/misc.js\";\nimport { valueAsPromise } from \"../utils/misc.js\";\nimport { generateTXLink } from \"../utils/txLink.js\";\nimport { PendingTransaction } from \"./PendingTransaction.js\";\nimport type { TransactionEnvelope } from \"./TransactionEnvelope.js\";\n\n/**\n * A value that can be processed into a {@link TransactionReceipt}.\n */\nexport type TransactionLike =\n  | TransactionEnvelope\n  | PendingTransaction\n  | TransactionReceipt;\n\n/**\n * Confirms a transaction, returning its receipt.\n *\n * @param tx\n * @returns\n */\nexport const confirmTransactionLike = async (\n  tx: PromiseOrValue<TransactionLike>\n): Promise<TransactionReceipt> => {\n  const ish = await valueAsPromise(tx);\n  if (ish instanceof TransactionReceipt) {\n    return ish;\n  }\n\n  let pending: PendingTransaction;\n  if (ish instanceof PendingTransaction) {\n    pending = ish;\n  } else {\n    pending = await ish.send({\n      printLogs: false,\n    });\n  }\n  return await pending.wait();\n};\n\n/**\n * A transaction that has been processed by the cluster.\n */\nexport class TransactionReceipt {\n  constructor(\n    /**\n     * Signature (id) of the transaction.\n     */\n    readonly signature: TransactionSignature,\n    /**\n     * Raw response from web3.js\n     */\n    readonly response: TransactionResponse | VersionedTransactionResponse\n  ) {}\n\n  /**\n   * Gets the events associated with this transaction.\n   */\n  getEvents<E extends Event>(eventParser: EventParser<E>): readonly E[] {\n    const logs = this.response.meta?.logMessages;\n    if (logs && logs.length > 0) {\n      return eventParser(logs);\n    }\n    return [];\n  }\n\n  /**\n   * Prints the logs associated with this transaction.\n   */\n  printLogs(): void {\n    console.log(this.response.meta?.logMessages?.join(\"\\n\"));\n  }\n\n  /**\n   * Gets the compute units used by the transaction.\n   * @returns\n   */\n  get computeUnits(): number {\n    const logs = this.response.meta?.logMessages;\n    invariant(logs, \"no logs\");\n    const consumeLog = logs[logs.length - 2];\n    invariant(consumeLog, \"no consume log\");\n    const amtStr = consumeLog.split(\" \")[3];\n    invariant(amtStr, \"no amount\");\n    return parseInt(amtStr);\n  }\n\n  /**\n   * Generates a link to view this {@link TransactionReceipt} on the official Solana explorer.\n   * @param network\n   * @returns\n   */\n  generateSolanaExplorerLink(cluster: Cluster = \"mainnet-beta\"): string {\n    return generateTXLink(this.signature, cluster);\n  }\n}\n"]}