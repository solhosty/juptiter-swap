{"version":3,"file":"misc.js","sourceRoot":"","sources":["../../../src/utils/misc.ts"],"names":[],"mappings":";;;;AAEA,gEAAsC;AAEtC,MAAM,IAAI,GAAG,GAAG,EAAE;IAChB,OAAO;AACT,CAAC,CAAC;AAEF;;;GAGG;AACI,MAAM,yBAAyB,GAAG,KAAK,EAC5C,EAAoB,EACR,EAAE;IACd,MAAM,eAAe,GAAG,OAAO,CAAC,KAAK,CAAC;IACtC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;IACrB,IAAI;QACF,MAAM,MAAM,GAAG,MAAM,EAAE,EAAE,CAAC;QAC1B,OAAO,CAAC,KAAK,GAAG,eAAe,CAAC;QAChC,OAAO,MAAM,CAAC;KACf;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,KAAK,GAAG,eAAe,CAAC;QAChC,MAAM,CAAC,CAAC;KACT;AACH,CAAC,CAAC;AAbW,QAAA,yBAAyB,6BAapC;AAEF;;;GAGG;AACI,MAAM,oBAAoB,GAAG,CAAI,EAAW,EAAK,EAAE;IACxD,MAAM,eAAe,GAAG,OAAO,CAAC,KAAK,CAAC;IACtC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;IACrB,IAAI;QACF,MAAM,MAAM,GAAG,EAAE,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,GAAG,eAAe,CAAC;QAChC,OAAO,MAAM,CAAC;KACf;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,KAAK,GAAG,eAAe,CAAC;QAChC,MAAM,CAAC,CAAC;KACT;AACH,CAAC,CAAC;AAXW,QAAA,oBAAoB,wBAW/B;AAEF,SAAgB,KAAK,CAAC,EAAU;IAC9B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AAC3D,CAAC;AAFD,sBAEC;AAOD;;GAEG;AACI,MAAM,cAAc,GAAG,KAAK,EACjC,SAA4B,EAChB,EAAE;IACd,IAAI,MAAM,IAAI,SAAS,EAAE;QACvB,OAAO,MAAM,SAAS,CAAC;KACxB;IACD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAPW,QAAA,cAAc,kBAOzB;AAEF;;;;GAIG;AACI,MAAM,iBAAiB,GAAG,CAC/B,MAAiB,EACjB,OAAO,GAAG,CAAC,EACX,QAAQ,GAAG,CAAC,EACJ,EAAE;IACV,MAAM,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;IAC9B,OAAO,GAAG,CAAC,MAAM,GAAG,EAAE;QACpB,CAAC,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,QAAQ,GAAG,CAAC,SAAS,CAC/C,GAAG,CAAC,MAAM,GAAG,QAAQ,EACrB,GAAG,CAAC,MAAM,CACX,EAAE;QACL,CAAC,CAAC,GAAG,CAAC;AACV,CAAC,CAAC;AAZW,QAAA,iBAAiB,qBAY5B","sourcesContent":["import type { PublicKey } from \"./publicKey\";\n\nexport * from \"@saberhq/option-utils\";\n\nconst noop = () => {\n  // noop\n};\n\n/**\n * Hide the console.error because @solana/web3.js often emits noisy errors as a\n * side effect.\n */\nexport const suppressConsoleErrorAsync = async <T>(\n  fn: () => Promise<T>\n): Promise<T> => {\n  const oldConsoleError = console.error;\n  console.error = noop;\n  try {\n    const result = await fn();\n    console.error = oldConsoleError;\n    return result;\n  } catch (e) {\n    console.error = oldConsoleError;\n    throw e;\n  }\n};\n\n/**\n * Hide the console.error because @solana/web3.js often emits noisy errors as a\n * side effect.\n */\nexport const suppressConsoleError = <T>(fn: () => T): T => {\n  const oldConsoleError = console.error;\n  console.error = noop;\n  try {\n    const result = fn();\n    console.error = oldConsoleError;\n    return result;\n  } catch (e) {\n    console.error = oldConsoleError;\n    throw e;\n  }\n};\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/**\n * Promise or its inner value.\n */\nexport type PromiseOrValue<T> = Promise<T> | T;\n\n/**\n * Awaits for a promise or value.\n */\nexport const valueAsPromise = async <T>(\n  awaitable: PromiseOrValue<T>\n): Promise<T> => {\n  if (\"then\" in awaitable) {\n    return await awaitable;\n  }\n  return awaitable;\n};\n\n/**\n * Shortens a pubkey.\n * @param pubkey\n * @returns\n */\nexport const formatPubkeyShort = (\n  pubkey: PublicKey,\n  leading = 7,\n  trailing = 7\n): string => {\n  const str = pubkey.toString();\n  return str.length > 20\n    ? `${str.substring(0, leading)}.....${str.substring(\n        str.length - trailing,\n        str.length\n      )}`\n    : str;\n};\n"]}