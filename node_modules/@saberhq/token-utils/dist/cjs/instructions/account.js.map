{"version":3,"file":"account.js","sourceRoot":"","sources":["../../../src/instructions/account.ts"],"names":[],"mappings":";;;AACA,4DAA8D;AAC9D,iDAAwE;AAExE,6CAAyD;AAEzD,4CAAkD;AAE3C,MAAM,kBAAkB,GAAG,KAAK,EAAE,EACvC,QAAQ,EACR,IAAI,EACJ,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,EACjC,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,EACjC,aAAa,GAAG,iBAAO,CAAC,QAAQ,EAAE,GAUnC,EAGE,EAAE;IACH,kCAAkC;IAClC,MAAM,wBAAwB,GAC5B,MAAM,iBAAQ,CAAC,iCAAiC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IACxE,OAAO,IAAA,iCAAyB,EAAC;QAC/B,QAAQ;QACR,IAAI;QACJ,wBAAwB;QACxB,KAAK;QACL,KAAK;QACL,aAAa;KACd,CAAC,CAAC;AACL,CAAC,CAAC;AA9BW,QAAA,kBAAkB,sBA8B7B;AAEK,MAAM,yBAAyB,GAAG,CAAC,EACxC,QAAQ,EACR,IAAI,EACJ,wBAAwB,EACxB,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,EACjC,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,EACjC,aAAa,GAAG,iBAAO,CAAC,QAAQ,EAAE,GAcnC,EAGC,EAAE;IACF,MAAM,YAAY,GAAG,aAAa,CAAC,SAAS,CAAC;IAC7C,OAAO;QACL,GAAG,EAAE,YAAY;QACjB,EAAE,EAAE,IAAI,oCAAmB,CACzB,QAAQ,EACR;YACE,uBAAa,CAAC,aAAa,CAAC;gBAC1B,UAAU,EAAE,KAAK;gBACjB,gBAAgB,EAAE,aAAa,CAAC,SAAS;gBACzC,QAAQ,EAAE,wBAAwB;gBAClC,KAAK,EAAE,8BAAkB,CAAC,IAAI;gBAC9B,SAAS,EAAE,4BAAgB;aAC5B,CAAC;YACF,iBAAQ,CAAC,4BAA4B,CACnC,4BAAgB,EAChB,IAAI,EACJ,YAAY,EACZ,KAAK,CACN;SACF,EACD,CAAC,aAAa,CAAC,CAChB;KACF,CAAC;AACJ,CAAC,CAAC;AA/CW,QAAA,yBAAyB,6BA+CpC","sourcesContent":["import type { Provider } from \"@saberhq/solana-contrib\";\nimport { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport { Token as SPLToken, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type { PublicKey, Signer } from \"@solana/web3.js\";\nimport { Keypair, SystemProgram } from \"@solana/web3.js\";\n\nimport { TokenAccountLayout } from \"../layout.js\";\n\nexport const createTokenAccount = async ({\n  provider,\n  mint,\n  owner = provider.wallet.publicKey,\n  payer = provider.wallet.publicKey,\n  accountSigner = Keypair.generate(),\n}: {\n  provider: Provider;\n  mint: PublicKey;\n  owner?: PublicKey;\n  payer?: PublicKey;\n  /**\n   * The keypair of the account to be created.\n   */\n  accountSigner?: Signer;\n}): Promise<{\n  key: PublicKey;\n  tx: TransactionEnvelope;\n}> => {\n  // Allocate memory for the account\n  const rentExemptAccountBalance =\n    await SPLToken.getMinBalanceRentForExemptAccount(provider.connection);\n  return buildCreateTokenAccountTX({\n    provider,\n    mint,\n    rentExemptAccountBalance,\n    owner,\n    payer,\n    accountSigner,\n  });\n};\n\nexport const buildCreateTokenAccountTX = ({\n  provider,\n  mint,\n  rentExemptAccountBalance,\n  owner = provider.wallet.publicKey,\n  payer = provider.wallet.publicKey,\n  accountSigner = Keypair.generate(),\n}: {\n  provider: Provider;\n  mint: PublicKey;\n  /**\n   * SOL needed for a rent exempt token account.\n   */\n  rentExemptAccountBalance: number;\n  owner?: PublicKey;\n  payer?: PublicKey;\n  /**\n   * The keypair of the account to be created.\n   */\n  accountSigner?: Signer;\n}): {\n  key: PublicKey;\n  tx: TransactionEnvelope;\n} => {\n  const tokenAccount = accountSigner.publicKey;\n  return {\n    key: tokenAccount,\n    tx: new TransactionEnvelope(\n      provider,\n      [\n        SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: accountSigner.publicKey,\n          lamports: rentExemptAccountBalance,\n          space: TokenAccountLayout.span,\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        SPLToken.createInitAccountInstruction(\n          TOKEN_PROGRAM_ID,\n          mint,\n          tokenAccount,\n          owner\n        ),\n      ],\n      [accountSigner]\n    ),\n  };\n};\n"]}