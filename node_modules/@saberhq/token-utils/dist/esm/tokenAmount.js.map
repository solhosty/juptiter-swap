{"version":3,"file":"tokenAmount.js","sourceRoot":"","sources":["../../src/tokenAmount.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,mBAAmB,CAAC;AAExC,OAAO,EACL,qBAAqB,EACrB,cAAc,EACd,WAAW,IAAI,YAAY,EAC3B,WAAW,GACZ,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EAAE,MAAM,OAAO,CAAC;AAqBvB,MAAM,OAAO,WAAY,SAAQ,YAAmB;IAClD,0DAA0D;IAC1D,YAAY,KAAY,EAAE,MAAiB;QACzC,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;IACpC,CAAC;IAED,GAAG,CAAC,KAAY,EAAE,MAAiB;QACjC,2DAA2D;QAC3D,OAAO,IAAI,WAAW,CAAC,KAAK,EAAE,MAAM,CAAS,CAAC;IAChD,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,KAAK,CAAC,KAAY,EAAE,QAAgB;QACzC,MAAM,IAAI,GAAG,qBAAqB,CAAC,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAC9D,OAAO,IAAI,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,KAAgB;QAC9B,OAAO,IAAI,WAAW,CACpB,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAC3D,CAAC;IACJ,CAAC;IAED;;OAEG;IACM,QAAQ;QACf,OAAO,sBAAsB,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,aAAa,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC;IAClF,CAAC;IAED;;OAEG;IACM,MAAM;QACb,OAAO;YACL,GAAG,KAAK,CAAC,MAAM,EAAE;YACjB,KAAK,EAAE,IAAI;YACX,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO;YACxB,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE;SACzB,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,KAAK;QACH,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;IACtC,CAAC;CACF","sourcesContent":["import { u64 } from \"@solana/spl-token\";\nimport type { BigintIsh, FractionObject } from \"@ubeswap/token-math\";\nimport {\n  parseAmountFromString,\n  parseBigintIsh,\n  TokenAmount as UTokenAmount,\n  validateU64,\n} from \"@ubeswap/token-math\";\nimport BN from \"bn.js\";\n\nimport type { Token } from \"./token.js\";\n\nexport type { IFormatUint } from \"@ubeswap/token-math\";\n\nexport interface TokenAmountObject extends FractionObject {\n  /**\n   * Discriminator to show this is a token amount.\n   */\n  _isTA: true;\n  /**\n   * Mint of the token.\n   */\n  mint: string;\n  /**\n   * Amount of tokens in string representation.\n   */\n  uiAmount: string;\n}\n\nexport class TokenAmount extends UTokenAmount<Token> {\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(token: Token, amount: BigintIsh) {\n    super(token, amount, validateU64);\n  }\n\n  new(token: Token, amount: BigintIsh): this {\n    // unsafe but nobody will be extending this anyway probably\n    return new TokenAmount(token, amount) as this;\n  }\n\n  /**\n   * Parses a token amount from a decimal representation.\n   * @param token\n   * @param uiAmount\n   * @returns\n   */\n  static parse(token: Token, uiAmount: string): TokenAmount {\n    const prev = parseAmountFromString(token, uiAmount, \".\", \",\");\n    return new TokenAmount(token, prev);\n  }\n\n  /**\n   * Divides this TokenAmount by a raw integer.\n   * @param other\n   * @returns\n   */\n  divideByInteger(other: BigintIsh): TokenAmount {\n    return new TokenAmount(\n      this.token,\n      this.toU64().div(new BN(parseBigintIsh(other).toString()))\n    );\n  }\n\n  /**\n   * String representation of this token amount.\n   */\n  override toString(): string {\n    return `TokenAmount[Token=(${this.token.toString()}), amount=${this.toExact()}`;\n  }\n\n  /**\n   * JSON representation of the token amount.\n   */\n  override toJSON(): TokenAmountObject {\n    return {\n      ...super.toJSON(),\n      _isTA: true,\n      mint: this.token.address,\n      uiAmount: this.toExact(),\n    };\n  }\n\n  /**\n   * Converts this to the raw u64 used by the SPL library\n   * @returns\n   */\n  toU64(): u64 {\n    return new u64(this.raw.toString());\n  }\n}\n"]}