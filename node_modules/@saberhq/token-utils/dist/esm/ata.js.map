{"version":3,"file":"ata.js","sourceRoot":"","sources":["../../src/ata.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,iBAAiB,EAAE,MAAM,yBAAyB,CAAC;AAC5D,OAAO,EACL,2BAA2B,EAC3B,gBAAgB,GACjB,MAAM,mBAAmB,CAAC;AAE3B;;;;GAIG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,EAAE,EAClC,IAAI,EACJ,KAAK,GAIN,EAAsB,EAAE;IACvB,OAAO,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,EAChC,IAAI,EACJ,KAAK,GAIN,EAAa,EAAE;IACd,OAAO,iBAAiB,CACtB,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,gBAAgB,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,EAChE,2BAA2B,CAC5B,CAAC;AACJ,CAAC,CAAC;AASF;;;;GAIG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAmB,EAChD,KAAK,EACL,KAAK,GAMN,EAKE,EAAE;IACH,OAAO,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAmB,EACpD,KAAK,EACL,KAAK,GAMN,EAKC,EAAE;IACF,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CACtC,CACE,IAAI,EAKJ,EAAE;QACF,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAsB,CAAC;QAC5C,MAAM,MAAM,GAAG,iBAAiB,CAAC;YAC/B,IAAI;YACJ,KAAK,EAAE,KAAK;SACb,CAAC,CAAC;QACH,OAAO;YACL,OAAO,EAAE,MAAM;YACf,IAAI;YACJ,IAAI;SACL,CAAC;IACJ,CAAC,CACF,CAAC;IACF,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAC3B,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE;QAC/B,OAAO;YACL,QAAQ,EAAE;gBACR,GAAG,GAAG,CAAC,QAAQ;gBACf,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;aAC1B;SACF,CAAC;IACJ,CAAC,EACD,EAAE,QAAQ,EAAE,EAAE,EAEb,CACF,CAAC;IACF,OAAO;QACL,QAAQ,EAAE,OAAO,CAAC,QAAQ;KAC3B,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { PublicKey } from \"@saberhq/solana-contrib\";\nimport { getProgramAddress } from \"@saberhq/solana-contrib\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\n\n/**\n * Gets an associated token account address.\n *\n * @deprecated use {@link getATAAddressSync}\n */\nexport const getATAAddress = async ({\n  mint,\n  owner,\n}: {\n  mint: PublicKey;\n  owner: PublicKey;\n}): Promise<PublicKey> => {\n  return Promise.resolve(getATAAddressSync({ mint, owner }));\n};\n\n/**\n * Gets an associated token account address synchronously.\n */\nexport const getATAAddressSync = ({\n  mint,\n  owner,\n}: {\n  mint: PublicKey;\n  owner: PublicKey;\n}): PublicKey => {\n  return getProgramAddress(\n    [owner.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n};\n\nexport type ATAMap<K extends string> = {\n  [mint in K]: {\n    address: PublicKey;\n    mint: PublicKey;\n  };\n};\n\n/**\n * Gets multiple associated token account addresses.\n *\n * @deprecated use {@link getATAAddressesSync}\n */\nexport const getATAAddresses = <K extends string>({\n  mints,\n  owner,\n}: {\n  mints: {\n    [mint in K]: PublicKey;\n  };\n  owner: PublicKey;\n}): Promise<{\n  /**\n   * All ATAs\n   */\n  accounts: ATAMap<K>;\n}> => {\n  return Promise.resolve(getATAAddressesSync({ mints, owner }));\n};\n\n/**\n * Gets multiple associated token account addresses.\n */\nexport const getATAAddressesSync = <K extends string>({\n  mints,\n  owner,\n}: {\n  mints: {\n    [mint in K]: PublicKey;\n  };\n  owner: PublicKey;\n}): {\n  /**\n   * All ATAs\n   */\n  accounts: ATAMap<K>;\n} => {\n  const result = Object.entries(mints).map(\n    (\n      args\n    ): {\n      address: PublicKey;\n      name: string;\n      mint: PublicKey;\n    } => {\n      const [name, mint] = args as [K, PublicKey];\n      const result = getATAAddressSync({\n        mint,\n        owner: owner,\n      });\n      return {\n        address: result,\n        name,\n        mint,\n      };\n    }\n  );\n  const deduped = result.reduce(\n    (acc, { address, name, mint }) => {\n      return {\n        accounts: {\n          ...acc.accounts,\n          [name]: { address, mint },\n        },\n      };\n    },\n    { accounts: {} } as {\n      accounts: ATAMap<K>;\n    }\n  );\n  return {\n    accounts: deduped.accounts,\n  };\n};\n"]}