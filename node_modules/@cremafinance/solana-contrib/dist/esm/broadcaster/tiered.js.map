{"version":3,"file":"tiered.js","sourceRoot":"","sources":["../../../src/broadcaster/tiered.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  Blockhash,\n  BlockhashWithExpiryBlockHeight,\n  Commitment,\n  ConfirmOptions,\n  Connection,\n  RpcResponseAndContext,\n  SendOptions,\n  SimulatedTransactionResponse,\n  Transaction,\n} from \"@solana/web3.js\";\n\nimport type { Broadcaster } from \"../interfaces.js\";\nimport { DEFAULT_PROVIDER_OPTIONS } from \"../provider.js\";\nimport { PendingTransaction } from \"../transaction/index.js\";\nimport { suppressConsoleErrorAsync } from \"../utils/index.js\";\nimport type { BroadcastOptions } from \"./index.js\";\nimport {\n  DEFAULT_FALLBACK_RETRY_OPTIONS,\n  DEFAULT_RETRY_OPTIONS,\n  SingleConnectionBroadcaster,\n} from \"./index.js\";\nimport { sendAndSpamRawTx } from \"./sendAndSpamRawTx.js\";\n\n/**\n * Broadcasts transactions to multiple connections simultaneously.\n */\nexport class TieredBroadcaster implements Broadcaster {\n  readonly premiumBroadcaster: SingleConnectionBroadcaster;\n\n  constructor(\n    readonly primaryConnection: Connection,\n    /**\n     * Connections to send to in addition to the primary.\n     */\n    readonly fallbackConnections: readonly Connection[],\n    readonly opts: ConfirmOptions = DEFAULT_PROVIDER_OPTIONS\n  ) {\n    this.premiumBroadcaster = new SingleConnectionBroadcaster(\n      primaryConnection,\n      opts\n    );\n  }\n\n  async getLatestBlockhash(\n    commitment: Commitment = this.opts.preflightCommitment ?? \"confirmed\"\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    return await this.premiumBroadcaster.getLatestBlockhash(commitment);\n  }\n\n  async getRecentBlockhash(\n    commitment: Commitment = this.opts.preflightCommitment ?? \"confirmed\"\n  ): Promise<Blockhash> {\n    return await this.premiumBroadcaster.getRecentBlockhash(commitment);\n  }\n\n  private async _sendRawTransaction(\n    encoded: Buffer,\n    options?: SendOptions & Omit<BroadcastOptions, \"printLogs\">\n  ): Promise<PendingTransaction> {\n    const pending = new PendingTransaction(\n      this.primaryConnection,\n      await sendAndSpamRawTx(\n        this.primaryConnection,\n        encoded,\n        options ?? this.opts,\n        options ?? DEFAULT_RETRY_OPTIONS\n      )\n    );\n    void (async () => {\n      await Promise.all(\n        this.fallbackConnections.map(async (fc) => {\n          try {\n            await sendAndSpamRawTx(\n              fc,\n              encoded,\n              options ?? this.opts,\n              options?.fallbackRetryOptions ?? DEFAULT_FALLBACK_RETRY_OPTIONS\n            );\n          } catch (e) {\n            console.warn(`[Broadcaster] _sendRawTransaction error`, e);\n          }\n        })\n      );\n    })();\n    return pending;\n  }\n\n  /**\n   * Broadcasts a signed transaction.\n   *\n   * @param tx\n   * @param confirm\n   * @param opts\n   * @returns\n   */\n  async broadcast(\n    tx: Transaction,\n    { printLogs = true, ...opts }: BroadcastOptions = this.opts\n  ): Promise<PendingTransaction> {\n    if (tx.signatures.length === 0) {\n      throw new Error(\"Transaction must be signed before broadcasting.\");\n    }\n    const rawTx = tx.serialize();\n\n    if (printLogs) {\n      return await this._sendRawTransaction(rawTx, opts);\n    }\n\n    return await suppressConsoleErrorAsync(async () => {\n      // hide the logs of TX errors if printLogs = false\n      return await this._sendRawTransaction(rawTx, opts);\n    });\n  }\n\n  /**\n   * Simulates a transaction with a commitment.\n   * @param tx\n   * @param commitment\n   * @returns\n   */\n  async simulate(\n    tx: Transaction,\n    {\n      commitment = this.opts.preflightCommitment ?? \"confirmed\",\n      verifySigners = true,\n    }: {\n      commitment?: Commitment;\n      verifySigners?: boolean;\n    } = {\n      commitment: this.opts.preflightCommitment ?? \"confirmed\",\n      verifySigners: true,\n    }\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (verifySigners && tx.signatures.length === 0) {\n      throw new Error(\"Transaction must be signed before simulating.\");\n    }\n    return this.premiumBroadcaster.simulate(tx, {\n      commitment,\n      verifySigners,\n    });\n  }\n}\n"]}