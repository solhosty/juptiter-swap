'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var anchor = require('@project-serum/anchor');
var web3_js = require('@solana/web3.js');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const deriveStakePool = (programId, stakingTokenMint, uniqueSeed) => __awaiter(void 0, void 0, void 0, function* () {
    return yield web3_js.PublicKey.findProgramAddress([
        stakingTokenMint.toBuffer(),
        uniqueSeed.toArrayLike(Buffer, "le", 2),
        Buffer.from("StakePool"),
    ], programId);
});
const deriveStakingTokenAccount = (programId, stakePool) => __awaiter(void 0, void 0, void 0, function* () {
    return yield web3_js.PublicKey.findProgramAddress([stakePool.toBuffer(), Buffer.from("StakingTokenPool")], programId);
});
const deriveRewardPool = (programId, stakePool, poolId) => __awaiter(void 0, void 0, void 0, function* () {
    return yield web3_js.PublicKey.findProgramAddress([
        new anchor.BN(poolId).toArrayLike(Buffer, "le", 1),
        stakePool.toBuffer(),
        Buffer.from("RewardPool"),
    ], programId);
});
const deriveRewardRecord = (programId, rewardPool, rewardEpoch) => __awaiter(void 0, void 0, void 0, function* () {
    return yield web3_js.PublicKey.findProgramAddress([
        rewardPool.toBuffer(),
        new anchor.BN(rewardEpoch).toArrayLike(Buffer, "le", 2),
        Buffer.from("RewardRecord"),
    ], programId);
});
const deriveRewardTokenAccount = (programId, rewardPool) => __awaiter(void 0, void 0, void 0, function* () {
    return yield web3_js.PublicKey.findProgramAddress([rewardPool.toBuffer(), Buffer.from("RewardTokenAccount")], programId);
});
const deriveAllocatedTokenAccount = (programId, rewardPool) => __awaiter(void 0, void 0, void 0, function* () {
    return yield web3_js.PublicKey.findProgramAddress([rewardPool.toBuffer(), Buffer.from("AllocatedTokenAccount")], programId);
});
const deriveStakingRecord = (programId, recordOwner, stakePool) => __awaiter(void 0, void 0, void 0, function* () {
    return yield web3_js.PublicKey.findProgramAddress([
        recordOwner.toBuffer(),
        stakePool.toBuffer(),
        Buffer.from("StakingRecord"),
    ], programId);
});
const deriveRewardPoolPdas = (programId, stakePool, poolId, rewardEpoch) => __awaiter(void 0, void 0, void 0, function* () {
    let rewardRecord, rewardRecordBump;
    let nextRewardRecord, nextRewardRecordBump;
    const [rewardPool, rewardPoolBump] = yield deriveRewardPool(programId, stakePool, poolId);
    if (rewardEpoch != undefined) {
        [rewardRecord, rewardRecordBump] = yield deriveRewardRecord(programId, rewardPool, rewardEpoch);
        [nextRewardRecord, nextRewardRecordBump] = yield deriveRewardRecord(programId, rewardPool, rewardEpoch + 1);
    }
    const [rewardTokenAccount, rewardTokenAccountBump] = yield deriveRewardTokenAccount(programId, rewardPool);
    const [allocatedTokenAccount, allocatedTokenAccountBump] = yield deriveAllocatedTokenAccount(programId, rewardPool);
    return {
        rewardPool,
        rewardPoolBump,
        rewardRecord,
        rewardRecordBump,
        nextRewardRecord,
        nextRewardRecordBump,
        rewardTokenAccount,
        rewardTokenAccountBump,
        allocatedTokenAccount,
        allocatedTokenAccountBump,
    };
});

var pdas = /*#__PURE__*/Object.freeze({
    __proto__: null,
    deriveStakePool: deriveStakePool,
    deriveStakingTokenAccount: deriveStakingTokenAccount,
    deriveRewardPool: deriveRewardPool,
    deriveRewardRecord: deriveRewardRecord,
    deriveRewardTokenAccount: deriveRewardTokenAccount,
    deriveAllocatedTokenAccount: deriveAllocatedTokenAccount,
    deriveStakingRecord: deriveStakingRecord,
    deriveRewardPoolPdas: deriveRewardPoolPdas
});

const getMethodBuilder$9 = (program, recordOwner, stakePool, ownerTokenAccount, stakeAmount, lockupPeriod) => __awaiter(void 0, void 0, void 0, function* () {
    const [stakingRecord] = yield deriveStakingRecord(program.programId, recordOwner, stakePool);
    const [stakingTokenAccount] = yield deriveStakingTokenAccount(program.programId, stakePool);
    return yield program.methods.stakeToken(stakeAmount, lockupPeriod).accounts({
        recordOwner,
        stakePool,
        stakingRecord,
        ownerTokenAccount,
        stakingTokenAccount,
    });
});
const stakeTokenInstruction = (program, recordOwner, stakePool, ownerTokenAccount, stakeAmount, lockupPeriod) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$9(program, recordOwner, stakePool, ownerTokenAccount, stakeAmount, lockupPeriod)).instruction();
});
const stakeTokenRpc = (program, recordOwner, stakePool, ownerTokenAccount, stakeAmount, lockupPeriod, signers) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$9(program, recordOwner, stakePool, ownerTokenAccount, stakeAmount, lockupPeriod))
        .signers(signers)
        .rpc();
});

const getMethodBuilder$8 = (program, recordOwner, stakePool, ownerTokenAccount, amount) => __awaiter(void 0, void 0, void 0, function* () {
    const [stakingRecord] = yield deriveStakingRecord(program.programId, recordOwner, stakePool);
    const [stakingTokenAccount] = yield deriveStakingTokenAccount(program.programId, stakePool);
    return yield program.methods.unstakeToken(amount).accounts({
        recordOwner,
        stakePool,
        stakingRecord,
        ownerTokenAccount,
        stakingTokenAccount,
    });
});
const unstakeTokenInstruction = (program, recordOwner, stakePool, ownerTokenAccount, unstakeAmount) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$8(program, recordOwner, stakePool, ownerTokenAccount, unstakeAmount)).instruction();
});
const unstakeTokenRpc = (program, recordOwner, stakePool, ownerTokenAccount, unstakeAmount, signers) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$8(program, recordOwner, stakePool, ownerTokenAccount, unstakeAmount))
        .signers(signers)
        .rpc();
});

const getMethodBuilder$7 = (program, recordOwner, stakePool, ownerTokenAccount, startRewardRecordEpoch, endRewardRecordEpoch, poolId) => __awaiter(void 0, void 0, void 0, function* () {
    const [stakingRecord] = yield deriveStakingRecord(program.programId, recordOwner, stakePool);
    const [rewardPool] = yield deriveRewardPool(program.programId, stakePool, poolId);
    const [allocatedTokenAccount] = yield deriveAllocatedTokenAccount(program.programId, rewardPool);
    const [startRewardRecord] = yield deriveRewardRecord(program.programId, rewardPool, startRewardRecordEpoch);
    const [endRewardRecord] = yield deriveRewardRecord(program.programId, rewardPool, endRewardRecordEpoch);
    return yield program.methods.claimReward().accounts({
        recordOwner: recordOwner,
        stakePool,
        stakingRecord,
        rewardPool,
        startRewardRecord,
        endRewardRecord,
        ownerTokenAccount,
        allocatedTokenAccount,
    });
});
const claimRewardInstruction = (program, recordOwner, stakePool, ownerTokenAccount, startRewardRecordEpoch, endRewardRecordEpoch, poolId) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$7(program, recordOwner, stakePool, ownerTokenAccount, startRewardRecordEpoch, endRewardRecordEpoch, poolId)).instruction();
});
const claimRewardRpc = (program, recordOwner, stakePool, ownerTokenAccount, startRewardRecordEpoch, endRewardRecordEpoch, poolId, signers) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$7(program, recordOwner, stakePool, ownerTokenAccount, startRewardRecordEpoch, endRewardRecordEpoch, poolId))
        .signers(signers)
        .rpc();
});

const getMethodBuilder$6 = (program, recordOwner, stakePool) => __awaiter(void 0, void 0, void 0, function* () {
    const [stakingRecord] = yield deriveStakingRecord(program.programId, recordOwner, stakePool);
    return yield program.methods.createStakingRecord().accounts({
        recordOwner,
        stakePool,
        stakingRecord,
    });
});
const createStakingRecordInstruction = (program, recordOwner, stakePool) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$6(program, recordOwner, stakePool)).instruction();
});
const createStakingRecordRpc = (program, recordOwner, stakePool, signers) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$6(program, recordOwner, stakePool))
        .signers(signers)
        .rpc();
});

const getMethodBuilder$5 = (program, payer, stakePool, poolId, epochToCreate) => __awaiter(void 0, void 0, void 0, function* () {
    const poolAccounts = yield deriveRewardPoolPdas(program.programId, stakePool, poolId, epochToCreate - 1);
    return yield program.methods.createRewardRecord().accounts({
        payer,
        stakePool,
        rewardPool: poolAccounts.rewardPool,
        newRewardRecord: poolAccounts.nextRewardRecord,
        prevRewardRecord: poolAccounts.rewardRecord,
        rewardTokenAccount: poolAccounts.rewardTokenAccount,
        allocatedTokenAccount: poolAccounts.allocatedTokenAccount,
    });
});
const createRewardRecordInstruction = (program, payer, stakePool, poolId, currentEpoch) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$5(program, payer, stakePool, poolId, currentEpoch)).instruction();
});
const createRewardRecordRpc = (program, payer, stakePool, poolId, currentEpoch, signers) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$5(program, payer, stakePool, poolId, currentEpoch))
        .signers(signers)
        .rpc();
});

const getMethodBuilder$4 = (program, stakePool, poolId, epochToUpdate, isStartingEpoch) => __awaiter(void 0, void 0, void 0, function* () {
    const poolAccounts = yield deriveRewardPoolPdas(program.programId, stakePool, poolId, epochToUpdate - 1);
    if (isStartingEpoch) {
        return yield program.methods.updateRewardRecord().accounts({
            stakePool,
            rewardPool: poolAccounts.rewardPool,
            curRewardRecord: poolAccounts.nextRewardRecord,
            prevRewardRecord: poolAccounts.nextRewardRecord,
            rewardTokenAccount: poolAccounts.rewardTokenAccount,
            allocatedTokenAccount: poolAccounts.allocatedTokenAccount,
        });
    }
    return yield program.methods.updateRewardRecord().accounts({
        stakePool,
        rewardPool: poolAccounts.rewardPool,
        curRewardRecord: poolAccounts.nextRewardRecord,
        prevRewardRecord: poolAccounts.rewardRecord,
        rewardTokenAccount: poolAccounts.rewardTokenAccount,
        allocatedTokenAccount: poolAccounts.allocatedTokenAccount,
    });
});
const updateRewardRecordInstruction = (program, stakePool, poolId, epochToUpdate, isStartingEpoch) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$4(program, stakePool, poolId, epochToUpdate, isStartingEpoch)).instruction();
});
const updateRewardRecordRpc = (program, stakePool, poolId, epochToUpdate, isStartingEpoch, signers) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$4(program, stakePool, poolId, epochToUpdate, isStartingEpoch))
        .signers(signers)
        .rpc();
});

const getMethodBuilder$3 = (program, stakePool) => __awaiter(void 0, void 0, void 0, function* () {
    return yield program.methods.updateStakePoolEpoch().accounts({
        stakePool,
    });
});
const updateStakePoolEpochInstruction = (program, stakePool) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$3(program, stakePool)).instruction();
});
const updateStakePoolEpochRpc = (program, stakePool, signers) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$3(program, stakePool)).signers(signers).rpc();
});

exports.DistributionType = void 0;
(function (DistributionType) {
    DistributionType[DistributionType["CONSTANT"] = 0] = "CONSTANT";
    DistributionType[DistributionType["PERCENTAGE"] = 1] = "PERCENTAGE";
})(exports.DistributionType || (exports.DistributionType = {}));

// Converts distribution type from Typescript enum to object literal for
// Solana program client.
const convertDistributionType = (distributionType) => {
    let response;
    switch (distributionType) {
        case exports.DistributionType.CONSTANT:
            response = { constant: {} };
            break;
        case exports.DistributionType.PERCENTAGE:
            response = { percentage: {} };
            break;
    }
    return response;
};
const calculateRewardUnits = (stakedAmount, lockUpPeriod) => {
    // Amount is divided by 100 after multiplication with the reward multiplier.
    let divisor = new anchor.BN(100);
    let rewardMultiplier;
    switch (lockUpPeriod) {
        case 0:
            rewardMultiplier = 100;
            break;
        case 1:
            rewardMultiplier = 115;
            break;
        case 2:
            rewardMultiplier = 125;
            break;
        case 3:
            rewardMultiplier = 150;
            break;
        case 4:
            rewardMultiplier = 250;
            break;
        default:
            rewardMultiplier = 0;
    }
    return stakedAmount.mul(new anchor.BN(rewardMultiplier)).div(divisor);
};

const getMethodBuilder$2 = (program, stakePoolAuthority, rewardPoolAuthority, stakePool, rewardTokenMint, poolId, startingEpoch, distributionType, rewardPerEpoch, epochRewardDecimals, payer) => __awaiter(void 0, void 0, void 0, function* () {
    const poolAccounts = yield deriveRewardPoolPdas(program.programId, stakePool, poolId, startingEpoch);
    let accounts = {
        stakePoolAuthority,
        rewardPoolAuthority,
        stakePool,
        rewardPool: poolAccounts.rewardPool,
        rewardRecord: poolAccounts.rewardRecord,
        rewardTokenMint,
        rewardTokenAccount: poolAccounts.rewardTokenAccount,
        allocatedTokenAccount: poolAccounts.allocatedTokenAccount,
    };
    if (payer)
        accounts.payer = payer;
    return yield program.methods
        .createRewardPool(startingEpoch, convertDistributionType(distributionType), rewardPerEpoch, epochRewardDecimals)
        .accounts(accounts);
});
const createRewardPoolInstruction = (program, stakePoolAuthority, rewardPoolAuthority, stakePool, rewardTokenMint, poolId, startingEpoch, distributionType, rewardPerEpoch, epochRewardDecimals, payer) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$2(program, stakePoolAuthority, rewardPoolAuthority, stakePool, rewardTokenMint, poolId, startingEpoch, distributionType, rewardPerEpoch, epochRewardDecimals, payer)).instruction();
});
const createRewardPoolRpc = (program, stakePoolAuthority, rewardPoolAuthority, stakePool, rewardTokenMint, poolId, startingEpoch, distributionType, rewardPerEpoch, epochRewardDecimals, signers, payer) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$2(program, stakePoolAuthority, rewardPoolAuthority, stakePool, rewardTokenMint, poolId, startingEpoch, distributionType, rewardPerEpoch, epochRewardDecimals, payer))
        .signers(signers)
        .rpc();
});

const getMethodBuilder$1 = (program, rewardPoolAuthority, stakePool, poolId, distributionType, rewardPerEpoch, isActive, payer) => __awaiter(void 0, void 0, void 0, function* () {
    const [rewardPool] = yield deriveRewardPool(program.programId, stakePool, poolId);
    let accounts = {
        rewardPoolAuthority,
        stakePool,
        rewardPool,
    };
    if (payer)
        accounts.payer = payer;
    return yield program.methods
        .updateRewardPool(convertDistributionType(distributionType), rewardPerEpoch, isActive)
        .accounts(accounts);
});
const updateRewardPoolInstruction = (program, rewardPoolAuthority, stakePool, poolId, distributionType, rewardPerEpoch, isActive, payer) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$1(program, rewardPoolAuthority, stakePool, poolId, distributionType, rewardPerEpoch, isActive, payer)).instruction();
});
const updateRewardPoolRpc = (program, rewardPoolAuthority, stakePool, poolId, distributionType, rewardPerEpoch, isActive, signers, payer) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder$1(program, rewardPoolAuthority, stakePool, poolId, distributionType, rewardPerEpoch, isActive, payer))
        .signers(signers)
        .rpc();
});

const getMethodBuilder = (program, stakePoolAuthority, stakePool, stakingTokenMint, uniqueSeed, nextEpochStartTime, epochDuration, payer) => __awaiter(void 0, void 0, void 0, function* () {
    const [stakingTokenAccount] = yield deriveStakingTokenAccount(program.programId, stakePool);
    let accounts = {
        stakePoolAuthority,
        stakePool,
        stakingTokenMint,
        stakingTokenAccount,
    };
    if (payer)
        accounts.payer = payer;
    return yield program.methods
        .createStakePool(uniqueSeed, nextEpochStartTime, epochDuration)
        .accounts(accounts);
});
const createStakePoolInstruction = (program, stakePoolAuthority, stakePool, stakingTokenMint, uniqueSeed, nextEpochStartTime, epochDuration, payer) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder(program, stakePoolAuthority, stakePool, stakingTokenMint, uniqueSeed, nextEpochStartTime, epochDuration, payer)).instruction();
});
const createStakePoolRpc = (program, stakePoolAuthority, stakePool, stakingTokenMint, uniqueSeed, nextEpochStartTime, epochDuration, signers, payer) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield getMethodBuilder(program, stakePoolAuthority, stakePool, stakingTokenMint, uniqueSeed, nextEpochStartTime, epochDuration, payer))
        .signers(signers)
        .rpc();
});

var index = /*#__PURE__*/Object.freeze({
    __proto__: null,
    stakeTokenInstruction: stakeTokenInstruction,
    stakeTokenRpc: stakeTokenRpc,
    unstakeTokenInstruction: unstakeTokenInstruction,
    unstakeTokenRpc: unstakeTokenRpc,
    claimRewardInstruction: claimRewardInstruction,
    claimRewardRpc: claimRewardRpc,
    createStakingRecordInstruction: createStakingRecordInstruction,
    createStakingRecordRpc: createStakingRecordRpc,
    createRewardRecordInstruction: createRewardRecordInstruction,
    createRewardRecordRpc: createRewardRecordRpc,
    updateRewardRecordInstruction: updateRewardRecordInstruction,
    updateRewardRecordRpc: updateRewardRecordRpc,
    updateStakePoolEpochInstruction: updateStakePoolEpochInstruction,
    updateStakePoolEpochRpc: updateStakePoolEpochRpc,
    createRewardPoolInstruction: createRewardPoolInstruction,
    createRewardPoolRpc: createRewardPoolRpc,
    updateRewardPoolInstruction: updateRewardPoolInstruction,
    updateRewardPoolRpc: updateRewardPoolRpc,
    createStakePoolInstruction: createStakePoolInstruction,
    createStakePoolRpc: createStakePoolRpc
});

const IDL = {
    version: "0.1.0",
    name: "psy_stake",
    instructions: [
        {
            name: "createStakePool",
            accounts: [
                {
                    name: "stakePoolAuthority",
                    isMut: false,
                    isSigner: true,
                },
                {
                    name: "payer",
                    isMut: true,
                    isSigner: true,
                },
                {
                    name: "stakePool",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "stakingTokenMint",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "stakingTokenAccount",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "rent",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "tokenProgram",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "systemProgram",
                    isMut: false,
                    isSigner: false,
                },
            ],
            args: [
                {
                    name: "uniqueSeed",
                    type: "u16",
                },
                {
                    name: "nextEpochStartTime",
                    type: "i64",
                },
                {
                    name: "epochDuration",
                    type: "i64",
                },
            ],
        },
        {
            name: "createRewardPool",
            accounts: [
                {
                    name: "stakePoolAuthority",
                    isMut: false,
                    isSigner: true,
                },
                {
                    name: "payer",
                    isMut: true,
                    isSigner: true,
                },
                {
                    name: "rewardPoolAuthority",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "stakePool",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "rewardPool",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "rewardRecord",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "rewardTokenMint",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "rewardTokenAccount",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "allocatedTokenAccount",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "rent",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "tokenProgram",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "systemProgram",
                    isMut: false,
                    isSigner: false,
                },
            ],
            args: [
                {
                    name: "startingEpoch",
                    type: "u16",
                },
                {
                    name: "distributionType",
                    type: {
                        defined: "DistributionType",
                    },
                },
                {
                    name: "rewardPerEpoch",
                    type: "u64",
                },
                {
                    name: "epochRewardDecimals",
                    type: "u8",
                },
            ],
        },
        {
            name: "updateRewardPool",
            accounts: [
                {
                    name: "rewardPoolAuthority",
                    isMut: false,
                    isSigner: true,
                },
                {
                    name: "stakePool",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "rewardPool",
                    isMut: true,
                    isSigner: false,
                },
            ],
            args: [
                {
                    name: "distributionType",
                    type: {
                        defined: "DistributionType",
                    },
                },
                {
                    name: "rewardPerEpoch",
                    type: "u64",
                },
                {
                    name: "isActive",
                    type: "bool",
                },
            ],
        },
        {
            name: "createStakingRecord",
            accounts: [
                {
                    name: "recordOwner",
                    isMut: true,
                    isSigner: true,
                },
                {
                    name: "stakePool",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "stakingRecord",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "systemProgram",
                    isMut: false,
                    isSigner: false,
                },
            ],
            args: [],
        },
        {
            name: "stakeToken",
            accounts: [
                {
                    name: "recordOwner",
                    isMut: false,
                    isSigner: true,
                },
                {
                    name: "stakePool",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "stakingRecord",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "ownerTokenAccount",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "stakingTokenAccount",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "tokenProgram",
                    isMut: false,
                    isSigner: false,
                },
            ],
            args: [
                {
                    name: "amount",
                    type: "u64",
                },
                {
                    name: "lockupPeriod",
                    type: "u8",
                },
            ],
        },
        {
            name: "unstakeToken",
            accounts: [
                {
                    name: "recordOwner",
                    isMut: false,
                    isSigner: true,
                },
                {
                    name: "stakePool",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "stakingRecord",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "ownerTokenAccount",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "stakingTokenAccount",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "tokenProgram",
                    isMut: false,
                    isSigner: false,
                },
            ],
            args: [
                {
                    name: "amount",
                    type: "u64",
                },
            ],
        },
        {
            name: "claimReward",
            accounts: [
                {
                    name: "recordOwner",
                    isMut: false,
                    isSigner: true,
                },
                {
                    name: "stakePool",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "stakingRecord",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "rewardPool",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "startRewardRecord",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "endRewardRecord",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "ownerTokenAccount",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "allocatedTokenAccount",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "tokenProgram",
                    isMut: false,
                    isSigner: false,
                },
            ],
            args: [],
        },
        {
            name: "createRewardRecord",
            accounts: [
                {
                    name: "payer",
                    isMut: true,
                    isSigner: true,
                },
                {
                    name: "stakePool",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "rewardPool",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "newRewardRecord",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "prevRewardRecord",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "rewardTokenAccount",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "allocatedTokenAccount",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "tokenProgram",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "systemProgram",
                    isMut: false,
                    isSigner: false,
                },
            ],
            args: [],
        },
        {
            name: "updateRewardRecord",
            accounts: [
                {
                    name: "stakePool",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "rewardPool",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "curRewardRecord",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "prevRewardRecord",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "rewardTokenAccount",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "allocatedTokenAccount",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "tokenProgram",
                    isMut: false,
                    isSigner: false,
                },
            ],
            args: [],
        },
        {
            name: "updateStakePoolEpoch",
            accounts: [
                {
                    name: "stakePool",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "tokenProgram",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "systemProgram",
                    isMut: false,
                    isSigner: false,
                },
            ],
            args: [],
        },
        {
            name: "stakeByVault",
            accounts: [
                {
                    name: "vaultAccount",
                    isMut: false,
                    isSigner: true,
                },
                {
                    name: "stakingTokenMint",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "stakePool",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "stakingRecord",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "ownerTokenAccount",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "stakingTokenAccount",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "tokenProgram",
                    isMut: false,
                    isSigner: false,
                },
            ],
            args: [
                {
                    name: "amount",
                    type: "u64",
                },
                {
                    name: "lockupPeriod",
                    type: "u8",
                },
            ],
        },
        {
            name: "claimRewardByVault",
            accounts: [
                {
                    name: "vaultAccount",
                    isMut: false,
                    isSigner: true,
                },
                {
                    name: "stakingTokenMint",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "stakePool",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "stakingRecord",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "rewardPool",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "startRewardRecord",
                    isMut: false,
                    isSigner: false,
                },
                {
                    name: "endRewardRecord",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "allocatedTokenAccount",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "ownerTokenAccount",
                    isMut: true,
                    isSigner: false,
                },
                {
                    name: "tokenProgram",
                    isMut: false,
                    isSigner: false,
                },
            ],
            args: [],
        },
    ],
    accounts: [
        {
            name: "StakePool",
            type: {
                kind: "struct",
                fields: [
                    {
                        name: "stakePoolAuthority",
                        type: "publicKey",
                    },
                    {
                        name: "stakingTokenMint",
                        type: "publicKey",
                    },
                    {
                        name: "stakingTokenAccount",
                        type: "publicKey",
                    },
                    {
                        name: "rewardPoolCount",
                        type: "u8",
                    },
                    {
                        name: "currentEpoch",
                        type: "u16",
                    },
                    {
                        name: "epochDuration",
                        type: "i64",
                    },
                    {
                        name: "nextEpochStartTime",
                        type: "i64",
                    },
                    {
                        name: "inactiveEpochVec",
                        type: {
                            vec: "u16",
                        },
                    },
                    {
                        name: "startingEpochVec",
                        type: {
                            vec: "u16",
                        },
                    },
                    {
                        name: "totalRewardUnits",
                        type: "u64",
                    },
                    {
                        name: "stakePoolBump",
                        type: "u8",
                    },
                    {
                        name: "stakingTokenAccountBump",
                        type: "u8",
                    },
                    {
                        name: "uniqueSeed",
                        type: "u16",
                    },
                ],
            },
        },
        {
            name: "RewardPool",
            type: {
                kind: "struct",
                fields: [
                    {
                        name: "stakePool",
                        type: "publicKey",
                    },
                    {
                        name: "rewardPoolAuthority",
                        type: "publicKey",
                    },
                    {
                        name: "poolId",
                        type: "u8",
                    },
                    {
                        name: "rewardTokenMint",
                        type: "publicKey",
                    },
                    {
                        name: "rewardTokenAccount",
                        type: "publicKey",
                    },
                    {
                        name: "allocatedTokenAccount",
                        type: "publicKey",
                    },
                    {
                        name: "distributionType",
                        type: {
                            defined: "DistributionType",
                        },
                    },
                    {
                        name: "constantRewardPerEpoch",
                        type: "u64",
                    },
                    {
                        name: "percentageRewardMbpsPerEpoch",
                        type: "u64",
                    },
                    {
                        name: "startingEpoch",
                        type: "u16",
                    },
                    {
                        name: "isActive",
                        type: "bool",
                    },
                    {
                        name: "epochRewardDecimals",
                        type: "u8",
                    },
                    {
                        name: "rewardPoolBump",
                        type: "u8",
                    },
                    {
                        name: "rewardTokenAccountBump",
                        type: "u8",
                    },
                    {
                        name: "allocatedTokenAccountBump",
                        type: "u8",
                    },
                ],
            },
        },
        {
            name: "StakingRecord",
            type: {
                kind: "struct",
                fields: [
                    {
                        name: "stakePool",
                        type: "publicKey",
                    },
                    {
                        name: "recordOwner",
                        type: "publicKey",
                    },
                    {
                        name: "stakedAmount",
                        type: "u64",
                    },
                    {
                        name: "rewardUnits",
                        type: "u64",
                    },
                    {
                        name: "lockUpExpiry",
                        type: "i64",
                    },
                    {
                        name: "lastEpochClaimedVec",
                        type: {
                            vec: "u16",
                        },
                    },
                    {
                        name: "recordBump",
                        type: "u8",
                    },
                ],
            },
        },
        {
            name: "RewardRecord",
            type: {
                kind: "struct",
                fields: [
                    {
                        name: "stakePool",
                        type: "publicKey",
                    },
                    {
                        name: "rewardPool",
                        type: "publicKey",
                    },
                    {
                        name: "epoch",
                        type: "u16",
                    },
                    {
                        name: "lastUpdated",
                        type: "i64",
                    },
                    {
                        name: "epochEndTimestamp",
                        type: "i64",
                    },
                    {
                        name: "cummulativeReward",
                        type: "u64",
                    },
                    {
                        name: "epochReward",
                        type: "u64",
                    },
                    {
                        name: "totalRewardAllocated",
                        type: "u64",
                    },
                    {
                        name: "recordBump",
                        type: "u8",
                    },
                    {
                        name: "isUpdatable",
                        type: "bool",
                    },
                ],
            },
        },
    ],
    types: [
        {
            name: "DistributionType",
            type: {
                kind: "enum",
                variants: [
                    {
                        name: "Constant",
                    },
                    {
                        name: "Percentage",
                    },
                ],
            },
        },
    ],
    errors: [
        {
            code: 6000,
            name: "InvalidStartTime",
            msg: "Start time of next epoch must be in the future.",
        },
        {
            code: 6001,
            name: "MinEpochDuration",
            msg: "Epoch duration must be at least 4 hours.",
        },
        {
            code: 6002,
            name: "InvalidStartingEpoch",
            msg: "Starting epoch of RewardPool cannot be in the past.",
        },
        {
            code: 6003,
            name: "InvalidPreviousRecord",
            msg: "Previous record must be from one epoch before current record.",
        },
        {
            code: 6004,
            name: "InvalidDistributionType",
            msg: "Distribution type is not supported.",
        },
        {
            code: 6005,
            name: "InvalidPercentage",
            msg: "Percentage chosen is invalid.",
        },
        {
            code: 6006,
            name: "RewardPoolsLimit",
            msg: "Max. no. of RewardPool per stake pool has been reached.",
        },
        {
            code: 6007,
            name: "RewardPoolInactive",
            msg: "RewardPool is no longer active.",
        },
        {
            code: 6008,
            name: "RewardRecordEpochConstraint",
            msg: "RewardRecord cannot be created for future epochs.",
        },
        {
            code: 6009,
            name: "LastUpdateMoreRecent",
            msg: "RewardRecord cannot be updated as last update was more recent to epoch end.",
        },
        {
            code: 6010,
            name: "EpochHasNotEnded",
            msg: "The current epoch has not ended.",
        },
        {
            code: 6011,
            name: "InsufficientAmount",
            msg: "Insufficient amount for staking or unstaking.",
        },
        {
            code: 6012,
            name: "InvalidLockupPeriod",
            msg: "Invalid lockup period selected.",
        },
        {
            code: 6013,
            name: "LockupPeriodTooShort",
            msg: "Selected lockup period is too short.",
        },
        {
            code: 6014,
            name: "LockupHasNotExpire",
            msg: "Lockup period has not expire.",
        },
        {
            code: 6015,
            name: "UnclaimedRewardPool",
            msg: "Some RewardPool is unclaimed.",
        },
        {
            code: 6016,
            name: "EndRecordMustBeSameOrNewer",
            msg: "End RewardRecord must be from the same or later epoch than start RewardRecord.",
        },
        {
            code: 6017,
            name: "NoRewardsAvailable",
            msg: "No rewards available for claiming.",
        },
        {
            code: 6018,
            name: "InvalidStartRewardRecord",
            msg: "Start RewardRecord should be from the last epoch claimed.",
        },
        {
            code: 6019,
            name: "RewardAlreadyClaimed",
            msg: "Reward has already been claimed.",
        },
        {
            code: 6020,
            name: "RewardPoolHasNotStarted",
            msg: "Cannot change a RewardPool to inactive before it starts.",
        },
        {
            code: 6021,
            name: "OwnerTokenAccountInvalid",
            msg: "Owner token account is invalid.",
        },
        {
            code: 6022,
            name: "RewardRecordCannotBeUpdated",
            msg: "RewardRecord is not updatable.",
        },
        {
            code: 6023,
            name: "InvalidSigner",
            msg: "Signer of transaction must be an authorized vault account.",
        },
        {
            code: 6024,
            name: "DecimalsLimit",
            msg: "Limit of decimals allowed has been exceeded.",
        },
    ],
    metadata: {
        address: "pSystkitWgLkzprdAvraP8DSBiXwee715wiSXGJe8yr",
    },
};

exports.IDL = IDL;
exports.calculateRewardUnits = calculateRewardUnits;
exports.convertDistributionType = convertDistributionType;
exports.instructions = index;
exports.pdas = pdas;
