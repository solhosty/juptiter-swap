// src/anchor/idl/deltafi_dex_v2.ts
var IDL = {
  "version": "0.1.0",
  "name": "deltafi_dex_v2",
  "instructions": [
    {
      "name": "createMarketConfig",
      "accounts": [
        {
          "name": "seed",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "marketConfig",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "deltafiMint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "deltafiToken",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "pythProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "serumProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "admin",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "bump",
          "type": "u8"
        }
      ]
    },
    {
      "name": "createSwap",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "seed",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mintBase",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "mintQuote",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenBase",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenQuote",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "adminFeeTokenBase",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "adminFeeTokenQuote",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "admin",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "bump",
          "type": "u8"
        },
        {
          "name": "swapType",
          "type": {
            "defined": "SwapType"
          }
        },
        {
          "name": "swapConfig",
          "type": {
            "defined": "SwapConfig"
          }
        }
      ]
    },
    {
      "name": "updateSwapConfig",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "admin",
          "isMut": false,
          "isSigner": true
        }
      ],
      "args": [
        {
          "name": "swapConfig",
          "type": {
            "defined": "SwapConfig"
          }
        }
      ]
    },
    {
      "name": "updateFarmConfig",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "farmInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "admin",
          "isMut": false,
          "isSigner": true
        }
      ],
      "args": [
        {
          "name": "farmConfig",
          "type": {
            "defined": "FarmConfig"
          }
        }
      ]
    },
    {
      "name": "initNormalSwap",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "liquidityProvider",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pythPriceBase",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "pythPriceQuote",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "admin",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "baseAmount",
          "type": "u64"
        },
        {
          "name": "quoteAmount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "initStableSwap",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "liquidityProvider",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pythPriceBase",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "pythPriceQuote",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "admin",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "baseAmount",
          "type": "u64"
        },
        {
          "name": "quoteAmount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "initSerumSwap",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "liquidityProvider",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "serumMarket",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "serumBids",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "serumAsks",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "admin",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "baseAmount",
          "type": "u64"
        },
        {
          "name": "quoteAmount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "createLiquidityProviderV2",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "liquidityProvider",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "owner",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "bump",
          "type": "u8"
        }
      ]
    },
    {
      "name": "depositToNormalSwap",
      "accounts": [
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "liquidityProvider",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pythPriceBase",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "pythPriceQuote",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "baseAmount",
          "type": "u64"
        },
        {
          "name": "quoteAmount",
          "type": "u64"
        },
        {
          "name": "minBaseShare",
          "type": "u64"
        },
        {
          "name": "minQuoteShare",
          "type": "u64"
        }
      ]
    },
    {
      "name": "depositToStableSwap",
      "accounts": [
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "liquidityProvider",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pythPriceBase",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "pythPriceQuote",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "baseAmount",
          "type": "u64"
        },
        {
          "name": "quoteAmount",
          "type": "u64"
        },
        {
          "name": "minBaseShare",
          "type": "u64"
        },
        {
          "name": "minQuoteShare",
          "type": "u64"
        }
      ]
    },
    {
      "name": "depositToSerumSwap",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "liquidityProvider",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "serumMarket",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "serumBids",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "serumAsks",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "baseAmount",
          "type": "u64"
        },
        {
          "name": "quoteAmount",
          "type": "u64"
        },
        {
          "name": "minBaseShare",
          "type": "u64"
        },
        {
          "name": "minQuoteShare",
          "type": "u64"
        }
      ]
    },
    {
      "name": "withdrawFromNormalSwap",
      "accounts": [
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "liquidityProvider",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pythPriceBase",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "pythPriceQuote",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "adminFeeTokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "adminFeeTokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "baseShare",
          "type": "u64"
        },
        {
          "name": "quoteShare",
          "type": "u64"
        },
        {
          "name": "minBaseAmount",
          "type": "u64"
        },
        {
          "name": "minQuoteAmount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "withdrawFromStableSwap",
      "accounts": [
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "liquidityProvider",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pythPriceBase",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "pythPriceQuote",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "adminFeeTokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "adminFeeTokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "baseShare",
          "type": "u64"
        },
        {
          "name": "quoteShare",
          "type": "u64"
        },
        {
          "name": "minBaseAmount",
          "type": "u64"
        },
        {
          "name": "minQuoteAmount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "withdrawFromSerumSwap",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userTokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "liquidityProvider",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "serumMarket",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "serumBids",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "serumAsks",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "adminFeeTokenBase",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "adminFeeTokenQuote",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "baseShare",
          "type": "u64"
        },
        {
          "name": "quoteShare",
          "type": "u64"
        },
        {
          "name": "minBaseAmount",
          "type": "u64"
        },
        {
          "name": "minQuoteAmount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "normalSwap",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userSourceToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapSourceToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "deltafiUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "adminDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pythPriceBase",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "pythPriceQuote",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amountIn",
          "type": "u64"
        },
        {
          "name": "minAmountOut",
          "type": "u64"
        }
      ]
    },
    {
      "name": "normalSwapWithReferrer",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userSourceToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapSourceToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "deltafiUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "referrer",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "adminDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pythPriceBase",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "pythPriceQuote",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amountIn",
          "type": "u64"
        },
        {
          "name": "minAmountOut",
          "type": "u64"
        }
      ]
    },
    {
      "name": "normalSwapWithRebate",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userSourceToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapSourceToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "deltafiUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "rebateToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "adminDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pythPriceBase",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "pythPriceQuote",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amountIn",
          "type": "u64"
        },
        {
          "name": "minAmountOut",
          "type": "u64"
        }
      ]
    },
    {
      "name": "stableSwap",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userSourceToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapSourceToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "deltafiUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "adminDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pythPriceBase",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "pythPriceQuote",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amountIn",
          "type": "u64"
        },
        {
          "name": "minAmountOut",
          "type": "u64"
        }
      ]
    },
    {
      "name": "stableSwapWithReferrer",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userSourceToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapSourceToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "deltafiUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "referrer",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "adminDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pythPriceBase",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "pythPriceQuote",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amountIn",
          "type": "u64"
        },
        {
          "name": "minAmountOut",
          "type": "u64"
        }
      ]
    },
    {
      "name": "stableSwapWithRebate",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userSourceToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapSourceToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "deltafiUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "rebateToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "adminDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pythPriceBase",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "pythPriceQuote",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amountIn",
          "type": "u64"
        },
        {
          "name": "minAmountOut",
          "type": "u64"
        }
      ]
    },
    {
      "name": "serumSwap",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userSourceToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapSourceToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "deltafiUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "adminDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "serumMarket",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "serumBids",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "serumAsks",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amountIn",
          "type": "u64"
        },
        {
          "name": "minAmountOut",
          "type": "u64"
        }
      ]
    },
    {
      "name": "serumSwapWithReferrer",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userSourceToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapSourceToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "deltafiUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "referrer",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "adminDestinationToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "serumMarket",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "serumBids",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "serumAsks",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "amountIn",
          "type": "u64"
        },
        {
          "name": "minAmountOut",
          "type": "u64"
        }
      ]
    },
    {
      "name": "createFarm",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "farmInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "admin",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "bump",
          "type": "u8"
        },
        {
          "name": "seed",
          "type": "publicKey"
        },
        {
          "name": "farmConfig",
          "type": {
            "defined": "FarmConfig"
          }
        }
      ]
    },
    {
      "name": "depositToFarm",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "farmInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "liquidityProvider",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "farmUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "owner",
          "isMut": false,
          "isSigner": true
        }
      ],
      "args": [
        {
          "name": "baseAmount",
          "type": "u64"
        },
        {
          "name": "quoteAmount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "withdrawFromFarm",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "farmInfo",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "liquidityProvider",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "farmUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "owner",
          "isMut": false,
          "isSigner": true
        }
      ],
      "args": [
        {
          "name": "baseAmount",
          "type": "u64"
        },
        {
          "name": "quoteAmount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "claimFarmRewards",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "swapInfo",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "farmInfo",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "farmUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userDeltafiToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapDeltafiToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "owner",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "createDeltafiUser",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "deltafiUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "owner",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "bump",
          "type": "u8"
        }
      ]
    },
    {
      "name": "createDeltafiUserWithReferrer",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "deltafiUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "referrer",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "owner",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "bump",
          "type": "u8"
        }
      ]
    },
    {
      "name": "claimSwapRewards",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "deltafiUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userDeltafiToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapDeltafiToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "owner",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "claimTradeRewards",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "deltafiUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userDeltafiToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapDeltafiToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "owner",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "claimReferralRewards",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "deltafiUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "userDeltafiToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapDeltafiToken",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "owner",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "createFarmUserV2",
      "accounts": [
        {
          "name": "marketConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "farmInfo",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "farmUser",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "owner",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "bump",
          "type": "u8"
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "DeltafiUser",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "configKey",
            "type": "publicKey"
          },
          {
            "name": "owner",
            "type": "publicKey"
          },
          {
            "name": "referrer",
            "type": "publicKey"
          },
          {
            "name": "owedTradeRewards",
            "type": "u64"
          },
          {
            "name": "claimedTradeRewards",
            "type": "u64"
          },
          {
            "name": "owedReferralRewards",
            "type": "u64"
          },
          {
            "name": "claimedReferralRewards",
            "type": "u64"
          },
          {
            "name": "reserved",
            "type": {
              "array": [
                "u64",
                32
              ]
            }
          }
        ]
      }
    },
    {
      "name": "FarmUser",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "configKey",
            "type": "publicKey"
          },
          {
            "name": "farmKey",
            "type": "publicKey"
          },
          {
            "name": "owner",
            "type": "publicKey"
          },
          {
            "name": "basePosition",
            "type": {
              "defined": "FarmPosition"
            }
          },
          {
            "name": "quotePosition",
            "type": {
              "defined": "FarmPosition"
            }
          },
          {
            "name": "reserved",
            "type": {
              "array": [
                "u64",
                32
              ]
            }
          }
        ]
      }
    },
    {
      "name": "FarmInfo",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "seed",
            "type": "publicKey"
          },
          {
            "name": "configKey",
            "type": "publicKey"
          },
          {
            "name": "swapKey",
            "type": "publicKey"
          },
          {
            "name": "stakedBaseShare",
            "type": "u64"
          },
          {
            "name": "stakedQuoteShare",
            "type": "u64"
          },
          {
            "name": "farmConfig",
            "type": {
              "defined": "FarmConfig"
            }
          },
          {
            "name": "reserved",
            "type": {
              "array": [
                "u64",
                32
              ]
            }
          }
        ]
      }
    },
    {
      "name": "MarketConfig",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "version",
            "type": "u8"
          },
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "seed",
            "type": "publicKey"
          },
          {
            "name": "adminKey",
            "type": "publicKey"
          },
          {
            "name": "deltafiMint",
            "type": "publicKey"
          },
          {
            "name": "deltafiToken",
            "type": "publicKey"
          },
          {
            "name": "pythProgramId",
            "type": "publicKey"
          },
          {
            "name": "serumProgramId",
            "type": "publicKey"
          },
          {
            "name": "reservedU64",
            "type": {
              "array": [
                "u64",
                32
              ]
            }
          }
        ]
      }
    },
    {
      "name": "SwapInfo",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "isInitialized",
            "type": "bool"
          },
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "seed",
            "type": "publicKey"
          },
          {
            "name": "swapType",
            "type": {
              "defined": "SwapType"
            }
          },
          {
            "name": "configKey",
            "type": "publicKey"
          },
          {
            "name": "mintBase",
            "type": "publicKey"
          },
          {
            "name": "mintQuote",
            "type": "publicKey"
          },
          {
            "name": "tokenBase",
            "type": "publicKey"
          },
          {
            "name": "tokenQuote",
            "type": "publicKey"
          },
          {
            "name": "adminFeeTokenBase",
            "type": "publicKey"
          },
          {
            "name": "adminFeeTokenQuote",
            "type": "publicKey"
          },
          {
            "name": "mintBaseDecimals",
            "type": "u8"
          },
          {
            "name": "mintQuoteDecimals",
            "type": "u8"
          },
          {
            "name": "pythPriceBase",
            "type": "publicKey"
          },
          {
            "name": "pythPriceQuote",
            "type": "publicKey"
          },
          {
            "name": "serumMarket",
            "type": "publicKey"
          },
          {
            "name": "serumBids",
            "type": "publicKey"
          },
          {
            "name": "serumAsks",
            "type": "publicKey"
          },
          {
            "name": "poolState",
            "type": {
              "defined": "PoolState"
            }
          },
          {
            "name": "swapConfig",
            "type": {
              "defined": "SwapConfig"
            }
          },
          {
            "name": "reservedU64",
            "type": {
              "array": [
                "u64",
                24
              ]
            }
          }
        ]
      }
    },
    {
      "name": "LiquidityProvider",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "configKey",
            "type": "publicKey"
          },
          {
            "name": "swapKey",
            "type": "publicKey"
          },
          {
            "name": "owner",
            "type": "publicKey"
          },
          {
            "name": "baseShare",
            "type": "u64"
          },
          {
            "name": "quoteShare",
            "type": "u64"
          },
          {
            "name": "stakedBaseShare",
            "type": "u64"
          },
          {
            "name": "stakedQuoteShare",
            "type": "u64"
          },
          {
            "name": "deprecatedU64",
            "type": {
              "array": [
                "u64",
                10
              ]
            }
          },
          {
            "name": "reservedU64",
            "type": {
              "array": [
                "u64",
                32
              ]
            }
          }
        ]
      }
    }
  ],
  "types": [
    {
      "name": "PoolState",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "marketPrice",
            "type": "u128"
          },
          {
            "name": "baseReserve",
            "type": "u64"
          },
          {
            "name": "quoteReserve",
            "type": "u64"
          },
          {
            "name": "targetBaseReserve",
            "type": "u128"
          },
          {
            "name": "targetQuoteReserve",
            "type": "u128"
          },
          {
            "name": "baseSupply",
            "type": "u64"
          },
          {
            "name": "quoteSupply",
            "type": "u64"
          },
          {
            "name": "totalTradedBase",
            "type": "u128"
          },
          {
            "name": "totalTradedQuote",
            "type": "u128"
          },
          {
            "name": "accumulatedTradeReward",
            "type": "u64"
          },
          {
            "name": "lastUpdateTimestamp",
            "type": "u64"
          },
          {
            "name": "marketPriceLastUpdateSlot",
            "type": "u64"
          },
          {
            "name": "lowPrice",
            "type": "u128"
          },
          {
            "name": "highPrice",
            "type": "u128"
          },
          {
            "name": "currentDayTradedQuote",
            "type": "u64"
          },
          {
            "name": "lastDayTradedQuote",
            "type": "u64"
          },
          {
            "name": "currentWeekTradedQuote",
            "type": "u64"
          },
          {
            "name": "lastWeekTradedQuote",
            "type": "u64"
          },
          {
            "name": "reservedU64",
            "type": {
              "array": [
                "u64",
                12
              ]
            }
          }
        ]
      }
    },
    {
      "name": "FarmPosition",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "depositedAmount",
            "type": "u64"
          },
          {
            "name": "rewardsOwed",
            "type": "u64"
          },
          {
            "name": "cumulativeInterest",
            "type": "u64"
          },
          {
            "name": "lastUpdateTs",
            "type": "i64"
          },
          {
            "name": "nextClaimTs",
            "type": "i64"
          },
          {
            "name": "latestDepositSlot",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "FarmConfig",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "baseAprNumerator",
            "type": "u64"
          },
          {
            "name": "baseAprDenominator",
            "type": "u64"
          },
          {
            "name": "quoteAprNumerator",
            "type": "u64"
          },
          {
            "name": "quoteAprDenominator",
            "type": "u64"
          },
          {
            "name": "minClaimPeriod",
            "type": "u32"
          },
          {
            "name": "isPaused",
            "type": "bool"
          },
          {
            "name": "maxStakedBaseShare",
            "type": "u64"
          },
          {
            "name": "maxStakedQuoteShare",
            "type": "u64"
          },
          {
            "name": "endTimestamp",
            "type": "u64"
          },
          {
            "name": "reservedU64",
            "type": {
              "array": [
                "u64",
                32
              ]
            }
          }
        ]
      }
    },
    {
      "name": "SwapConfig",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "isPaused",
            "type": "bool"
          },
          {
            "name": "enableConfidenceInterval",
            "type": "bool"
          },
          {
            "name": "maxSwapPercentage",
            "type": "u8"
          },
          {
            "name": "minReserveLimitPercentage",
            "type": "u8"
          },
          {
            "name": "serumMarketTokenRatioLimitPercentage",
            "type": "u8"
          },
          {
            "name": "adminTradeFeeNumerator",
            "type": "u32"
          },
          {
            "name": "adminTradeFeeDenominator",
            "type": "u32"
          },
          {
            "name": "adminWithdrawFeeNumerator",
            "type": "u32"
          },
          {
            "name": "adminWithdrawFeeDenominator",
            "type": "u32"
          },
          {
            "name": "tradeFeeNumerator",
            "type": "u32"
          },
          {
            "name": "tradeFeeDenominator",
            "type": "u32"
          },
          {
            "name": "withdrawFeeNumerator",
            "type": "u32"
          },
          {
            "name": "withdrawFeeDenominator",
            "type": "u32"
          },
          {
            "name": "tradeRewardNumerator",
            "type": "u32"
          },
          {
            "name": "tradeRewardDenominator",
            "type": "u32"
          },
          {
            "name": "referralRewardNumerator",
            "type": "u32"
          },
          {
            "name": "referralRewardDenominator",
            "type": "u32"
          },
          {
            "name": "maxStablePriceDiffNumerator",
            "type": "u32"
          },
          {
            "name": "maxStablePriceDiffDenominator",
            "type": "u32"
          },
          {
            "name": "tradeRewardCap",
            "type": "u64"
          },
          {
            "name": "tradeRewardMaxReserve",
            "type": "u64"
          },
          {
            "name": "slope",
            "type": "u128"
          },
          {
            "name": "disableStablePriceDiffCheck",
            "type": "bool"
          },
          {
            "name": "disableQuoteTokenPriceCheck",
            "type": "bool"
          },
          {
            "name": "rebateNumerator",
            "type": "u32"
          },
          {
            "name": "rebateDenominator",
            "type": "u32"
          },
          {
            "name": "virtualReservePercentage",
            "type": "u16"
          },
          {
            "name": "reservedU8",
            "type": {
              "array": [
                "u8",
                4
              ]
            }
          },
          {
            "name": "reservedU64",
            "type": {
              "array": [
                "u64",
                14
              ]
            }
          }
        ]
      }
    },
    {
      "name": "SwapDirection",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "SellBase"
          },
          {
            "name": "SellQuote"
          }
        ]
      }
    },
    {
      "name": "SwapType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "NormalSwap"
          },
          {
            "name": "StableSwap"
          },
          {
            "name": "SerumSwap"
          }
        ]
      }
    }
  ],
  "errors": [
    {
      "code": 6e3,
      "name": "AlreadyInUse",
      "msg": "Swap account already in use"
    },
    {
      "code": 6001,
      "name": "InvalidAdmin",
      "msg": "Address of the admin fee account is incorrect"
    },
    {
      "code": 6002,
      "name": "ActiveTransfer",
      "msg": "Active admin transfer in progress"
    },
    {
      "code": 6003,
      "name": "NoActiveTransfer",
      "msg": "No active admin transfer in progress"
    },
    {
      "code": 6004,
      "name": "AdminDeadlineExceeded",
      "msg": "Admin transfer deadline exceeded"
    },
    {
      "code": 6005,
      "name": "Unauthorized",
      "msg": "Account is not authorized to execute this instruction"
    },
    {
      "code": 6006,
      "name": "InvalidAccountOwner",
      "msg": "Input account owner is not the program"
    },
    {
      "code": 6007,
      "name": "InvalidOwner",
      "msg": "Input account owner is not the program address"
    },
    {
      "code": 6008,
      "name": "InvalidSigner",
      "msg": "Input account must be signer"
    },
    {
      "code": 6009,
      "name": "InvalidOutputOwner",
      "msg": "Output pool account owner cannot be the program address"
    },
    {
      "code": 6010,
      "name": "IncorrectSwapAccount",
      "msg": "Address of the provided swap token account is incorrect"
    },
    {
      "code": 6011,
      "name": "InvalidProgramAddress",
      "msg": "Invalid program address generated from nonce and key"
    },
    {
      "code": 6012,
      "name": "InvalidCloseAuthority",
      "msg": "Token account has a close authority"
    },
    {
      "code": 6013,
      "name": "InvalidFreezeAuthority",
      "msg": "Pool token mint has a freeze authority"
    },
    {
      "code": 6014,
      "name": "IncorrectTokenProgramId",
      "msg": "Incorrect token program ID"
    },
    {
      "code": 6015,
      "name": "IncorrectMint",
      "msg": "Address of the provided token mint is incorrect"
    },
    {
      "code": 6016,
      "name": "UnexpectedMint",
      "msg": "Deserialized account is not an SPL Token mint"
    },
    {
      "code": 6017,
      "name": "RepeatedMint",
      "msg": "Swap input token accounts have the same mint"
    },
    {
      "code": 6018,
      "name": "ExpectedAccount",
      "msg": "Deserialized account is not an SPL Token account"
    },
    {
      "code": 6019,
      "name": "InvalidInstruction",
      "msg": "Invalid instruction"
    },
    {
      "code": 6020,
      "name": "InstructionUnpackError",
      "msg": "Instruction unpack is failed"
    },
    {
      "code": 6021,
      "name": "EmptyPool",
      "msg": "Pool token supply is 0"
    },
    {
      "code": 6022,
      "name": "EmptySupply",
      "msg": "Input token account empty"
    },
    {
      "code": 6023,
      "name": "InvalidSupply",
      "msg": "Pool token mint has a non-zero supply"
    },
    {
      "code": 6024,
      "name": "InvalidDelegate",
      "msg": "Token account has a delegate"
    },
    {
      "code": 6025,
      "name": "InvalidInput",
      "msg": "InvalidInput"
    },
    {
      "code": 6026,
      "name": "IsPaused",
      "msg": "Swap pool is paused"
    },
    {
      "code": 6027,
      "name": "NotRentExempt",
      "msg": "Lamport balance below rent-exempt threshold"
    },
    {
      "code": 6028,
      "name": "CalculationFailure",
      "msg": "CalculationFailure"
    },
    {
      "code": 6029,
      "name": "ExceededSlippage",
      "msg": "Swap instruction exceeds desired slippage limit"
    },
    {
      "code": 6030,
      "name": "MismatchedDecimals",
      "msg": "Token mints must have same decimals"
    },
    {
      "code": 6031,
      "name": "InvalidPythConfig",
      "msg": "Input pyth config is invalid"
    },
    {
      "code": 6032,
      "name": "InsufficientLiquidity",
      "msg": "Insufficient liquidity available"
    },
    {
      "code": 6033,
      "name": "LiquidityPositionEmpty",
      "msg": "User has no liquidity position"
    },
    {
      "code": 6034,
      "name": "InvalidPositionKey",
      "msg": "Invalid position key"
    },
    {
      "code": 6035,
      "name": "InvalidClaimTime",
      "msg": "Invalid claim timestamp"
    },
    {
      "code": 6036,
      "name": "InsufficientClaimAmount",
      "msg": "Insufficient claim amount"
    },
    {
      "code": 6037,
      "name": "InsufficientFunds",
      "msg": "Insufficient funds"
    },
    {
      "code": 6038,
      "name": "WithdrawNotEnough",
      "msg": "Withdraw not enough"
    },
    {
      "code": 6039,
      "name": "TokenInitializeMintFailed",
      "msg": "Mint initialization failed"
    },
    {
      "code": 6040,
      "name": "InvalidSlope",
      "msg": "Invalid slope"
    },
    {
      "code": 6041,
      "name": "InvalidAccount",
      "msg": "Invalid account"
    },
    {
      "code": 6042,
      "name": "TokenTransferFailed",
      "msg": "Token transfer failed"
    },
    {
      "code": 6043,
      "name": "TokenMintToFailed",
      "msg": "Token mint to failed"
    },
    {
      "code": 6044,
      "name": "TokenBurnFailed",
      "msg": "Token burn failed"
    },
    {
      "code": 6045,
      "name": "InvalidPythPrice",
      "msg": "Invalid pyth price"
    },
    {
      "code": 6046,
      "name": "UnstablePythPrice",
      "msg": "Unstable pyth price"
    },
    {
      "code": 6047,
      "name": "InconfidentPythPrice",
      "msg": "Pyth confidence interval is too large"
    },
    {
      "code": 6048,
      "name": "IndexOutOfRange",
      "msg": "Index of out rage"
    },
    {
      "code": 6049,
      "name": "InvalidMarketConfig",
      "msg": "Input market config is invalid"
    },
    {
      "code": 6050,
      "name": "InvalidPythProgramId",
      "msg": "Pyth program id is invalid"
    },
    {
      "code": 6051,
      "name": "PotentialFlashLoanAttack",
      "msg": "Potential Flash Loan Attack"
    },
    {
      "code": 6052,
      "name": "IncorrectSwapType",
      "msg": "Incorrect swap type"
    },
    {
      "code": 6053,
      "name": "IncorrectStablePrice",
      "msg": "Incorrect stable price"
    },
    {
      "code": 6054,
      "name": "InvalidTokenDecimals",
      "msg": "Invalid token decimals"
    },
    {
      "code": 6055,
      "name": "InconsistentPoolState",
      "msg": "Inconsistent pool state"
    },
    {
      "code": 6056,
      "name": "InvalidReferrer",
      "msg": "Invalid referrer address"
    },
    {
      "code": 6057,
      "name": "InconsistentInitialPoolTokenBalance",
      "msg": "Inconsistent initial pool token balance"
    },
    {
      "code": 6058,
      "name": "ExceededSwapOutAmount",
      "msg": "Swap out amount exceeds the limit"
    },
    {
      "code": 6059,
      "name": "AlreadyInitialized",
      "msg": "Already initialized"
    },
    {
      "code": 6060,
      "name": "NotInitialized",
      "msg": "Not initialized"
    },
    {
      "code": 6061,
      "name": "InvalidSwapConfig",
      "msg": "Invalid swap config"
    },
    {
      "code": 6062,
      "name": "InvalidFarmConfig",
      "msg": "Invalid farm config"
    },
    {
      "code": 6063,
      "name": "InsufficientPoolReserve",
      "msg": "Insufficient pool reserve"
    },
    {
      "code": 6064,
      "name": "StableSwapPriceDiffLimitExceeded",
      "msg": "stable swap price diff limit exceeded"
    },
    {
      "code": 6065,
      "name": "InvalidTimestamp",
      "msg": "Invalid timestamp"
    },
    {
      "code": 6066,
      "name": "InvalidSerumData",
      "msg": "InvalidSerumData"
    },
    {
      "code": 6067,
      "name": "InvalidPythPriceAccount",
      "msg": "Invalid pyth price account"
    },
    {
      "code": 6068,
      "name": "InvalidSerumMarketTokenRatio",
      "msg": "InvalidSerumMarketTokenRatio"
    },
    {
      "code": 6069,
      "name": "DepeggedQuotePrice",
      "msg": "DepeggedQuotePrice"
    },
    {
      "code": 6070,
      "name": "InvalidWithdrawalAmount",
      "msg": "Invalid withdrawal amount"
    },
    {
      "code": 6071,
      "name": "InvalidStakingAmount",
      "msg": "Invalid staking amount"
    },
    {
      "code": 6072,
      "name": "RebateNotEnabled",
      "msg": "Rebate not enabled"
    }
  ]
};

// src/anchor/anchor_utils.ts
import { PublicKey } from "@solana/web3.js";
import { Program, AnchorProvider, web3 } from "@project-serum/anchor";
import { TOKEN_PROGRAM_ID } from "@solana/spl-token";
var serumProgramId = new web3.PublicKey("9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin");
function getDeltafiDexV2(programId, provider = null) {
  return new Program(IDL, programId, provider != null ? provider : AnchorProvider.local());
}

// src/calculations/swapOutAmount.ts
import BigNumber6 from "bignumber.js";

// src/calculations/calculation.ts
import BigNumber4 from "bignumber.js";

// src/calculations/utils.ts
import { PublicKey as PublicKey2 } from "@solana/web3.js";
import BigNumber from "bignumber.js";
var WAD_LENGTH = 18;
var WAD = new BigNumber(`1e+${WAD_LENGTH}`);
function BigNumberWithConfig(val, object) {
  const BN2 = BigNumber.clone(object);
  return new BN2(val);
}
function validate(expression, errMsg) {
  if (expression === false) {
    throw Error(errMsg);
  }
}
var ClonedBignumber = BigNumber.clone({
  FORMAT: {
    decimalSeparator: ".",
    groupSeparator: ",",
    groupSize: 3
  }
});
function exponentiatedBy(num, decimals) {
  const wrap = new ClonedBignumber(num);
  return wrap.div(new ClonedBignumber(`1e+${decimals}`));
}
function exponentiate(num, decimals) {
  return new BigNumber(num).multipliedBy(new BigNumber(`1e+${decimals}`));
}

// src/calculations/tokenUtils.ts
import { BN } from "@project-serum/anchor";
import BigNumber2 from "bignumber.js";

// src/calculations/approximation.ts
import BigNumber3 from "bignumber.js";
function approximateOutAmount(currentReserveA, currentReserveB, targetReserveA, targetReserveB, marketPrice, inputAAmount) {
  const impliedOutAmountNumerator = currentReserveB.multipliedBy(inputAAmount).multipliedBy(marketPrice).multipliedBy(targetReserveA);
  const impliedOutAmountDenumerator = targetReserveB.multipliedBy(currentReserveA);
  const impliedOutAmountBigNumber = impliedOutAmountNumerator.dividedBy(
    impliedOutAmountDenumerator
  );
  let expCeil = Math.ceil(
    marketPrice.multipliedBy(targetReserveA).dividedBy(targetReserveB).toNumber()
  );
  validate(expCeil < (1 << 8) - 1, "exponent is too large");
  if (currentReserveA.isLessThanOrEqualTo(inputAAmount.multipliedBy(expCeil)) || currentReserveB.isLessThanOrEqualTo(inputAAmount)) {
    return {
      impliedOutAmount: Math.floor(impliedOutAmountBigNumber.toNumber()),
      approximationResult: null
    };
  }
  const kProduct = approximateUpperBoundK(currentReserveA, inputAAmount, expCeil);
  const kMultiplier = kProduct.minus(new BigNumber3(1));
  const kMultiplicand = currentReserveB.minus(impliedOutAmountBigNumber);
  const diffFromImpliedAmount = kMultiplier.multipliedBy(kMultiplicand);
  if (impliedOutAmountBigNumber.abs().isLessThan(diffFromImpliedAmount)) {
    return {
      impliedOutAmount: Math.floor(impliedOutAmountBigNumber.toNumber()),
      approximationResult: null
    };
  }
  const approximationResult = Math.floor(
    impliedOutAmountBigNumber.minus(diffFromImpliedAmount).toNumber()
  );
  const impliedOutAmount = Math.floor(impliedOutAmountBigNumber.toNumber());
  validate(
    approximationResult <= impliedOutAmount,
    "approximation result should not be larger than the implied out amount"
  );
  return { impliedOutAmount, approximationResult };
}
function approximateUpperBoundK(currentReserveA, inputAAmount, expCeil) {
  let coreHigh = BigNumberWithConfig(currentReserveA, {
    ROUNDING_MODE: BigNumber3.ROUND_CEIL
  }).dividedBy(currentReserveA.plus(inputAAmount)).exponentiatedBy(expCeil);
  let coreLow = BigNumberWithConfig(
    currentReserveA.minus(inputAAmount.multipliedBy(expCeil)),
    {
      ROUNDING_MODE: BigNumber3.ROUND_FLOOR
    }
  ).dividedBy(currentReserveA);
  return BigNumberWithConfig(coreHigh, {
    ROUNDING_MODE: BigNumber3.ROUND_CEIL
  }).dividedBy(coreLow);
}

// src/calculations/calculation.ts
var FLOAT_ROUND_UP_ESPSILON = 6e-17;
function calculateOutAmountNormalSwapInternal(marketPrice, targetReserveA, targetReserveB, currentReserveA, currentResreveB, inputAAmount) {
  const coreDenumerator = currentReserveA.plus(inputAAmount);
  if (coreDenumerator.isNegative()) {
    return new BigNumber4(-Infinity);
  }
  let core = BigNumberWithConfig(currentReserveA, {
    ROUNDING_MODE: BigNumber4.ROUND_CEIL
  }).dividedBy(coreDenumerator);
  let exp = BigNumberWithConfig(marketPrice, {
    ROUNDING_MODE: BigNumber4.ROUND_FLOOR
  }).multipliedBy(targetReserveA).dividedBy(targetReserveB);
  let coreNumber = core.toNumber();
  let expNumber = exp.toNumber();
  let coreExpNumber = Math.pow(coreNumber, expNumber) + FLOAT_ROUND_UP_ESPSILON;
  let coreExp = BigNumberWithConfig(currentResreveB.toNumber(), {
    ROUNDING_MODE: BigNumber4.ROUND_CEIL
  }).multipliedBy(new BigNumber4(coreExpNumber));
  return currentResreveB.minus(coreExp);
}
function calculateOutAmountNormalSwap(marketPrice, targetReserveA, targetReserveB, currentReserveA, currentReserveB, inputAAmount) {
  const { impliedOutAmount, approximationResult } = approximateOutAmount(
    currentReserveA,
    currentReserveB,
    targetReserveA,
    targetReserveB,
    marketPrice,
    inputAAmount
  );
  const calculationResult = Math.floor(
    calculateOutAmountNormalSwapInternal(
      marketPrice,
      targetReserveA,
      targetReserveB,
      currentReserveA,
      currentReserveB,
      inputAAmount
    ).toNumber()
  );
  const outputBAmount = approximationResult === null ? calculationResult : Math.max(approximationResult, calculationResult);
  validate(
    outputBAmount <= impliedOutAmount,
    "final result for swap out amount should not be larger than the implied out amount"
  );
  if (inputAAmount.isEqualTo(0)) {
    return { outAmount: new BigNumber4(outputBAmount), priceImpact: new BigNumber4(0) };
  }
  let impliedPrice = marketPrice.multipliedBy(currentReserveB).multipliedBy(targetReserveA).dividedBy(currentReserveA).dividedBy(targetReserveB);
  let actualPrice = new BigNumber4(outputBAmount).dividedBy(inputAAmount);
  let priceImpact = actualPrice.isEqualTo(Infinity) ? new BigNumber4(Infinity) : impliedPrice.minus(actualPrice).dividedBy(actualPrice).abs();
  return { outAmount: new BigNumber4(outputBAmount), priceImpact };
}
function calculateBalancedReservesStableSwap(stablePrice, currentReserveA, currentResreveB, slope) {
  let coefA = new BigNumber4(2).minus(slope).multipliedBy(stablePrice);
  let coefBNeg = new BigNumber4(1).minus(slope).multipliedBy(currentReserveA.multipliedBy(stablePrice).plus(currentResreveB));
  let coefCNeg = slope.multipliedBy(currentReserveA).multipliedBy(currentResreveB);
  let core = BigNumberWithConfig(
    coefBNeg.multipliedBy(coefBNeg).plus(coefA.multipliedBy(coefCNeg).multipliedBy(new BigNumber4(4))),
    {
      ROUNDING_MODE: BigNumber4.ROUND_CEIL
    }
  ).squareRoot();
  let balancedReserveA = BigNumberWithConfig(coefBNeg.plus(core), {
    ROUNDING_MODE: BigNumber4.ROUND_CEIL
  }).dividedBy(coefA).dividedBy(new BigNumber4(2));
  let balancedReserveB = balancedReserveA.multipliedBy(stablePrice);
  return { balancedReserveA, balancedReserveB };
}
function calculateOutAmountStableSwapInternal(balancedReserveA, balancedReserveB, currentReserveA, currentResreveB, inputAAmount, slope) {
  let multiplicand = BigNumberWithConfig(
    balancedReserveB.multipliedBy(new BigNumber4(1).minus(slope)),
    {
      ROUNDING_MODE: BigNumber4.ROUND_FLOOR
    }
  ).dividedBy(slope).plus(currentResreveB);
  let coreNumerator = new BigNumber4(1).minus(slope).multipliedBy(balancedReserveA).plus(slope.multipliedBy(currentReserveA));
  let coreDenumerator = new BigNumber4(1).minus(slope).multipliedBy(balancedReserveA).plus(slope.multipliedBy(currentReserveA.plus(inputAAmount)));
  if (coreDenumerator.isLessThanOrEqualTo(0)) {
    return new BigNumber4(-Infinity);
  }
  let multiplier = new BigNumber4(1).minus(
    BigNumberWithConfig(coreNumerator, {
      ROUNDING_MODE: BigNumber4.ROUND_FLOOR
    }).dividedBy(coreDenumerator)
  );
  return multiplicand.multipliedBy(multiplier);
}
function calculateOutAmountStableSwap(stablePrice, currentReserveA, currentReserveB, inputAAmount, slope) {
  let { balancedReserveA, balancedReserveB } = calculateBalancedReservesStableSwap(
    stablePrice,
    currentReserveA,
    currentReserveB,
    slope
  );
  let outputBAmount = calculateOutAmountStableSwapInternal(
    balancedReserveA,
    balancedReserveB,
    currentReserveA,
    currentReserveB,
    inputAAmount,
    slope
  );
  let impliedPrice = currentReserveB.plus(balancedReserveB.multipliedBy(new BigNumber4(1).minus(slope)).dividedBy(slope)).dividedBy(
    currentReserveA.plus(
      balancedReserveA.multipliedBy(new BigNumber4(1).minus(slope).dividedBy(slope))
    )
  );
  let actualPrice = outputBAmount.dividedBy(inputAAmount);
  let priceImpact = impliedPrice.minus(actualPrice).dividedBy(actualPrice).abs();
  return {
    outAmount: new BigNumber4(outputBAmount.toFixed(0)),
    priceImpact
  };
}

// src/anchor/pyth_utils.ts
import BigNumber5 from "bignumber.js";
import { PublicKey as PublicKey3 } from "@solana/web3.js";
import { parsePriceData } from "@pythnetwork/client";

// src/calculations/swapOutAmount.ts
function getSwappedAmountsAndPriceImpactFromRawValue(swapInfo, swapDirection, rawAmountIn, marketPrice, marketPriceSellBase, marketPriceSellQuote) {
  if (!(marketPriceSellBase && marketPriceSellQuote) || swapInfo.swapConfig.enableConfidenceInterval === false) {
    marketPriceSellBase = marketPrice;
    marketPriceSellQuote = marketPrice;
  }
  if (swapDirection.sellBase) {
    const normalizedMaketPrice = normalizeMarketPriceWithDecimals(
      marketPriceSellBase,
      swapInfo.mintBaseDecimals,
      swapInfo.mintQuoteDecimals
    );
    const { outAmount: rawAmountOut, priceImpact } = getSwapOutAmountSellBase(
      swapInfo,
      rawAmountIn,
      normalizedMaketPrice
    );
    return {
      amountIn: rawAmountIn,
      amountOut: rawAmountOut,
      priceImpact
    };
  } else if (swapDirection.sellQuote) {
    const normalizedMaketPrice = normalizeMarketPriceWithDecimals(
      marketPriceSellQuote,
      swapInfo.mintBaseDecimals,
      swapInfo.mintQuoteDecimals
    );
    const { outAmount: rawAmountOut, priceImpact } = getSwapOutAmountSellQuote(
      swapInfo,
      rawAmountIn,
      normalizedMaketPrice
    );
    return {
      amountIn: rawAmountIn,
      amountOut: rawAmountOut,
      priceImpact
    };
  }
  throw Error("Invalid swap direction: " + swapDirection);
}
function getSwapOutAmountSellBase(pool, amountIn, marketPrice) {
  const { virtualBaseReserve, virtualQuoteReserve } = getVirtualReserves(pool, marketPrice);
  if (pool.swapType.normalSwap) {
    return calculateOutAmountNormalSwap(
      marketPrice,
      new BigNumber6(pool.poolState.targetBaseReserve.toString()),
      new BigNumber6(pool.poolState.targetQuoteReserve.toString()),
      new BigNumber6(pool.poolState.baseReserve.toString()).plus(virtualBaseReserve),
      new BigNumber6(pool.poolState.quoteReserve.toString()).plus(virtualQuoteReserve),
      amountIn
    );
  } else if (pool.swapType.stableSwap) {
    return calculateOutAmountStableSwap(
      getStableMarketPrice(pool),
      new BigNumber6(pool.poolState.baseReserve.toString()),
      new BigNumber6(pool.poolState.quoteReserve.toString()),
      amountIn,
      new BigNumber6(pool.swapConfig.slope.toString()).dividedBy(WAD)
    );
  } else {
    throw Error("Wrong swaptype: " + pool.swapType);
  }
}
function getSwapOutAmountSellQuote(pool, amountIn, marketPrice) {
  const { virtualBaseReserve, virtualQuoteReserve } = getVirtualReserves(pool, marketPrice);
  if (pool.swapType.normalSwap) {
    return calculateOutAmountNormalSwap(
      new BigNumber6(1).dividedBy(marketPrice),
      new BigNumber6(pool.poolState.targetQuoteReserve.toString()),
      new BigNumber6(pool.poolState.targetBaseReserve.toString()),
      new BigNumber6(pool.poolState.quoteReserve.toString()).plus(virtualQuoteReserve),
      new BigNumber6(pool.poolState.baseReserve.toString()).plus(virtualBaseReserve),
      amountIn
    );
  } else if (pool.swapType.stableSwap) {
    return calculateOutAmountStableSwap(
      new BigNumber6(1).dividedBy(getStableMarketPrice(pool)),
      new BigNumber6(pool.poolState.quoteReserve.toString()),
      new BigNumber6(pool.poolState.baseReserve.toString()),
      amountIn,
      new BigNumber6(pool.swapConfig.slope.toString()).dividedBy(WAD)
    );
  } else {
    throw Error("Wrong swaptype: " + pool.swapType);
  }
}
function normalizeMarketPriceWithDecimals(marketPrice, mintBaseDecimals, mintQuoteDecimals) {
  if (mintBaseDecimals > mintQuoteDecimals) {
    return exponentiatedBy(marketPrice, mintBaseDecimals - mintQuoteDecimals);
  } else if (mintBaseDecimals < mintQuoteDecimals) {
    return exponentiate(marketPrice, mintQuoteDecimals - mintBaseDecimals);
  } else {
    return marketPrice;
  }
}
function getNormalizedReserves(baseReserve, quoteReserve, targetBaseReserve, targetQuoteReserve, marketPrice) {
  const coefNumberator = baseReserve.multipliedBy(marketPrice).plus(quoteReserve);
  const coefDenumerator = targetBaseReserve.multipliedBy(marketPrice).plus(targetQuoteReserve);
  const coef = coefNumberator.dividedBy(coefDenumerator);
  return {
    normalizedBaseReserve: coef.multipliedBy(targetBaseReserve),
    normalizedQuoteReserve: coef.multipliedBy(targetQuoteReserve)
  };
}
function getVirtualReserves(swapInfo, marketPrice) {
  const { normalizedBaseReserve, normalizedQuoteReserve } = getNormalizedReserves(
    new BigNumber6(swapInfo.poolState.baseReserve.toString()),
    new BigNumber6(swapInfo.poolState.quoteReserve.toString()),
    new BigNumber6(swapInfo.poolState.targetBaseReserve.toString()),
    new BigNumber6(swapInfo.poolState.targetQuoteReserve.toString()),
    marketPrice
  );
  const virtualReserveRatio = new BigNumber6(swapInfo.swapConfig.virtualReservePercentage).dividedBy(
    100
  );
  return {
    virtualBaseReserve: normalizedBaseReserve.multipliedBy(virtualReserveRatio),
    virtualQuoteReserve: normalizedQuoteReserve.multipliedBy(virtualReserveRatio)
  };
}
function checkIfReserveIsSufficient(baseReserve, quoteReserve, normalizedBaseReserve, normalizedQuoteReserve, swapConfig) {
  return baseReserve.gt(
    normalizedBaseReserve.multipliedBy(swapConfig.minReserveLimitPercentage).dividedBy(100)
  ) && quoteReserve.gt(
    normalizedQuoteReserve.multipliedBy(swapConfig.minReserveLimitPercentage).dividedBy(100)
  );
}
function getStableMarketPrice(swapInfo) {
  return new BigNumber6(10).pow(swapInfo.mintQuoteDecimals - swapInfo.mintBaseDecimals);
}
export {
  checkIfReserveIsSufficient,
  getDeltafiDexV2,
  getSwappedAmountsAndPriceImpactFromRawValue
};
