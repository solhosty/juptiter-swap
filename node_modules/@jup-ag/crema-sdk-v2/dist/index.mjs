// src/utils/decimal.ts
import Decimal from "decimal.js";
Decimal.config({
  precision: 64,
  rounding: Decimal.ROUND_DOWN,
  toExpNeg: -64,
  toExpPos: 64
});
var decimal_default = Decimal;

// src/types/clmmpool.ts
var AccountName = /* @__PURE__ */ ((AccountName2) => {
  AccountName2["ClmmConfig"] = "ClmmConfig";
  AccountName2["ClmmPool"] = "Clmmpool";
  AccountName2["FeeTier"] = "FeeTier";
  AccountName2["Partner"] = "Partner";
  AccountName2["Position"] = "Position";
  AccountName2["TickArrayMap"] = "TickArrayMap";
  AccountName2["TickArray"] = "TickArray";
  AccountName2["Rewarder"] = "Rewarder";
  return AccountName2;
})(AccountName || {});

// src/types/constants.ts
import { BN } from "@project-serum/anchor";
import * as anchor from "@project-serum/anchor";
import { PublicKey } from "@solana/web3.js";
var CLMMPOOLS_CONFIG = new PublicKey(
  "2LecshUwdy9xi7meFgHtFJQNSKk4KdTrcpvaB56dP2NQ"
);
var CLMMPOOL_PROGRAM_ID = new PublicKey(
  "CLMM9tUoggJu2wagPkkqs9eFG4BWhVBZWkP1qv3Sp7tR"
);
var MINT_WRAPPER_PROGRAM_ID = new PublicKey(
  "CMWr5a5feRxAeowwHcm1u5bYwmUvsAjcBbqLRcBshyAR"
);
var MAX_TICK_INDEX = 443636;
var MIN_TICK_INDEX = -443636;
var MAX_SQRT_PRICE = "79226673515401279992447579055";
var MIN_SQRT_PRICE = "4295048016";
var TICK_ARRAY_SIZE = 64;
var METADATA_PROGRAM_ADDRESS = new PublicKey(
  "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
);
var PROTOCOL_FEE_RATE_DENOMINATOR = new BN(1e4);
var FEE_RATE_DENOMINATOR = new BN(1e6);
var TICK_ARRAY_MAP_MAX_BIT_INDEX = 868 * 8 - 1;
var TICK_ARRAY_MAP_MIN_BIT_INDEX = 0;
var MAX_TICK_ARRAY = 3;
var TICK_ARRAY_AMOUNT = 6943;
var POSITION_NFT_UPDATE_AUTHORITY = new PublicKey(
  "5QW9BCx6oZKjSWCVyBZaVU8N4jwtFnged9TsiaXvDj8Q"
);
var ZERO_BN = new anchor.BN(0);

// src/idls/clmmpool.ts
var IDL = {
  "version": "0.1.0",
  "name": "clmmpool",
  "instructions": [
    {
      "name": "initializeClmmConfig",
      "accounts": [
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "clmmConfig",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "protocolAuthority",
          "type": "publicKey"
        },
        {
          "name": "protocolFeeClaimAuthority",
          "type": "publicKey"
        },
        {
          "name": "createPoolAuthority",
          "type": "publicKey"
        },
        {
          "name": "protocolFeeRate",
          "type": "u16"
        }
      ]
    },
    {
      "name": "createFeeTier",
      "accounts": [
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "clmmConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "feeTier",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "tickSpacing",
          "type": "u16"
        },
        {
          "name": "feeRate",
          "type": "u16"
        }
      ]
    },
    {
      "name": "updateConfig",
      "accounts": [
        {
          "name": "clmmConfig",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolAuthority",
          "isMut": false,
          "isSigner": true
        }
      ],
      "args": [
        {
          "name": "newProtocolFeeRate",
          "type": {
            "option": "u16"
          }
        },
        {
          "name": "createPoolAuthority",
          "type": {
            "option": "publicKey"
          }
        },
        {
          "name": "claimAuthority",
          "type": {
            "option": "publicKey"
          }
        }
      ]
    },
    {
      "name": "updateFeeRate",
      "accounts": [
        {
          "name": "protocolAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "clmmConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "clmmpool",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "newFeeRate",
          "type": "u16"
        }
      ]
    },
    {
      "name": "transferProtocolAuthority",
      "accounts": [
        {
          "name": "protocolAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "clmmConfig",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "newAuthority",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "acceptProtocolAuthority",
      "accounts": [
        {
          "name": "newAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "clmmConfig",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "createClmmpool",
      "accounts": [
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "clmmConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "feeTier",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "clmmpool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenA",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenB",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenAVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "initSqrtPrice",
          "type": "u128"
        }
      ]
    },
    {
      "name": "createTickArray",
      "accounts": [
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "clmmpool",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tickArray",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "arrayIndex",
          "type": "u16"
        }
      ]
    },
    {
      "name": "createTickArrayMap",
      "accounts": [
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "clmmpool",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tickArrayMap",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "openPosition",
      "accounts": [
        {
          "name": "owner",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "clmmpool",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "position",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "positionNftMint",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "positionMetadataAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "positionEdition",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "positionAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "metadataProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "tickLowerIndex",
          "type": "i32"
        },
        {
          "name": "tickUpperIndex",
          "type": "i32"
        }
      ]
    },
    {
      "name": "removePosition",
      "accounts": [
        {
          "name": "owner",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "position",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "positionNftMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "positionAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "positionMetadataAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "positionEdition",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "metadataProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "increaseLiquidity",
      "accounts": [
        {
          "name": "owner",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "clmmpool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "position",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "positionAta",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenAAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenAVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tickArrayLower",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tickArrayUpper",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tickArrayMap",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "deltaLiquidity",
          "type": "u128"
        },
        {
          "name": "tokenAMax",
          "type": "u64"
        },
        {
          "name": "tokenBMax",
          "type": "u64"
        }
      ]
    },
    {
      "name": "increaseLiquidityWithFixedToken",
      "accounts": [
        {
          "name": "owner",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "clmmpool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "position",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "positionAta",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenAAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenAVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tickArrayLower",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tickArrayUpper",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tickArrayMap",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "tokenA",
          "type": "u64"
        },
        {
          "name": "tokenB",
          "type": "u64"
        },
        {
          "name": "isAFixed",
          "type": "bool"
        }
      ]
    },
    {
      "name": "decreaseLiquidity",
      "accounts": [
        {
          "name": "owner",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "clmmpool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "position",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "positionAta",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenAAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenAVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tickArrayLower",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tickArrayUpper",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tickArrayMap",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "deltaLiquidity",
          "type": "u128"
        },
        {
          "name": "tokenAMin",
          "type": "u64"
        },
        {
          "name": "tokenBMin",
          "type": "u64"
        }
      ]
    },
    {
      "name": "swap",
      "accounts": [
        {
          "name": "clmmConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "clmmpool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenA",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenB",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "accountA",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "accountB",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenAVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tickArrayMap",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "owner",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "aToB",
          "type": "bool"
        },
        {
          "name": "byAmountIn",
          "type": "bool"
        },
        {
          "name": "amount",
          "type": "u64"
        },
        {
          "name": "amountLimit",
          "type": "u64"
        },
        {
          "name": "sqrtPriceLimit",
          "type": "u128"
        }
      ]
    },
    {
      "name": "collectFee",
      "accounts": [
        {
          "name": "owner",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "clmmpool",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "position",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "positionAta",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenAAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenAVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tickArrayLower",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tickArrayUpper",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "collectProtocolFee",
      "accounts": [
        {
          "name": "protocolFeeClaimAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "clmmConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "clmmpool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenAAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenAVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "createPartner",
      "accounts": [
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "clmmConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "protocolAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "base",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "partner",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "partnerFeeClaimAuthority",
          "type": "publicKey"
        },
        {
          "name": "feeRate",
          "type": "u16"
        },
        {
          "name": "startTime",
          "type": "u64"
        },
        {
          "name": "endTime",
          "type": "u64"
        },
        {
          "name": "name",
          "type": "string"
        }
      ]
    },
    {
      "name": "updatePartner",
      "accounts": [
        {
          "name": "clmmConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "partner",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true
        }
      ],
      "args": [
        {
          "name": "newFeeRate",
          "type": {
            "option": "u16"
          }
        },
        {
          "name": "newClaimAuthority",
          "type": {
            "option": "publicKey"
          }
        },
        {
          "name": "startTime",
          "type": {
            "option": "u64"
          }
        },
        {
          "name": "endTime",
          "type": {
            "option": "u64"
          }
        }
      ]
    },
    {
      "name": "collectPartnerFee",
      "accounts": [
        {
          "name": "partnerFeeClaimAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "partner",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "clmmpool",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenAAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenAPartnerFeeVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBPartnerFeeVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "swapWithPartner",
      "accounts": [
        {
          "name": "clmmConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "clmmpool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenA",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenB",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "accountA",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "accountB",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenAVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenBVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tickArrayMap",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "owner",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "partner",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "partnerAtaA",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "partnerAtaB",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "aToB",
          "type": "bool"
        },
        {
          "name": "byAmountIn",
          "type": "bool"
        },
        {
          "name": "amount",
          "type": "u64"
        },
        {
          "name": "amountLimit",
          "type": "u64"
        },
        {
          "name": "sqrtPriceLimit",
          "type": "u128"
        }
      ]
    },
    {
      "name": "initializeRewarder",
      "accounts": [
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "clmmConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "clmmpool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "rewarderAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "rewarderTokenMint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "rewarderIndex",
          "type": "u8"
        },
        {
          "name": "mintWrapper",
          "type": "publicKey"
        },
        {
          "name": "minter",
          "type": "publicKey"
        }
      ]
    },
    {
      "name": "updateRewarderEmission",
      "accounts": [
        {
          "name": "rewarderAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "clmmConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "clmmpool",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "rewarderIndex",
          "type": "u8"
        },
        {
          "name": "emissionsPerSecond",
          "type": "u128"
        }
      ]
    },
    {
      "name": "collectRewarder",
      "accounts": [
        {
          "name": "owner",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "clmmpool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "position",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "positionAta",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rewarderAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mintWrapper",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "minter",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mintWrapperProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rewardsTokenMint",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tickArrayLower",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tickArrayUpper",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "rewarderIndex",
          "type": "u8"
        }
      ]
    },
    {
      "name": "transferPartnerClaimAuthority",
      "accounts": [
        {
          "name": "partnerClaimAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "partner",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "newAuthority",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "acceptPartnerClaimAuthority",
      "accounts": [
        {
          "name": "newAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "partner",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "pauseClmmpool",
      "accounts": [
        {
          "name": "clmmConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "protocolAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "clmmpool",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "unpauseClmmpool",
      "accounts": [
        {
          "name": "clmmConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "protocolAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "clmmpool",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "createClmmpoolMetadata",
      "accounts": [
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "clmmConfig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "clmmpool",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "clmmpoolMetadata",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "protocolAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "uri",
          "type": "string"
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "clmmConfig",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "protocolAuthority",
            "type": "publicKey"
          },
          {
            "name": "protocolFeeClaimAuthority",
            "type": "publicKey"
          },
          {
            "name": "protocolFeeRate",
            "type": "u16"
          },
          {
            "name": "pendingAuthority",
            "type": "publicKey"
          },
          {
            "name": "createPoolAuthority",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "clmmpoolMetadata",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "clmmpool",
            "type": "publicKey"
          },
          {
            "name": "positionNums",
            "type": "u64"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "symbol",
            "type": "string"
          },
          {
            "name": "uri",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "clmmpool",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "clmmConfig",
            "type": "publicKey"
          },
          {
            "name": "tokenA",
            "type": "publicKey"
          },
          {
            "name": "tokenB",
            "type": "publicKey"
          },
          {
            "name": "tokenAVault",
            "type": "publicKey"
          },
          {
            "name": "tokenBVault",
            "type": "publicKey"
          },
          {
            "name": "tickSpacing",
            "type": "u16"
          },
          {
            "name": "tickSpacingSeed",
            "type": {
              "array": [
                "u8",
                2
              ]
            }
          },
          {
            "name": "feeRate",
            "type": "u16"
          },
          {
            "name": "liquidity",
            "type": "u128"
          },
          {
            "name": "currentSqrtPrice",
            "type": "u128"
          },
          {
            "name": "currentTickIndex",
            "type": "i32"
          },
          {
            "name": "feeGrowthGlobalA",
            "type": "u128"
          },
          {
            "name": "feeGrowthGlobalB",
            "type": "u128"
          },
          {
            "name": "feeProtocolTokenA",
            "type": "u64"
          },
          {
            "name": "feeProtocolTokenB",
            "type": "u64"
          },
          {
            "name": "bump",
            "type": {
              "array": [
                "u8",
                1
              ]
            }
          },
          {
            "name": "rewarderInfos",
            "type": {
              "array": [
                {
                  "defined": "Rewarder"
                },
                3
              ]
            }
          },
          {
            "name": "rewarderLastUpdatedTime",
            "type": "u64"
          },
          {
            "name": "isPause",
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "feeTier",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "feeRate",
            "type": "u16"
          },
          {
            "name": "tickSpacing",
            "type": "u16"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "partner",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "partnerFeeClaimAuthority",
            "type": "publicKey"
          },
          {
            "name": "pendingAuthority",
            "type": "publicKey"
          },
          {
            "name": "base",
            "type": "publicKey"
          },
          {
            "name": "feeRate",
            "type": "u16"
          },
          {
            "name": "bump",
            "type": {
              "array": [
                "u8",
                1
              ]
            }
          },
          {
            "name": "startTime",
            "type": "u64"
          },
          {
            "name": "endTime",
            "type": "u64"
          },
          {
            "name": "name",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "position",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "clmmpool",
            "type": "publicKey"
          },
          {
            "name": "positionNftMint",
            "type": "publicKey"
          },
          {
            "name": "liquidity",
            "type": "u128"
          },
          {
            "name": "tickLowerIndex",
            "type": "i32"
          },
          {
            "name": "tickUpperIndex",
            "type": "i32"
          },
          {
            "name": "feeGrowthInsideA",
            "type": "u128"
          },
          {
            "name": "feeOwedA",
            "type": "u64"
          },
          {
            "name": "feeGrowthInsideB",
            "type": "u128"
          },
          {
            "name": "feeOwedB",
            "type": "u64"
          },
          {
            "name": "rewarderInfos",
            "type": {
              "array": [
                {
                  "defined": "PositionReward"
                },
                3
              ]
            }
          }
        ]
      }
    },
    {
      "name": "tickArray",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "arrayIndex",
            "type": "u16"
          },
          {
            "name": "tickSpacing",
            "type": "u16"
          },
          {
            "name": "clmmpool",
            "type": "publicKey"
          },
          {
            "name": "ticks",
            "type": {
              "array": [
                {
                  "defined": "Tick"
                },
                64
              ]
            }
          }
        ]
      }
    },
    {
      "name": "tickArrayMap",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bitmap",
            "type": {
              "array": [
                "u8",
                868
              ]
            }
          }
        ]
      }
    }
  ],
  "types": [
    {
      "name": "Rewarder",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "mintWrapper",
            "type": "publicKey"
          },
          {
            "name": "minter",
            "type": "publicKey"
          },
          {
            "name": "mint",
            "type": "publicKey"
          },
          {
            "name": "authority",
            "type": "publicKey"
          },
          {
            "name": "emissionsPerSecond",
            "type": "u128"
          },
          {
            "name": "growthGlobal",
            "type": "u128"
          }
        ]
      }
    },
    {
      "name": "PositionReward",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "growthInside",
            "type": "u128"
          },
          {
            "name": "amountOwed",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "Tick",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "isInitialized",
            "type": "bool"
          },
          {
            "name": "index",
            "type": "i32"
          },
          {
            "name": "sqrtPrice",
            "type": "u128"
          },
          {
            "name": "liquidityNet",
            "type": "i128"
          },
          {
            "name": "liquidityGross",
            "type": "u128"
          },
          {
            "name": "feeGrowthOutsideA",
            "type": "u128"
          },
          {
            "name": "feeGrowthOutsideB",
            "type": "u128"
          },
          {
            "name": "rewardGrowthOutside",
            "type": {
              "array": [
                "u128",
                3
              ]
            }
          }
        ]
      }
    },
    {
      "name": "ErrorCode",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "LOK"
          },
          {
            "name": "NumberCastError"
          },
          {
            "name": "ZeroMintAmount"
          },
          {
            "name": "IntegerDowncastOverflow"
          },
          {
            "name": "MultiplicationOverflow"
          },
          {
            "name": "DivisorIsZero"
          },
          {
            "name": "TokenAmountMinSubceeded"
          },
          {
            "name": "TokenAmountMaxExceeded"
          },
          {
            "name": "SqrtPriceOutOfBounds"
          },
          {
            "name": "ProtocolFeeRateIllegal"
          },
          {
            "name": "FeeRateIllegal"
          },
          {
            "name": "TokenMintPairIllgal"
          },
          {
            "name": "TickArrayStartIndexIllegal"
          },
          {
            "name": "InvalidTickSpacing"
          },
          {
            "name": "InvalidTickIndex"
          },
          {
            "name": "InvalidTickArrayAccount"
          },
          {
            "name": "PositionIsNotEmpty"
          },
          {
            "name": "InvalidTokenAccountOwner"
          },
          {
            "name": "TickNotFound"
          },
          {
            "name": "TickNotInArray"
          },
          {
            "name": "InvalidTokenAccount"
          },
          {
            "name": "InvalidMint"
          },
          {
            "name": "InvalidAuthority"
          },
          {
            "name": "PositionAndClmmpoolNotMatch"
          },
          {
            "name": "PositionIllegal"
          },
          {
            "name": "InvalidDeltaLiquidity"
          },
          {
            "name": "ConfigAndPoolNotMatch"
          },
          {
            "name": "WrongSqrtPriceLimit"
          },
          {
            "name": "TickArrayNotFound"
          },
          {
            "name": "InvalidTickArrayIndex"
          },
          {
            "name": "NextTickNotFound"
          },
          {
            "name": "FeeGrowthIllegal"
          },
          {
            "name": "LiquidityOverflow"
          },
          {
            "name": "LiquidityUnderflow"
          },
          {
            "name": "RemainerAmountUnderflow"
          },
          {
            "name": "SwapAmountInOverflow"
          },
          {
            "name": "SwapAmountOutOverflow"
          },
          {
            "name": "SwapFeeAmountOverflow"
          },
          {
            "name": "InvalidTime"
          },
          {
            "name": "AmountInAboveMaximumLimit"
          },
          {
            "name": "AmountOutBelowMaximumLimit"
          },
          {
            "name": "InvalidFixedTokenType"
          },
          {
            "name": "InvalidRewarderIndex"
          },
          {
            "name": "InvalidPartner"
          },
          {
            "name": "InvalidClmmpoolStatus"
          },
          {
            "name": "InvalidClmmpoolMetadataAccount"
          }
        ]
      }
    }
  ],
  "events": [
    {
      "name": "AcceptPartnerClaimAuthorityEvent",
      "fields": [
        {
          "name": "newAuthority",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "partner",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "oldAuthority",
          "type": "publicKey",
          "index": false
        }
      ]
    },
    {
      "name": "AcceptProtocolAuthorityEvent",
      "fields": [
        {
          "name": "newAuthority",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "config",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "oldAuthority",
          "type": "publicKey",
          "index": false
        }
      ]
    },
    {
      "name": "CollectFeeEvent",
      "fields": [
        {
          "name": "pool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "owner",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "positionNftMint",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "amountA",
          "type": "u64",
          "index": false
        },
        {
          "name": "amountB",
          "type": "u64",
          "index": false
        }
      ]
    },
    {
      "name": "CollectPartnerFeeEvent",
      "fields": [
        {
          "name": "claimAuthority",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "partner",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "pool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "amountA",
          "type": "u64",
          "index": false
        },
        {
          "name": "amountB",
          "type": "u64",
          "index": false
        }
      ]
    },
    {
      "name": "CollectProtocolFeeEvent",
      "fields": [
        {
          "name": "claimAuthority",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "config",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "pool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "amountA",
          "type": "u64",
          "index": false
        },
        {
          "name": "amountB",
          "type": "u64",
          "index": false
        }
      ]
    },
    {
      "name": "CollectRewarderEvent",
      "fields": [
        {
          "name": "pool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "owner",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "positionNftMint",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "amount",
          "type": "u64",
          "index": false
        },
        {
          "name": "rewarderMint",
          "type": "publicKey",
          "index": false
        }
      ]
    },
    {
      "name": "CreateClmmPoolEvent",
      "fields": [
        {
          "name": "payer",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "config",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "feeTier",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "pool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "tokenA",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "tokenB",
          "type": "publicKey",
          "index": false
        }
      ]
    },
    {
      "name": "CreateClmmpoolMetadataEvent",
      "fields": [
        {
          "name": "clmmpool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "clmmpoolMetadata",
          "type": "publicKey",
          "index": false
        }
      ]
    },
    {
      "name": "CreateFeeTierEvent",
      "fields": [
        {
          "name": "payer",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "config",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "feeTier",
          "type": "publicKey",
          "index": false
        }
      ]
    },
    {
      "name": "CreatePartnerEvent",
      "fields": [
        {
          "name": "config",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "protocolAuthority",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "partner",
          "type": "publicKey",
          "index": false
        }
      ]
    },
    {
      "name": "CreateTickArrayEvent",
      "fields": [
        {
          "name": "payer",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "pool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "tickArray",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "arrayIndex",
          "type": "u16",
          "index": false
        }
      ]
    },
    {
      "name": "CreateTickArrayMapEvent",
      "fields": [
        {
          "name": "payer",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "pool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "tickArrayMap",
          "type": "publicKey",
          "index": false
        }
      ]
    },
    {
      "name": "DecreaseLiquidityEvent",
      "fields": [
        {
          "name": "pool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "owner",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "positionNftMint",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "deltaLiquidity",
          "type": "u128",
          "index": false
        },
        {
          "name": "amountA",
          "type": "u64",
          "index": false
        },
        {
          "name": "amountB",
          "type": "u64",
          "index": false
        }
      ]
    },
    {
      "name": "IncreaseLiquidityEvent",
      "fields": [
        {
          "name": "pool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "owner",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "positionNftMint",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "deltaLiquidity",
          "type": "u128",
          "index": false
        },
        {
          "name": "amountA",
          "type": "u64",
          "index": false
        },
        {
          "name": "amountB",
          "type": "u64",
          "index": false
        }
      ]
    },
    {
      "name": "IncreaseLiquidityWithFixedTokenEvent",
      "fields": [
        {
          "name": "pool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "owner",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "positionNftMint",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "deltaLiquidity",
          "type": "u128",
          "index": false
        },
        {
          "name": "amountA",
          "type": "u64",
          "index": false
        },
        {
          "name": "amountB",
          "type": "u64",
          "index": false
        }
      ]
    },
    {
      "name": "InitializeClmmConfigEvent",
      "fields": [
        {
          "name": "config",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "feeAuthority",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "claimAuthority",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "createPoolAuthority",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "feeRate",
          "type": "u16",
          "index": false
        }
      ]
    },
    {
      "name": "OpenPositionEvent",
      "fields": [
        {
          "name": "pool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "owner",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "positionNftMint",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "position",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "tickLowerIndex",
          "type": "i32",
          "index": false
        },
        {
          "name": "tickUpperIndex",
          "type": "i32",
          "index": false
        }
      ]
    },
    {
      "name": "RemovePositionEvent",
      "fields": [
        {
          "name": "pool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "owner",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "positionNftMint",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "position",
          "type": "publicKey",
          "index": false
        }
      ]
    },
    {
      "name": "SwapEvent",
      "fields": [
        {
          "name": "pool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "owner",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "partner",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "aToB",
          "type": "bool",
          "index": false
        },
        {
          "name": "amountIn",
          "type": "u64",
          "index": false
        },
        {
          "name": "amountOut",
          "type": "u64",
          "index": false
        },
        {
          "name": "refAmount",
          "type": "u64",
          "index": false
        },
        {
          "name": "feeAmount",
          "type": "u64",
          "index": false
        },
        {
          "name": "protocolAmount",
          "type": "u64",
          "index": false
        },
        {
          "name": "vaultAAmount",
          "type": "u64",
          "index": false
        },
        {
          "name": "vaultBAmount",
          "type": "u64",
          "index": false
        }
      ]
    },
    {
      "name": "SwapWithPartnerEvent",
      "fields": [
        {
          "name": "pool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "owner",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "partner",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "aToB",
          "type": "bool",
          "index": false
        },
        {
          "name": "amountIn",
          "type": "u64",
          "index": false
        },
        {
          "name": "amountOut",
          "type": "u64",
          "index": false
        },
        {
          "name": "refAmount",
          "type": "u64",
          "index": false
        },
        {
          "name": "feeAmount",
          "type": "u64",
          "index": false
        },
        {
          "name": "protocolAmount",
          "type": "u64",
          "index": false
        },
        {
          "name": "vaultAAmount",
          "type": "u64",
          "index": false
        },
        {
          "name": "vaultBAmount",
          "type": "u64",
          "index": false
        }
      ]
    },
    {
      "name": "TransferPartnerClaimAuthorityEvent",
      "fields": [
        {
          "name": "newAuthority",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "partner",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "oldAuthority",
          "type": "publicKey",
          "index": false
        }
      ]
    },
    {
      "name": "TransferProtocolAuthorityEvent",
      "fields": [
        {
          "name": "newAuthority",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "config",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "oldAuthority",
          "type": "publicKey",
          "index": false
        }
      ]
    },
    {
      "name": "UpdateConfigEvent",
      "fields": [
        {
          "name": "config",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "newProtocolFeeRate",
          "type": {
            "option": "u16"
          },
          "index": false
        },
        {
          "name": "createPoolAuthority",
          "type": {
            "option": "publicKey"
          },
          "index": false
        },
        {
          "name": "claimAuthority",
          "type": {
            "option": "publicKey"
          },
          "index": false
        }
      ]
    },
    {
      "name": "UpdateFeeRateEvent",
      "fields": [
        {
          "name": "pool",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "config",
          "type": "publicKey",
          "index": false
        }
      ]
    },
    {
      "name": "UpdatePartnerEvent",
      "fields": [
        {
          "name": "authority",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "partner",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "newFeeRate",
          "type": {
            "option": "u16"
          },
          "index": false
        },
        {
          "name": "newClaimAuthority",
          "type": {
            "option": "publicKey"
          },
          "index": false
        }
      ]
    }
  ]
};

// src/math/address.ts
import { translateAddress } from "@project-serum/anchor";
import { findProgramAddressSync } from "@project-serum/anchor/dist/cjs/utils/pubkey";

// src/math/clmm.ts
import { u64 } from "@solana/spl-token";
import BN8 from "bn.js";

// src/errors/errors.ts
var ClmmpoolsError = class extends Error {
  constructor(message, errorCode) {
    super(message);
    this.message = message;
    this.errorCode = errorCode;
  }
  static isClmmpoolsErrorCode(e, code) {
    return e instanceof ClmmpoolsError && e.errorCode === code;
  }
};

// src/utils/pda.ts
import BN6 from "bn.js";

// src/math/tick.ts
import { BN as BN4 } from "@project-serum/anchor";
import invariant from "tiny-invariant";

// src/math/utils.ts
import BN3 from "bn.js";
var ZERO = new BN3(0);
var ONE = new BN3(1);
var TWO = new BN3(2);
var U128 = TWO.pow(new BN3(128));
var U64_MAX = TWO.pow(new BN3(64)).sub(ONE);
var U128_MAX = TWO.pow(new BN3(128)).sub(ONE);
var MathUtil = class {
  static toX64_BN(num) {
    return num.mul(new BN3(2).pow(new BN3(64)));
  }
  static toX64_Decimal(num) {
    return num.mul(decimal_default.pow(2, 64));
  }
  static toX64(num) {
    return new BN3(num.mul(decimal_default.pow(2, 64)).floor().toFixed());
  }
  static fromX64(num) {
    return new decimal_default(num.toString()).mul(decimal_default.pow(2, -64));
  }
  static fromX64_Decimal(num) {
    return num.mul(decimal_default.pow(2, -64));
  }
  static fromX64_BN(num) {
    return num.div(new BN3(2).pow(new BN3(64)));
  }
  static shiftRightRoundUp(n) {
    let result = n.shrn(64);
    if (n.mod(U64_MAX).gt(ZERO)) {
      result = result.add(ONE);
    }
    return result;
  }
  static divRoundUp(n0, n1) {
    const hasRemainder = !n0.mod(n1).eq(ZERO);
    if (hasRemainder) {
      return n0.div(n1).add(new BN3(1));
    } else {
      return n0.div(n1);
    }
  }
  static subUnderflowU128(n0, n1) {
    return n0.add(U128).sub(n1).mod(U128);
  }
  static checkUnsignedSub(n0, n1) {
    const n = n0.sub(n1);
    if (n.isNeg()) {
      throw new ClmmpoolsError(
        "Unsigned integer sub overflow",
        "UnsignedIntegerOverflow" /* UnsignedIntegerOverflow */
      );
    }
    return n;
  }
  static checkMul(n0, n1, limit) {
    const n = n0.mul(n1);
    if (this.isOverflow(n, limit)) {
      throw new ClmmpoolsError(
        "Multiplication overflow",
        "MultiplicationOverflow" /* MulOverflow */
      );
    }
    return n;
  }
  static checkMulDivFloor(n0, n1, denom, limit) {
    if (denom.eq(ZERO)) {
      throw new ClmmpoolsError("Devide by zero", "DivideByZero" /* DivideByZero */);
    }
    const n = n0.mul(n1).div(denom);
    if (this.isOverflow(n, limit)) {
      throw new ClmmpoolsError(
        "Multiplication div overflow",
        "MulDivOverflow" /* MulDivOverflow */
      );
    }
    return n;
  }
  static checkMulDivCeil(n0, n1, denom, limit) {
    if (denom.eq(ZERO)) {
      throw new ClmmpoolsError("Devide by zero", "DivideByZero" /* DivideByZero */);
    }
    const n = n0.mul(n1).add(denom.sub(ONE)).div(denom);
    if (this.isOverflow(n, limit)) {
      throw new ClmmpoolsError(
        "Multiplication div overflow",
        "MulDivOverflow" /* MulDivOverflow */
      );
    }
    return n;
  }
  static checkMulDivRound(n0, n1, denom, limit) {
    if (denom.eq(ZERO)) {
      throw new ClmmpoolsError("Devide by zero", "DivideByZero" /* DivideByZero */);
    }
    const n = n0.mul(n1.add(denom.shrn(1))).div(denom);
    if (this.isOverflow(n, limit)) {
      throw new ClmmpoolsError(
        "Multiplication div overflow",
        "MulDivOverflow" /* MulDivOverflow */
      );
    }
    return n;
  }
  static checkMulShiftRight(n0, n1, shift, limit) {
    const n = n0.mul(n1).shrn(shift);
    if (this.isOverflow(n, limit)) {
      throw new ClmmpoolsError(
        "Multiplication shift right overflow",
        "MulShiftRightOverflow" /* MulShiftRightOverflow */
      );
    }
    return n;
  }
  static checkMulShiftRight64RoundUpIf(n0, n1, limit, roundUp) {
    const p = n0.mul(n1);
    const shoudRoundUp = roundUp && p.and(U64_MAX).gt(ZERO);
    const result = shoudRoundUp ? p.shrn(64).add(ONE) : p.shrn(64);
    if (this.isOverflow(result, limit)) {
      throw new ClmmpoolsError(
        "Multiplication shift right overflow",
        "MulShiftRightOverflow" /* MulShiftRightOverflow */
      );
    }
    return result;
  }
  static checkMulShiftLeft(n0, n1, shift, limit) {
    const n = n0.mul(n1).shln(shift);
    if (this.isOverflow(n, limit)) {
      throw new ClmmpoolsError(
        "Multiplication shift left overflow",
        "MulShiftLeftOverflow" /* MulShiftLeftOverflow */
      );
    }
    return n;
  }
  static checkDivRoundUpIf(n0, n1, roundUp) {
    if (n1.eq(ZERO)) {
      throw new ClmmpoolsError("Devide by zero", "DivideByZero" /* DivideByZero */);
    }
    if (roundUp) {
      return this.divRoundUp(n0, n1);
    }
    return n0.div(n1);
  }
  static isOverflow(n, bit) {
    return n.gte(TWO.pow(new BN3(bit)));
  }
};

// src/math/tick.ts
var BIT_PRECISION = 14;
var LOG_B_2_X32 = "59543866431248";
var LOG_B_P_ERR_MARGIN_LOWER_X64 = "184467440737095516";
var LOG_B_P_ERR_MARGIN_UPPER_X64 = "15793534762490258745";
var TickMath = class {
  static priceToSqrtPriceX64(price, decimalsA, decimalsB) {
    return MathUtil.toX64(
      price.mul(decimal_default.pow(10, decimalsB - decimalsA)).sqrt()
    );
  }
  static sqrtPriceX64ToPrice(sqrtPriceX64, decimalsA, decimalsB) {
    return MathUtil.fromX64(sqrtPriceX64).pow(2).mul(decimal_default.pow(10, decimalsA - decimalsB));
  }
  static tickIndexToSqrtPriceX64(tickIndex) {
    if (tickIndex > 0) {
      return new BN4(tickIndexToSqrtPricePositive(tickIndex));
    } else {
      return new BN4(tickIndexToSqrtPriceNegative(tickIndex));
    }
  }
  static sqrtPriceX64ToTickIndex(sqrtPriceX64) {
    if (sqrtPriceX64.gt(new BN4(MAX_SQRT_PRICE)) || sqrtPriceX64.lt(new BN4(MIN_SQRT_PRICE))) {
      throw new Error(
        "Provided sqrtPrice is not within the supported sqrtPrice range."
      );
    }
    const msb = sqrtPriceX64.bitLength() - 1;
    const adjustedMsb = new BN4(msb - 64);
    const log2pIntegerX32 = signedShiftLeft(adjustedMsb, 32, 128);
    let bit = new BN4("8000000000000000", "hex");
    let precision = 0;
    let log2pFractionX64 = new BN4(0);
    let r = msb >= 64 ? sqrtPriceX64.shrn(msb - 63) : sqrtPriceX64.shln(63 - msb);
    while (bit.gt(new BN4(0)) && precision < BIT_PRECISION) {
      r = r.mul(r);
      const rMoreThanTwo = r.shrn(127);
      r = r.shrn(63 + rMoreThanTwo.toNumber());
      log2pFractionX64 = log2pFractionX64.add(bit.mul(rMoreThanTwo));
      bit = bit.shrn(1);
      precision += 1;
    }
    const log2pFractionX32 = log2pFractionX64.shrn(32);
    const log2pX32 = log2pIntegerX32.add(log2pFractionX32);
    const logbpX64 = log2pX32.mul(new BN4(LOG_B_2_X32));
    const tickLow = signedShiftRight(
      logbpX64.sub(new BN4(LOG_B_P_ERR_MARGIN_LOWER_X64)),
      64,
      128
    ).toNumber();
    const tickHigh = signedShiftRight(
      logbpX64.add(new BN4(LOG_B_P_ERR_MARGIN_UPPER_X64)),
      64,
      128
    ).toNumber();
    if (tickLow === tickHigh) {
      return tickLow;
    } else {
      const derivedTickHighSqrtPriceX64 = TickMath.tickIndexToSqrtPriceX64(tickHigh);
      if (derivedTickHighSqrtPriceX64.lte(sqrtPriceX64)) {
        return tickHigh;
      } else {
        return tickLow;
      }
    }
  }
  static tickIndexToPrice(tickIndex, decimalsA, decimalsB) {
    return TickMath.sqrtPriceX64ToPrice(
      TickMath.tickIndexToSqrtPriceX64(tickIndex),
      decimalsA,
      decimalsB
    );
  }
  static priceToTickIndex(price, decimalsA, decimalsB) {
    return TickMath.sqrtPriceX64ToTickIndex(
      TickMath.priceToSqrtPriceX64(price, decimalsA, decimalsB)
    );
  }
  static priceToInitializableTickIndex(price, decimalsA, decimalsB, tickSpacing) {
    return TickMath.getInitializableTickIndex(
      TickMath.priceToTickIndex(price, decimalsA, decimalsB),
      tickSpacing
    );
  }
  static getStartTickIndex(tickIndex, tickSpacing, offset = 0) {
    const realIndex = Math.floor(tickIndex / tickSpacing / TICK_ARRAY_SIZE);
    const startTickIndex = (realIndex + offset) * tickSpacing * TICK_ARRAY_SIZE;
    const ticksInArray = TICK_ARRAY_SIZE * tickSpacing;
    const minTickIndex = MIN_TICK_INDEX - (MIN_TICK_INDEX % ticksInArray + ticksInArray);
    invariant(
      startTickIndex >= minTickIndex,
      `startTickIndex is too small - - ${startTickIndex}`
    );
    invariant(
      startTickIndex <= MAX_TICK_INDEX,
      `startTickIndex is too large - ${startTickIndex}`
    );
    return startTickIndex;
  }
  static getInitializableTickIndex(tickIndex, tickSpacing) {
    return tickIndex - tickIndex % tickSpacing;
  }
  static getNextInitializableTickIndex(tickIndex, tickSpacing) {
    return TickMath.getInitializableTickIndex(tickIndex, tickSpacing) + tickSpacing;
  }
  static getPrevInitializableTickIndex(tickIndex, tickSpacing) {
    return TickMath.getInitializableTickIndex(tickIndex, tickSpacing) - tickSpacing;
  }
};
function tickIndexToSqrtPricePositive(tick) {
  let ratio;
  if ((tick & 1) !== 0) {
    ratio = new BN4("79232123823359799118286999567");
  } else {
    ratio = new BN4("79228162514264337593543950336");
  }
  if ((tick & 2) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("79236085330515764027303304731")),
      96,
      256
    );
  }
  if ((tick & 4) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("79244008939048815603706035061")),
      96,
      256
    );
  }
  if ((tick & 8) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("79259858533276714757314932305")),
      96,
      256
    );
  }
  if ((tick & 16) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("79291567232598584799939703904")),
      96,
      256
    );
  }
  if ((tick & 32) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("79355022692464371645785046466")),
      96,
      256
    );
  }
  if ((tick & 64) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("79482085999252804386437311141")),
      96,
      256
    );
  }
  if ((tick & 128) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("79736823300114093921829183326")),
      96,
      256
    );
  }
  if ((tick & 256) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("80248749790819932309965073892")),
      96,
      256
    );
  }
  if ((tick & 512) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("81282483887344747381513967011")),
      96,
      256
    );
  }
  if ((tick & 1024) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("83390072131320151908154831281")),
      96,
      256
    );
  }
  if ((tick & 2048) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("87770609709833776024991924138")),
      96,
      256
    );
  }
  if ((tick & 4096) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("97234110755111693312479820773")),
      96,
      256
    );
  }
  if ((tick & 8192) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("119332217159966728226237229890")),
      96,
      256
    );
  }
  if ((tick & 16384) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("179736315981702064433883588727")),
      96,
      256
    );
  }
  if ((tick & 32768) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("407748233172238350107850275304")),
      96,
      256
    );
  }
  if ((tick & 65536) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("2098478828474011932436660412517")),
      96,
      256
    );
  }
  if ((tick & 131072) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("55581415166113811149459800483533")),
      96,
      256
    );
  }
  if ((tick & 262144) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("38992368544603139932233054999993551")),
      96,
      256
    );
  }
  return signedShiftRight(ratio, 32, 256);
}
function tickIndexToSqrtPriceNegative(tickIndex) {
  const tick = Math.abs(tickIndex);
  let ratio;
  if ((tick & 1) !== 0) {
    ratio = new BN4("18445821805675392311");
  } else {
    ratio = new BN4("18446744073709551616");
  }
  if ((tick & 2) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("18444899583751176498")),
      64,
      256
    );
  }
  if ((tick & 4) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("18443055278223354162")),
      64,
      256
    );
  }
  if ((tick & 8) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("18439367220385604838")),
      64,
      256
    );
  }
  if ((tick & 16) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("18431993317065449817")),
      64,
      256
    );
  }
  if ((tick & 32) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("18417254355718160513")),
      64,
      256
    );
  }
  if ((tick & 64) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("18387811781193591352")),
      64,
      256
    );
  }
  if ((tick & 128) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("18329067761203520168")),
      64,
      256
    );
  }
  if ((tick & 256) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("18212142134806087854")),
      64,
      256
    );
  }
  if ((tick & 512) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("17980523815641551639")),
      64,
      256
    );
  }
  if ((tick & 1024) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("17526086738831147013")),
      64,
      256
    );
  }
  if ((tick & 2048) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("16651378430235024244")),
      64,
      256
    );
  }
  if ((tick & 4096) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("15030750278693429944")),
      64,
      256
    );
  }
  if ((tick & 8192) !== 0) {
    ratio = signedShiftRight(
      ratio.mul(new BN4("12247334978882834399")),
      64,
      256
    );
  }
  if ((tick & 16384) !== 0) {
    ratio = signedShiftRight(ratio.mul(new BN4("8131365268884726200")), 64, 256);
  }
  if ((tick & 32768) !== 0) {
    ratio = signedShiftRight(ratio.mul(new BN4("3584323654723342297")), 64, 256);
  }
  if ((tick & 65536) !== 0) {
    ratio = signedShiftRight(ratio.mul(new BN4("696457651847595233")), 64, 256);
  }
  if ((tick & 131072) !== 0) {
    ratio = signedShiftRight(ratio.mul(new BN4("26294789957452057")), 64, 256);
  }
  if ((tick & 262144) !== 0) {
    ratio = signedShiftRight(ratio.mul(new BN4("37481735321082")), 64, 256);
  }
  return ratio;
}
function signedShiftLeft(n0, shiftBy, bitWidth) {
  const twosN0 = n0.toTwos(bitWidth).shln(shiftBy);
  twosN0.imaskn(bitWidth + 1);
  return twosN0.fromTwos(bitWidth);
}
function signedShiftRight(n0, shiftBy, bitWidth) {
  const twoN0 = n0.toTwos(bitWidth).shrn(shiftBy);
  twoN0.imaskn(bitWidth - shiftBy + 1);
  return twoN0.fromTwos(bitWidth - shiftBy);
}

// src/utils/address-util.ts
import { translateAddress as translateAddress2, utils } from "@project-serum/anchor";
var AddressUtil = class {
  static toPubKey(address) {
    return translateAddress2(address);
  }
  static toPubKeys(addresses) {
    return addresses.map((address) => AddressUtil.toPubKey(address));
  }
  static findProgramAddress(seeds, programId) {
    const [publicKey, bump] = utils.publicKey.findProgramAddressSync(
      seeds,
      programId
    );
    return { publicKey, bump };
  }
};

// src/utils/tick.ts
import { BN as BN5 } from "bn.js";
import invariant2 from "tiny-invariant";
var TickUtil = class {
  static isTickInitializable(tick, tickSpacing) {
    return tick % tickSpacing === 0;
  }
  static checkTickInBounds(tick) {
    return tick <= MAX_TICK_INDEX && tick >= MIN_TICK_INDEX;
  }
  static checkIsValidTick(tick_index, tick_spacing) {
    const min = this.getMinIndex(tick_spacing);
    const max = this.getMaxIndex(tick_spacing);
    invariant2(tick_index >= min && tick_index <= max, `tick index invalid`);
    invariant2(tick_index % tick_spacing === 0, `tick index invalid`);
  }
  static getMinIndex(tick_spacing) {
    return MIN_TICK_INDEX + Math.abs(MIN_TICK_INDEX) % tick_spacing;
  }
  static getMaxIndex(tick_spacing) {
    return MAX_TICK_INDEX - MAX_TICK_INDEX % tick_spacing;
  }
  static getArrayIndex(tick_index, tick_spacing) {
    const min = this.getMinIndex(tick_spacing);
    const max = this.getMaxIndex(tick_spacing);
    invariant2(tick_index >= min && tick_index <= max, `tick index invalid`);
    const array_spacing = TICK_ARRAY_SIZE * tick_spacing;
    return Math.floor((tick_index - min) / array_spacing);
  }
  static getOffset(tick_index, tick_spacing) {
    const array_index = this.getArrayIndex(tick_index, tick_spacing);
    const start_index = this.getStartTickIndex(array_index, tick_spacing);
    return Math.floor((tick_index - start_index) / tick_spacing);
  }
  static getStartTickIndex(array_index, tick_spacing) {
    const min = this.getMinIndex(tick_spacing);
    const array_spacing = TICK_ARRAY_SIZE * tick_spacing;
    return min + array_spacing * array_index;
  }
  static getEndTickIndex(array_index, tick_spacing) {
    const start_index = this.getStartTickIndex(array_index, tick_spacing);
    return start_index + (TICK_ARRAY_SIZE - 1) * tick_spacing;
  }
  static isMinTickArray(array_index, tick_spacing) {
    return this.getStartTickIndex(array_index, tick_spacing) === this.getMinIndex(tick_spacing);
  }
  static isMaxTickArray(array_index, tick_spacing) {
    return this.getEndTickIndex(array_index, tick_spacing) === this.getMaxIndex(tick_spacing);
  }
  static isInArray(array_index, tick_spacing, tick_index) {
    return tick_index >= this.getStartTickIndex(array_index, tick_spacing) && tick_index <= this.getEndTickIndex(array_index, tick_spacing);
  }
  static crossUpdate(tick, pool, aToB) {
    const liquidity = pool.liquidity;
    const signedLiquidityChange = aToB ? tick.liquidityNet.mul(new BN5(-1)) : tick.liquidityNet;
    const currentLiquidity = signedLiquidityChange.gt(ZERO) ? liquidity.add(signedLiquidityChange) : liquidity.sub(signedLiquidityChange.abs());
    return currentLiquidity;
  }
  static async getTickDataFromIndex(fetcher, clmmpool2, programId, tick_index, tick_spacing) {
    const arrayIndex = this.getArrayIndex(tick_index, tick_spacing);
    const offset = this.getOffset(tick_index, tick_spacing);
    const tickArrayAddress = PDAUtil.getTickArrayPDA(
      programId,
      clmmpool2,
      arrayIndex
    ).publicKey;
    const tickArray = await fetcher.getTickArray(tickArrayAddress, false);
    const tickData = tickArray.ticks[offset];
    return tickData;
  }
};

// src/utils/pda.ts
var CLMM_CONFIG_SEED = "clmmconfig";
var PDA_CLMMPOOL_SEED = "clmmpool";
var PDA_POSITION_SEED = "position";
var PDA_TICK_ARRAY_SEED = "tick_array";
var PDA_TICK_ARRAY_MAP_SEED = "tick_array_map";
var PDA_FEE_TIER_SEED = "fee_tier";
var PDA_PARTNER_SEED = "partner";
var PDA_METADATA_SEED = "metadata";
var PDA_CLMMPOOL_METADATA_SEED = "clmmpool_metadata";
var PDA_EDITION_SEED = "edition";
var PDAUtil = class {
  static getClmmConfigPDA(programId) {
    return AddressUtil.findProgramAddress(
      [Buffer.from(CLMM_CONFIG_SEED)],
      programId
    );
  }
  static getClmmpoolPDA(programId, clmmConfigKey, tokenMintAKey, tokenMintBKey, tickSpacing) {
    const [mintA, mintB] = tokenMintAKey.toBuffer() < tokenMintBKey.toBuffer() ? [tokenMintAKey, tokenMintBKey] : [tokenMintBKey, tokenMintAKey];
    return AddressUtil.findProgramAddress(
      [
        Buffer.from(PDA_CLMMPOOL_SEED),
        clmmConfigKey.toBuffer(),
        mintA.toBuffer(),
        mintB.toBuffer(),
        new BN6(tickSpacing).toArrayLike(Buffer, "le", 2)
      ],
      programId
    );
  }
  static getPositionPDA(programId, positionNFTMintKey) {
    return AddressUtil.findProgramAddress(
      [Buffer.from(PDA_POSITION_SEED), positionNFTMintKey.toBuffer()],
      programId
    );
  }
  static getPositionMetadataPDA(positionMintKey) {
    return AddressUtil.findProgramAddress(
      [
        Buffer.from(PDA_METADATA_SEED),
        METADATA_PROGRAM_ADDRESS.toBuffer(),
        positionMintKey.toBuffer()
      ],
      METADATA_PROGRAM_ADDRESS
    );
  }
  static getPositionEditionPDA(positionMintKey) {
    return AddressUtil.findProgramAddress(
      [
        Buffer.from(PDA_METADATA_SEED),
        METADATA_PROGRAM_ADDRESS.toBuffer(),
        positionMintKey.toBuffer(),
        Buffer.from(PDA_EDITION_SEED)
      ],
      METADATA_PROGRAM_ADDRESS
    );
  }
  static getTickArrayPDA(programId, clmmpoolKey, arrayIndex) {
    return AddressUtil.findProgramAddress(
      [
        Buffer.from(PDA_TICK_ARRAY_SEED),
        clmmpoolKey.toBuffer(),
        new BN6(arrayIndex).toArrayLike(Buffer, "le", 2)
      ],
      programId
    );
  }
  static getTickArrayMapPDA(programId, clmmpoolKey) {
    return AddressUtil.findProgramAddress(
      [Buffer.from(PDA_TICK_ARRAY_MAP_SEED), clmmpoolKey.toBuffer()],
      programId
    );
  }
  static getTickArrayFromTickIndexPDA(tickIndex, tickSpacing, clmmpool2, programId) {
    const arrayIndex = TickUtil.getArrayIndex(tickIndex, tickSpacing);
    return PDAUtil.getTickArrayPDA(
      AddressUtil.toPubKey(programId),
      AddressUtil.toPubKey(clmmpool2),
      arrayIndex
    );
  }
  static getTickArrayFromSqrtPricePDA(sqrtPriceX64, tickSpacing, clmmpool2, programId) {
    const tickIndex = TickMath.sqrtPriceX64ToTickIndex(sqrtPriceX64);
    return PDAUtil.getTickArrayFromTickIndexPDA(
      tickIndex,
      tickSpacing,
      clmmpool2,
      programId
    );
  }
  static getFeeTierPDA(programId, clmmConfigKey, tickSpacing) {
    return AddressUtil.findProgramAddress(
      [
        Buffer.from(PDA_FEE_TIER_SEED),
        clmmConfigKey.toBuffer(),
        new BN6(tickSpacing).toArrayLike(Buffer, "le", 2)
      ],
      programId
    );
  }
  static getPartnerPDA(programId, baseKey) {
    return AddressUtil.findProgramAddress(
      [Buffer.from(PDA_PARTNER_SEED), baseKey.toBuffer()],
      programId
    );
  }
  static getClmmpoolMetadataPDA(programId, clmmpoolKey) {
    return AddressUtil.findProgramAddress(
      [
        Buffer.from(PDA_CLMMPOOL_METADATA_SEED),
        clmmpoolKey.toBuffer()
      ],
      programId
    );
  }
};

// src/math/swap.ts
import BN7 from "bn.js";
function adjustForSlippage(n, { numerator, denominator }, adjustUp) {
  if (adjustUp) {
    return n.mul(denominator.add(numerator)).div(denominator);
  } else {
    return n.mul(denominator).div(denominator.add(numerator));
  }
}
var SwapUtils = class {
  static getDefaultSqrtPriceLimit(a2b) {
    return new BN7(a2b ? MIN_SQRT_PRICE : MAX_SQRT_PRICE);
  }
  static getDefaultOtherAmountThreshold(amountSpecifiedIsInput) {
    return amountSpecifiedIsInput ? ZERO : U64_MAX;
  }
  static getTickArrayPublicKeys(currentTickIndex, tickSpacing, programId, clmmpoolAddress) {
    const tickArrayAddresses = [];
    for (let i = 0; i < TICK_ARRAY_MAP_MAX_BIT_INDEX; i++) {
      let arrayIndex;
      try {
        arrayIndex = TickUtil.getArrayIndex(currentTickIndex, tickSpacing);
      } catch {
        return tickArrayAddresses;
      }
      const pda = PDAUtil.getTickArrayPDA(
        programId,
        clmmpoolAddress,
        arrayIndex
      );
      tickArrayAddresses.push(pda.publicKey);
    }
    return tickArrayAddresses;
  }
  static async getTickArrays(currentTickIndex, tickSpacing, programId, clmmpoolAddress, fetcher, refresh) {
    const addresses = SwapUtils.getTickArrayPublicKeys(
      currentTickIndex,
      tickSpacing,
      programId,
      clmmpoolAddress
    );
    const data = await fetcher.listTickArrays(addresses, refresh);
    return addresses.map((addr, index) => {
      return {
        address: addr,
        data: data[index]
      };
    });
  }
  static calculateSwapAmountsFromQuote(amount, estAmountIn, estAmountOut, slippageTolerance, amountSpecifiedIsInput) {
    if (amountSpecifiedIsInput) {
      return {
        amount,
        amountLimit: adjustForSlippage(estAmountOut, slippageTolerance, false)
      };
    } else {
      return {
        amount,
        amountLimit: adjustForSlippage(estAmountIn, slippageTolerance, true)
      };
    }
  }
};

// src/math/clmm.ts
function getDeltaA(sqrtPrice0, sqrtPrice1, liquidity, roundUp) {
  const sqrtPriceDiff = sqrtPrice0.gt(sqrtPrice1) ? sqrtPrice0.sub(sqrtPrice1) : sqrtPrice1.sub(sqrtPrice0);
  const numberator = liquidity.mul(sqrtPriceDiff).shln(64);
  const denomminator = sqrtPrice0.mul(sqrtPrice1);
  const quotient = numberator.div(denomminator);
  const remainder = numberator.mod(denomminator);
  const result = roundUp && !remainder.eq(ZERO) ? quotient.add(new BN8(1)) : quotient;
  if (MathUtil.isOverflow(result, 64)) {
    throw new ClmmpoolsError(
      "Result large than u64 max",
      "IntegerDowncastOverflow" /* IntegerDowncastOverflow */
    );
  }
  return result;
}
function getDeltaB(sqrtPrice0, sqrtPrice1, liquidity, roundUp) {
  const sqrtPriceDiff = sqrtPrice0.gt(sqrtPrice1) ? sqrtPrice0.sub(sqrtPrice1) : sqrtPrice1.sub(sqrtPrice0);
  if (liquidity.eq(ZERO) || sqrtPriceDiff.eq(ZERO)) {
    return ZERO;
  }
  const p = liquidity.mul(sqrtPriceDiff);
  const shoudRoundUp = roundUp && p.and(U64_MAX).gt(ZERO);
  const result = shoudRoundUp ? p.shrn(64).add(ONE) : p.shrn(64);
  if (MathUtil.isOverflow(result, 64)) {
    throw new ClmmpoolsError(
      "Result large than u64 max",
      "IntegerDowncastOverflow" /* IntegerDowncastOverflow */
    );
  }
  return result;
}
function getNextSqrtPriceAUp(sqrtPrice, liquidity, amount, byAmountIn) {
  if (amount.eq(ZERO)) {
    return sqrtPrice;
  }
  const numberator = MathUtil.checkMulShiftLeft(sqrtPrice, liquidity, 64, 256);
  const liquidityShl64 = liquidity.shln(64);
  const product = MathUtil.checkMul(sqrtPrice, amount, 256);
  if (!byAmountIn && liquidityShl64.lte(product)) {
    throw new ClmmpoolsError(
      "getNextSqrtPriceAUp - Unable to divide liquidityShl64 by product",
      "DivideByZero" /* DivideByZero */
    );
  }
  const nextSqrtPrice = byAmountIn ? MathUtil.checkDivRoundUpIf(numberator, liquidityShl64.add(product), true) : MathUtil.checkDivRoundUpIf(numberator, liquidityShl64.sub(product), true);
  if (nextSqrtPrice.lt(new BN8(MIN_SQRT_PRICE))) {
    throw new ClmmpoolsError(
      "getNextSqrtPriceAUp - Next sqrt price less than min sqrt price",
      "TokenAmountMinSubceeded " /* TokenAmountMinSubceeded */
    );
  }
  if (nextSqrtPrice.gt(new BN8(MAX_SQRT_PRICE))) {
    throw new ClmmpoolsError(
      "getNextSqrtPriceAUp - Next sqrt price greater than max sqrt price",
      "TokenAmountMaxExceeded" /* TokenAmountMaxExceeded */
    );
  }
  return nextSqrtPrice;
}
function getNextSqrtPriceBDown(sqrtPrice, liquidity, amount, byAmountIn) {
  const deltaSqrtPrice = MathUtil.checkDivRoundUpIf(
    amount.shln(64),
    liquidity,
    !byAmountIn
  );
  const nextSqrtPrice = byAmountIn ? sqrtPrice.add(deltaSqrtPrice) : sqrtPrice.sub(deltaSqrtPrice);
  if (nextSqrtPrice.lt(new BN8(MIN_SQRT_PRICE)) || nextSqrtPrice.gt(new BN8(MAX_SQRT_PRICE))) {
    throw new ClmmpoolsError(
      "getNextSqrtPriceAUp - Next sqrt price out of bounds",
      "SqrtPriceOutOfBounds" /* SqrtPriceOutOfBounds */
    );
  }
  return nextSqrtPrice;
}
function getNextSqrtPriceFromInput(sqrtPrice, liquidity, amount, aToB) {
  return aToB ? getNextSqrtPriceAUp(sqrtPrice, liquidity, amount, true) : getNextSqrtPriceBDown(sqrtPrice, liquidity, amount, true);
}
function getNextSqrtPriceFromOutput(sqrtPrice, liquidity, amount, aToB) {
  return aToB ? getNextSqrtPriceBDown(sqrtPrice, liquidity, amount, false) : getNextSqrtPriceAUp(sqrtPrice, liquidity, amount, false);
}
function getDeltaUpFromInput(currentSqrtPrice, targetSqrtPrice, liquidity, aToB) {
  return aToB ? getDeltaA(targetSqrtPrice, currentSqrtPrice, liquidity, true) : getDeltaB(currentSqrtPrice, targetSqrtPrice, liquidity, true);
}
function getDeltaDownFromOutput(currentSqrtPrice, targetSqrtPrice, liquidity, aTob) {
  return aTob ? getDeltaB(targetSqrtPrice, currentSqrtPrice, liquidity, false) : getDeltaA(currentSqrtPrice, targetSqrtPrice, liquidity, false);
}
function computeSwapStep(currentSqrtPrice, targetSqrtPrice, liquidity, amount, feeRate, byAmountIn) {
  if (liquidity === ZERO) {
    return {
      amountIn: ZERO_BN,
      amountOut: ZERO_BN,
      nextSqrtPrice: targetSqrtPrice,
      feeAmount: ZERO_BN
    };
  }
  const aToB = currentSqrtPrice.gte(targetSqrtPrice);
  let amountIn;
  let amountOut;
  let nextSqrtPrice;
  let feeAmount;
  if (byAmountIn) {
    const amountRemain = MathUtil.checkMulDivFloor(
      amount,
      MathUtil.checkUnsignedSub(FEE_RATE_DENOMINATOR, feeRate),
      FEE_RATE_DENOMINATOR,
      64
    );
    const maxAmountIn = getDeltaUpFromInput(
      currentSqrtPrice,
      targetSqrtPrice,
      liquidity,
      aToB
    );
    if (maxAmountIn.gt(amountRemain)) {
      amountIn = amountRemain;
      feeAmount = MathUtil.checkUnsignedSub(amount, amountRemain);
      nextSqrtPrice = getNextSqrtPriceFromInput(
        currentSqrtPrice,
        liquidity,
        amountRemain,
        aToB
      );
    } else {
      amountIn = maxAmountIn;
      feeAmount = MathUtil.checkMulDivCeil(
        amountIn,
        feeRate,
        FEE_RATE_DENOMINATOR.sub(feeRate),
        64
      );
      nextSqrtPrice = targetSqrtPrice;
    }
    amountOut = getDeltaDownFromOutput(
      currentSqrtPrice,
      nextSqrtPrice,
      liquidity,
      aToB
    );
  } else {
    const maxAmountOut = getDeltaDownFromOutput(
      currentSqrtPrice,
      targetSqrtPrice,
      liquidity,
      aToB
    );
    if (maxAmountOut.gt(amount)) {
      amountOut = amount;
      nextSqrtPrice = getNextSqrtPriceFromOutput(
        currentSqrtPrice,
        liquidity,
        amount,
        aToB
      );
    } else {
      amountOut = maxAmountOut;
      nextSqrtPrice = targetSqrtPrice;
    }
    amountIn = getDeltaUpFromInput(
      currentSqrtPrice,
      nextSqrtPrice,
      liquidity,
      aToB
    );
    feeAmount = MathUtil.checkMulDivCeil(
      amountIn,
      feeRate,
      FEE_RATE_DENOMINATOR.sub(feeRate),
      64
    );
  }
  return {
    amountIn,
    amountOut,
    nextSqrtPrice,
    feeAmount
  };
}
function computeSwap(aToB, byAmountIn, amount, poolData, swapTicks, clmmpool2, tickArrayMap) {
  let remainerAmount = amount;
  let currentLiquidity = poolData.liquidity;
  let currentSqrtPrice = poolData.currentSqrtPrice;
  const swapResult = {
    amountIn: ZERO,
    amountOut: ZERO,
    feeAmount: ZERO,
    refAmount: ZERO,
    nextSqrtPrice: ZERO,
    crossTickNum: 0,
    swapTickArrays: []
  };
  let targetSqrtPrice, signedLiquidityChange;
  const sqrtPriceLimit = SwapUtils.getDefaultSqrtPriceLimit(aToB);
  let firstTickIndex = 0;
  if (aToB) {
    firstTickIndex = poolData.currentTickIndex;
  } else {
    firstTickIndex = poolData.currentTickIndex + 1;
  }
  for (const tick of swapTicks) {
    if (aToB) {
      if (poolData.currentTickIndex < tick.index || tick.sqrtPrice.eq(currentSqrtPrice)) {
        continue;
      }
    } else {
      if (poolData.currentTickIndex >= tick.index) {
        continue;
      }
    }
    if (tick === null) {
      continue;
    }
    if (aToB && sqrtPriceLimit.gt(tick.sqrtPrice) || !aToB && sqrtPriceLimit.lt(tick.sqrtPrice)) {
      targetSqrtPrice = sqrtPriceLimit;
    } else {
      targetSqrtPrice = tick.sqrtPrice;
    }
    const stepResult = computeSwapStep(
      currentSqrtPrice,
      targetSqrtPrice,
      currentLiquidity,
      remainerAmount,
      new BN8(poolData.feeRate),
      byAmountIn
    );
    if (!stepResult.amountIn.eq(ZERO)) {
      remainerAmount = byAmountIn ? remainerAmount.sub(stepResult.amountIn.add(stepResult.feeAmount)) : remainerAmount.sub(stepResult.amountOut);
    }
    swapResult.amountIn = swapResult.amountIn.add(stepResult.amountIn);
    swapResult.amountOut = swapResult.amountOut.add(stepResult.amountOut);
    swapResult.feeAmount = swapResult.feeAmount.add(stepResult.feeAmount);
    if (stepResult.nextSqrtPrice.eq(tick.sqrtPrice)) {
      signedLiquidityChange = aToB ? tick.liquidityNet.mul(new BN8(-1)) : tick.liquidityNet;
      currentLiquidity = signedLiquidityChange.gt(ZERO) ? currentLiquidity.add(signedLiquidityChange) : currentLiquidity.sub(signedLiquidityChange.abs());
      currentSqrtPrice = tick.sqrtPrice;
    } else {
      currentSqrtPrice = stepResult.nextSqrtPrice;
    }
    swapResult.crossTickNum++;
    if (remainerAmount.eq(ZERO)) {
      break;
    }
  }
  swapResult.amountIn = swapResult.amountIn.add(swapResult.feeAmount);
  swapResult.nextSqrtPrice = currentSqrtPrice;
  if (tickArrayMap && clmmpool2) {
    const startArrayIndex = TickUtil.getArrayIndex(
      firstTickIndex,
      poolData.tickSpacing
    );
    const swapTickArrays = getSwapTickArrays(
      clmmpool2,
      aToB,
      startArrayIndex,
      tickArrayMap
    );
    swapResult.swapTickArrays = swapTickArrays;
  }
  return swapResult;
}
function getSwapTickArrays(clmmpool2, a2b, startArrayIndex, tickArrayMap) {
  let arrayIndexs = [];
  for (let index = 0; index < 868; index++) {
    let word = tickArrayMap.bitmap[index];
    for (let shift = 0; shift < 8; shift++) {
      if ((word >> shift & 1) > 0) {
        arrayIndexs.push(true);
      } else {
        arrayIndexs.push(false);
      }
    }
  }
  const array_count = 3;
  const tickArrays = [];
  if (a2b) {
    for (let index = startArrayIndex; index >= TICK_ARRAY_MAP_MIN_BIT_INDEX; index -= 1) {
      if (arrayIndexs[index]) {
        const tickArray_i = PDAUtil.getTickArrayPDA(
          CLMMPOOL_PROGRAM_ID,
          clmmpool2,
          index
        );
        tickArrays.push(tickArray_i.publicKey);
      }
      if (tickArrays.length >= array_count) {
        break;
      }
    }
  } else {
    for (let index = startArrayIndex; index < TICK_ARRAY_MAP_MAX_BIT_INDEX; index += 1) {
      if (arrayIndexs[index]) {
        const tickArray_i = PDAUtil.getTickArrayPDA(
          CLMMPOOL_PROGRAM_ID,
          clmmpool2,
          index
        );
        tickArrays.push(tickArray_i.publicKey);
      }
      if (tickArrays.length >= array_count) {
        break;
      }
    }
  }
  return tickArrays;
}

// src/math/percentage.ts
import { u64 as u642 } from "@solana/spl-token";

// src/index.ts
decimal_default.set({ precision: 40, toExpPos: 40, toExpNeg: -20, rounding: 1 });
export {
  AccountName,
  CLMMPOOLS_CONFIG,
  CLMMPOOL_PROGRAM_ID,
  FEE_RATE_DENOMINATOR,
  IDL,
  MAX_SQRT_PRICE,
  MAX_TICK_ARRAY,
  MAX_TICK_INDEX,
  METADATA_PROGRAM_ADDRESS,
  MINT_WRAPPER_PROGRAM_ID,
  MIN_SQRT_PRICE,
  MIN_TICK_INDEX,
  PDAUtil,
  POSITION_NFT_UPDATE_AUTHORITY,
  PROTOCOL_FEE_RATE_DENOMINATOR,
  TICK_ARRAY_AMOUNT,
  TICK_ARRAY_MAP_MAX_BIT_INDEX,
  TICK_ARRAY_MAP_MIN_BIT_INDEX,
  TICK_ARRAY_SIZE,
  TickMath,
  TickUtil,
  ZERO_BN,
  computeSwap
};
//# sourceMappingURL=index.mjs.map