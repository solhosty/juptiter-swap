{"version":3,"sources":["../src/market.ts","../src/math.ts","../src/utils.ts","../src/tick.ts","../src/tickmap.ts","../src/idl/invariant.ts","../src/network.ts","../src/pair.ts"],"sourcesContent":["import { BN, Program, utils, AnchorProvider } from '@project-serum/anchor'\nimport { Token, TOKEN_PROGRAM_ID } from '@solana/spl-token'\nimport {\n  Connection,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  Transaction,\n  TransactionInstruction\n} from '@solana/web3.js'\nimport {\n  calculatePriceAfterSlippage,\n  calculatePriceSqrt,\n  findClosestTicks,\n  getX,\n  getY,\n  isInitialized\n} from './math'\nimport {\n  calculateClaimAmount,\n  computeUnitsInstruction,\n  feeToTickSpacing,\n  getFeeTierAddress,\n  getMaxTick,\n  getMinTick,\n  getPrice,\n  getTokens,\n  getTokensData,\n  isActive,\n  parseLiquidityOnTicks,\n  PositionClaimData,\n  SEED,\n  SimulateClaim,\n  TokenData\n} from './utils'\nimport { Invariant, IDL } from './idl/invariant'\nimport { DENOMINATOR, IWallet, Pair, signAndSend } from '.'\nimport { getMarketAddress, Network } from './network'\nimport { bs58 } from '@project-serum/anchor/dist/cjs/utils/bytes'\n\nconst POSITION_SEED = 'positionv1'\nconst TICK_SEED = 'tickv1'\nconst POSITION_LIST_SEED = 'positionlistv1'\nconst STATE_SEED = 'statev1'\nexport const TICK_CROSSES_PER_IX = 19\nexport const FEE_TIER = 'feetierv1'\nexport const DEFAULT_PUBLIC_KEY = new PublicKey(0)\n\nexport class Market {\n  public connection: Connection\n  public wallet: IWallet\n  public program: Program<Invariant>\n  public stateAddress: PublicKey = PublicKey.default\n  public programAuthority: PublicKey = PublicKey.default\n  public network: Network\n\n  private constructor(\n    network: Network,\n    wallet: IWallet,\n    connection: Connection,\n    programId?: PublicKey\n  ) {\n    this.connection = connection\n    this.wallet = wallet\n    const programAddress = new PublicKey(getMarketAddress(network))\n    const provider = new AnchorProvider(connection, wallet, AnchorProvider.defaultOptions())\n\n    this.network = network\n    this.program = new Program(IDL, programAddress, provider)\n  }\n\n  public static async build(\n    network: Network,\n    wallet: IWallet,\n    connection: Connection,\n    programId?: PublicKey\n  ): Promise<Market> {\n    const instance = new Market(network, wallet, connection, programId)\n    instance.stateAddress = (await instance.getStateAddress()).address\n    instance.programAuthority = (await instance.getProgramAuthority()).programAuthority\n\n    return instance\n  }\n\n  async createPool(createPool: CreatePool) {\n    const { transaction, signers } = await this.createPoolTx(createPool)\n\n    await signAndSend(transaction, [createPool.payer, ...signers], this.connection)\n  }\n\n  async createPoolTx({ pair, payer, initTick }: CreatePoolTx) {\n    const payerPubkey = payer?.publicKey ?? this.wallet.publicKey\n    const bitmapKeypair = Keypair.generate()\n    const tokenXReserve = Keypair.generate()\n    const tokenYReserve = Keypair.generate()\n    const tick = initTick ?? 0\n\n    const { address: stateAddress } = await this.getStateAddress()\n\n    const [poolAddress] = await pair.getAddressAndBump(this.program.programId)\n    const { address: feeTierAddress } = await this.getFeeTierAddress(pair.feeTier)\n\n    const createIx = this.program.instruction.createPool(tick, {\n      accounts: {\n        state: stateAddress,\n        pool: poolAddress,\n        feeTier: feeTierAddress,\n        tickmap: bitmapKeypair.publicKey,\n        tokenX: pair.tokenX,\n        tokenY: pair.tokenY,\n        tokenXReserve: tokenXReserve.publicKey,\n        tokenYReserve: tokenYReserve.publicKey,\n        authority: this.programAuthority,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        payer: payerPubkey,\n        rent: SYSVAR_RENT_PUBKEY,\n        systemProgram: SystemProgram.programId\n      }\n    })\n\n    const transaction = new Transaction({\n      feePayer: payerPubkey\n    })\n      .add(\n        SystemProgram.createAccount({\n          fromPubkey: payerPubkey,\n          newAccountPubkey: bitmapKeypair.publicKey,\n          space: this.program.account.tickmap.size,\n          lamports: await this.connection.getMinimumBalanceForRentExemption(\n            this.program.account.tickmap.size\n          ),\n          programId: this.program.programId\n        })\n      )\n      .add(createIx)\n\n    return {\n      transaction,\n      signers: [bitmapKeypair, tokenXReserve, tokenYReserve]\n    }\n  }\n\n  async getProgramAuthority() {\n    const [programAuthority, nonce] = await PublicKey.findProgramAddress(\n      [Buffer.from(SEED)],\n      this.program.programId\n    )\n\n    return {\n      programAuthority,\n      nonce\n    }\n  }\n\n  async getFeeTier(feeTier: FeeTier) {\n    const { address } = await this.getFeeTierAddress(feeTier)\n    return (await this.program.account.feeTier.fetch(address)) as FeeTierStructure\n  }\n\n  async getPool(pair: Pair) {\n    const address = await pair.getAddress(this.program.programId)\n    return (await this.program.account.pool.fetch(address)) as PoolStructure\n  }\n\n  async getPoolByAddress(address: PublicKey) {\n    return (await this.program.account.pool.fetch(address)) as PoolStructure\n  }\n\n  public async onPoolChange(\n    tokenX: PublicKey,\n    tokenY: PublicKey,\n    feeTier: FeeTier,\n    fn: (poolStructure: PoolStructure) => void\n  ) {\n    const poolAddress = await new Pair(tokenX, tokenY, feeTier).getAddress(this.program.programId)\n\n    this.program.account.pool\n      .subscribe(poolAddress, 'singleGossip') // REVIEW use recent commitment + allow overwrite via props\n      .on('change', (poolStructure: PoolStructure) => {\n        fn(poolStructure)\n      })\n  }\n\n  public async onTickChange(pair: Pair, index: number, fn: (tick: Tick) => void) {\n    const { tickAddress } = await this.getTickAddress(pair, index)\n\n    this.program.account.tick\n      .subscribe(tickAddress, 'singleGossip') // REVIEW use recent commitment + allow overwrite via props\n      .on('change', (poolStructure: Tick) => {\n        fn(poolStructure)\n      })\n  }\n\n  public async unsubscribeTick(pair: Pair, index: number): Promise<void> {\n    const { tickAddress } = await this.getTickAddress(pair, index)\n    return await this.program.account.tick.unsubscribe(tickAddress)\n  }\n\n  public async onTickmapChange(tickmap: PublicKey, fn: (tickmap: Tickmap) => void) {\n    this.program.account.tickmap\n      .subscribe(tickmap, 'singleGossip') // REVIEW use recent commitment + allow overwrite via props\n      .on('change', (tickmapStructure: Tickmap) => {\n        fn(tickmapStructure)\n      })\n  }\n\n  async getFeeTierAddress(feeTier: FeeTier) {\n    return await getFeeTierAddress(feeTier, this.program.programId)\n  }\n\n  async getTickmap(pair: Pair) {\n    const state = await this.getPool(pair)\n    const tickmap = (await this.program.account.tickmap.fetch(state.tickmap)) as Tickmap\n    return tickmap\n  }\n\n  async isInitialized(pair: Pair, index: number) {\n    const state = await this.getPool(pair)\n    const tickmap = await this.getTickmap(pair)\n    return isInitialized(tickmap, index, state.tickSpacing)\n  }\n\n  async getTick(pair: Pair, index: number) {\n    const { tickAddress } = await this.getTickAddress(pair, index)\n    return (await this.program.account.tick.fetch(tickAddress)) as Tick\n  }\n\n  async getTickByPool(poolAddress: PublicKey, index: number) {\n    const { tickAddress } = await this.getTickAddressByPool(poolAddress, index)\n    return (await this.program.account.tick.fetch(tickAddress)) as Tick\n  }\n\n  async getClosestTicks(pair: Pair, limit: number, maxRange?: number, oneWay?: 'up' | 'down') {\n    const state = await this.getPool(pair)\n    const tickmap = await this.getTickmap(pair)\n    const indexes = findClosestTicks(\n      tickmap.bitmap,\n      state.currentTickIndex,\n      state.tickSpacing,\n      limit,\n      maxRange,\n      oneWay\n    )\n\n    const ticksArray = (\n      await Promise.all(indexes.map(index => this.getTickAddress(pair, index)))\n    ).map(a => a.tickAddress)\n    return (await this.program.account.tick.fetchMultiple(ticksArray)) as Tick[]\n  }\n\n  async getAllTicks(pair: Pair) {\n    const poolPublicKey = await pair.getAddress(this.program.programId)\n    return (\n      await this.program.account.tick.all([\n        {\n          memcmp: { bytes: bs58.encode(poolPublicKey.toBuffer()), offset: 8 }\n        }\n      ])\n    ).map(a => a.account) as Tick[]\n  }\n\n  async getAllPoolLiquidityInTokens(poolAddress: PublicKey) {\n    return (await this.program.account.position.all())\n      .map(({ account }) => account)\n      .filter(account => account.pool.equals(poolAddress))\n      .reduce(\n        (tokens, { liquidity, lowerTickIndex, upperTickIndex }) =>\n          tokens.add(getTokens(liquidity.v, lowerTickIndex, upperTickIndex)),\n        new BN(0)\n      )\n  }\n\n  async getActiveLiquidityInTokens(poolAddress: PublicKey, currentTickIndex: number) {\n    return (await this.program.account.position.all())\n      .map(({ account }) => account)\n      .filter(account => account.pool.equals(poolAddress))\n      .filter(account => isActive(account.lowerTickIndex, account.upperTickIndex, currentTickIndex))\n      .reduce(\n        (tokens, { liquidity, lowerTickIndex, upperTickIndex }) =>\n          tokens.add(getTokens(liquidity.v, lowerTickIndex, upperTickIndex)),\n        new BN(0)\n      )\n  }\n\n  async getAllPositions(owner: PublicKey) {\n    return (await this.program.account.position.all()).map(({ account }) => account) as Position[]\n  }\n\n  async getAllUserPositions(owner: PublicKey): Promise<PositionStructure[]> {\n    const positionStructs: PositionStructure[] = []\n\n    const positions: Position[] = (\n      await this.program.account.position.all([\n        {\n          memcmp: { bytes: bs58.encode(owner.toBuffer()), offset: 8 }\n        }\n      ])\n    ).map(({ account }) => account) as Position[]\n\n    for (const position of positions) {\n      const {\n        pool: poolAddress,\n        lowerTickIndex,\n        upperTickIndex,\n        tokensOwedX,\n        tokensOwedY,\n        liquidity,\n        feeGrowthInsideX,\n        feeGrowthInsideY\n      }: Position = position\n\n      const {\n        fee,\n        tickSpacing,\n        tokenX,\n        tokenY,\n        currentTickIndex,\n        feeGrowthGlobalX,\n        feeGrowthGlobalY\n      }: PoolStructure = await this.getPoolByAddress(poolAddress)\n\n      const tokenData = await getTokensData()\n      const dataTokenX: TokenData = tokenData[tokenX.toString()]\n      const dataTokenY: TokenData = tokenData[tokenY.toString()]\n\n      const decimalDiff: number = dataTokenX.decimals - dataTokenY.decimals\n\n      const currentSqrtPrice: Decimal = calculatePriceSqrt(currentTickIndex)\n      const lowerSqrtPrice: Decimal = calculatePriceSqrt(lowerTickIndex)\n      const upperSqrtPrice: Decimal = calculatePriceSqrt(upperTickIndex)\n\n      const lowerPrice: Decimal = getPrice(lowerSqrtPrice, decimalDiff)\n      const upperPrice: Decimal = getPrice(upperSqrtPrice, decimalDiff)\n\n      const feeTier: FeeTier = { fee: fee.v, tickSpacing }\n\n      const amountTokenX: BN = getX(\n        liquidity.v,\n        upperSqrtPrice.v,\n        currentSqrtPrice.v,\n        lowerSqrtPrice.v\n      )\n\n      const amountTokenY: BN = getY(\n        liquidity.v,\n        upperSqrtPrice.v,\n        currentSqrtPrice.v,\n        lowerSqrtPrice.v\n      )\n\n      const positionData: PositionClaimData = {\n        liquidity,\n        feeGrowthInsideX,\n        feeGrowthInsideY,\n        tokensOwedX,\n        tokensOwedY\n      }\n\n      const claim: SimulateClaim = {\n        position: positionData,\n        tickLower: await this.getTickByPool(poolAddress, lowerTickIndex),\n        tickUpper: await this.getTickByPool(poolAddress, upperTickIndex),\n        tickCurrent: currentTickIndex,\n        feeGrowthGlobalX,\n        feeGrowthGlobalY\n      }\n\n      const [unclaimedFeesX, unclaimedFeesY] = calculateClaimAmount(claim)\n\n      const positionStruct: PositionStructure = {\n        tokenX,\n        tokenY,\n        feeTier,\n        amountTokenX,\n        amountTokenY,\n        lowerPrice,\n        upperPrice,\n        unclaimedFeesX,\n        unclaimedFeesY\n      }\n      positionStructs.push(positionStruct)\n    }\n\n    return positionStructs\n  }\n\n  async getLiquidityOnTicks(pair: Pair) {\n    const ticks = await this.getClosestTicks(pair, Infinity)\n\n    return parseLiquidityOnTicks(ticks)\n  }\n\n  async getPositionList(owner: PublicKey) {\n    const { positionListAddress } = await this.getPositionListAddress(owner)\n    return (await this.program.account.positionList.fetch(positionListAddress)) as PositionList\n  }\n\n  async getPosition(owner: PublicKey, index: number) {\n    const { positionAddress } = await this.getPositionAddress(owner, index)\n    return (await this.program.account.position.fetch(positionAddress)) as Position\n  }\n\n  async getPositionsFromIndexes(owner: PublicKey, indexes: number[]) {\n    const positionPromises = indexes.map(async i => {\n      return await this.getPosition(owner, i)\n    })\n    return await Promise.all(positionPromises)\n  }\n\n  async getPositionsFromRange(owner: PublicKey, lowerIndex: number, upperIndex: number) {\n    try {\n      await this.getPositionList(owner)\n      return await this.getPositionsFromIndexes(\n        owner,\n        Array.from({ length: upperIndex - lowerIndex + 1 }, (_, i) => i + lowerIndex)\n      )\n    } catch (e) {\n      return []\n    }\n  }\n\n  async getTickAddress(pair: Pair, index: number) {\n    const poolAddress = await pair.getAddress(this.program.programId)\n    const indexBuffer = Buffer.alloc(4)\n    indexBuffer.writeInt32LE(index)\n\n    const [tickAddress, tickBump] = await PublicKey.findProgramAddress(\n      [Buffer.from(utils.bytes.utf8.encode(TICK_SEED)), poolAddress.toBuffer(), indexBuffer],\n      this.program.programId\n    )\n\n    return {\n      tickAddress,\n      tickBump\n    }\n  }\n\n  async getTickAddressByPool(poolAddress: PublicKey, index: number) {\n    const indexBuffer = Buffer.alloc(4)\n    indexBuffer.writeInt32LE(index)\n\n    const [tickAddress, tickBump] = await PublicKey.findProgramAddress(\n      [Buffer.from(utils.bytes.utf8.encode(TICK_SEED)), poolAddress.toBuffer(), indexBuffer],\n      this.program.programId\n    )\n\n    return {\n      tickAddress,\n      tickBump\n    }\n  }\n\n  async getPositionListAddress(owner: PublicKey) {\n    const [positionListAddress, positionListBump] = await PublicKey.findProgramAddress(\n      [Buffer.from(utils.bytes.utf8.encode(POSITION_LIST_SEED)), owner.toBuffer()],\n      this.program.programId\n    )\n\n    return {\n      positionListAddress,\n      positionListBump\n    }\n  }\n\n  async getPositionAddress(owner: PublicKey, index: number) {\n    const indexBuffer = Buffer.alloc(4)\n    indexBuffer.writeInt32LE(index)\n\n    const [positionAddress, positionBump] = await PublicKey.findProgramAddress(\n      [Buffer.from(utils.bytes.utf8.encode(POSITION_SEED)), owner.toBuffer(), indexBuffer],\n      this.program.programId\n    )\n\n    return {\n      positionAddress,\n      positionBump\n    }\n  }\n\n  async getNewPositionAddress(owner: PublicKey) {\n    const positionList = await this.getPositionList(owner)\n    return await this.getPositionAddress(owner, positionList.head)\n  }\n\n  async getPositionsForPool(pool: PublicKey) {\n    return (\n      await this.program.account.position.all([\n        {\n          memcmp: { bytes: bs58.encode(pool.toBuffer()), offset: 40 }\n        }\n      ])\n    ).map(({ account, publicKey }) => ({\n      ...account,\n      address: publicKey\n    })) as PositionWithAddress[]\n  }\n\n  async createFeeTierInstruction({ feeTier, admin }: CreateFeeTier) {\n    admin = admin ?? this.wallet.publicKey\n    const { fee, tickSpacing } = feeTier\n    const { address } = await this.getFeeTierAddress(feeTier)\n    const ts = tickSpacing ?? feeToTickSpacing(fee)\n\n    return this.program.instruction.createFeeTier(fee, ts, {\n      accounts: {\n        state: this.stateAddress,\n        feeTier: address,\n        admin,\n        rent: SYSVAR_RENT_PUBKEY,\n        systemProgram: SystemProgram.programId\n      }\n    })\n  }\n\n  async createFeeTierTransaction(createFeeTier: CreateFeeTier) {\n    const ix = await this.createFeeTierInstruction(createFeeTier)\n    return new Transaction().add(ix)\n  }\n\n  // Admin function\n  async createFeeTier(createFeeTier: CreateFeeTier, signer: Keypair) {\n    const tx = await this.createFeeTierTransaction(createFeeTier)\n\n    await signAndSend(tx, [signer], this.connection)\n  }\n\n  async createStateInstruction(admin?: PublicKey) {\n    admin = admin ?? this.wallet.publicKey\n    const { programAuthority, nonce } = await this.getProgramAuthority()\n    const { address } = await this.getStateAddress()\n\n    return this.program.instruction.createState(nonce, {\n      accounts: {\n        state: address,\n        admin,\n        programAuthority: programAuthority,\n        rent: SYSVAR_RENT_PUBKEY,\n        systemProgram: SystemProgram.programId\n      }\n    })\n  }\n\n  async createStateTransaction(admin?: PublicKey) {\n    const ix = await this.createStateInstruction(admin)\n    return new Transaction().add(ix)\n  }\n\n  async createState(admin: PublicKey, signer: Keypair) {\n    const tx = await this.createStateTransaction(admin)\n\n    await signAndSend(tx, [signer], this.connection)\n  }\n\n  async getStateAddress() {\n    const [address, bump] = await PublicKey.findProgramAddress(\n      [Buffer.from(utils.bytes.utf8.encode(STATE_SEED))],\n      this.program.programId\n    )\n\n    return {\n      address,\n      bump\n    }\n  }\n\n  async getState() {\n    const address = (await this.getStateAddress()).address\n    return (await this.program.account.state.fetch(address)) as State\n  }\n\n  async createTickInstruction({ pair, index, payer }: CreateTick) {\n    payer = payer ?? this.wallet.publicKey\n    const state = await this.getPool(pair)\n    const { tickAddress } = await this.getTickAddress(pair, index)\n\n    return this.program.instruction.createTick(index, {\n      accounts: {\n        tick: tickAddress,\n        pool: await pair.getAddress(this.program.programId),\n        tickmap: state.tickmap,\n        payer,\n        tokenX: state.tokenX,\n        tokenY: state.tokenY,\n        rent: SYSVAR_RENT_PUBKEY,\n        systemProgram: SystemProgram.programId\n      }\n    })\n  }\n\n  async createTickTransaction(createTick: CreateTick) {\n    const ix = await this.createTickInstruction(createTick)\n    return new Transaction().add(ix)\n  }\n\n  async createTick(createTick: CreateTick, signer: Keypair) {\n    const tx = await this.createTickTransaction(createTick)\n\n    await signAndSend(tx, [signer], this.connection)\n  }\n\n  async createPositionListInstruction(owner?: PublicKey) {\n    owner = owner ?? this.wallet.publicKey\n    const { positionListAddress } = await this.getPositionListAddress(owner)\n\n    return this.program.instruction.createPositionList({\n      accounts: {\n        positionList: positionListAddress,\n        owner,\n        signer: owner,\n        rent: SYSVAR_RENT_PUBKEY,\n        systemProgram: SystemProgram.programId\n      }\n    })\n  }\n\n  async createPositionListTransaction(owner?: PublicKey) {\n    const ix = await this.createPositionListInstruction(owner)\n    return new Transaction().add(ix)\n  }\n\n  async createPositionList(owner: PublicKey, signer: Keypair) {\n    const tx = await this.createPositionListTransaction(owner)\n\n    await signAndSend(tx, [signer], this.connection)\n  }\n\n  async initPositionInstruction(\n    {\n      pair,\n      owner,\n      userTokenX,\n      userTokenY,\n      lowerTick,\n      upperTick,\n      liquidityDelta,\n      knownPrice,\n      slippage\n    }: InitPosition,\n    assumeFirstPosition: boolean = false\n  ) {\n    const state = await this.getPool(pair)\n    owner = owner ?? this.wallet.publicKey\n\n    const slippageLimitLower = calculatePriceAfterSlippage(knownPrice, slippage, false)\n    const slippageLimitUpper = calculatePriceAfterSlippage(knownPrice, slippage, true)\n\n    const upperTickIndex = upperTick !== Infinity ? upperTick : getMaxTick(pair.tickSpacing)\n    const lowerTickIndex = lowerTick !== -Infinity ? lowerTick : getMinTick(pair.tickSpacing)\n\n    // maybe in the future index cloud be store at market\n    const { tickAddress: lowerTickAddress } = await this.getTickAddress(pair, lowerTickIndex)\n    const { tickAddress: upperTickAddress } = await this.getTickAddress(pair, upperTickIndex)\n    const { positionAddress } = await this.getPositionAddress(\n      owner,\n      assumeFirstPosition ? 0 : (await this.getPositionList(owner)).head\n    )\n    const { positionListAddress } = await this.getPositionListAddress(owner)\n    const poolAddress = await pair.getAddress(this.program.programId)\n\n    return this.program.instruction.createPosition(\n      lowerTickIndex,\n      upperTickIndex,\n      liquidityDelta,\n      slippageLimitLower,\n      slippageLimitUpper,\n      {\n        accounts: {\n          state: this.stateAddress,\n          pool: poolAddress,\n          positionList: positionListAddress,\n          position: positionAddress,\n          tickmap: state.tickmap,\n          owner,\n          payer: owner,\n          lowerTick: lowerTickAddress,\n          upperTick: upperTickAddress,\n          tokenX: pair.tokenX,\n          tokenY: pair.tokenY,\n          accountX: userTokenX,\n          accountY: userTokenY,\n          reserveX: state.tokenXReserve,\n          reserveY: state.tokenYReserve,\n          programAuthority: this.programAuthority,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          rent: SYSVAR_RENT_PUBKEY,\n          systemProgram: SystemProgram.programId\n        }\n      }\n    )\n  }\n\n  async initPositionTx(initPosition: InitPosition) {\n    const { pair, lowerTick: lowerIndex, upperTick: upperIndex } = initPosition\n    const payer = initPosition.owner ?? this.wallet.publicKey\n\n    const lowerTick = lowerIndex === -Infinity ? getMinTick(pair.tickSpacing) : lowerIndex\n    const upperTick = upperIndex === Infinity ? getMaxTick(pair.tickSpacing) : upperIndex\n\n    // undefined - tmp solution\n    let lowerInstruction: TransactionInstruction | undefined\n    let upperInstruction: TransactionInstruction | undefined\n    let listInstruction: TransactionInstruction | undefined\n    let positionInstruction: TransactionInstruction\n    const tx = new Transaction()\n\n    let lowerExists = true\n    try {\n      await this.getTick(pair, lowerTick)\n    } catch (e) {\n      lowerExists = false\n      lowerInstruction = await this.createTickInstruction({ pair, index: lowerTick, payer })\n    }\n\n    let upperExists = true\n    try {\n      await this.getTick(pair, upperTick)\n    } catch (e) {\n      upperExists = false\n      upperInstruction = await this.createTickInstruction({ pair, index: upperTick, payer })\n    }\n\n    const { positionListAddress } = await this.getPositionListAddress(payer)\n    const account = await this.connection.getAccountInfo(positionListAddress)\n\n    let listExists = true\n    if (account === null) {\n      listExists = false\n      listInstruction = await this.createPositionListInstruction(payer)\n      positionInstruction = await this.initPositionInstruction(initPosition, true)\n    } else {\n      positionInstruction = await this.initPositionInstruction(initPosition, false)\n    }\n\n    if (!lowerExists && lowerInstruction) {\n      tx.add(lowerInstruction)\n    }\n    if (!upperExists && upperInstruction) {\n      tx.add(upperInstruction)\n    }\n    if (!listExists && listInstruction) {\n      tx.add(listInstruction)\n    }\n\n    return tx.add(positionInstruction)\n  }\n\n  async initPosition(initPosition: InitPosition, signer: Keypair) {\n    const tx = await this.initPositionTx(initPosition)\n\n    await signAndSend(tx, [signer], this.connection)\n  }\n\n  async initPoolAndPositionTx(\n    {\n      pair,\n      owner,\n      userTokenX,\n      userTokenY,\n      lowerTick,\n      upperTick,\n      liquidityDelta,\n      initTick,\n      knownPrice,\n      slippage\n    }: InitPoolAndPosition,\n    payer?: Keypair\n  ) {\n    const payerPubkey = payer?.publicKey ?? this.wallet.publicKey\n    const bitmapKeypair = Keypair.generate()\n    const tokenXReserve = Keypair.generate()\n    const tokenYReserve = Keypair.generate()\n    const tick = initTick ?? 0\n\n    const setCuIx = computeUnitsInstruction(1_400_000, payerPubkey)\n    const { address: stateAddress } = await this.getStateAddress()\n\n    const [poolAddress] = await pair.getAddressAndBump(this.program.programId)\n    const { address: feeTierAddress } = await this.getFeeTierAddress(pair.feeTier)\n\n    const { positionListAddress } = await this.getPositionListAddress(payerPubkey)\n    const { tickAddress } = await this.getTickAddress(pair, lowerTick)\n    const { tickAddress: tickAddressUpper } = await this.getTickAddress(pair, upperTick)\n\n    const listExists = (await this.connection.getAccountInfo(positionListAddress)) !== null\n    const head = listExists ? (await this.getPositionList(payerPubkey)).head : 0\n\n    const { positionAddress } = await this.getPositionAddress(payerPubkey, head)\n\n    const transaction = new Transaction({\n      feePayer: payerPubkey\n    })\n\n    transaction\n      .add(setCuIx)\n      .add(\n        SystemProgram.createAccount({\n          fromPubkey: payerPubkey,\n          newAccountPubkey: bitmapKeypair.publicKey,\n          space: this.program.account.tickmap.size,\n          lamports: await this.connection.getMinimumBalanceForRentExemption(\n            this.program.account.tickmap.size\n          ),\n          programId: this.program.programId\n        })\n      )\n      .add(\n        this.program.instruction.createPool(tick, {\n          accounts: {\n            state: stateAddress,\n            pool: poolAddress,\n            feeTier: feeTierAddress,\n            tickmap: bitmapKeypair.publicKey,\n            tokenX: pair.tokenX,\n            tokenY: pair.tokenY,\n            tokenXReserve: tokenXReserve.publicKey,\n            tokenYReserve: tokenYReserve.publicKey,\n            authority: this.programAuthority,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            payer: payerPubkey,\n            rent: SYSVAR_RENT_PUBKEY,\n            systemProgram: SystemProgram.programId\n          }\n        })\n      )\n      .add(\n        this.program.instruction.createTick(lowerTick, {\n          accounts: {\n            tick: tickAddress,\n            pool: poolAddress,\n            tickmap: bitmapKeypair.publicKey,\n            payer: payerPubkey,\n            tokenX: pair.tokenX,\n            tokenY: pair.tokenY,\n            rent: SYSVAR_RENT_PUBKEY,\n            systemProgram: SystemProgram.programId\n          }\n        })\n      )\n      .add(\n        this.program.instruction.createTick(upperTick, {\n          accounts: {\n            tick: tickAddressUpper,\n            pool: poolAddress,\n            tickmap: bitmapKeypair.publicKey,\n            payer: payerPubkey,\n            tokenX: pair.tokenX,\n            tokenY: pair.tokenY,\n            rent: SYSVAR_RENT_PUBKEY,\n            systemProgram: SystemProgram.programId\n          }\n        })\n      )\n    if (!listExists) transaction.add(await this.createPositionListInstruction(payerPubkey))\n\n    const slippageLimitLower = calculatePriceAfterSlippage(knownPrice, slippage, false)\n    const slippageLimitUpper = calculatePriceAfterSlippage(knownPrice, slippage, true)\n\n    transaction.add(\n      this.program.instruction.createPosition(\n        lowerTick,\n        upperTick,\n        liquidityDelta,\n        slippageLimitLower,\n        slippageLimitUpper,\n        {\n          accounts: {\n            state: this.stateAddress,\n            pool: poolAddress,\n            positionList: positionListAddress,\n            position: positionAddress,\n            tickmap: bitmapKeypair.publicKey,\n            owner: payerPubkey,\n            payer: payerPubkey,\n            lowerTick: tickAddress,\n            upperTick: tickAddressUpper,\n            tokenX: pair.tokenX,\n            tokenY: pair.tokenY,\n            accountX: userTokenX,\n            accountY: userTokenY,\n            reserveX: tokenXReserve.publicKey,\n            reserveY: tokenYReserve.publicKey,\n            programAuthority: this.programAuthority,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            rent: SYSVAR_RENT_PUBKEY,\n            systemProgram: SystemProgram.programId\n          }\n        }\n      )\n    )\n\n    return {\n      transaction,\n      signers: [bitmapKeypair, tokenXReserve, tokenYReserve]\n    }\n  }\n\n  async initPoolAndPosition(createPool: InitPoolAndPosition, signer: Keypair) {\n    const { transaction, signers } = await this.initPoolAndPositionTx(createPool, signer)\n\n    await signAndSend(transaction, [signer, ...signers], this.connection)\n  }\n\n  async swapInstruction(swap: Swap) {\n    const {\n      pair,\n      xToY,\n      amount,\n      estimatedPriceAfterSwap,\n      slippage,\n      accountX,\n      accountY,\n      byAmountIn,\n      referralAccount\n    } = swap\n    const owner = swap.owner ?? this.wallet.publicKey\n\n    const [pool, tickmap, poolAddress] = await Promise.all([\n      this.getPool(pair),\n      this.getTickmap(pair),\n      pair.getAddress(this.program.programId)\n    ])\n\n    const priceLimit = calculatePriceAfterSlippage(estimatedPriceAfterSwap, slippage, !xToY).v\n\n    const indexesInDirection = findClosestTicks(\n      tickmap.bitmap,\n      pool.currentTickIndex,\n      pool.tickSpacing,\n      referralAccount ? TICK_CROSSES_PER_IX - 1 : TICK_CROSSES_PER_IX,\n      Infinity,\n      xToY ? 'down' : 'up'\n    )\n\n    const indexesInReverse = findClosestTicks(\n      tickmap.bitmap,\n      pool.currentTickIndex,\n      pool.tickSpacing,\n      1,\n      Infinity,\n      xToY ? 'up' : 'down'\n    )\n\n    const remainingAccounts = await Promise.all(\n      indexesInDirection.concat(indexesInReverse).map(async index => {\n        const { tickAddress } = await this.getTickAddress(pair, index)\n        return tickAddress\n      })\n    )\n\n    if (referralAccount) {\n      remainingAccounts.unshift(referralAccount)\n    }\n\n    // trunk-ignore(eslint)\n    const ra: Array<{ pubkey: PublicKey; isWritable: boolean; isSigner: boolean }> =\n      remainingAccounts.map(pubkey => {\n        return { pubkey, isWritable: true, isSigner: false }\n      })\n\n    const tx: Transaction = new Transaction()\n\n    const swapIx = this.program.instruction.swap(xToY, amount, byAmountIn, priceLimit, {\n      remainingAccounts: ra,\n      accounts: {\n        state: this.stateAddress,\n        pool: poolAddress,\n        tickmap: pool.tickmap,\n        reserveX: pool.tokenXReserve,\n        reserveY: pool.tokenYReserve,\n        owner,\n        accountX,\n        accountY,\n        programAuthority: this.programAuthority,\n        tokenProgram: TOKEN_PROGRAM_ID\n      }\n    })\n    tx.add(swapIx)\n    return tx\n  }\n\n  async swapTransaction(swap: Swap) {\n    const setCuIx = computeUnitsInstruction(1_400_000, swap.owner ?? this.wallet.publicKey)\n    const swapIx = await this.swapInstruction(swap)\n    return new Transaction().add(setCuIx).add(swapIx)\n  }\n\n  async swap(swap: Swap, signer: Keypair) {\n    const tx = await this.swapTransaction(swap)\n\n    return await signAndSend(tx, [signer], this.connection)\n  }\n\n  async getReserveBalances(pair: Pair, tokenX: Token, tokenY: Token) {\n    const state = await this.getPool(pair)\n\n    const accounts = await Promise.all([\n      tokenX.getAccountInfo(state.tokenXReserve),\n      tokenY.getAccountInfo(state.tokenYReserve)\n    ])\n\n    return { x: accounts[0].amount, y: accounts[1].amount }\n  }\n\n  async claimFeeInstruction(claimFee: ClaimFee) {\n    const { pair, userTokenX, userTokenY, index } = claimFee\n    const owner = claimFee.owner ?? this.wallet.publicKey\n\n    const state = await this.getPool(pair)\n    const { positionAddress } = await this.getPositionAddress(owner, index)\n    const position = await this.getPosition(owner, index)\n    const { tickAddress: lowerTickAddress } = await this.getTickAddress(\n      pair,\n      position.lowerTickIndex\n    )\n    const { tickAddress: upperTickAddress } = await this.getTickAddress(\n      pair,\n      position.upperTickIndex\n    )\n\n    return this.program.instruction.claimFee(\n      index,\n      position.lowerTickIndex,\n      position.upperTickIndex,\n      {\n        accounts: {\n          state: this.stateAddress,\n          pool: await pair.getAddress(this.program.programId),\n          position: positionAddress,\n          lowerTick: lowerTickAddress,\n          upperTick: upperTickAddress,\n          owner,\n          tokenX: pair.tokenX,\n          tokenY: pair.tokenY,\n          accountX: userTokenX,\n          accountY: userTokenY,\n          reserveX: state.tokenXReserve,\n          reserveY: state.tokenYReserve,\n          programAuthority: this.programAuthority,\n          tokenProgram: TOKEN_PROGRAM_ID\n        }\n      }\n    )\n  }\n\n  async claimFeeTransaction(claimFee: ClaimFee) {\n    const ix = await this.claimFeeInstruction(claimFee)\n    return new Transaction().add(ix)\n  }\n\n  async claimFee(claimFee: ClaimFee, signer: Keypair) {\n    const tx = await this.claimFeeTransaction(claimFee)\n\n    await signAndSend(tx, [signer], this.connection)\n  }\n\n  async withdrawProtocolFeeInstruction(withdrawProtocolFee: WithdrawProtocolFee) {\n    const { pair, accountX, accountY } = withdrawProtocolFee\n    const admin = withdrawProtocolFee.admin ?? this.wallet.publicKey\n\n    const pool = await this.getPool(pair)\n\n    return this.program.instruction.withdrawProtocolFee({\n      accounts: {\n        state: this.stateAddress,\n        pool: await pair.getAddress(this.program.programId),\n        tokenX: pool.tokenX,\n        tokenY: pool.tokenY,\n        reserveX: pool.tokenXReserve,\n        reserveY: pool.tokenYReserve,\n        accountX,\n        accountY,\n        authority: admin,\n        programAuthority: this.programAuthority,\n        tokenProgram: TOKEN_PROGRAM_ID\n      }\n    })\n  }\n\n  async withdrawProtocolFeeTransaction(withdrawProtocolFee: WithdrawProtocolFee) {\n    const ix = await this.withdrawProtocolFeeInstruction(withdrawProtocolFee)\n    return new Transaction().add(ix)\n  }\n\n  // Admin function\n  async withdrawProtocolFee(withdrawProtocolFee: WithdrawProtocolFee, signer: Keypair) {\n    const tx = await this.withdrawProtocolFeeTransaction(withdrawProtocolFee)\n\n    await signAndSend(tx, [signer], this.connection)\n  }\n\n  async removePositionInstruction(removePosition: RemovePosition): Promise<TransactionInstruction> {\n    const { pair, index, userTokenX, userTokenY } = removePosition\n    const owner = removePosition.owner ?? this.wallet.publicKey\n\n    const positionList = await this.getPositionList(owner)\n    const { positionListAddress } = await this.getPositionListAddress(owner)\n    const { positionAddress: removedPositionAddress } = await this.getPositionAddress(owner, index)\n    const { positionAddress: lastPositionAddress } = await this.getPositionAddress(\n      owner,\n      positionList.head - 1\n    )\n\n    const state = await this.getPool(pair)\n    const position = await this.getPosition(owner, index)\n\n    const { tickAddress: lowerTickAddress } = await this.getTickAddress(\n      pair,\n      position.lowerTickIndex\n    )\n    const { tickAddress: upperTickAddress } = await this.getTickAddress(\n      pair,\n      position.upperTickIndex\n    )\n\n    return this.program.instruction.removePosition(\n      index,\n      position.lowerTickIndex,\n      position.upperTickIndex,\n      {\n        accounts: {\n          state: this.stateAddress,\n          owner: owner,\n          removedPosition: removedPositionAddress,\n          positionList: positionListAddress,\n          lastPosition: lastPositionAddress,\n          pool: await pair.getAddress(this.program.programId),\n          tickmap: state.tickmap,\n          lowerTick: lowerTickAddress,\n          upperTick: upperTickAddress,\n          tokenX: pair.tokenX,\n          tokenY: pair.tokenY,\n          accountX: userTokenX,\n          accountY: userTokenY,\n          reserveX: state.tokenXReserve,\n          reserveY: state.tokenYReserve,\n          programAuthority: this.programAuthority,\n          tokenProgram: TOKEN_PROGRAM_ID\n        }\n      }\n    )\n  }\n\n  async removePositionTransaction(removePosition: RemovePosition) {\n    const ix = await this.removePositionInstruction(removePosition)\n    return new Transaction().add(ix)\n  }\n\n  async removePosition(removePosition: RemovePosition, signer: Keypair) {\n    const tx = await this.removePositionTransaction(removePosition)\n\n    await signAndSend(tx, [signer], this.connection)\n  }\n\n  async transferPositionOwnershipInstruction(\n    transferPositionOwnership: TransferPositionOwnership\n  ): Promise<TransactionInstruction> {\n    const { index } = transferPositionOwnership\n    const owner = transferPositionOwnership.owner ?? this.wallet.publicKey\n    const recipient = transferPositionOwnership.recipient ?? this.wallet.publicKey\n\n    const { positionListAddress: ownerList } = await this.getPositionListAddress(owner)\n    const { positionListAddress: recipientList } = await this.getPositionListAddress(recipient)\n\n    const ownerPositionList = await this.getPositionList(owner)\n    const { positionAddress: removedPosition } = await this.getPositionAddress(owner, index)\n    const { positionAddress: lastPosition } = await this.getPositionAddress(\n      owner,\n      ownerPositionList.head - 1\n    )\n    const { positionAddress: newPosition } = await this.getNewPositionAddress(recipient)\n\n    return this.program.instruction.transferPositionOwnership(index, {\n      accounts: {\n        owner,\n        recipient,\n        ownerList,\n        recipientList,\n        lastPosition,\n        removedPosition,\n        newPosition,\n        rent: SYSVAR_RENT_PUBKEY,\n        systemProgram: SystemProgram.programId\n      }\n    })\n  }\n\n  async transferPositionOwnershipTransaction(transferPositionOwnership: TransferPositionOwnership) {\n    const ix = await this.transferPositionOwnershipInstruction(transferPositionOwnership)\n    return new Transaction().add(ix)\n  }\n\n  async transferPositionOwnership(\n    transferPositionOwnership: TransferPositionOwnership,\n    signer: Keypair\n  ) {\n    const tx = await this.transferPositionOwnershipTransaction(transferPositionOwnership)\n\n    await signAndSend(tx, [signer], this.connection)\n  }\n\n  async updateSecondsPerLiquidityInstruction(updateSecondsPerLiquidity: UpdateSecondsPerLiquidity) {\n    const { pair, signer, lowerTickIndex, upperTickIndex, index } = updateSecondsPerLiquidity\n    const owner = updateSecondsPerLiquidity.owner ?? this.wallet.publicKey\n\n    const { tickAddress: lowerTickAddress } = await this.getTickAddress(pair, lowerTickIndex)\n    const { tickAddress: upperTickAddress } = await this.getTickAddress(pair, upperTickIndex)\n    const poolAddress = await pair.getAddress(this.program.programId)\n    const { positionAddress } = await this.getPositionAddress(owner, index)\n\n    return this.program.instruction.updateSecondsPerLiquidity(\n      lowerTickIndex,\n      upperTickIndex,\n      index,\n      {\n        accounts: {\n          pool: poolAddress,\n          lowerTick: lowerTickAddress,\n          upperTick: upperTickAddress,\n          position: positionAddress,\n          tokenX: pair.tokenX,\n          tokenY: pair.tokenY,\n          owner,\n          signer: signer ?? owner,\n          rent: SYSVAR_RENT_PUBKEY,\n          systemProgram: SystemProgram.programId\n        }\n      }\n    )\n  }\n\n  async updateSecondsPerLiquidityTransaction(updateSecondsPerLiquidity: UpdateSecondsPerLiquidity) {\n    const ix = await this.updateSecondsPerLiquidityInstruction(updateSecondsPerLiquidity)\n    return new Transaction().add(ix)\n  }\n\n  async updateSecondsPerLiquidity(\n    updateSecondsPerLiquidity: UpdateSecondsPerLiquidity,\n    signer: Keypair\n  ) {\n    const tx = await this.updateSecondsPerLiquidityTransaction(updateSecondsPerLiquidity)\n\n    await signAndSend(tx, [signer], this.connection)\n  }\n\n  async initializeOracle({ pair, payer }: InitializeOracle) {\n    const oracleKeypair = Keypair.generate()\n    const poolAddress = await pair.getAddress(this.program.programId)\n\n    return await this.program.rpc.initializeOracle({\n      accounts: {\n        pool: poolAddress,\n        oracle: oracleKeypair.publicKey,\n        tokenX: pair.tokenX,\n        tokenY: pair.tokenY,\n        payer: payer.publicKey,\n        rent: SYSVAR_RENT_PUBKEY,\n        systemProgram: SystemProgram.programId\n      },\n      signers: [payer, oracleKeypair],\n      instructions: [await this.program.account.oracle.createInstruction(oracleKeypair)]\n    })\n  }\n\n  async getOracle(pair: Pair) {\n    const pool = await this.getPool(pair)\n    return await this.program.account.oracle.fetch(pool.oracleAddress)\n  }\n\n  async changeProtocolFeeInstruction(changeProtocolFee: ChangeProtocolFee) {\n    let { pair, admin, protocolFee } = changeProtocolFee\n    admin = admin ?? this.wallet.publicKey\n\n    const { address: stateAddress } = await this.getStateAddress()\n    const poolAddress = await pair.getAddress(this.program.programId)\n\n    return this.program.instruction.changeProtocolFee(protocolFee, {\n      accounts: {\n        state: stateAddress,\n        pool: poolAddress,\n        tokenX: pair.tokenX,\n        tokenY: pair.tokenY,\n        admin,\n        programAuthority: this.programAuthority\n      }\n    })\n  }\n\n  async changeProtocolFeeTransaction(changeProtocolFee: ChangeProtocolFee) {\n    const ix = await this.changeProtocolFeeInstruction(changeProtocolFee)\n    return new Transaction().add(ix)\n  }\n\n  async changeProtocolFee(changeProtocolFee: ChangeProtocolFee, signer: Keypair) {\n    const tx = await this.changeProtocolFeeTransaction(changeProtocolFee)\n\n    await signAndSend(tx, [signer], this.connection)\n  }\n\n  async changeFeeReceiverInstruction(changeFeeReceiver: ChangeFeeReceiver) {\n    const { pair, feeReceiver } = changeFeeReceiver\n    const adminPubkey = changeFeeReceiver.admin ?? this.wallet.publicKey\n    const { address: stateAddress } = await this.getStateAddress()\n    const poolAddress = await pair.getAddress(this.program.programId)\n\n    return this.program.instruction.changeFeeReceiver({\n      accounts: {\n        state: stateAddress,\n        pool: poolAddress,\n        tokenX: pair.tokenX,\n        tokenY: pair.tokenY,\n        admin: adminPubkey,\n        feeReceiver: feeReceiver\n      }\n    })\n  }\n\n  async changeFeeReceiverTransaction(changeFeeReceiver: ChangeFeeReceiver) {\n    const ix = await this.changeFeeReceiverInstruction(changeFeeReceiver)\n\n    return new Transaction().add(ix)\n  }\n\n  async changeFeeReceiver(changeFeeReceiver: ChangeFeeReceiver, signer: Keypair) {\n    const tx = await this.changeFeeReceiverTransaction(changeFeeReceiver)\n\n    await signAndSend(tx, [signer], this.connection)\n  }\n\n  async getWholeLiquidity(pair: Pair) {\n    const poolPublicKey = await pair.getAddress(this.program.programId)\n    const positions: Position[] = (\n      await this.program.account.position.all([\n        {\n          memcmp: { bytes: bs58.encode(poolPublicKey.toBuffer()), offset: 40 }\n        }\n      ])\n    ).map(a => a.account) as Position[]\n    let liquidity = new BN(0)\n    for (const position of positions) {\n      liquidity = liquidity.add(position.liquidity.v)\n    }\n\n    return liquidity\n  }\n\n  async getGlobalFee(pair: Pair) {\n    const pool = await this.getPool(pair)\n    const { feeProtocolTokenX, feeProtocolTokenY, protocolFee } = pool\n\n    const feeX = feeProtocolTokenX.mul(DENOMINATOR).div(protocolFee.v)\n    const feeY = feeProtocolTokenY.mul(DENOMINATOR).div(protocolFee.v)\n\n    return { feeX, feeY }\n  }\n\n  async getVolume(pair: Pair) {\n    const pool = await this.getPool(pair)\n    const { feeProtocolTokenX, feeProtocolTokenY, protocolFee, fee } = pool\n\n    const feeDenominator = protocolFee.v.mul(fee.v).div(DENOMINATOR)\n\n    const volumeX = feeProtocolTokenX.mul(DENOMINATOR).div(feeDenominator)\n    const volumeY = feeProtocolTokenY.mul(DENOMINATOR).div(feeDenominator)\n\n    return { volumeX, volumeY }\n  }\n\n  async getAllPools() {\n    return (await this.program.account.pool.all([])).map(\n      ({ account }) => account\n    ) as PoolStructure[]\n  }\n\n  async getPairLiquidityValues(pair: Pair) {\n    const pool = await this.getPool(pair)\n    const poolPublicKey = await pair.getAddress(this.program.programId)\n    const positions: Position[] = (\n      await this.program.account.position.all([\n        {\n          memcmp: { bytes: bs58.encode(poolPublicKey.toBuffer()), offset: 40 }\n        }\n      ])\n    ).map(({ account }) => account) as Position[]\n\n    let liquidityX = new BN(0)\n    let liquidityY = new BN(0)\n    for (const position of positions) {\n      let xVal, yVal\n\n      try {\n        xVal = getX(\n          position.liquidity.v,\n          calculatePriceSqrt(position.upperTickIndex).v,\n          pool.sqrtPrice.v,\n          calculatePriceSqrt(position.lowerTickIndex).v\n        )\n      } catch (error) {\n        xVal = new BN(0)\n      }\n\n      try {\n        yVal = getY(\n          position.liquidity.v,\n          calculatePriceSqrt(position.upperTickIndex).v,\n          pool.sqrtPrice.v,\n          calculatePriceSqrt(position.lowerTickIndex).v\n        )\n      } catch (error) {\n        yVal = new BN(0)\n      }\n\n      liquidityX = liquidityX.add(xVal)\n      liquidityY = liquidityY.add(yVal)\n    }\n\n    return { liquidityX, liquidityY }\n  }\n}\n\nexport interface Decimal {\n  v: BN\n}\n\nexport interface FeeGrowth {\n  v: BN\n}\n\nexport interface State {\n  admin: PublicKey\n  nonce: number\n  authority: PublicKey\n  bump: number\n}\n\nexport interface FeeTierStructure {\n  fee: Decimal\n  tickSpacing: number\n  bump: number\n}\n\nexport interface PoolStructure {\n  tokenX: PublicKey\n  tokenY: PublicKey\n  tokenXReserve: PublicKey\n  tokenYReserve: PublicKey\n  positionIterator: BN\n  tickSpacing: number\n  fee: Decimal\n  protocolFee: Decimal\n  liquidity: Decimal\n  sqrtPrice: Decimal\n  currentTickIndex: number\n  tickmap: PublicKey\n  feeGrowthGlobalX: FeeGrowth\n  feeGrowthGlobalY: FeeGrowth\n  feeProtocolTokenX: BN\n  feeProtocolTokenY: BN\n  secondsPerLiquidityGlobal: Decimal\n  startTimestamp: BN\n  lastTimestamp: BN\n  feeReceiver: PublicKey\n  oracleAddress: PublicKey\n  oracleInitialized: boolean\n  bump: number\n}\n\nexport interface PoolData {\n  currentTickIndex: number\n  tickSpacing: number\n  liquidity: Decimal\n  fee: Decimal\n  sqrtPrice: Decimal\n}\nexport interface Tickmap {\n  bitmap: number[]\n}\nexport interface TickPosition {\n  byte: number\n  bit: number\n}\nexport interface PositionList {\n  head: number\n  bump: number\n}\nexport interface Tick {\n  pool: PublicKey\n  index: number\n  sign: boolean\n  liquidityChange: Decimal\n  liquidityGross: Decimal\n  sqrtPrice: Decimal\n  feeGrowthOutsideX: Decimal\n  feeGrowthOutsideY: Decimal\n  secondsPerLiquidityOutside: Decimal\n  bump: number\n}\n\nexport interface Position {\n  owner: PublicKey\n  pool: PublicKey\n  id: BN\n  liquidity: Decimal\n  lowerTickIndex: number\n  upperTickIndex: number\n  feeGrowthInsideX: Decimal\n  feeGrowthInsideY: Decimal\n  secondsPerLiquidityInside: Decimal\n  lastSlot: BN\n  tokensOwedX: Decimal\n  tokensOwedY: Decimal\n  bump: number\n}\n\nexport interface PositionStructure {\n  tokenX: PublicKey\n  tokenY: PublicKey\n  feeTier: FeeTier\n  amountTokenX: BN\n  amountTokenY: BN\n  lowerPrice: Decimal\n  upperPrice: Decimal\n  unclaimedFeesX: BN\n  unclaimedFeesY: BN\n}\n\nexport interface FeeTier {\n  fee: BN\n  tickSpacing?: number\n}\n\nexport enum Errors {\n  ZeroAmount = '0x12c', // 0\n  ZeroOutput = '0x12d', // 1\n  WrongTick = '0x12e', // 2\n  WrongLimit = '0x12f', // 3\n  InvalidTickSpacing = '0x130', // 4\n  InvalidTickInterval = '0x131', // 5\n  NoMoreTicks = '0x132 ', // 6\n  TickNotFound = '0x133', // 7\n  PriceLimitReached = '0x134', // 8\n  RangeLimitReached = '0x135', // 9\n  TickArrayIsEmpty = '0x136', // 10\n  TickArrayAreTheSame = '0x137' // 11\n}\n\nexport interface InitPosition {\n  pair: Pair\n  owner?: PublicKey\n  userTokenX: PublicKey\n  userTokenY: PublicKey\n  lowerTick: number\n  upperTick: number\n  liquidityDelta: Decimal\n  knownPrice: Decimal\n  slippage: Decimal\n}\n\nexport interface InitPoolAndPosition extends InitPosition {\n  initTick?: number\n}\n\nexport interface ModifyPosition {\n  pair: Pair\n  owner?: PublicKey\n  userTokenX: PublicKey\n  userTokenY: PublicKey\n  index: number\n  liquidityDelta: Decimal\n}\n\nexport interface CreatePoolTx {\n  pair: Pair\n  payer?: Keypair\n  initTick?: number\n}\nexport interface CreatePool extends CreatePoolTx {\n  payer: Keypair\n}\nexport interface ClaimFee {\n  pair: Pair\n  owner?: PublicKey\n  userTokenX: PublicKey\n  userTokenY: PublicKey\n  index: number\n}\nexport interface Swap {\n  pair: Pair\n  owner?: PublicKey\n  xToY: boolean\n  amount: BN\n  estimatedPriceAfterSwap: Decimal\n  slippage: Decimal\n  accountX: PublicKey\n  accountY: PublicKey\n  byAmountIn: boolean\n  referralAccount?: PublicKey\n}\nexport interface UpdateSecondsPerLiquidity {\n  pair: Pair\n  owner?: PublicKey\n  signer?: PublicKey\n  lowerTickIndex: number\n  upperTickIndex: number\n  index: number\n}\n\nexport interface ChangeProtocolFee {\n  pair: Pair\n  admin?: PublicKey\n  protocolFee: Decimal\n}\nexport interface CreateFeeTier {\n  feeTier: FeeTier\n  admin?: PublicKey\n}\nexport interface CreateTick {\n  pair: Pair\n  index: number\n  payer?: PublicKey\n}\nexport interface WithdrawProtocolFee {\n  pair: Pair\n  accountX: PublicKey\n  accountY: PublicKey\n  admin?: PublicKey\n}\nexport interface RemovePosition {\n  pair: Pair\n  owner?: PublicKey\n  index: number\n  userTokenX: PublicKey\n  userTokenY: PublicKey\n}\nexport interface TransferPositionOwnership {\n  owner?: PublicKey\n  recipient?: PublicKey\n  index: number\n}\n\nexport interface InitializeOracle {\n  pair: Pair\n  payer: Keypair\n}\n\nexport interface ChangeFeeReceiver {\n  pair: Pair\n  admin?: PublicKey\n  feeReceiver: PublicKey\n}\n\nexport interface PositionInitData {\n  lowerTick: number\n  upperTick: number\n  liquidity: Decimal\n  amountX: BN\n  amountY: BN\n}\n\nexport interface PositionWithAddress extends Position {\n  address: PublicKey\n}\n","import { BN } from '@project-serum/anchor'\nimport invariant from 'invariant'\nimport { Decimal, Tick, Tickmap } from './market'\nimport {\n  DECIMAL,\n  DENOMINATOR,\n  getMaxTick,\n  getMinTick,\n  LIQUIDITY_DENOMINATOR,\n  LIQUIDITY_SCALE,\n  PRICE_DENOMINATOR,\n  PRICE_SCALE\n} from './utils'\n\nexport const TICK_LIMIT = 44_364\nexport const MAX_TICK = 221_818\nexport const MIN_TICK = -MAX_TICK\nexport const TICK_SEARCH_RANGE = 256\n\nexport const U64_MAX = new BN('18446744073709551615')\n\nexport interface SwapResult {\n  nextPrice: Decimal\n  amountIn: BN\n  amountOut: BN\n  feeAmount: BN\n}\n\nexport const isInitialized = (tickmap: Tickmap, index: number, tickSpacing: number) => {\n  if (index % tickSpacing !== 0) {\n    throw Error(\"invalid arguments can't check tick\")\n  }\n  const toIndex = Math.floor(index / tickSpacing) + TICK_LIMIT\n  const byte = Math.floor(toIndex / 8)\n  const bit = Math.floor(toIndex % 8)\n\n  const value = tickmap.bitmap[byte] & (1 << bit)\n\n  return value !== 0\n}\nexport const priceToTick = (val: number): number => {\n  return Math.log(val) / Math.log(1.0001)\n}\n\nexport const fromInteger = (integer: number): { v: BN } => {\n  return { v: new BN(integer).mul(DENOMINATOR) }\n}\n\nexport const calculatePriceSqrt = (tickIndex: number): Decimal => {\n  const tick = Math.abs(tickIndex)\n  if (tick > MAX_TICK) {\n    throw Error('tick over bounds')\n  }\n  let price = new BN(DENOMINATOR)\n\n  if ((tick & 0x1) !== 0) price = price.mul(new BN('1000049998750')).div(DENOMINATOR)\n  if ((tick & 0x2) !== 0) price = price.mul(new BN('1000100000000')).div(DENOMINATOR)\n  if ((tick & 0x4) !== 0) price = price.mul(new BN('1000200010000')).div(DENOMINATOR)\n  if ((tick & 0x8) !== 0) price = price.mul(new BN('1000400060004')).div(DENOMINATOR)\n  if ((tick & 0x10) !== 0) price = price.mul(new BN('1000800280056')).div(DENOMINATOR)\n  if ((tick & 0x20) !== 0) price = price.mul(new BN('1001601200560')).div(DENOMINATOR)\n  if ((tick & 0x40) !== 0) price = price.mul(new BN('1003204964963')).div(DENOMINATOR)\n  if ((tick & 0x80) !== 0) price = price.mul(new BN('1006420201726')).div(DENOMINATOR)\n  if ((tick & 0x100) !== 0) price = price.mul(new BN('1012881622442')).div(DENOMINATOR)\n  if ((tick & 0x200) !== 0) price = price.mul(new BN('1025929181080')).div(DENOMINATOR)\n  if ((tick & 0x400) !== 0) price = price.mul(new BN('1052530684591')).div(DENOMINATOR)\n  if ((tick & 0x800) !== 0) price = price.mul(new BN('1107820842005')).div(DENOMINATOR)\n  if ((tick & 0x1000) !== 0) price = price.mul(new BN('1227267017980')).div(DENOMINATOR)\n  if ((tick & 0x2000) !== 0) price = price.mul(new BN('1506184333421')).div(DENOMINATOR)\n  if ((tick & 0x4000) !== 0) price = price.mul(new BN('2268591246242')).div(DENOMINATOR)\n  if ((tick & 0x8000) !== 0) price = price.mul(new BN('5146506242525')).div(DENOMINATOR)\n  if ((tick & 0x10000) !== 0) price = price.mul(new BN('26486526504348')).div(DENOMINATOR)\n  if ((tick & 0x20000) !== 0) price = price.mul(new BN('701536086265529')).div(DENOMINATOR)\n\n  if (tickIndex < 0) {\n    return {\n      v: DENOMINATOR.mul(DENOMINATOR)\n        .div(price)\n        .mul(new BN(10).pow(new BN(PRICE_SCALE - DECIMAL)))\n    }\n  }\n\n  return { v: price.mul(new BN(10).pow(new BN(PRICE_SCALE - DECIMAL))) }\n}\n\nexport const sqrt = (num: BN): BN => {\n  if (num.lt(new BN(0))) {\n    throw new Error('Sqrt only works on non-negative inputs')\n  }\n  if (num.lt(new BN(2))) {\n    return num\n  }\n\n  const smallCand = sqrt(num.shrn(2)).shln(1)\n  const largeCand = smallCand.add(new BN(1))\n\n  if (largeCand.mul(largeCand).gt(num)) {\n    return smallCand\n  } else {\n    return largeCand\n  }\n}\n\nexport const calculatePriceAfterSlippage = (priceSqrt: Decimal, slippage: Decimal, up: boolean) => {\n  // using sqrt of slippage, because price is a sqrt\n  const multiplier = up ? slippage.v.add(DENOMINATOR) : DENOMINATOR.sub(slippage.v)\n  const slippageSqrt = sqrt(multiplier.mul(DENOMINATOR))\n\n  return { v: priceSqrt.v.mul(slippageSqrt).div(DENOMINATOR) }\n}\n\nexport const calculateSwapStep = (\n  currentPrice: Decimal,\n  targetPrice: Decimal,\n  liquidity: Decimal,\n  amount: BN,\n  byAmountIn: boolean,\n  fee: Decimal\n): SwapResult => {\n  if (liquidity.v.eqn(0)) {\n    return {\n      nextPrice: targetPrice,\n      amountIn: new BN(0),\n      amountOut: new BN(0),\n      feeAmount: new BN(0)\n    }\n  }\n\n  const aToB = currentPrice.v.gte(targetPrice.v)\n\n  let nextPrice: Decimal = { v: new BN(0) }\n  let amountIn: BN = new BN(0)\n  let amountOut: BN = new BN(0)\n  let feeAmount: BN = new BN(0)\n\n  if (byAmountIn) {\n    const amountAfterFee: BN = fromInteger(1).v.sub(fee.v).mul(amount).div(DENOMINATOR)\n    if (aToB) {\n      amountIn = getDeltaX(targetPrice, currentPrice, liquidity, true) ?? U64_MAX\n    } else {\n      amountIn = getDeltaY(targetPrice, currentPrice, liquidity, true) ?? U64_MAX\n    }\n    if (amountAfterFee.gte(amountIn)) {\n      nextPrice = targetPrice\n    } else {\n      nextPrice = getNextPriceFromInput(currentPrice, liquidity, amountAfterFee, aToB)\n    }\n  } else {\n    if (aToB) {\n      amountOut = getDeltaY(targetPrice, currentPrice, liquidity, false) ?? U64_MAX\n    } else {\n      amountOut = getDeltaX(currentPrice, targetPrice, liquidity, false) ?? U64_MAX\n    }\n    if (amount.gte(amountOut)) {\n      nextPrice = targetPrice\n    } else {\n      nextPrice = getNextPriceFromOutput(currentPrice, liquidity, amount, aToB)\n    }\n  }\n\n  const max = targetPrice.v.eq(nextPrice.v)\n\n  if (aToB) {\n    // TODO: refactor \"as BN\" casting\n    if (!(max && byAmountIn)) {\n      amountIn = getDeltaX(nextPrice, currentPrice, liquidity, true) as BN\n    }\n    if (!(max && !byAmountIn)) {\n      amountOut = getDeltaY(nextPrice, currentPrice, liquidity, false) as BN\n    }\n  } else {\n    if (!(max && byAmountIn)) {\n      amountIn = getDeltaY(currentPrice, nextPrice, liquidity, true) as BN\n    }\n    if (!(max && !byAmountIn)) {\n      amountOut = getDeltaX(currentPrice, nextPrice, liquidity, false) as BN\n    }\n  }\n\n  if (amountIn === null || amountOut === null) throw new Error('Amount would be greater than u64')\n\n  if (!byAmountIn && amountOut.gt(amount)) {\n    amountOut = amount\n  }\n\n  if (byAmountIn && !nextPrice.v.eq(targetPrice.v)) {\n    feeAmount = amount.sub(amountIn)\n  } else {\n    feeAmount = amountIn.mul(fee.v).add(DENOMINATOR.subn(1)).div(DENOMINATOR)\n  }\n\n  return {\n    nextPrice,\n    amountIn,\n    amountOut,\n    feeAmount\n  }\n}\n\nexport const getDeltaX = (\n  priceA: Decimal,\n  priceB: Decimal,\n  liquidity: Decimal,\n  up: boolean\n): BN | null => {\n  let deltaPrice: Decimal\n  if (priceA.v.gt(priceB.v)) {\n    deltaPrice = { v: priceA.v.sub(priceB.v) }\n  } else {\n    deltaPrice = { v: priceB.v.sub(priceA.v) }\n  }\n\n  const nominator: BN = liquidity.v.mul(deltaPrice.v).div(LIQUIDITY_DENOMINATOR)\n\n  if (up) {\n    const denominatorUp: BN = priceA.v.mul(priceB.v).div(PRICE_DENOMINATOR)\n    const result = nominator\n      .mul(PRICE_DENOMINATOR)\n      .add(denominatorUp.subn(1))\n      .div(denominatorUp)\n      .add(PRICE_DENOMINATOR.subn(1))\n      .div(PRICE_DENOMINATOR)\n    return result.lte(U64_MAX) ? result : null\n  } else {\n    const denominatorDown: BN = priceA.v\n      .mul(priceB.v)\n      .add(PRICE_DENOMINATOR.subn(1))\n      .div(PRICE_DENOMINATOR)\n    const result = nominator.mul(PRICE_DENOMINATOR).div(denominatorDown).div(PRICE_DENOMINATOR)\n    return result.lte(U64_MAX) ? result : null\n  }\n}\n\nexport const getDeltaY = (\n  priceA: Decimal,\n  priceB: Decimal,\n  liquidity: Decimal,\n  up: boolean\n): BN | null => {\n  let deltaPrice: Decimal\n  if (priceA.v.gt(priceB.v)) {\n    deltaPrice = { v: priceA.v.sub(priceB.v) }\n  } else {\n    deltaPrice = { v: priceB.v.sub(priceA.v) }\n  }\n\n  if (up) {\n    const result = deltaPrice.v\n      .mul(liquidity.v)\n      .add(LIQUIDITY_DENOMINATOR.subn(1))\n      .div(LIQUIDITY_DENOMINATOR)\n      .add(PRICE_DENOMINATOR.subn(1))\n      .div(PRICE_DENOMINATOR)\n    return result.lte(U64_MAX) ? result : null\n  } else {\n    const result = deltaPrice.v.mul(liquidity.v).div(LIQUIDITY_DENOMINATOR).div(PRICE_DENOMINATOR)\n    return result.lte(U64_MAX) ? result : null\n  }\n}\n\nconst getNextPriceFromInput = (\n  price: Decimal,\n  liquidity: Decimal,\n  amount: BN,\n  aToB: boolean\n): Decimal => {\n  invariant(price.v.gt(new BN(0)), 'prive should be gt 0')\n  invariant(liquidity.v.gt(new BN(0)), 'liquidity should be gt 0')\n\n  if (aToB) {\n    return getNextPriceXUp(price, liquidity, amount, true)\n  } else {\n    return getNextPriceYDown(price, liquidity, amount, true)\n  }\n}\n\nconst getNextPriceFromOutput = (\n  price: Decimal,\n  liquidity: Decimal,\n  amount: BN,\n  aToB: boolean\n): Decimal => {\n  invariant(price.v.gt(new BN(0)), 'prive should be gt 0')\n  invariant(liquidity.v.gt(new BN(0)), 'liquidity should be gt 0')\n\n  if (aToB) {\n    return getNextPriceYDown(price, liquidity, amount, false)\n  } else {\n    return getNextPriceXUp(price, liquidity, amount, false)\n  }\n}\n\n// L * price / (L +- amount * price)\nexport const getNextPriceXUp = (\n  price: Decimal,\n  liquidity: Decimal,\n  amount: BN,\n  add: boolean\n): Decimal => {\n  if (amount.eqn(0)) {\n    return price\n  }\n\n  const bigLiquidity: BN = liquidity.v.mul(new BN(10).pow(new BN(PRICE_SCALE - LIQUIDITY_SCALE)))\n  const priceMulAmount: BN = price.v.mul(amount)\n\n  let denominator: BN\n  if (add) {\n    denominator = bigLiquidity.add(priceMulAmount)\n  } else {\n    denominator = bigLiquidity.sub(priceMulAmount)\n  }\n\n  const nominator: BN = price.v\n    .mul(liquidity.v)\n    .add(LIQUIDITY_DENOMINATOR.subn(1))\n    .div(LIQUIDITY_DENOMINATOR)\n  return {\n    v: nominator.mul(PRICE_DENOMINATOR).add(denominator.subn(1)).div(denominator)\n  }\n}\n\n// price +- (amount / L)\nexport const getNextPriceYDown = (\n  price: Decimal,\n  liquidity: Decimal,\n  amount: BN,\n  add: boolean\n): Decimal => {\n  let quotient: BN\n\n  if (add) {\n    quotient = amount\n      .mul(PRICE_DENOMINATOR)\n      .mul(PRICE_DENOMINATOR)\n      .div(liquidity.v.mul(new BN(10).pow(new BN(PRICE_SCALE - LIQUIDITY_SCALE))))\n    return {\n      v: price.v.add(quotient)\n    }\n  } else {\n    quotient = amount\n      .mul(PRICE_DENOMINATOR)\n      .mul(PRICE_DENOMINATOR)\n      .add(liquidity.v.mul(new BN(10).pow(new BN(PRICE_SCALE - LIQUIDITY_SCALE))).subn(1))\n      .div(liquidity.v.mul(new BN(10).pow(new BN(PRICE_SCALE - LIQUIDITY_SCALE))))\n    return { v: price.v.sub(quotient) }\n  }\n}\n\nexport const findClosestTicks = (\n  ticks: number[],\n  current: number,\n  tickSpacing: number,\n  limit: number,\n  maxRange: number = Infinity,\n  oneWay: 'up' | 'down' | undefined = undefined\n) => {\n  if (current % tickSpacing !== 0) {\n    throw Error(\"invalid arguments can't find initialized ticks\")\n  }\n\n  const currentIndex = Math.floor(current / tickSpacing) + TICK_LIMIT\n\n  let above = currentIndex + 1\n  let below = currentIndex\n\n  const found: number[] = []\n\n  let reachedTop = oneWay === 'down'\n  let reachedBottom = oneWay === 'up'\n\n  while (found.length < limit && above - below < maxRange * 2) {\n    if (!reachedTop) {\n      const valueAbove = ticks[Math.floor(above / 8)] & (1 << above % 8)\n      if (valueAbove) found.push(above)\n      reachedTop = above >= 2 * TICK_LIMIT\n      above++\n    }\n    if (!reachedBottom) {\n      const valueBelow = ticks[Math.floor(below / 8)] & (1 << below % 8)\n      if (valueBelow) found.unshift(below)\n      reachedBottom = below < 0\n      below--\n    }\n\n    if (reachedTop && reachedBottom) {\n      break\n    }\n  }\n\n  // two can be added in the last iteration\n  if (found.length > limit) found.pop()\n\n  return found.map(i => (i - TICK_LIMIT) * tickSpacing)\n}\n\nconst mulUp = (a: BN, b: BN) => {\n  return a.mul(b).add(PRICE_DENOMINATOR.subn(1)).div(PRICE_DENOMINATOR)\n}\n\nconst divUp = (a: BN, b: BN) => {\n  return a.add(b).subn(1).div(b)\n}\n\nconst calculateY = (priceDiff: BN, liquidity: BN, roundingUp: boolean) => {\n  const shiftedLiquidity = liquidity.div(LIQUIDITY_DENOMINATOR)\n\n  if (roundingUp) {\n    return mulUp(priceDiff, shiftedLiquidity)\n  }\n  return priceDiff.mul(shiftedLiquidity).div(PRICE_DENOMINATOR)\n}\n\nconst calculateX = (nominator: BN, denominator: BN, liquidity: BN, roundingUp: boolean) => {\n  const common = liquidity.mul(nominator).div(denominator)\n  if (roundingUp) {\n    return divUp(common, LIQUIDITY_DENOMINATOR)\n  }\n  return common.div(LIQUIDITY_DENOMINATOR)\n}\n\nexport const getX = (\n  liquidity: BN,\n  upperSqrtPrice: BN,\n  currentSqrtPrice: BN,\n  lowerSqrtPrice: BN\n): BN => {\n  if (\n    upperSqrtPrice.lte(new BN(0)) ||\n    currentSqrtPrice.lte(new BN(0)) ||\n    lowerSqrtPrice.lte(new BN(0))\n  ) {\n    throw new Error('Price cannot be lower or equal 0')\n  }\n\n  let denominator: BN\n  let nominator: BN\n\n  if (currentSqrtPrice.gte(upperSqrtPrice)) {\n    return new BN(0)\n  } else if (currentSqrtPrice.lt(lowerSqrtPrice)) {\n    denominator = lowerSqrtPrice.mul(upperSqrtPrice).div(PRICE_DENOMINATOR)\n    nominator = upperSqrtPrice.sub(lowerSqrtPrice)\n  } else {\n    denominator = upperSqrtPrice.mul(currentSqrtPrice).div(PRICE_DENOMINATOR)\n    nominator = upperSqrtPrice.sub(currentSqrtPrice)\n  }\n\n  return liquidity.mul(nominator).div(denominator).div(LIQUIDITY_DENOMINATOR)\n}\n\nexport const getXfromLiquidity = (liquidity: BN, upperSqrtPrice: BN, lowerSqrtPrice: BN): BN => {\n  if (upperSqrtPrice.lte(new BN(0)) || lowerSqrtPrice.lte(new BN(0))) {\n    throw new Error('Price cannot be lower or equal 0')\n  }\n\n  const denominator = lowerSqrtPrice.mul(upperSqrtPrice).div(PRICE_DENOMINATOR)\n  const nominator = upperSqrtPrice.sub(lowerSqrtPrice)\n\n  return liquidity.mul(nominator).div(denominator).div(LIQUIDITY_DENOMINATOR)\n}\n\nexport const getY = (\n  liquidity: BN,\n  upperSqrtPrice: BN,\n  currentSqrtPrice: BN,\n  lowerSqrtPrice: BN\n): BN => {\n  if (\n    lowerSqrtPrice.lte(new BN(0)) ||\n    currentSqrtPrice.lte(new BN(0)) ||\n    upperSqrtPrice.lte(new BN(0))\n  ) {\n    throw new Error('Price cannot be 0')\n  }\n\n  let difference: BN\n  if (currentSqrtPrice.lt(lowerSqrtPrice)) {\n    return new BN(0)\n  } else if (currentSqrtPrice.gte(upperSqrtPrice)) {\n    difference = upperSqrtPrice.sub(lowerSqrtPrice)\n  } else {\n    difference = currentSqrtPrice.sub(lowerSqrtPrice)\n  }\n\n  return liquidity.mul(difference).div(PRICE_DENOMINATOR).div(LIQUIDITY_DENOMINATOR)\n}\n\nexport const getLiquidityByX = (\n  x: BN,\n  lowerTick: number,\n  upperTick: number,\n  currentSqrtPrice: Decimal,\n  roundingUp: boolean,\n  tickSpacing?: number\n) => {\n  if ((lowerTick === -Infinity || upperTick === Infinity) && tickSpacing === undefined) {\n    throw new Error('tickSpacing is required for calculating full range liquidity')\n  }\n\n  const lowerTickIndex = lowerTick !== -Infinity ? lowerTick : getMinTick(tickSpacing as number)\n  const upperTickIndex = upperTick !== Infinity ? upperTick : getMaxTick(tickSpacing as number)\n\n  const lowerSqrtPrice = calculatePriceSqrt(lowerTickIndex)\n  const upperSqrtPrice = calculatePriceSqrt(upperTickIndex)\n\n  return getLiquidityByXPrice(x, lowerSqrtPrice, upperSqrtPrice, currentSqrtPrice, roundingUp)\n}\n\nexport const getLiquidityByXPrice = (\n  x: BN,\n  lowerSqrtPrice: Decimal,\n  upperSqrtPrice: Decimal,\n  currentSqrtPrice: Decimal,\n  roundingUp: boolean\n): {\n  liquidity: Decimal\n  y: BN\n} => {\n  if (upperSqrtPrice.v.lt(currentSqrtPrice.v)) {\n    throw new Error('liquidity cannot be determined')\n  }\n\n  if (currentSqrtPrice.v.lt(lowerSqrtPrice.v)) {\n    const nominator = lowerSqrtPrice.v.mul(upperSqrtPrice.v).div(PRICE_DENOMINATOR)\n    const denominator = upperSqrtPrice.v.sub(lowerSqrtPrice.v)\n    const liquidity = x.mul(nominator).mul(LIQUIDITY_DENOMINATOR).div(denominator)\n\n    return {\n      liquidity: { v: liquidity },\n      y: new BN(0)\n    }\n  }\n\n  const nominator = currentSqrtPrice.v.mul(upperSqrtPrice.v).div(PRICE_DENOMINATOR)\n  const denominator = upperSqrtPrice.v.sub(currentSqrtPrice.v)\n  const liquidity = x.mul(nominator).div(denominator).mul(LIQUIDITY_DENOMINATOR)\n  const priceDiff = currentSqrtPrice.v.sub(lowerSqrtPrice.v)\n  const y = calculateY(priceDiff, liquidity, roundingUp)\n\n  return {\n    liquidity: { v: liquidity },\n    y\n  }\n}\n\nexport const getLiquidityByY = (\n  y: BN,\n  lowerTick: number,\n  upperTick: number,\n  currentSqrtPrice: Decimal,\n  roundingUp: boolean,\n  tickSpacing?: number\n) => {\n  if ((lowerTick === -Infinity || upperTick === Infinity) && tickSpacing === undefined) {\n    throw new Error('tickSpacing is required for calculating full range liquidity')\n  }\n\n  const lowerTickIndex = lowerTick !== -Infinity ? lowerTick : getMinTick(tickSpacing as number)\n  const upperTickIndex = upperTick !== Infinity ? upperTick : getMaxTick(tickSpacing as number)\n\n  const lowerSqrtPrice = calculatePriceSqrt(lowerTickIndex)\n  const upperSqrtPrice = calculatePriceSqrt(upperTickIndex)\n\n  return getLiquidityByYPrice(y, lowerSqrtPrice, upperSqrtPrice, currentSqrtPrice, roundingUp)\n}\n\nexport const getLiquidityByYPrice = (\n  y: BN,\n  lowerSqrtPrice: Decimal,\n  upperSqrtPrice: Decimal,\n  currentSqrtPrice: Decimal,\n  roundingUp: boolean\n) => {\n  if (currentSqrtPrice.v.lt(lowerSqrtPrice.v)) {\n    throw new Error('liquidity cannot be determined')\n  }\n\n  if (upperSqrtPrice.v.lte(currentSqrtPrice.v)) {\n    const priceDiff = upperSqrtPrice.v.sub(lowerSqrtPrice.v)\n    const liquidity = y.mul(LIQUIDITY_DENOMINATOR).mul(PRICE_DENOMINATOR).div(priceDiff)\n\n    return {\n      liquidity: { v: liquidity },\n      x: new BN(0)\n    }\n  }\n\n  const priceDiff = currentSqrtPrice.v.sub(lowerSqrtPrice.v)\n  const liquidity = y.mul(LIQUIDITY_DENOMINATOR).mul(PRICE_DENOMINATOR).div(priceDiff)\n  const denominator = currentSqrtPrice.v.mul(upperSqrtPrice.v).div(PRICE_DENOMINATOR)\n  const nominator = upperSqrtPrice.v.sub(currentSqrtPrice.v)\n  const x = calculateX(nominator, denominator, liquidity, roundingUp)\n\n  return {\n    liquidity: { v: liquidity },\n    x\n  }\n}\n\nexport const calculateFeeGrowthInside = (\n  lowerTick: Tick,\n  upperTick: Tick,\n  currentTick: number,\n  feeGrowthGlobalX: Decimal,\n  feeGrowthGlobalY: Decimal\n): [Decimal, Decimal] => {\n  const currentAboveLower = currentTick >= lowerTick.index\n  const currentBelowUpper = currentTick < upperTick.index\n\n  let feeGrowthBelowX: Decimal\n  let feeGrowthBelowY: Decimal\n  if (currentAboveLower) {\n    feeGrowthBelowX = lowerTick.feeGrowthOutsideX\n    feeGrowthBelowY = lowerTick.feeGrowthOutsideY\n  } else {\n    feeGrowthBelowX = { v: feeGrowthGlobalX.v.sub(lowerTick.feeGrowthOutsideX.v) }\n    feeGrowthBelowY = { v: feeGrowthGlobalY.v.sub(lowerTick.feeGrowthOutsideY.v) }\n  }\n\n  let feeGrowthAboveX: Decimal\n  let feeGrowthAboveY: Decimal\n  if (currentBelowUpper) {\n    feeGrowthAboveX = upperTick.feeGrowthOutsideX\n    feeGrowthAboveY = upperTick.feeGrowthOutsideY\n  } else {\n    feeGrowthAboveX = { v: feeGrowthGlobalX.v.sub(upperTick.feeGrowthOutsideX.v) }\n    feeGrowthAboveY = { v: feeGrowthGlobalY.v.sub(upperTick.feeGrowthOutsideY.v) }\n  }\n\n  const feeGrowthInsideX: Decimal = {\n    v: feeGrowthGlobalX.v.sub(feeGrowthBelowX.v).sub(feeGrowthAboveX.v)\n  }\n  const feeGrowthInsideY: Decimal = {\n    v: feeGrowthGlobalY.v.sub(feeGrowthBelowY.v).sub(feeGrowthAboveY.v)\n  }\n\n  return [feeGrowthInsideX, feeGrowthInsideY]\n}\n\nexport const isEnoughAmountToPushPrice = (\n  amount: BN,\n  currentPriceSqrt: Decimal,\n  liquidity: Decimal,\n  fee: Decimal,\n  byAmountIn: boolean,\n  aToB: boolean\n) => {\n  if (liquidity.v.eqn(0)) {\n    return true\n  }\n\n  let nextSqrtPrice: Decimal\n\n  if (byAmountIn) {\n    const amountAfterFee: BN = fromInteger(1).v.sub(fee.v).mul(amount).div(DENOMINATOR)\n    nextSqrtPrice = getNextPriceFromInput(currentPriceSqrt, liquidity, amountAfterFee, aToB)\n  } else {\n    nextSqrtPrice = getNextPriceFromOutput(currentPriceSqrt, liquidity, amount, aToB)\n  }\n\n  return !currentPriceSqrt.v.eq(nextSqrtPrice.v)\n}\n\nexport const calculatePriceImpact = (startingSqrtPrice: BN, endingSqrtPrice: BN): BN => {\n  const startingPrice = startingSqrtPrice.mul(startingSqrtPrice)\n  const endingPrice = endingSqrtPrice.mul(endingSqrtPrice)\n  let priceQuotient\n  if (endingPrice.gte(startingPrice)) {\n    priceQuotient = DENOMINATOR.mul(startingPrice).div(endingPrice)\n  } else {\n    priceQuotient = DENOMINATOR.mul(endingPrice).div(startingPrice)\n  }\n  return DENOMINATOR.sub(priceQuotient)\n}\n\nexport const calculateMinReceivedTokensByAmountIn = (\n  targetSqrtPrice: BN,\n  xToY: boolean,\n  amountIn: BN,\n  fee: BN\n) => {\n  const targetPrice = targetSqrtPrice.mul(targetSqrtPrice)\n  let amountOut: BN\n  if (xToY) {\n    amountOut = amountIn.mul(targetPrice).div(PRICE_DENOMINATOR).div(PRICE_DENOMINATOR)\n  } else {\n    amountOut = amountIn.mul(PRICE_DENOMINATOR).mul(PRICE_DENOMINATOR).div(targetPrice)\n  }\n  return DENOMINATOR.sub(fee).mul(amountOut).div(DENOMINATOR)\n}\n","import { AnchorProvider, BN, utils } from '@project-serum/anchor'\nimport {\n  ConfirmOptions,\n  Connection,\n  Keypair,\n  PublicKey,\n  sendAndConfirmRawTransaction,\n  Transaction,\n  TransactionInstruction\n} from '@solana/web3.js'\nimport { calculatePriceSqrt, MAX_TICK, Pair, TICK_LIMIT, Market } from '.'\nimport {\n  Decimal,\n  FeeTier,\n  FEE_TIER,\n  PoolStructure,\n  Tickmap,\n  Tick,\n  PoolData,\n  Errors,\n  PositionInitData\n} from './market'\nimport {\n  calculateMinReceivedTokensByAmountIn,\n  calculatePriceAfterSlippage,\n  calculatePriceImpact,\n  calculateSwapStep,\n  getLiquidityByX,\n  getLiquidityByY,\n  getXfromLiquidity,\n  isEnoughAmountToPushPrice,\n  sqrt\n} from './math'\nimport { alignTickToSpacing, getTickFromPrice } from './tick'\nimport { getNextTick, getPreviousTick, getSearchLimit } from './tickmap'\nimport { struct, u32, u8 } from '@solana/buffer-layout'\nimport { u64 } from '@solana/spl-token'\nimport { TokenInfo, TokenListContainer, TokenListProvider } from '@solana/spl-token-registry'\n\nexport const SEED = 'Invariant'\nexport const DECIMAL = 12\nexport const LIQUIDITY_SCALE = 6\nexport const GROWTH_SCALE = 24\nexport const PRICE_SCALE = 24\nexport const FEE_DECIMAL = 5\nexport const DENOMINATOR = new BN(10).pow(new BN(DECIMAL))\nexport const LIQUIDITY_DENOMINATOR = new BN(10).pow(new BN(LIQUIDITY_SCALE))\nexport const PRICE_DENOMINATOR = new BN(10).pow(new BN(PRICE_SCALE))\nexport const GROWTH_DENOMINATOR = new BN(10).pow(new BN(GROWTH_SCALE))\nexport const FEE_OFFSET = new BN(10).pow(new BN(DECIMAL - FEE_DECIMAL))\nexport const FEE_DENOMINATOR = 10 ** FEE_DECIMAL\nexport const U128MAX = new BN('340282366920938463463374607431768211455')\nexport const CONCENTRATION_FACTOR = 1.00001526069123\nexport const PROTOCOL_FEE: number = 0.01\n\nexport enum ERRORS {\n  SIGNATURE = 'Error: Signature verification failed',\n  SIGNER = 'Error: unknown signer',\n  PANICKED = 'Program failed to complete',\n  SERIALIZATION = '0xbbc',\n  ALLOWANCE = 'custom program error: 0x1',\n  NO_SIGNERS = 'Error: No signers',\n  CONSTRAINT_RAW = '0x7d3',\n  CONSTRAINT_SEEDS = '0x7d6',\n  ACCOUNT_OWNED_BY_WRONG_PROGRAM = '0xbbf'\n}\n\nexport enum INVARIANT_ERRORS {\n  ZERO_AMOUNT = '0x1770',\n  ZERO_OUTPUT = '0x1771',\n  WRONG_TICK = '0x1772',\n  WRONG_LIMIT = '0x1773',\n  INVALID_TICK_INDEX = '0x1774',\n  INVALID_TICK_INTERVAL = '0x1775',\n  NO_MORE_TICKS = '0x1776',\n  TICK_NOT_FOUND = '0x1777',\n  PRICE_LIMIT_REACHED = '0x1778',\n  INVALID_TICK_LIQUIDITY = '0x1779',\n  EMPTY_POSITION_POKES = '0x177a',\n  INVALID_POSITION_LIQUIDITY = '0x177b',\n  INVALID_POOL_LIQUIDITY = '0x177c',\n  INVALID_POSITION_INDEX = '0x177d',\n  POSITION_WITHOUT_LIQUIDITY = '0x177e',\n  INVALID_POOL_TOKEN_ADDRESSES = '0x1780',\n  NO_GAIN_SWAP = '0x1785',\n  INVALID_TOKEN_ACCOUNT = '0x1786',\n  INVALID_ADMIN = '0x1787',\n  INVALID_AUTHORITY = '0x1788',\n  INVALID_OWNER = '0x1789',\n  INVALID_MINT = '0x178a',\n  INVALID_TICKMAP = '0x178b',\n  INVALID_TICKMAP_OWNER = '0x178c',\n  INVALID_LIST_OWNER = '0x178d',\n  INVALID_TICK_SPACING = '0x178e'\n}\n\nexport interface SimulateSwapPrice {\n  xToY: boolean\n  byAmountIn: boolean\n  swapAmount: BN\n  currentPrice: Decimal\n  slippage: Decimal\n  tickmap: Tickmap\n  pool: PoolStructure\n  market: Market\n  pair: Pair\n}\n\nexport interface SimulateSwapInterface {\n  xToY: boolean\n  byAmountIn: boolean\n  swapAmount: BN\n  priceLimit: Decimal\n  slippage: Decimal\n  ticks: Map<number, Tick>\n  tickmap: Tickmap\n  pool: PoolData\n}\n\nexport interface Simulation {\n  xToY: boolean\n  byAmountIn: boolean\n  swapAmount: BN\n  priceLimit: Decimal\n  slippage: Decimal\n  pool: PoolData\n}\n\nexport interface SimulationResult {\n  status: SimulationStatus\n  amountPerTick: BN[]\n  crossedTicks: number[]\n  accumulatedAmountIn: BN\n  accumulatedAmountOut: BN\n  accumulatedFee: BN\n  minReceived: BN\n  priceImpact: BN\n  priceAfterSwap: BN\n}\n\nexport interface FeeGrowthInside {\n  tickLower: Tick\n  tickUpper: Tick\n  tickCurrent: number\n  feeGrowthGlobalX: Decimal\n  feeGrowthGlobalY: Decimal\n}\n\nexport interface TokensOwed {\n  position: PositionClaimData\n  feeGrowthInsideX: BN\n  feeGrowthInsideY: BN\n}\n\nexport interface SimulateClaim {\n  position: PositionClaimData\n  tickLower: Tick\n  tickUpper: Tick\n  tickCurrent: number\n  feeGrowthGlobalX: Decimal\n  feeGrowthGlobalY: Decimal\n}\nexport interface PositionClaimData {\n  liquidity: Decimal\n  feeGrowthInsideX: Decimal\n  feeGrowthInsideY: Decimal\n  tokensOwedX: Decimal\n  tokensOwedY: Decimal\n}\n\nexport interface CloserLimit {\n  sqrtPriceLimit: Decimal\n  xToY: boolean\n  currentTick: number\n  tickSpacing: number\n  tickmap: Tickmap\n}\n\nexport interface TickState {\n  index: number\n  initialized: boolean\n}\nexport interface CloserLimitResult {\n  swapLimit: Decimal\n  limitingTick: TickState | null\n}\n\nexport const computeUnitsInstruction = (units: number, wallet: PublicKey) => {\n  const program = new PublicKey('ComputeBudget111111111111111111111111111111')\n  const params = { instruction: 0, units: units, additional_fee: 0 }\n  const layout = struct([u8('instruction') as any, u32('units'), u32('additional_fee')])\n  const data = Buffer.alloc(layout.span)\n  layout.encode(params, data)\n  const keys = [{ pubkey: wallet, isSigner: false, isWritable: false }]\n  const unitsIx = new TransactionInstruction({\n    keys,\n    programId: program,\n    data\n  })\n  return unitsIx\n}\nexport async function assertThrowsAsync(fn: Promise<any>, word?: string) {\n  try {\n    await fn\n  } catch (e: any) {\n    let err\n    if (e.code) {\n      err = '0x' + e.code.toString(16)\n    } else {\n      err = e.toString()\n    }\n    if (word) {\n      const regex = new RegExp(`${word}$`)\n      if (!regex.test(err)) {\n        console.log(err)\n        throw new Error('Invalid Error message')\n      }\n    }\n    return\n  }\n  throw new Error('Function did not throw error')\n}\n\nexport const signAndSend = async (\n  tx: Transaction,\n  signers: Keypair[],\n  connection: Connection,\n  opts?: ConfirmOptions\n) => {\n  tx.setSigners(...signers.map(s => s.publicKey))\n  const blockhash = await connection.getRecentBlockhash(\n    opts?.commitment ?? AnchorProvider.defaultOptions().commitment\n  )\n  tx.recentBlockhash = blockhash.blockhash\n  tx.partialSign(...signers)\n  const rawTx = tx.serialize()\n  return await sendAndConfirmRawTransaction(\n    connection,\n    rawTx,\n    opts ?? AnchorProvider.defaultOptions()\n  )\n}\n\nexport const sleep = async (ms: number) => {\n  return await new Promise(resolve => setTimeout(resolve, ms))\n}\n\nexport const tou64 = (amount: BN) => {\n  // @ts-ignore\n  return new u64(amount.toString())\n}\n\nexport const fromFee = (fee: BN): BN => {\n  // e.g fee - BN(1) -> 0.001%\n  return fee.mul(FEE_OFFSET)\n}\n\nexport const feeToTickSpacing = (fee: BN): number => {\n  // linear relationship between fee and tickSpacing\n  // tickSpacing = fee * 10^4\n  if (fee.lte(fromFee(new BN(10)))) {\n    return 1\n  }\n\n  const FEE_TO_SPACING_OFFSET = new BN(10).pow(new BN(DECIMAL - 4))\n  return fee.div(FEE_TO_SPACING_OFFSET).toNumber()\n}\n\nexport const FEE_TIERS: FeeTier[] = [\n  { fee: fromFee(new BN(1)) },\n  { fee: fromFee(new BN(10)) },\n  { fee: fromFee(new BN(50)) },\n  { fee: fromFee(new BN(100)) },\n  { fee: fromFee(new BN(300)) },\n  { fee: fromFee(new BN(1000)) }\n]\n\nexport const generateTicksArray = (start: number, stop: number, step: number) => {\n  const validDir = (start > stop && step < 0) || (start < stop && step > 0)\n  const validMod = start % step === 0 && stop % step === 0\n\n  if (!validDir || !validMod) {\n    throw new Error('Invalid parameters')\n  }\n\n  const ticks: number[] = []\n  for (let i = start; i <= stop; i += step) {\n    ticks.push(i)\n  }\n  return ticks\n}\n\nexport const getFeeTierAddress = async ({ fee, tickSpacing }: FeeTier, programId: PublicKey) => {\n  const ts = tickSpacing ?? feeToTickSpacing(fee)\n\n  const [address, bump] = await PublicKey.findProgramAddress(\n    [\n      Buffer.from(utils.bytes.utf8.encode(FEE_TIER)),\n      programId.toBuffer(),\n      bigNumberToBuffer(fee, 128),\n      bigNumberToBuffer(new BN(ts), 16)\n    ],\n    programId\n  )\n\n  return {\n    address,\n    bump\n  }\n}\n\nexport const toDecimal = (x: number, decimals: number = 0): Decimal => {\n  return { v: DENOMINATOR.muln(x).div(new BN(10).pow(new BN(decimals))) }\n}\n\nexport const toDecimalWithDenominator = (x: number, denominator: BN, decimals: number = 0) => {\n  return { v: denominator.muln(x).div(new BN(10).pow(new BN(decimals))) }\n}\n\nexport const calculateConcentration = (tickSpacing: number, minimumRange: number, n: number) => {\n  const concentration = 1 / (1 - Math.pow(1.0001, (-tickSpacing * (minimumRange + 2 * n)) / 4))\n  return concentration / CONCENTRATION_FACTOR\n}\n\nexport const calculateTickDelta = (\n  tickSpacing: number,\n  minimumRange: number,\n  concentration: number\n) => {\n  const base = Math.pow(1.0001, -(tickSpacing / 4))\n  const logArg =\n    (1 - 1 / (concentration * CONCENTRATION_FACTOR)) /\n    Math.pow(1.0001, (-tickSpacing * minimumRange) / 4)\n\n  return Math.ceil(Math.log(logArg) / Math.log(base) / 2)\n}\n\nexport const getConcentrationArray = (\n  tickSpacing: number,\n  minimumRange: number,\n  currentTick: number\n): number[] => {\n  const concentrations: number[] = []\n  let counter = 0\n  let concentration = 0\n  let lastConcentration = calculateConcentration(tickSpacing, minimumRange, counter) + 1\n  let concentrationDelta = 1\n\n  while (concentrationDelta >= 1) {\n    concentration = calculateConcentration(tickSpacing, minimumRange, counter)\n    concentrations.push(concentration)\n    concentrationDelta = lastConcentration - concentration\n    lastConcentration = concentration\n    counter++\n  }\n  concentration = Math.ceil(concentrations[concentrations.length - 1])\n\n  while (concentration > 1) {\n    concentrations.push(concentration)\n    concentration--\n  }\n  const maxTick = alignTickToSpacing(MAX_TICK, tickSpacing)\n  if ((minimumRange / 2) * tickSpacing > maxTick - Math.abs(currentTick)) {\n    throw new Error(Errors.RangeLimitReached)\n  }\n  const limitIndex =\n    (maxTick - Math.abs(currentTick) - (minimumRange / 2) * tickSpacing) / tickSpacing\n\n  return concentrations.slice(0, limitIndex)\n}\n\nexport const getPositionInitData = (\n  tokenAmount: BN,\n  tickSpacing: number,\n  concentration: number,\n  minimumRange: number,\n  currentTick: number,\n  currentPriceSqrt: Decimal,\n  roundingUp: boolean,\n  byAmountX: boolean\n): PositionInitData => {\n  let liquidity: Decimal\n  let amountX: BN\n  let amountY: BN\n  const tickDelta = calculateTickDelta(tickSpacing, minimumRange, concentration)\n  const lowerTick = currentTick - (tickDelta + minimumRange / 2) * tickSpacing\n  const upperTick = currentTick + (tickDelta + minimumRange / 2) * tickSpacing\n\n  if (byAmountX) {\n    const result = getLiquidityByX(tokenAmount, lowerTick, upperTick, currentPriceSqrt, roundingUp)\n    liquidity = result.liquidity\n    amountX = tokenAmount\n    amountY = result.y\n  } else {\n    const result = getLiquidityByY(tokenAmount, lowerTick, upperTick, currentPriceSqrt, roundingUp)\n\n    liquidity = result.liquidity\n    amountX = result.x\n    amountY = tokenAmount\n  }\n  const positionData: PositionInitData = {\n    lowerTick,\n    upperTick,\n    liquidity,\n    amountX: amountX,\n    amountY: amountY\n  }\n\n  return positionData\n}\n\nexport const toPrice = (x: number, decimals: number = 0): Decimal => {\n  return toDecimalWithDenominator(x, PRICE_DENOMINATOR, decimals)\n}\n\nexport const toPercent = (x: number, decimals: number = 0): Decimal => {\n  return toDecimalWithDenominator(x, DENOMINATOR, decimals)\n}\n\nexport const getCloserLimit = (closerLimit: CloserLimit): CloserLimitResult => {\n  const { sqrtPriceLimit, xToY, currentTick, tickSpacing, tickmap } = closerLimit\n\n  let index: number | null = xToY\n    ? getPreviousTick(tickmap, currentTick, tickSpacing)\n    : getNextTick(tickmap, currentTick, tickSpacing)\n  let sqrtPrice: Decimal\n  let init: boolean\n\n  if (index !== null) {\n    sqrtPrice = calculatePriceSqrt(index)\n    init = true\n  } else {\n    index = getSearchLimit(new BN(currentTick), new BN(tickSpacing), !xToY).toNumber()\n    sqrtPrice = calculatePriceSqrt(index as number)\n    init = false\n  }\n  if (xToY && sqrtPrice.v.gt(sqrtPriceLimit.v) && index !== null) {\n    return { swapLimit: sqrtPrice, limitingTick: { index, initialized: init } }\n  } else if (!xToY && sqrtPrice.v.lt(sqrtPriceLimit.v) && index !== null) {\n    return { swapLimit: sqrtPrice, limitingTick: { index, initialized: init } }\n  } else {\n    return { swapLimit: sqrtPriceLimit, limitingTick: null }\n  }\n}\n\nexport enum SimulationStatus {\n  Ok,\n  WrongLimit = 'Price limit is on the wrong side of price',\n  PriceLimitReached = 'Price would cross swap limit',\n  TickNotFound = 'tick crossed but not passed to simulation',\n  NoGainSwap = 'Amount out is zero',\n  TooLargeGap = 'Too large liquidity gap',\n  LimitReached = 'At the end of price range'\n}\n\nexport const swapSimulation = async (\n  xToY: boolean,\n  byAmountIn: boolean,\n  swapAmount: BN,\n  priceLimit: Decimal,\n  slippage: Decimal,\n  market: Market,\n  poolAddress: PublicKey\n): Promise<SimulationResult> => {\n  const { currentTickIndex, fee, tickSpacing, tokenX, tokenY, liquidity, sqrtPrice } =\n    await market.getPoolByAddress(poolAddress)\n\n  const feeTier: FeeTier = { fee: fee.v, tickSpacing }\n  const pair: Pair = new Pair(tokenX, tokenY, feeTier)\n  const tickmap = await market.getTickmap(pair)\n  const allTicks = await market.getAllTicks(pair)\n\n  const ticks: Map<number, Tick> = new Map()\n  allTicks.forEach(tick => {\n    ticks.set(tick.index, tick)\n  })\n\n  const poolData: PoolData = {\n    currentTickIndex,\n    tickSpacing,\n    liquidity,\n    fee,\n    sqrtPrice\n  }\n\n  const swapParameters: SimulateSwapInterface = {\n    xToY,\n    byAmountIn,\n    swapAmount,\n    priceLimit,\n    slippage,\n    ticks,\n    tickmap,\n    pool: poolData\n  }\n\n  return simulateSwap(swapParameters)\n}\n\nexport const simulateSwap = (swapParameters: SimulateSwapInterface): SimulationResult => {\n  const { xToY, byAmountIn, swapAmount, slippage, ticks, tickmap, priceLimit, pool } =\n    swapParameters\n  let { currentTickIndex, tickSpacing, liquidity, sqrtPrice, fee } = pool\n  const startingSqrtPrice = sqrtPrice.v\n  let previousTickIndex = MAX_TICK + 1\n  const amountPerTick: BN[] = []\n  const crossedTicks: number[] = []\n  let accumulatedAmount: BN = new BN(0)\n  let accumulatedAmountOut: BN = new BN(0)\n  let accumulatedAmountIn: BN = new BN(0)\n  let accumulatedFee: BN = new BN(0)\n  const priceLimitAfterSlippage = calculatePriceAfterSlippage(priceLimit, slippage, !xToY)\n\n  // Sanity check, should never throw\n  if (xToY) {\n    if (sqrtPrice.v.lt(priceLimitAfterSlippage.v)) {\n      throw new Error(SimulationStatus.WrongLimit)\n    }\n  } else {\n    if (sqrtPrice.v.gt(priceLimitAfterSlippage.v)) {\n      throw new Error(SimulationStatus.WrongLimit)\n    }\n  }\n\n  let remainingAmount: BN = swapAmount\n  let status = SimulationStatus.Ok\n\n  while (!remainingAmount.lte(new BN(0))) {\n    // find closest initialized tick\n    const closerLimit: CloserLimit = {\n      sqrtPriceLimit: priceLimitAfterSlippage,\n      xToY: xToY,\n      currentTick: currentTickIndex,\n      tickSpacing: tickSpacing,\n      tickmap: tickmap\n    }\n\n    const { swapLimit, limitingTick } = getCloserLimit(closerLimit)\n    const result = calculateSwapStep(\n      sqrtPrice,\n      swapLimit,\n      liquidity,\n      remainingAmount,\n      byAmountIn,\n      fee\n    )\n\n    accumulatedAmountIn = accumulatedAmountIn.add(result.amountIn)\n    accumulatedAmountOut = accumulatedAmountOut.add(result.amountOut)\n    accumulatedFee = accumulatedFee.add(result.feeAmount)\n\n    let amountDiff: BN\n\n    if (byAmountIn) {\n      amountDiff = result.amountIn.add(result.feeAmount)\n    } else {\n      amountDiff = result.amountOut\n    }\n\n    remainingAmount = remainingAmount.sub(amountDiff)\n    sqrtPrice = result.nextPrice\n\n    if (sqrtPrice.v.eq(priceLimitAfterSlippage.v) && remainingAmount.gt(new BN(0))) {\n      // throw new Error(SimulationErrors.PriceLimitReached)\n      status = SimulationStatus.PriceLimitReached\n      break\n    }\n\n    // crossing tick\n    if (result.nextPrice.v.eq(swapLimit.v) && limitingTick != null) {\n      const tickIndex: number = limitingTick.index\n      const initialized: boolean = limitingTick.initialized\n\n      const isEnoughAmountToCross = isEnoughAmountToPushPrice(\n        remainingAmount,\n        result.nextPrice,\n        pool.liquidity,\n        pool.fee,\n        byAmountIn,\n        xToY\n      )\n\n      // cross\n      if (initialized) {\n        if (!ticks.has(tickIndex)) {\n          throw new Error(SimulationStatus.TickNotFound)\n        }\n        const tick = ticks.get(tickIndex) as Tick\n\n        if (!xToY || isEnoughAmountToCross) {\n          // trunk-ignore(eslint/no-mixed-operators)\n          if (currentTickIndex >= tick.index !== tick.sign) {\n            liquidity = { v: liquidity.v.add(tick.liquidityChange.v) }\n          } else {\n            liquidity = { v: liquidity.v.sub(tick.liquidityChange.v) }\n          }\n          crossedTicks.push(tickIndex)\n        } else if (!remainingAmount.eqn(0)) {\n          if (byAmountIn) {\n            accumulatedAmountIn = accumulatedAmountIn.add(remainingAmount)\n          }\n          remainingAmount = new BN(0)\n        }\n      }\n      if (xToY && isEnoughAmountToCross) {\n        currentTickIndex = tickIndex - tickSpacing\n      } else {\n        currentTickIndex = tickIndex\n      }\n    } else {\n      currentTickIndex = getTickFromPrice(currentTickIndex, tickSpacing, result.nextPrice, xToY)\n    }\n\n    // add amount to array if tick was initialized otherwise accumulate amount for next iteration\n    accumulatedAmount = accumulatedAmount.add(amountDiff)\n    // trunk-ignore(eslint/@typescript-eslint/prefer-optional-chain)\n    const isTickInitialized = limitingTick !== null && limitingTick.initialized\n\n    if (isTickInitialized || remainingAmount.eqn(0)) {\n      amountPerTick.push(accumulatedAmount)\n      accumulatedAmount = new BN(0)\n    }\n\n    // in the future this can be replaced by counter\n    if (!isTickInitialized && liquidity.v.eqn(0)) {\n      // throw new Error(SimulationErrors.TooLargeGap)\n      status = SimulationStatus.TooLargeGap\n      break\n    }\n\n    if (currentTickIndex === previousTickIndex && !remainingAmount.eqn(0)) {\n      // throw new Error(SimulationErrors.LimitReached)\n      status = SimulationStatus.LimitReached\n      break\n    } else {\n      previousTickIndex = currentTickIndex\n    }\n  }\n\n  if (accumulatedAmountOut.isZero() && status === SimulationStatus.Ok) {\n    // throw new Error(SimulationErrors.NoGainSwap)\n    status = SimulationStatus.NoGainSwap\n  }\n\n  const priceAfterSwap: BN = sqrtPrice.v\n  const priceImpact = calculatePriceImpact(startingSqrtPrice, priceAfterSwap)\n\n  let minReceived: BN\n  if (byAmountIn) {\n    const endingPriceAfterSlippage = calculatePriceAfterSlippage(\n      { v: priceAfterSwap },\n      slippage,\n      !xToY\n    ).v\n    minReceived = calculateMinReceivedTokensByAmountIn(\n      endingPriceAfterSlippage,\n      xToY,\n      accumulatedAmountIn,\n      pool.fee.v\n    )\n  } else {\n    minReceived = accumulatedAmountOut\n  }\n\n  return {\n    status,\n    amountPerTick,\n    crossedTicks,\n    accumulatedAmountIn,\n    accumulatedAmountOut,\n    accumulatedFee,\n    priceAfterSwap,\n    priceImpact,\n    minReceived\n  }\n}\n\nexport const parseLiquidityOnTicks = (ticks: Tick[]) => {\n  let currentLiquidity = new BN(0)\n\n  return ticks.map(tick => {\n    currentLiquidity = currentLiquidity.add(tick.liquidityChange.v.muln(tick.sign ? 1 : -1))\n    return {\n      liquidity: currentLiquidity,\n      index: tick.index\n    }\n  })\n}\n\nexport const calculateFeeGrowthInside = ({\n  tickLower,\n  tickUpper,\n  tickCurrent,\n  feeGrowthGlobalX,\n  feeGrowthGlobalY\n}: FeeGrowthInside) => {\n  // determine position relative to current tick\n  const currentAboveLower = tickCurrent >= tickLower.index\n  const currentBelowUpper = tickCurrent < tickUpper.index\n  let feeGrowthBelowX: BN\n  let feeGrowthBelowY: BN\n  let feeGrowthAboveX: BN\n  let feeGrowthAboveY: BN\n\n  // calculate fee growth below\n  if (currentAboveLower) {\n    feeGrowthBelowX = tickLower.feeGrowthOutsideX.v\n    feeGrowthBelowY = tickLower.feeGrowthOutsideY.v\n  } else {\n    feeGrowthBelowX = feeGrowthGlobalX.v.sub(tickLower.feeGrowthOutsideX.v)\n    feeGrowthBelowY = feeGrowthGlobalY.v.sub(tickLower.feeGrowthOutsideY.v)\n  }\n\n  // calculate fee growth above\n  if (currentBelowUpper) {\n    feeGrowthAboveX = tickUpper.feeGrowthOutsideX.v\n    feeGrowthAboveY = tickUpper.feeGrowthOutsideY.v\n  } else {\n    feeGrowthAboveX = feeGrowthGlobalX.v.sub(tickUpper.feeGrowthOutsideX.v)\n    feeGrowthAboveY = feeGrowthGlobalY.v.sub(tickUpper.feeGrowthOutsideY.v)\n  }\n\n  // calculate fee growth inside\n  let feeGrowthInsideX = feeGrowthGlobalX.v.sub(feeGrowthBelowX).sub(feeGrowthAboveX)\n  let feeGrowthInsideY = feeGrowthGlobalY.v.sub(feeGrowthBelowY).sub(feeGrowthAboveY)\n\n  if (feeGrowthInsideX.lt(new BN(0))) {\n    feeGrowthInsideX = U128MAX.sub(feeGrowthInsideX.abs()).addn(1)\n  }\n  if (feeGrowthInsideY.lt(new BN(0))) {\n    feeGrowthInsideY = U128MAX.sub(feeGrowthInsideY.abs()).addn(1)\n  }\n\n  return [feeGrowthInsideX, feeGrowthInsideY]\n}\n\nexport const calculateTokensOwed = ({\n  position,\n  feeGrowthInsideX,\n  feeGrowthInsideY\n}: TokensOwed) => {\n  let tokensOwedX\n  let tokensOwedY\n  if (feeGrowthInsideX.lt(position.feeGrowthInsideX.v)) {\n    tokensOwedX = position.liquidity.v\n      .mul(feeGrowthInsideX.add(U128MAX.sub(position.feeGrowthInsideX.v)))\n      .div(new BN(10).pow(new BN(DECIMAL + LIQUIDITY_SCALE)))\n  } else {\n    tokensOwedX = position.liquidity.v\n      .mul(feeGrowthInsideX.sub(position.feeGrowthInsideX.v))\n      .div(new BN(10).pow(new BN(DECIMAL + LIQUIDITY_SCALE)))\n  }\n  if (feeGrowthInsideY.lt(position.feeGrowthInsideY.v)) {\n    tokensOwedY = position.liquidity.v\n      .mul(feeGrowthInsideY.add(U128MAX.sub(position.feeGrowthInsideY.v)))\n      .div(new BN(10).pow(new BN(DECIMAL + LIQUIDITY_SCALE)))\n  } else {\n    tokensOwedY = position.liquidity.v\n      .mul(feeGrowthInsideY.sub(position.feeGrowthInsideY.v))\n      .div(new BN(10).pow(new BN(DECIMAL + LIQUIDITY_SCALE)))\n  }\n  const tokensOwedXTotal = position.tokensOwedX.v.add(tokensOwedX).div(DENOMINATOR)\n  const tokensOwedYTotal = position.tokensOwedY.v.add(tokensOwedY).div(DENOMINATOR)\n  return [tokensOwedXTotal, tokensOwedYTotal]\n}\n\nexport const calculateClaimAmount = ({\n  position,\n  tickLower,\n  tickUpper,\n  tickCurrent,\n  feeGrowthGlobalX,\n  feeGrowthGlobalY\n}: SimulateClaim) => {\n  // determine position relative to current tick\n  const feeGrowthParams: FeeGrowthInside = {\n    tickLower: tickLower,\n    tickUpper: tickUpper,\n    tickCurrent: tickCurrent,\n    feeGrowthGlobalX: feeGrowthGlobalX,\n    feeGrowthGlobalY: feeGrowthGlobalY\n  }\n  const [feeGrowthInsideX, feeGrowthInsideY] = calculateFeeGrowthInside(feeGrowthParams)\n\n  const tokensOwedParams: TokensOwed = {\n    position: position,\n    feeGrowthInsideX: feeGrowthInsideX,\n    feeGrowthInsideY: feeGrowthInsideY\n  }\n\n  const [tokensOwedXTotal, tokensOwedYTotal] = calculateTokensOwed(tokensOwedParams)\n\n  return [tokensOwedXTotal, tokensOwedYTotal]\n}\n\nexport const bigNumberToBuffer = (n: BN, size: 16 | 32 | 64 | 128 | 256) => {\n  const chunk = new BN(2).pow(new BN(16))\n\n  const buffer = Buffer.alloc(size / 8)\n  let offset = 0\n\n  while (n.gt(new BN(0))) {\n    buffer.writeUInt16LE(n.mod(chunk).toNumber(), offset)\n    n = n.div(chunk)\n    offset += 2\n  }\n\n  return buffer\n}\n\nexport const getMaxTick = (tickSpacing: number) => {\n  const limitedByPrice = MAX_TICK - (MAX_TICK % tickSpacing)\n  const limitedByTickmap = TICK_LIMIT * tickSpacing - tickSpacing\n  return Math.min(limitedByPrice, limitedByTickmap)\n}\n\nexport const getMinTick = (tickSpacing: number) => {\n  const limitedByPrice = -MAX_TICK + (MAX_TICK % tickSpacing)\n  const limitedByTickmap = -TICK_LIMIT * tickSpacing\n  return Math.max(limitedByPrice, limitedByTickmap)\n}\n\nexport const getVolume = (\n  volumeX: number,\n  volumeY: number,\n  previousSqrtPrice: Decimal,\n  currentSqrtPrice: Decimal\n): number => {\n  const price = previousSqrtPrice.v.mul(currentSqrtPrice.v).div(PRICE_DENOMINATOR)\n  const denominatedVolumeY = new BN(volumeY).mul(PRICE_DENOMINATOR).div(price).toNumber()\n  return volumeX + denominatedVolumeY\n}\n\nexport const getTokensInRange = (ticks: ParsedTick[], lowerTick: number, upperTick: number): BN => {\n  let tokenXamount: BN = new BN(0)\n  let currentIndex: number | null\n  let nextIndex: number | null\n\n  for (let i = 0; i < ticks.length - 1; i++) {\n    currentIndex = ticks[i].index\n    nextIndex = ticks[i + 1].index\n\n    if (currentIndex >= lowerTick && currentIndex < upperTick) {\n      const lowerSqrtPrice = calculatePriceSqrt(currentIndex)\n      const upperSqrtPrice = calculatePriceSqrt(nextIndex)\n      tokenXamount = tokenXamount.add(\n        getXfromLiquidity(ticks[i].liquidity, upperSqrtPrice.v, lowerSqrtPrice.v)\n      )\n    }\n  }\n\n  return tokenXamount\n}\nexport const getTokens = (liquidity: BN, lowerTickIndex: number, upperTickIndex: number): BN => {\n  const lowerSqrtPrice = calculatePriceSqrt(lowerTickIndex)\n  const upperSqrtPrice = calculatePriceSqrt(upperTickIndex)\n  return getXfromLiquidity(liquidity, upperSqrtPrice.v, lowerSqrtPrice.v)\n}\n\nexport const getTokensAndLiquidity = (\n  ticks: ParsedTick[],\n  currentTickIndex: number\n): { tokens: BN; liquidity: BN; nextInitializedTick: number } => {\n  let tokens: BN = new BN(0)\n  let liquidity: BN = new BN(0)\n  let currentIndex: number | null\n  let nextIndex: number | null\n  let nextInitializedTick: number = 0\n\n  for (let i = 0; i < ticks.length - 1; i++) {\n    currentIndex = ticks[i].index\n    nextIndex = ticks[i + 1].index\n    if (currentIndex == currentTickIndex) {\n      nextInitializedTick = nextIndex\n    }\n\n    tokens = getTokens(ticks[i].liquidity, currentIndex, nextIndex)\n    liquidity = liquidity.add(ticks[i].liquidity)\n  }\n  return { tokens, liquidity, nextInitializedTick }\n}\n\nexport const getTokensAndLiquidityOnSingleTick = (\n  ticks: Map<number, ParsedTick>,\n  currentTickIndex: number,\n  nextInitialized: number\n): { singleTickTokens: BN; singleTickLiquidity: BN } => {\n  const singleTickLiquidity = ticks.get(currentTickIndex)?.liquidity as BN\n  const singleTickTokens = getTokens(singleTickLiquidity, currentTickIndex, nextInitialized)\n\n  return { singleTickTokens, singleTickLiquidity }\n}\n\nexport const getRangeBasedOnFeeGrowth = (\n  tickArrayPrevious: ParsedTick[],\n  tickMapCurrent: Map<number, ParsedTick>\n): { tickLower: number | null; tickUpper: number | null } => {\n  let tickLower: number | null = null\n  let tickUpper: number | null = null\n  let tickLowerIndex: number = -1\n  let tickUpperIndex: number = -1\n  let tickLowerIndexSaved = false\n\n  let currentSnapTick: ParsedTick | undefined\n  const MIN_INDEX = 0\n  const MAX_INDEX = tickArrayPrevious.length - 1\n\n  for (let i = 0; i < tickArrayPrevious.length - 1; i++) {\n    currentSnapTick = tickMapCurrent.get(tickArrayPrevious[i].index)\n    if (currentSnapTick === undefined) continue\n\n    if (\n      !(\n        tickArrayPrevious[i].feeGrowthOutsideX.v.eq(currentSnapTick.feeGrowthOutsideX.v) &&\n        tickArrayPrevious[i].feeGrowthOutsideY.v.eq(currentSnapTick.feeGrowthOutsideY.v)\n      )\n    ) {\n      if (!tickLowerIndexSaved) {\n        tickLowerIndex = i\n        tickLowerIndexSaved = true\n      }\n      tickUpperIndex = i\n    }\n  }\n  if (tickLowerIndex !== -1) {\n    tickLower =\n      tickLowerIndex > MIN_INDEX\n        ? tickArrayPrevious[tickLowerIndex - 1].index\n        : tickArrayPrevious[tickLowerIndex].index\n  }\n  if (tickUpperIndex !== -1) {\n    tickUpper =\n      tickUpperIndex < MAX_INDEX\n        ? tickArrayPrevious[tickUpperIndex + 1].index\n        : tickArrayPrevious[tickUpperIndex].index\n  }\n  return {\n    tickLower,\n    tickUpper\n  }\n}\nexport const parseFeeGrowthAndLiquidityOnTicksArray = (ticks: Tick[]): ParsedTick[] => {\n  const sortedTicks = ticks.sort((a, b) => a.index - b.index)\n\n  let currentLiquidity = new BN(0)\n  return sortedTicks.map(tick => {\n    currentLiquidity = currentLiquidity.add(tick.liquidityChange.v.muln(tick.sign ? 1 : -1))\n    return {\n      liquidity: currentLiquidity,\n      index: tick.index,\n      feeGrowthOutsideX: tick.feeGrowthOutsideX,\n      feeGrowthOutsideY: tick.feeGrowthOutsideY\n    }\n  })\n}\n\nexport const parseFeeGrowthAndLiquidityOnTicksMap = (ticks: Tick[]): Map<number, ParsedTick> => {\n  const sortedTicks = ticks.sort((a, b) => a.index - b.index)\n  let currentLiquidity = new BN(0)\n  const ticksMap = new Map<number, ParsedTick>()\n  sortedTicks.map(tick => {\n    currentLiquidity = currentLiquidity.add(tick.liquidityChange.v.muln(tick.sign ? 1 : -1))\n    ticksMap.set(tick.index, {\n      liquidity: currentLiquidity,\n      index: tick.index,\n      feeGrowthOutsideX: tick.feeGrowthOutsideX,\n      feeGrowthOutsideY: tick.feeGrowthOutsideY\n    })\n  })\n\n  return ticksMap\n}\nexport const calculateTokensRange = (\n  ticksPreviousSnapshot: Tick[],\n  ticksCurrentSnapshot: Tick[],\n  currentTickIndex: number\n): RangeData => {\n  const tickArrayPrevious = parseFeeGrowthAndLiquidityOnTicksArray(ticksPreviousSnapshot)\n  const tickArrayCurrent = parseFeeGrowthAndLiquidityOnTicksArray(ticksCurrentSnapshot)\n  const tickMapCurrent = parseFeeGrowthAndLiquidityOnTicksMap(ticksCurrentSnapshot)\n  if (!(tickArrayPrevious.length || tickArrayCurrent.length)) {\n    throw new Error(Errors.TickArrayIsEmpty)\n  }\n  if (!(tickArrayPrevious.length && tickArrayCurrent.length)) {\n    const notEmptyArray = tickArrayPrevious.length ? tickArrayPrevious : tickArrayCurrent\n    const tickLower = notEmptyArray[0].index\n    const tickUpper = notEmptyArray[notEmptyArray.length - 1].index\n    const tokens = getTokensInRange(notEmptyArray, tickLower, tickUpper)\n\n    return {\n      tokens,\n      tickLower,\n      tickUpper\n    }\n  }\n\n  let { tickLower, tickUpper } = getRangeBasedOnFeeGrowth(tickArrayPrevious, tickMapCurrent)\n\n  if (tickLower == null || tickUpper == null) {\n    const { lower, upper } = getTicksFromSwapRange(tickArrayCurrent, currentTickIndex)\n    tickLower = lower\n    tickUpper = upper\n  }\n  if (tickLower == null || tickUpper == null) {\n    throw new Error(Errors.TickNotFound)\n  }\n\n  const tokensPrevious = getTokensInRange(tickArrayPrevious, tickLower, tickUpper)\n  const tokensCurrent = getTokensInRange(tickArrayCurrent, tickLower, tickUpper)\n\n  // geometric mean of tokensPrevious and tokensCurrent\n  const tokens = sqrt(tokensPrevious.mul(tokensCurrent))\n\n  return {\n    tokens,\n    tickLower,\n    tickUpper\n  }\n}\n\nexport const calculateTokensAndLiquidity = (\n  ticksCurrentSnapshot: Tick[],\n  currentTickIndex: number\n): RewardData => {\n  const tickArrayCurrent = parseFeeGrowthAndLiquidityOnTicksArray(ticksCurrentSnapshot)\n  const tickMapCurrent = parseFeeGrowthAndLiquidityOnTicksMap(ticksCurrentSnapshot)\n  if (tickArrayCurrent.length === 0) {\n    throw new Error(Errors.TickArrayIsEmpty)\n  }\n\n  const { tokens, liquidity, nextInitializedTick } = getTokensAndLiquidity(\n    tickArrayCurrent,\n    currentTickIndex\n  )\n\n  const { singleTickTokens, singleTickLiquidity } = getTokensAndLiquidityOnSingleTick(\n    tickMapCurrent,\n    currentTickIndex,\n    nextInitializedTick\n  )\n  return {\n    tokens,\n    liquidity,\n    singleTickTokens,\n    singleTickLiquidity\n  }\n}\n\nexport const calculatePoolLiquidityFromSnapshot = (\n  ticksCurrentSnapshot: Tick[],\n  currentTickIndex: number\n): { poolLiquidity: BN } => {\n  const tickArrayCurrent = parseFeeGrowthAndLiquidityOnTicksArray(ticksCurrentSnapshot)\n  if (tickArrayCurrent.length === 0) {\n    throw new Error(Errors.TickArrayIsEmpty)\n  }\n\n  const { liquidity } = getTokensAndLiquidity(tickArrayCurrent, currentTickIndex)\n\n  return { poolLiquidity: liquidity }\n}\n\nexport const dailyFactorPool = (tokenXamount: BN, volume: number, feeTier: FeeTier): number => {\n  const fee: number = (feeTier.fee.toNumber() / DENOMINATOR.toNumber()) * (1 - PROTOCOL_FEE)\n  return (volume * fee) / tokenXamount.toNumber()\n}\n\nexport const getTicksFromSwapRange = (\n  ticks: ParsedTick[],\n  currentTickIndex: number\n): { lower: number | null; upper: number | null } => {\n  for (let i = 0; i < ticks.length - 1; i++) {\n    const lower = ticks[i].index\n    const upper = ticks[i + 1].index\n\n    if (lower <= currentTickIndex && upper >= currentTickIndex) {\n      return { lower, upper }\n    }\n  }\n  return { lower: null, upper: null }\n}\n\nexport const poolAPY = (params: ApyPoolParams): WeeklyData => {\n  const {\n    feeTier,\n    currentTickIndex,\n    activeTokens,\n    ticksPreviousSnapshot,\n    ticksCurrentSnapshot,\n    weeklyData,\n    volumeX,\n    volumeY\n  } = params\n  const { weeklyFactor, weeklyRange } = weeklyData\n  let dailyFactor: number | null\n  let dailyRange: Range\n  let dailyTokens: BN = new BN(0)\n  let dailyVolumeX: number = 0\n  try {\n    const { tickLower, tickUpper } = calculateTokensRange(\n      ticksPreviousSnapshot,\n      ticksCurrentSnapshot,\n      currentTickIndex\n    )\n\n    const previousSqrtPrice = calculatePriceSqrt(tickLower)\n    const currentSqrtPrice = calculatePriceSqrt(tickUpper)\n    const volume = getVolume(volumeX, volumeY, previousSqrtPrice, currentSqrtPrice)\n    dailyFactor = dailyFactorPool(activeTokens, volume, feeTier)\n    dailyRange = { tickLower, tickUpper }\n    dailyTokens = activeTokens\n    dailyVolumeX = volumeX\n  } catch (e: any) {\n    dailyFactor = 0\n    dailyRange = { tickLower: null, tickUpper: null }\n  }\n\n  const newWeeklyFactor = updateWeeklyFactor(weeklyFactor, dailyFactor)\n  const newWeeklyRange = updateWeeklyRange(weeklyRange, dailyRange)\n\n  const apy = (Math.pow(average(newWeeklyFactor) + 1, 365) - 1) * 100\n\n  return {\n    weeklyFactor: newWeeklyFactor,\n    weeklyRange: newWeeklyRange,\n    tokenXamount: dailyTokens,\n    volumeX: dailyVolumeX,\n    apy\n  }\n}\n\nexport const dailyFactorRewards = (\n  rewardInUSD: number,\n  tokenXamount: BN,\n  tokenXprice: number,\n  tokenDecimal: number,\n  duration: number\n): number => {\n  return (\n    rewardInUSD /\n    (tokenXamount.div(new BN(10).pow(new BN(tokenDecimal))).toNumber() * tokenXprice * duration)\n  )\n}\n\nexport const rewardsAPY = (params: ApyRewardsParams): { apy: number; apySingleTick: number } => {\n  const {\n    currentTickIndex,\n    currentLiquidity,\n    allLiquidityInTokens,\n    tickSpacing,\n    rewardInUsd,\n    tokenPrice,\n    tokenDecimal,\n    duration\n  } = params\n\n  if (currentLiquidity.eqn(0)) {\n    return { apy: Infinity, apySingleTick: Infinity }\n  }\n  const decimal: BN = new BN(10).pow(new BN(tokenDecimal))\n  const dailyRewards = rewardInUsd / duration\n  const lowerSqrtPrice = calculatePriceSqrt(currentTickIndex).v\n  const upperSqrtPrice = calculatePriceSqrt(currentTickIndex + tickSpacing).v\n\n  const dailyFactor = (dailyRewards / allLiquidityInTokens.div(decimal).toNumber()) * tokenPrice\n\n  const priceFactor = lowerSqrtPrice\n    .mul(upperSqrtPrice)\n    .div(upperSqrtPrice.sub(lowerSqrtPrice))\n    .div(PRICE_DENOMINATOR)\n    .toNumber()\n\n  const rewardsFactor = (dailyRewards / tokenPrice) * decimal.toNumber()\n\n  // dailyFactorSingleTick =  lowerSqrtPrice * upperSqrtPrice/ (upperSqrtPrice - lowerSqrtPrice) * 1/liquidity * dailyRewards/price / decimal\n  const dailyFactorSingleTick =\n    (priceFactor / currentLiquidity.div(LIQUIDITY_DENOMINATOR).toNumber()) * rewardsFactor\n\n  const apy = Math.pow(dailyFactor + 1, 365) - 1\n  const apySingleTick = Math.pow(dailyFactorSingleTick + 1, 365) - 1\n\n  return { apy, apySingleTick }\n}\n\nexport const positionsRewardAPY = (params: ApyPositionRewardsParams): number => {\n  const {\n    poolLiquidity,\n    currentTickIndex,\n    rewardInUsd,\n    tokenPrice,\n    tokenDecimal,\n    duration,\n    positionLiquidity,\n    lowerTickIndex,\n    upperTickIndex\n  } = params\n\n  // check if position is active\n  if (!isActive(lowerTickIndex, upperTickIndex, currentTickIndex)) {\n    return 0\n  }\n  if (poolLiquidity.eqn(0)) {\n    return Infinity\n  }\n  const decimal: BN = new BN(10).pow(new BN(tokenDecimal))\n  const dailyRewards = rewardInUsd / duration\n  const liquidityRatio =\n    positionLiquidity.v.mul(LIQUIDITY_DENOMINATOR).div(poolLiquidity).toNumber() /\n    LIQUIDITY_DENOMINATOR.toNumber()\n  const lowerSqrtPrice = calculatePriceSqrt(lowerTickIndex)\n  const upperSqrtPrice = calculatePriceSqrt(upperTickIndex)\n  const positionTokens = getXfromLiquidity(positionLiquidity.v, upperSqrtPrice.v, lowerSqrtPrice.v)\n  const dailyFactor =\n    (dailyRewards * liquidityRatio) / (positionTokens.div(decimal).toNumber() * tokenPrice)\n\n  const positionApy = Math.pow(dailyFactor + 1, 365) - 1\n\n  return positionApy\n}\n\nexport const calculateUserDailyRewards = (params: UserDailyRewardsParams): number => {\n  const {\n    poolLiquidity,\n    currentTickIndex,\n    rewardInTokens,\n    userLiquidity,\n    duration,\n    lowerTickIndex,\n    upperTickIndex\n  } = params\n  // check if position is active\n  if (!isActive(lowerTickIndex, upperTickIndex, currentTickIndex)) {\n    return 0\n  }\n  if (poolLiquidity.eqn(0)) {\n    return Infinity\n  }\n\n  const dailyRewards = rewardInTokens / duration\n\n  const liquidityRatio =\n    userLiquidity.v.mul(LIQUIDITY_DENOMINATOR).div(poolLiquidity).toNumber() /\n    LIQUIDITY_DENOMINATOR.toNumber()\n\n  return dailyRewards * liquidityRatio\n}\n\nexport const average = (array: number[]) =>\n  array.reduce((prev: number, curr: number) => prev + curr) / array.length\n\nexport const updateWeeklyFactor = (weeklyFactor: number[], dailyFactor: number): number[] => {\n  weeklyFactor.shift()\n  weeklyFactor.push(dailyFactor)\n  return weeklyFactor\n}\n\nexport const updateWeeklyRange = (weeklyRange: Range[], dailyRange: Range): Range[] => {\n  weeklyRange.shift()\n  weeklyRange.push(dailyRange)\n  return weeklyRange\n}\n\nexport const isActive = (lowerIndex: number, upperIndex: number, currentIndex: number): boolean => {\n  return lowerIndex <= currentIndex && upperIndex > currentIndex\n}\n\nconst coingeckoIdOverwrites = {\n  '9vMJfxuKxXBoEa7rM12mYLMwTacLMLDJqHozw96WQL8i': 'terrausd',\n  '7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj': 'lido-staked-sol',\n  NRVwhjBQiUPYtfDT5zRBVJajzFQHaBUNtC7SNVvqRFa: 'nirvana-nirv'\n}\n\nexport const getTokensData = async (): Promise<Record<string, TokenData>> => {\n  const tokens: TokenListContainer = await new TokenListProvider().resolve()\n\n  const tokenList = tokens\n    .filterByClusterSlug('mainnet-beta')\n    .getList()\n    .filter(token => token.chainId === 101)\n\n  const tokensObj: Record<string, TokenData> = {}\n\n  tokenList.forEach((token: TokenInfo) => {\n    tokensObj[token.address.toString()] = {\n      // @ts-ignore\n      id: coingeckoIdOverwrites?.[token.address.toString()] ?? token.extensions?.coingeckoId,\n      decimals: token.decimals,\n      ticker: token.symbol\n    }\n  })\n\n  return tokensObj\n}\n\nexport const getPrice = (sqrtPrice: Decimal, decimalDiff: number): Decimal => {\n  const price = sqrtPrice.v.pow(new BN(2)) // sqrtPrice^2\n  const priceWithCorrectPrecision = price.div(new BN(10).pow(new BN(40))) // price / 10^40, becouse now is 48 we need 8\n  if (decimalDiff > 0) {\n    return { v: priceWithCorrectPrecision.mul(new BN(10).pow(new BN(decimalDiff))) }\n  }\n  if (decimalDiff < 0) {\n    return { v: priceWithCorrectPrecision.div(new BN(10).pow(new BN(Math.abs(decimalDiff)))) }\n  }\n  return { v: priceWithCorrectPrecision }\n}\n\nexport const getPositionIndex = async (\n  expectedAddress: PublicKey,\n  invariantAddress: PublicKey,\n  owner: PublicKey\n): Promise<number> => {\n  let index: number = -1\n  let counter: number = 0\n  let found: Boolean = false\n\n  while (!found) {\n    const indexBuffer = Buffer.alloc(4)\n    indexBuffer.writeInt32LE(counter)\n\n    const [positionAddress, positionBump] = await PublicKey.findProgramAddress(\n      [Buffer.from(utils.bytes.utf8.encode('positionv1')), owner.toBuffer(), indexBuffer],\n      invariantAddress\n    )\n\n    if (positionAddress.toString() == expectedAddress.toString()) {\n      found = true\n      index = counter\n    }\n    counter++\n  }\n\n  return index\n}\n\nexport interface TokenData {\n  id: string\n  decimals: number\n  ticker: string\n}\nexport interface ParsedTick {\n  liquidity: BN\n  index: number\n  feeGrowthOutsideX: Decimal\n  feeGrowthOutsideY: Decimal\n}\n\nexport interface LiquidityRange {\n  tickLower: number\n  tickUpper: number\n}\n\nexport interface RangeData {\n  tokens: BN\n  tickLower: number\n  tickUpper: number\n}\nexport interface RewardData {\n  tokens: BN\n  liquidity: BN\n  singleTickTokens: BN\n  singleTickLiquidity: BN\n}\nexport interface ApyPoolParams {\n  feeTier: FeeTier\n  currentTickIndex: number\n  activeTokens: BN\n  ticksPreviousSnapshot: Tick[]\n  ticksCurrentSnapshot: Tick[]\n  weeklyData: WeeklyData\n  volumeX: number\n  volumeY: number\n}\nexport interface ApyRewardsParams {\n  currentTickIndex: number\n  currentLiquidity: BN\n  allLiquidityInTokens: BN\n  tickSpacing: number\n  rewardInUsd: number\n  tokenPrice: number\n  tokenDecimal: number\n  duration: number\n}\nexport interface UserDailyRewardsParams {\n  poolLiquidity: BN\n  currentTickIndex: number\n  rewardInTokens: number\n  userLiquidity: Decimal\n  duration: number\n  lowerTickIndex: number\n  upperTickIndex: number\n}\n\nexport interface ApyPositionRewardsParams {\n  poolLiquidity: BN\n  currentTickIndex: number\n  rewardInUsd: number\n  tokenPrice: number\n  tokenDecimal: number\n  duration: number\n  positionLiquidity: Decimal\n  lowerTickIndex: number\n  upperTickIndex: number\n}\n\nexport interface WeeklyData {\n  weeklyFactor: number[]\n  weeklyRange: Range[]\n  tokenXamount: BN\n  volumeX: number\n  apy: number\n}\n\nexport interface Range {\n  tickLower: number | null\n  tickUpper: number | null\n}\n","import invariant from 'invariant'\nimport { TICK_LIMIT } from '.'\nimport { Decimal } from './market'\nimport { calculatePriceSqrt, TICK_SEARCH_RANGE } from './math'\n\nexport const getTickFromPrice = (\n  currentTick: number,\n  tickSpacing: number,\n  price: Decimal,\n  xToY: boolean\n): number => {\n  invariant(currentTick % tickSpacing === 0, 'tick not on tick spacing')\n\n  if (xToY) {\n    return priceToTickInRange(\n      price,\n      Math.max(-TICK_LIMIT, currentTick - TICK_SEARCH_RANGE),\n      currentTick,\n      tickSpacing\n    )\n  } else {\n    return priceToTickInRange(\n      price,\n      currentTick,\n      Math.min(TICK_LIMIT, currentTick + TICK_SEARCH_RANGE),\n      tickSpacing\n    )\n  }\n}\n\nexport const priceToTickInRange = (\n  price: Decimal,\n  low: number,\n  high: number,\n  step: number\n): number => {\n  invariant(step !== 0, 'step must be non-zero')\n\n  low = Math.floor(low / step)\n  high = Math.floor(high / step)\n  const targetValue = price\n\n  while (high - low > 1) {\n    const mid = Math.floor((high - low) / 2) + low\n    const val = calculatePriceSqrt(mid * step)\n\n    if (val.v.eq(targetValue.v)) {\n      return mid * step\n    }\n\n    if (val.v.lt(targetValue.v)) {\n      low = mid\n    }\n\n    if (val.v.gt(targetValue.v)) {\n      high = mid\n    }\n  }\n\n  return low * step\n}\n\nexport const alignTickToSpacing = (inputTick: number, tickSpacing: number): number => {\n  if (inputTick > 0) {\n    return inputTick - (inputTick % tickSpacing)\n  } else {\n    return inputTick - remEuklid(inputTick, tickSpacing)\n  }\n}\n\nconst remEuklid = (a: number, b: number): number => {\n  return ((a % b) + b) % b\n}\n","import { BN } from '@project-serum/anchor'\nimport { MAX_TICK, TICK_LIMIT, TICK_SEARCH_RANGE } from '.'\nimport { Tickmap, TickPosition } from './market'\n\nexport interface TickmapChange {\n  [index: number]: 'added' | 'removed'\n}\n\nexport const getSearchLimit = (currentTickIndex: BN, tickSpacing: BN, up: boolean): BN => {\n  const index = currentTickIndex.div(tickSpacing)\n  let limit: BN = new BN(0)\n  if (up) {\n    const arrayLimit = new BN(TICK_LIMIT).subn(1)\n    const rangeLimit = index.add(new BN(TICK_SEARCH_RANGE))\n    const priceLimit = new BN(MAX_TICK).div(tickSpacing)\n\n    limit = BN.min(BN.min(arrayLimit, rangeLimit), priceLimit)\n  } else {\n    const arrayLimit = new BN(-TICK_LIMIT).addn(1)\n    const rangeLimit = index.sub(new BN(TICK_SEARCH_RANGE))\n    const priceLimit = new BN(-MAX_TICK).div(tickSpacing)\n\n    limit = BN.max(BN.max(arrayLimit, rangeLimit), priceLimit)\n  }\n  return limit.mul(tickSpacing)\n}\n\nexport const getPreviousTick = (\n  tickmap: Tickmap,\n  currentTickIndex: number,\n  tickSpacing: number\n): number | null => {\n  const limit = getSearchLimit(new BN(currentTickIndex), new BN(tickSpacing), false)\n  let { byte, bit } = tickToPosition(new BN(currentTickIndex), new BN(tickSpacing))\n  const { byte: limitingByte, bit: limitingBit } = tickToPosition(limit, new BN(tickSpacing))\n\n  while (byte > limitingByte || (byte === limitingByte && bit >= limitingBit)) {\n    let mask = 1 << bit\n    const value = tickmap.bitmap[byte]\n\n    if (value % (mask << 1) > 0) {\n      while ((value & mask) === 0) {\n        mask >>= 1\n        bit -= 1\n      }\n\n      if (byte > limitingByte || (byte === limitingByte && bit >= limitingBit)) {\n        const index = byte * 8 + bit\n        return (index - TICK_LIMIT) * tickSpacing\n      } else {\n        return null\n      }\n    }\n\n    byte -= 1\n    bit = 7\n  }\n\n  return null\n}\n\nexport const getNextTick = (\n  tickmap: Tickmap,\n  currentTickIndex: number,\n  tickSpacing: number\n): number | null => {\n  const limit: BN = getSearchLimit(new BN(currentTickIndex), new BN(tickSpacing), true)\n\n  let { byte, bit } = tickToPosition(new BN(currentTickIndex + tickSpacing), new BN(tickSpacing))\n  const { byte: limitingByte, bit: limitingBit } = tickToPosition(\n    new BN(limit),\n    new BN(tickSpacing)\n  )\n\n  while (byte < limitingByte || (byte === limitingByte && bit <= limitingBit)) {\n    let shifted: number = tickmap.bitmap[byte] >> bit\n    if (shifted !== 0) {\n      while (shifted % 2 === 0) {\n        shifted >>= 1\n        bit += 1\n      }\n\n      if (byte < limitingByte || (byte === limitingByte && bit <= limitingBit)) {\n        const index: number = byte * 8 + bit\n        return (index - TICK_LIMIT) * tickSpacing\n      } else {\n        return null\n      }\n    }\n\n    byte += 1\n    bit = 0\n  }\n\n  return null\n}\n\nexport const tickToPosition = (tick: BN, tickSpacing: BN): TickPosition => {\n  if (!tick.mod(tickSpacing).eqn(0)) {\n    throw new Error('Tick not divisible by spacing')\n  }\n\n  const bitmapIndex = tick.div(tickSpacing).addn(TICK_LIMIT)\n  const byte = bitmapIndex.divn(8).toNumber()\n  const bit = Math.abs(bitmapIndex.modn(8))\n\n  return { byte, bit }\n}\n\nexport const findTickmapChanges = (\n  currentTickmap: number[],\n  nextTickmap: number[],\n  tickSpacing: number = 1,\n  offset: number = -TICK_LIMIT\n): TickmapChange => {\n  if (currentTickmap.length !== nextTickmap.length) {\n    throw new Error('bitmap length mismatch')\n  }\n  let tickmapChanges: TickmapChange = {}\n\n  for (let i = 0; i < currentTickmap.length; i++) {\n    if (currentTickmap[i] !== nextTickmap[i]) {\n      const xor = currentTickmap[i] ^ nextTickmap[i]\n      for (let bit = 0; bit < 8; bit++) {\n        if ((xor & (1 << bit)) !== 0) {\n          const added = (nextTickmap[i] & (1 << bit)) !== 0\n          tickmapChanges = {\n            ...tickmapChanges,\n            [(i * 8 + bit + offset) * tickSpacing]: added ? 'added' : 'removed'\n          }\n        }\n      }\n    }\n  }\n  return tickmapChanges\n}\n","export type Invariant = {\n  \"version\": \"0.1.0\",\n  \"name\": \"invariant\",\n  \"instructions\": [\n    {\n      \"name\": \"createState\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"admin\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"programAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"nonce\",\n          \"type\": \"u8\"\n        }\n      ]\n    },\n    {\n      \"name\": \"createFeeTier\",\n      \"accounts\": [\n        {\n          \"name\": \"feeTier\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"admin\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"fee\",\n          \"type\": \"u128\"\n        },\n        {\n          \"name\": \"tickSpacing\",\n          \"type\": \"u16\"\n        }\n      ]\n    },\n    {\n      \"name\": \"createPool\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"feeTier\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tickmap\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenXReserve\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"tokenYReserve\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"payer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"initTick\",\n          \"type\": \"i32\"\n        }\n      ]\n    },\n    {\n      \"name\": \"swap\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tickmap\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"programAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"xToY\",\n          \"type\": \"bool\"\n        },\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"byAmountIn\",\n          \"type\": \"bool\"\n        },\n        {\n          \"name\": \"sqrtPriceLimit\",\n          \"type\": \"u128\"\n        }\n      ]\n    },\n    {\n      \"name\": \"initializeOracle\",\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"oracle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"payer\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"createTick\",\n      \"accounts\": [\n        {\n          \"name\": \"tick\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tickmap\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"payer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"index\",\n          \"type\": \"i32\"\n        }\n      ]\n    },\n    {\n      \"name\": \"createPositionList\",\n      \"accounts\": [\n        {\n          \"name\": \"positionList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"signer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"createPosition\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"position\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"positionList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"payer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"lowerTick\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"upperTick\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tickmap\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"programAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"lowerTickIndex\",\n          \"type\": \"i32\"\n        },\n        {\n          \"name\": \"upperTickIndex\",\n          \"type\": \"i32\"\n        },\n        {\n          \"name\": \"liquidityDelta\",\n          \"type\": {\n            \"defined\": \"Liquidity\"\n          }\n        },\n        {\n          \"name\": \"slippageLimitLower\",\n          \"type\": {\n            \"defined\": \"Price\"\n          }\n        },\n        {\n          \"name\": \"slippageLimitUpper\",\n          \"type\": {\n            \"defined\": \"Price\"\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"removePosition\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"removedPosition\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"positionList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lastPosition\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tickmap\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lowerTick\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"upperTick\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"programAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"index\",\n          \"type\": \"u32\"\n        },\n        {\n          \"name\": \"lowerTickIndex\",\n          \"type\": \"i32\"\n        },\n        {\n          \"name\": \"upperTickIndex\",\n          \"type\": \"i32\"\n        }\n      ]\n    },\n    {\n      \"name\": \"transferPositionOwnership\",\n      \"accounts\": [\n        {\n          \"name\": \"ownerList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"recipientList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"newPosition\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"removedPosition\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lastPosition\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"recipient\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"index\",\n          \"type\": \"u32\"\n        }\n      ]\n    },\n    {\n      \"name\": \"claimFee\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"position\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lowerTick\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"upperTick\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"programAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"index\",\n          \"type\": \"u32\"\n        },\n        {\n          \"name\": \"lowerTickIndex\",\n          \"type\": \"i32\"\n        },\n        {\n          \"name\": \"upperTickIndex\",\n          \"type\": \"i32\"\n        }\n      ]\n    },\n    {\n      \"name\": \"updateSecondsPerLiquidity\",\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lowerTick\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"upperTick\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"position\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"signer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"lowerTickIndex\",\n          \"type\": \"i32\"\n        },\n        {\n          \"name\": \"upperTickIndex\",\n          \"type\": \"i32\"\n        },\n        {\n          \"name\": \"index\",\n          \"type\": \"i32\"\n        }\n      ]\n    },\n    {\n      \"name\": \"withdrawProtocolFee\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"programAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"changeProtocolFee\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"admin\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"programAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"protocolFee\",\n          \"type\": {\n            \"defined\": \"FixedPoint\"\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"changeFeeReceiver\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"admin\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"feeReceiver\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"feeTier\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"fee\",\n            \"type\": {\n              \"defined\": \"FixedPoint\"\n            }\n          },\n          {\n            \"name\": \"tickSpacing\",\n            \"type\": \"u16\"\n          },\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"oracle\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"data\",\n            \"type\": {\n              \"array\": [\n                {\n                  \"defined\": \"Record\"\n                },\n                256\n              ]\n            }\n          },\n          {\n            \"name\": \"head\",\n            \"type\": \"u16\"\n          },\n          {\n            \"name\": \"amount\",\n            \"type\": \"u16\"\n          },\n          {\n            \"name\": \"size\",\n            \"type\": \"u16\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"pool\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"tokenX\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"tokenY\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"tokenXReserve\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"tokenYReserve\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"positionIterator\",\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"tickSpacing\",\n            \"type\": \"u16\"\n          },\n          {\n            \"name\": \"fee\",\n            \"type\": {\n              \"defined\": \"FixedPoint\"\n            }\n          },\n          {\n            \"name\": \"protocolFee\",\n            \"type\": {\n              \"defined\": \"FixedPoint\"\n            }\n          },\n          {\n            \"name\": \"liquidity\",\n            \"type\": {\n              \"defined\": \"Liquidity\"\n            }\n          },\n          {\n            \"name\": \"sqrtPrice\",\n            \"type\": {\n              \"defined\": \"Price\"\n            }\n          },\n          {\n            \"name\": \"currentTickIndex\",\n            \"type\": \"i32\"\n          },\n          {\n            \"name\": \"tickmap\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"feeGrowthGlobalX\",\n            \"type\": {\n              \"defined\": \"FeeGrowth\"\n            }\n          },\n          {\n            \"name\": \"feeGrowthGlobalY\",\n            \"type\": {\n              \"defined\": \"FeeGrowth\"\n            }\n          },\n          {\n            \"name\": \"feeProtocolTokenX\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"feeProtocolTokenY\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"secondsPerLiquidityGlobal\",\n            \"type\": {\n              \"defined\": \"FixedPoint\"\n            }\n          },\n          {\n            \"name\": \"startTimestamp\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"lastTimestamp\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"feeReceiver\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"oracleAddress\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"oracleInitialized\",\n            \"type\": \"bool\"\n          },\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"position\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"owner\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"pool\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"id\",\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"liquidity\",\n            \"type\": {\n              \"defined\": \"Liquidity\"\n            }\n          },\n          {\n            \"name\": \"lowerTickIndex\",\n            \"type\": \"i32\"\n          },\n          {\n            \"name\": \"upperTickIndex\",\n            \"type\": \"i32\"\n          },\n          {\n            \"name\": \"feeGrowthInsideX\",\n            \"type\": {\n              \"defined\": \"FeeGrowth\"\n            }\n          },\n          {\n            \"name\": \"feeGrowthInsideY\",\n            \"type\": {\n              \"defined\": \"FeeGrowth\"\n            }\n          },\n          {\n            \"name\": \"secondsPerLiquidityInside\",\n            \"type\": {\n              \"defined\": \"FixedPoint\"\n            }\n          },\n          {\n            \"name\": \"lastSlot\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"tokensOwedX\",\n            \"type\": {\n              \"defined\": \"FixedPoint\"\n            }\n          },\n          {\n            \"name\": \"tokensOwedY\",\n            \"type\": {\n              \"defined\": \"FixedPoint\"\n            }\n          },\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"positionList\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"head\",\n            \"type\": \"u32\"\n          },\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"state\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"admin\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"tick\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"pool\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"index\",\n            \"type\": \"i32\"\n          },\n          {\n            \"name\": \"sign\",\n            \"type\": \"bool\"\n          },\n          {\n            \"name\": \"liquidityChange\",\n            \"type\": {\n              \"defined\": \"Liquidity\"\n            }\n          },\n          {\n            \"name\": \"liquidityGross\",\n            \"type\": {\n              \"defined\": \"Liquidity\"\n            }\n          },\n          {\n            \"name\": \"sqrtPrice\",\n            \"type\": {\n              \"defined\": \"Price\"\n            }\n          },\n          {\n            \"name\": \"feeGrowthOutsideX\",\n            \"type\": {\n              \"defined\": \"FeeGrowth\"\n            }\n          },\n          {\n            \"name\": \"feeGrowthOutsideY\",\n            \"type\": {\n              \"defined\": \"FeeGrowth\"\n            }\n          },\n          {\n            \"name\": \"secondsPerLiquidityOutside\",\n            \"type\": {\n              \"defined\": \"FixedPoint\"\n            }\n          },\n          {\n            \"name\": \"secondsOutside\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"tickmap\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bitmap\",\n            \"type\": {\n              \"array\": [\n                \"u8\",\n                11091\n              ]\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"Price\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"v\",\n            \"type\": \"u128\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Liquidity\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"v\",\n            \"type\": \"u128\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"FeeGrowth\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"v\",\n            \"type\": \"u128\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"FixedPoint\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"v\",\n            \"type\": \"u128\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Record\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"timestamp\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"price\",\n            \"type\": {\n              \"defined\": \"Price\"\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"ZeroAmount\",\n      \"msg\": \"Amount is zero\"\n    },\n    {\n      \"code\": 6001,\n      \"name\": \"ZeroOutput\",\n      \"msg\": \"Output would be zero\"\n    },\n    {\n      \"code\": 6002,\n      \"name\": \"WrongTick\",\n      \"msg\": \"Not the expected tick\"\n    },\n    {\n      \"code\": 6003,\n      \"name\": \"WrongLimit\",\n      \"msg\": \"Price limit is on the wrong side of price\"\n    },\n    {\n      \"code\": 6004,\n      \"name\": \"InvalidTickIndex\",\n      \"msg\": \"Tick index not divisible by spacing or over limit\"\n    },\n    {\n      \"code\": 6005,\n      \"name\": \"InvalidTickInterval\",\n      \"msg\": \"Invalid tick_lower or tick_upper\"\n    },\n    {\n      \"code\": 6006,\n      \"name\": \"NoMoreTicks\",\n      \"msg\": \"There is no more tick in that direction\"\n    },\n    {\n      \"code\": 6007,\n      \"name\": \"TickNotFound\",\n      \"msg\": \"Correct tick not found in context\"\n    },\n    {\n      \"code\": 6008,\n      \"name\": \"PriceLimitReached\",\n      \"msg\": \"Price would cross swap limit\"\n    },\n    {\n      \"code\": 6009,\n      \"name\": \"InvalidTickLiquidity\",\n      \"msg\": \"Invalid tick liquidity\"\n    },\n    {\n      \"code\": 6010,\n      \"name\": \"EmptyPositionPokes\",\n      \"msg\": \"Disable empty position pokes\"\n    },\n    {\n      \"code\": 6011,\n      \"name\": \"InvalidPositionLiquidity\",\n      \"msg\": \"Invalid tick liquidity\"\n    },\n    {\n      \"code\": 6012,\n      \"name\": \"InvalidPoolLiquidity\",\n      \"msg\": \"Invalid pool liquidity\"\n    },\n    {\n      \"code\": 6013,\n      \"name\": \"InvalidPositionIndex\",\n      \"msg\": \"Invalid position index\"\n    },\n    {\n      \"code\": 6014,\n      \"name\": \"PositionWithoutLiquidity\",\n      \"msg\": \"Position liquidity would be zero\"\n    },\n    {\n      \"code\": 6015,\n      \"name\": \"Unauthorized\",\n      \"msg\": \"You are not admin\"\n    },\n    {\n      \"code\": 6016,\n      \"name\": \"InvalidPoolTokenAddresses\",\n      \"msg\": \"Invalid pool token addresses\"\n    },\n    {\n      \"code\": 6017,\n      \"name\": \"NegativeTime\",\n      \"msg\": \"Time cannot be negative\"\n    },\n    {\n      \"code\": 6018,\n      \"name\": \"OracleAlreadyInitialized\",\n      \"msg\": \"Oracle is already initialized\"\n    },\n    {\n      \"code\": 6019,\n      \"name\": \"LimitReached\",\n      \"msg\": \"Absolute price limit was reached\"\n    },\n    {\n      \"code\": 6020,\n      \"name\": \"InvalidProtocolFee\",\n      \"msg\": \"Invalid protocol fee\"\n    },\n    {\n      \"code\": 6021,\n      \"name\": \"NoGainSwap\",\n      \"msg\": \"Swap amount out is 0\"\n    },\n    {\n      \"code\": 6022,\n      \"name\": \"InvalidTokenAccount\",\n      \"msg\": \"Provided token account is different than expected\"\n    },\n    {\n      \"code\": 6023,\n      \"name\": \"InvalidAdmin\",\n      \"msg\": \"Admin address is different than expected\"\n    },\n    {\n      \"code\": 6024,\n      \"name\": \"InvalidAuthority\",\n      \"msg\": \"Provided authority is different than expected\"\n    },\n    {\n      \"code\": 6025,\n      \"name\": \"InvalidOwner\",\n      \"msg\": \"Provided token owner is different than expected\"\n    },\n    {\n      \"code\": 6026,\n      \"name\": \"InvalidMint\",\n      \"msg\": \"Provided token account mint is different than expected mint token\"\n    },\n    {\n      \"code\": 6027,\n      \"name\": \"InvalidTickmap\",\n      \"msg\": \"Provided tickmap is different than expected\"\n    },\n    {\n      \"code\": 6028,\n      \"name\": \"InvalidTickmapOwner\",\n      \"msg\": \"Provided tickmap owner is different than program ID\"\n    },\n    {\n      \"code\": 6029,\n      \"name\": \"InvalidListOwner\",\n      \"msg\": \"Recipient list address and owner list address should be different\"\n    },\n    {\n      \"code\": 6030,\n      \"name\": \"InvalidTickSpacing\",\n      \"msg\": \"Invalid tick spacing\"\n    }\n  ]\n};\n\nexport const IDL: Invariant = {\n  \"version\": \"0.1.0\",\n  \"name\": \"invariant\",\n  \"instructions\": [\n    {\n      \"name\": \"createState\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"admin\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"programAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"nonce\",\n          \"type\": \"u8\"\n        }\n      ]\n    },\n    {\n      \"name\": \"createFeeTier\",\n      \"accounts\": [\n        {\n          \"name\": \"feeTier\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"admin\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"fee\",\n          \"type\": \"u128\"\n        },\n        {\n          \"name\": \"tickSpacing\",\n          \"type\": \"u16\"\n        }\n      ]\n    },\n    {\n      \"name\": \"createPool\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"feeTier\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tickmap\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenXReserve\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"tokenYReserve\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"payer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"initTick\",\n          \"type\": \"i32\"\n        }\n      ]\n    },\n    {\n      \"name\": \"swap\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tickmap\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"programAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"xToY\",\n          \"type\": \"bool\"\n        },\n        {\n          \"name\": \"amount\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"byAmountIn\",\n          \"type\": \"bool\"\n        },\n        {\n          \"name\": \"sqrtPriceLimit\",\n          \"type\": \"u128\"\n        }\n      ]\n    },\n    {\n      \"name\": \"initializeOracle\",\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"oracle\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"payer\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"createTick\",\n      \"accounts\": [\n        {\n          \"name\": \"tick\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tickmap\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"payer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"index\",\n          \"type\": \"i32\"\n        }\n      ]\n    },\n    {\n      \"name\": \"createPositionList\",\n      \"accounts\": [\n        {\n          \"name\": \"positionList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"signer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"createPosition\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"position\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"positionList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"payer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"lowerTick\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"upperTick\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tickmap\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"programAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"lowerTickIndex\",\n          \"type\": \"i32\"\n        },\n        {\n          \"name\": \"upperTickIndex\",\n          \"type\": \"i32\"\n        },\n        {\n          \"name\": \"liquidityDelta\",\n          \"type\": {\n            \"defined\": \"Liquidity\"\n          }\n        },\n        {\n          \"name\": \"slippageLimitLower\",\n          \"type\": {\n            \"defined\": \"Price\"\n          }\n        },\n        {\n          \"name\": \"slippageLimitUpper\",\n          \"type\": {\n            \"defined\": \"Price\"\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"removePosition\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"removedPosition\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"positionList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lastPosition\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tickmap\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lowerTick\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"upperTick\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"programAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"index\",\n          \"type\": \"u32\"\n        },\n        {\n          \"name\": \"lowerTickIndex\",\n          \"type\": \"i32\"\n        },\n        {\n          \"name\": \"upperTickIndex\",\n          \"type\": \"i32\"\n        }\n      ]\n    },\n    {\n      \"name\": \"transferPositionOwnership\",\n      \"accounts\": [\n        {\n          \"name\": \"ownerList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"recipientList\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"newPosition\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"removedPosition\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lastPosition\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"recipient\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"index\",\n          \"type\": \"u32\"\n        }\n      ]\n    },\n    {\n      \"name\": \"claimFee\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"position\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lowerTick\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"upperTick\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"programAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"index\",\n          \"type\": \"u32\"\n        },\n        {\n          \"name\": \"lowerTickIndex\",\n          \"type\": \"i32\"\n        },\n        {\n          \"name\": \"upperTickIndex\",\n          \"type\": \"i32\"\n        }\n      ]\n    },\n    {\n      \"name\": \"updateSecondsPerLiquidity\",\n      \"accounts\": [\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"lowerTick\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"upperTick\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"position\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"owner\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"signer\",\n          \"isMut\": true,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"lowerTickIndex\",\n          \"type\": \"i32\"\n        },\n        {\n          \"name\": \"upperTickIndex\",\n          \"type\": \"i32\"\n        },\n        {\n          \"name\": \"index\",\n          \"type\": \"i32\"\n        }\n      ]\n    },\n    {\n      \"name\": \"withdrawProtocolFee\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"accountY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveX\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"reserveY\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"programAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    },\n    {\n      \"name\": \"changeProtocolFee\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"admin\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"programAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"protocolFee\",\n          \"type\": {\n            \"defined\": \"FixedPoint\"\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"changeFeeReceiver\",\n      \"accounts\": [\n        {\n          \"name\": \"state\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"pool\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenX\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenY\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"admin\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"feeReceiver\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": []\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"feeTier\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"fee\",\n            \"type\": {\n              \"defined\": \"FixedPoint\"\n            }\n          },\n          {\n            \"name\": \"tickSpacing\",\n            \"type\": \"u16\"\n          },\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"oracle\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"data\",\n            \"type\": {\n              \"array\": [\n                {\n                  \"defined\": \"Record\"\n                },\n                256\n              ]\n            }\n          },\n          {\n            \"name\": \"head\",\n            \"type\": \"u16\"\n          },\n          {\n            \"name\": \"amount\",\n            \"type\": \"u16\"\n          },\n          {\n            \"name\": \"size\",\n            \"type\": \"u16\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"pool\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"tokenX\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"tokenY\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"tokenXReserve\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"tokenYReserve\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"positionIterator\",\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"tickSpacing\",\n            \"type\": \"u16\"\n          },\n          {\n            \"name\": \"fee\",\n            \"type\": {\n              \"defined\": \"FixedPoint\"\n            }\n          },\n          {\n            \"name\": \"protocolFee\",\n            \"type\": {\n              \"defined\": \"FixedPoint\"\n            }\n          },\n          {\n            \"name\": \"liquidity\",\n            \"type\": {\n              \"defined\": \"Liquidity\"\n            }\n          },\n          {\n            \"name\": \"sqrtPrice\",\n            \"type\": {\n              \"defined\": \"Price\"\n            }\n          },\n          {\n            \"name\": \"currentTickIndex\",\n            \"type\": \"i32\"\n          },\n          {\n            \"name\": \"tickmap\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"feeGrowthGlobalX\",\n            \"type\": {\n              \"defined\": \"FeeGrowth\"\n            }\n          },\n          {\n            \"name\": \"feeGrowthGlobalY\",\n            \"type\": {\n              \"defined\": \"FeeGrowth\"\n            }\n          },\n          {\n            \"name\": \"feeProtocolTokenX\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"feeProtocolTokenY\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"secondsPerLiquidityGlobal\",\n            \"type\": {\n              \"defined\": \"FixedPoint\"\n            }\n          },\n          {\n            \"name\": \"startTimestamp\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"lastTimestamp\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"feeReceiver\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"oracleAddress\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"oracleInitialized\",\n            \"type\": \"bool\"\n          },\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"position\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"owner\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"pool\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"id\",\n            \"type\": \"u128\"\n          },\n          {\n            \"name\": \"liquidity\",\n            \"type\": {\n              \"defined\": \"Liquidity\"\n            }\n          },\n          {\n            \"name\": \"lowerTickIndex\",\n            \"type\": \"i32\"\n          },\n          {\n            \"name\": \"upperTickIndex\",\n            \"type\": \"i32\"\n          },\n          {\n            \"name\": \"feeGrowthInsideX\",\n            \"type\": {\n              \"defined\": \"FeeGrowth\"\n            }\n          },\n          {\n            \"name\": \"feeGrowthInsideY\",\n            \"type\": {\n              \"defined\": \"FeeGrowth\"\n            }\n          },\n          {\n            \"name\": \"secondsPerLiquidityInside\",\n            \"type\": {\n              \"defined\": \"FixedPoint\"\n            }\n          },\n          {\n            \"name\": \"lastSlot\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"tokensOwedX\",\n            \"type\": {\n              \"defined\": \"FixedPoint\"\n            }\n          },\n          {\n            \"name\": \"tokensOwedY\",\n            \"type\": {\n              \"defined\": \"FixedPoint\"\n            }\n          },\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"positionList\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"head\",\n            \"type\": \"u32\"\n          },\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"state\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"admin\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"nonce\",\n            \"type\": \"u8\"\n          },\n          {\n            \"name\": \"authority\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"tick\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"pool\",\n            \"type\": \"publicKey\"\n          },\n          {\n            \"name\": \"index\",\n            \"type\": \"i32\"\n          },\n          {\n            \"name\": \"sign\",\n            \"type\": \"bool\"\n          },\n          {\n            \"name\": \"liquidityChange\",\n            \"type\": {\n              \"defined\": \"Liquidity\"\n            }\n          },\n          {\n            \"name\": \"liquidityGross\",\n            \"type\": {\n              \"defined\": \"Liquidity\"\n            }\n          },\n          {\n            \"name\": \"sqrtPrice\",\n            \"type\": {\n              \"defined\": \"Price\"\n            }\n          },\n          {\n            \"name\": \"feeGrowthOutsideX\",\n            \"type\": {\n              \"defined\": \"FeeGrowth\"\n            }\n          },\n          {\n            \"name\": \"feeGrowthOutsideY\",\n            \"type\": {\n              \"defined\": \"FeeGrowth\"\n            }\n          },\n          {\n            \"name\": \"secondsPerLiquidityOutside\",\n            \"type\": {\n              \"defined\": \"FixedPoint\"\n            }\n          },\n          {\n            \"name\": \"secondsOutside\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"tickmap\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"bitmap\",\n            \"type\": {\n              \"array\": [\n                \"u8\",\n                11091\n              ]\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"Price\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"v\",\n            \"type\": \"u128\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Liquidity\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"v\",\n            \"type\": \"u128\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"FeeGrowth\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"v\",\n            \"type\": \"u128\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"FixedPoint\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"v\",\n            \"type\": \"u128\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Record\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"timestamp\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"price\",\n            \"type\": {\n              \"defined\": \"Price\"\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"errors\": [\n    {\n      \"code\": 6000,\n      \"name\": \"ZeroAmount\",\n      \"msg\": \"Amount is zero\"\n    },\n    {\n      \"code\": 6001,\n      \"name\": \"ZeroOutput\",\n      \"msg\": \"Output would be zero\"\n    },\n    {\n      \"code\": 6002,\n      \"name\": \"WrongTick\",\n      \"msg\": \"Not the expected tick\"\n    },\n    {\n      \"code\": 6003,\n      \"name\": \"WrongLimit\",\n      \"msg\": \"Price limit is on the wrong side of price\"\n    },\n    {\n      \"code\": 6004,\n      \"name\": \"InvalidTickIndex\",\n      \"msg\": \"Tick index not divisible by spacing or over limit\"\n    },\n    {\n      \"code\": 6005,\n      \"name\": \"InvalidTickInterval\",\n      \"msg\": \"Invalid tick_lower or tick_upper\"\n    },\n    {\n      \"code\": 6006,\n      \"name\": \"NoMoreTicks\",\n      \"msg\": \"There is no more tick in that direction\"\n    },\n    {\n      \"code\": 6007,\n      \"name\": \"TickNotFound\",\n      \"msg\": \"Correct tick not found in context\"\n    },\n    {\n      \"code\": 6008,\n      \"name\": \"PriceLimitReached\",\n      \"msg\": \"Price would cross swap limit\"\n    },\n    {\n      \"code\": 6009,\n      \"name\": \"InvalidTickLiquidity\",\n      \"msg\": \"Invalid tick liquidity\"\n    },\n    {\n      \"code\": 6010,\n      \"name\": \"EmptyPositionPokes\",\n      \"msg\": \"Disable empty position pokes\"\n    },\n    {\n      \"code\": 6011,\n      \"name\": \"InvalidPositionLiquidity\",\n      \"msg\": \"Invalid tick liquidity\"\n    },\n    {\n      \"code\": 6012,\n      \"name\": \"InvalidPoolLiquidity\",\n      \"msg\": \"Invalid pool liquidity\"\n    },\n    {\n      \"code\": 6013,\n      \"name\": \"InvalidPositionIndex\",\n      \"msg\": \"Invalid position index\"\n    },\n    {\n      \"code\": 6014,\n      \"name\": \"PositionWithoutLiquidity\",\n      \"msg\": \"Position liquidity would be zero\"\n    },\n    {\n      \"code\": 6015,\n      \"name\": \"Unauthorized\",\n      \"msg\": \"You are not admin\"\n    },\n    {\n      \"code\": 6016,\n      \"name\": \"InvalidPoolTokenAddresses\",\n      \"msg\": \"Invalid pool token addresses\"\n    },\n    {\n      \"code\": 6017,\n      \"name\": \"NegativeTime\",\n      \"msg\": \"Time cannot be negative\"\n    },\n    {\n      \"code\": 6018,\n      \"name\": \"OracleAlreadyInitialized\",\n      \"msg\": \"Oracle is already initialized\"\n    },\n    {\n      \"code\": 6019,\n      \"name\": \"LimitReached\",\n      \"msg\": \"Absolute price limit was reached\"\n    },\n    {\n      \"code\": 6020,\n      \"name\": \"InvalidProtocolFee\",\n      \"msg\": \"Invalid protocol fee\"\n    },\n    {\n      \"code\": 6021,\n      \"name\": \"NoGainSwap\",\n      \"msg\": \"Swap amount out is 0\"\n    },\n    {\n      \"code\": 6022,\n      \"name\": \"InvalidTokenAccount\",\n      \"msg\": \"Provided token account is different than expected\"\n    },\n    {\n      \"code\": 6023,\n      \"name\": \"InvalidAdmin\",\n      \"msg\": \"Admin address is different than expected\"\n    },\n    {\n      \"code\": 6024,\n      \"name\": \"InvalidAuthority\",\n      \"msg\": \"Provided authority is different than expected\"\n    },\n    {\n      \"code\": 6025,\n      \"name\": \"InvalidOwner\",\n      \"msg\": \"Provided token owner is different than expected\"\n    },\n    {\n      \"code\": 6026,\n      \"name\": \"InvalidMint\",\n      \"msg\": \"Provided token account mint is different than expected mint token\"\n    },\n    {\n      \"code\": 6027,\n      \"name\": \"InvalidTickmap\",\n      \"msg\": \"Provided tickmap is different than expected\"\n    },\n    {\n      \"code\": 6028,\n      \"name\": \"InvalidTickmapOwner\",\n      \"msg\": \"Provided tickmap owner is different than program ID\"\n    },\n    {\n      \"code\": 6029,\n      \"name\": \"InvalidListOwner\",\n      \"msg\": \"Recipient list address and owner list address should be different\"\n    },\n    {\n      \"code\": 6030,\n      \"name\": \"InvalidTickSpacing\",\n      \"msg\": \"Invalid tick spacing\"\n    }\n  ]\n};\n","export enum Network {\n  LOCAL,\n  DEV,\n  MAIN\n}\n\nexport const getMarketAddress = (network: Network) => {\n  switch (network) {\n    case Network.LOCAL:\n      return 'HyaB3W9q6XdA5xwpU4XnSZV94htfmbmqJXZcEbRaJutt'\n    case Network.DEV:\n      return '9aiirQKPZ2peE9QrXYmsbTtR7wSDJi2HkQdHuaMpTpei'\n    case Network.MAIN:\n      return 'HyaB3W9q6XdA5xwpU4XnSZV94htfmbmqJXZcEbRaJutt'\n    default:\n      throw new Error('Unknown network')\n  }\n}\n\nexport const MOCK_TOKENS = {\n  USDC: '5ihkgQGjKvWvmMtywTgLdwokZ6hqFv5AgxSyYoCNufQW',\n  USDT: '4cZv7KgYNgmr3NZSDhT5bhXGGttXKTndqyXeeC1cB6Xm',\n  SOL: 'BJVjNqQzM1fywLWzzKbQEZ2Jsx9AVyhSLWzko3yF68PH',\n  MSOL: '4r8WDEvBntEr3dT69p7ua1rsaWcpTSHnKpY5JugDkcPQ',\n  WSOL: 'So11111111111111111111111111111111111111112',\n  BTC: '4gGKgUYvGkCT62Cu1zfPspuR7VPNPYrigXFmF9KTPji8',\n  REN_DOGE: 'ArjgPxuQgaGXU16XSdBPDsCit7nxjAKR5Gvtvb2oFZUZ',\n  USDH: '41dDByBv1Z6mCHCp4FJeZNP8MPiviUpFz2AdzJYRszzv',\n  HBB: 'EBuKgNDiUonDYML2CZXCRQKnE982hnt6AhaxXVZZoCyo'\n}\n\nexport const MAINNET_TOKENS = {\n  USDC: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n  USDT: 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',\n  UST: '9vMJfxuKxXBoEa7rM12mYLMwTacLMLDJqHozw96WQL8i',\n  UXD: '7kbnvuGBxxj8AG9qp8Scn56muWGaRaFqxg1FsRp3PaFT',\n  ETH: '7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs', //wormhole\n  WSOL: 'So11111111111111111111111111111111111111112',\n  BTC: '9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E', //sollet\n  HBB: 'HBB111SCo9jkCejsZfz8Ec8nH7T6THF8KEKSnvwT6XK6',\n  USDH: 'USDH1SM1ojwWUga67PGrgFWUHibbjqMvuMaDkRJTgkX'\n}\n","import { PublicKey } from '@solana/web3.js'\nimport { utils, BN } from '@project-serum/anchor'\nimport { FeeTier } from './market'\nimport { bigNumberToBuffer, feeToTickSpacing, getFeeTierAddress } from './utils'\n\nconst POOL_SEED = 'poolv1'\n\nexport class Pair {\n  public tokenX: PublicKey\n  public tokenY: PublicKey\n  public feeTier: FeeTier\n  public feeTierAddress: PublicKey | null\n  public tickSpacing: number\n\n  constructor(first: PublicKey, second: PublicKey, feeTier: FeeTier) {\n    if (first.equals(second)) {\n      throw new Error('Pair must contain two unique public keys')\n    }\n\n    if (first.toString() < second.toString()) {\n      this.tokenX = first\n      this.tokenY = second\n    } else {\n      this.tokenX = second\n      this.tokenY = first\n    }\n    this.tickSpacing = feeTier.tickSpacing ?? feeToTickSpacing(feeTier.fee)\n    this.feeTier = {\n      fee: feeTier.fee,\n      tickSpacing: this.tickSpacing\n    }\n    this.feeTierAddress = null\n\n    if (this.feeTier.tickSpacing == null) {\n      this.feeTier.tickSpacing = feeToTickSpacing(this.feeTier.fee)\n    }\n  }\n\n  async getAddressAndBump(programId: PublicKey): Promise<[PublicKey, number]> {\n    return await PublicKey.findProgramAddress(\n      [\n        Buffer.from(utils.bytes.utf8.encode(POOL_SEED)),\n        this.tokenX.toBuffer(),\n        this.tokenY.toBuffer(),\n        bigNumberToBuffer(this.feeTier.fee, 128),\n        bigNumberToBuffer(new BN(this.feeTier.tickSpacing as number), 16)\n      ],\n      programId\n    )\n  }\n\n  async getAddress(programId: PublicKey): Promise<PublicKey> {\n    return await this.getAddressAndBump(programId).then(([address, _]) => address)\n  }\n\n  async getFeeTierAddress(programId: PublicKey) {\n    if (this.feeTierAddress == null) {\n      const { address: feeTierAddress } = await getFeeTierAddress(this.feeTier, programId)\n      this.feeTierAddress = feeTierAddress\n    }\n    return this.feeTierAddress\n  }\n}\n"],"mappings":"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A,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAA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","names":["BN","utils","AnchorProvider","Keypair","PublicKey","Transaction","BN","invariant","BN","BN","INVARIANT_ERRORS","BN","BN","BN","BN","BN","BN","BN","invariant","BN","Network","PublicKey","Market","AnchorProvider","Keypair","Transaction","BN","utils","PublicKey","utils","BN","PublicKey","utils","BN"]}