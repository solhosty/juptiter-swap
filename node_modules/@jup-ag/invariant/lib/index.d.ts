import * as _project_serum_anchor_dist_cjs_program_namespace_types from '@project-serum/anchor/dist/cjs/program/namespace/types';
import * as _project_serum_anchor from '@project-serum/anchor';
import { Program, BN } from '@project-serum/anchor';
import * as _solana_spl_token from '@solana/spl-token';
import { Token } from '@solana/spl-token';
import { Connection, PublicKey, Transaction, Keypair, TransactionInstruction, ConfirmOptions } from '@solana/web3.js';

declare type Invariant = {
    "version": "0.1.0";
    "name": "invariant";
    "instructions": [
        {
            "name": "createState";
            "accounts": [
                {
                    "name": "state";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "admin";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "programAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "rent";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "nonce";
                    "type": "u8";
                }
            ];
        },
        {
            "name": "createFeeTier";
            "accounts": [
                {
                    "name": "feeTier";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "state";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "admin";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "rent";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "fee";
                    "type": "u128";
                },
                {
                    "name": "tickSpacing";
                    "type": "u16";
                }
            ];
        },
        {
            "name": "createPool";
            "accounts": [
                {
                    "name": "state";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "feeTier";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tickmap";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenX";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenY";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenXReserve";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "tokenYReserve";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "payer";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "authority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "rent";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "initTick";
                    "type": "i32";
                }
            ];
        },
        {
            "name": "swap";
            "accounts": [
                {
                    "name": "state";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tickmap";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "accountX";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "accountY";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "reserveX";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "reserveY";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "owner";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "programAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "xToY";
                    "type": "bool";
                },
                {
                    "name": "amount";
                    "type": "u64";
                },
                {
                    "name": "byAmountIn";
                    "type": "bool";
                },
                {
                    "name": "sqrtPriceLimit";
                    "type": "u128";
                }
            ];
        },
        {
            "name": "initializeOracle";
            "accounts": [
                {
                    "name": "pool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "oracle";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenX";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenY";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "payer";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "rent";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [];
        },
        {
            "name": "createTick";
            "accounts": [
                {
                    "name": "tick";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tickmap";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "payer";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "tokenX";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenY";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "rent";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "index";
                    "type": "i32";
                }
            ];
        },
        {
            "name": "createPositionList";
            "accounts": [
                {
                    "name": "positionList";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "owner";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "signer";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "rent";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [];
        },
        {
            "name": "createPosition";
            "accounts": [
                {
                    "name": "state";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "position";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "positionList";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "payer";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "owner";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "lowerTick";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "upperTick";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tickmap";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenX";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenY";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "accountX";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "accountY";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "reserveX";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "reserveY";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "programAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "rent";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "lowerTickIndex";
                    "type": "i32";
                },
                {
                    "name": "upperTickIndex";
                    "type": "i32";
                },
                {
                    "name": "liquidityDelta";
                    "type": {
                        "defined": "Liquidity";
                    };
                },
                {
                    "name": "slippageLimitLower";
                    "type": {
                        "defined": "Price";
                    };
                },
                {
                    "name": "slippageLimitUpper";
                    "type": {
                        "defined": "Price";
                    };
                }
            ];
        },
        {
            "name": "removePosition";
            "accounts": [
                {
                    "name": "state";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "removedPosition";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "positionList";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "lastPosition";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tickmap";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "lowerTick";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "upperTick";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "owner";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "tokenX";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenY";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "accountX";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "accountY";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "reserveX";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "reserveY";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "programAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "index";
                    "type": "u32";
                },
                {
                    "name": "lowerTickIndex";
                    "type": "i32";
                },
                {
                    "name": "upperTickIndex";
                    "type": "i32";
                }
            ];
        },
        {
            "name": "transferPositionOwnership";
            "accounts": [
                {
                    "name": "ownerList";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "recipientList";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "newPosition";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "removedPosition";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "lastPosition";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "owner";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "recipient";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "rent";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "index";
                    "type": "u32";
                }
            ];
        },
        {
            "name": "claimFee";
            "accounts": [
                {
                    "name": "state";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "position";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "lowerTick";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "upperTick";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "owner";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "tokenX";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenY";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "accountX";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "accountY";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "reserveX";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "reserveY";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "programAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "index";
                    "type": "u32";
                },
                {
                    "name": "lowerTickIndex";
                    "type": "i32";
                },
                {
                    "name": "upperTickIndex";
                    "type": "i32";
                }
            ];
        },
        {
            "name": "updateSecondsPerLiquidity";
            "accounts": [
                {
                    "name": "pool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "lowerTick";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "upperTick";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "position";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenX";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenY";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "owner";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "signer";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "rent";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "lowerTickIndex";
                    "type": "i32";
                },
                {
                    "name": "upperTickIndex";
                    "type": "i32";
                },
                {
                    "name": "index";
                    "type": "i32";
                }
            ];
        },
        {
            "name": "withdrawProtocolFee";
            "accounts": [
                {
                    "name": "state";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenX";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenY";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "accountX";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "accountY";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "reserveX";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "reserveY";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "authority";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "programAuthority";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [];
        },
        {
            "name": "changeProtocolFee";
            "accounts": [
                {
                    "name": "state";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenX";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenY";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "admin";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "programAuthority";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "protocolFee";
                    "type": {
                        "defined": "FixedPoint";
                    };
                }
            ];
        },
        {
            "name": "changeFeeReceiver";
            "accounts": [
                {
                    "name": "state";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "pool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenX";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenY";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "admin";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "feeReceiver";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [];
        }
    ];
    "accounts": [
        {
            "name": "feeTier";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "fee";
                        "type": {
                            "defined": "FixedPoint";
                        };
                    },
                    {
                        "name": "tickSpacing";
                        "type": "u16";
                    },
                    {
                        "name": "bump";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "oracle";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "data";
                        "type": {
                            "array": [
                                {
                                    "defined": "Record";
                                },
                                256
                            ];
                        };
                    },
                    {
                        "name": "head";
                        "type": "u16";
                    },
                    {
                        "name": "amount";
                        "type": "u16";
                    },
                    {
                        "name": "size";
                        "type": "u16";
                    }
                ];
            };
        },
        {
            "name": "pool";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "tokenX";
                        "type": "publicKey";
                    },
                    {
                        "name": "tokenY";
                        "type": "publicKey";
                    },
                    {
                        "name": "tokenXReserve";
                        "type": "publicKey";
                    },
                    {
                        "name": "tokenYReserve";
                        "type": "publicKey";
                    },
                    {
                        "name": "positionIterator";
                        "type": "u128";
                    },
                    {
                        "name": "tickSpacing";
                        "type": "u16";
                    },
                    {
                        "name": "fee";
                        "type": {
                            "defined": "FixedPoint";
                        };
                    },
                    {
                        "name": "protocolFee";
                        "type": {
                            "defined": "FixedPoint";
                        };
                    },
                    {
                        "name": "liquidity";
                        "type": {
                            "defined": "Liquidity";
                        };
                    },
                    {
                        "name": "sqrtPrice";
                        "type": {
                            "defined": "Price";
                        };
                    },
                    {
                        "name": "currentTickIndex";
                        "type": "i32";
                    },
                    {
                        "name": "tickmap";
                        "type": "publicKey";
                    },
                    {
                        "name": "feeGrowthGlobalX";
                        "type": {
                            "defined": "FeeGrowth";
                        };
                    },
                    {
                        "name": "feeGrowthGlobalY";
                        "type": {
                            "defined": "FeeGrowth";
                        };
                    },
                    {
                        "name": "feeProtocolTokenX";
                        "type": "u64";
                    },
                    {
                        "name": "feeProtocolTokenY";
                        "type": "u64";
                    },
                    {
                        "name": "secondsPerLiquidityGlobal";
                        "type": {
                            "defined": "FixedPoint";
                        };
                    },
                    {
                        "name": "startTimestamp";
                        "type": "u64";
                    },
                    {
                        "name": "lastTimestamp";
                        "type": "u64";
                    },
                    {
                        "name": "feeReceiver";
                        "type": "publicKey";
                    },
                    {
                        "name": "oracleAddress";
                        "type": "publicKey";
                    },
                    {
                        "name": "oracleInitialized";
                        "type": "bool";
                    },
                    {
                        "name": "bump";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "position";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "owner";
                        "type": "publicKey";
                    },
                    {
                        "name": "pool";
                        "type": "publicKey";
                    },
                    {
                        "name": "id";
                        "type": "u128";
                    },
                    {
                        "name": "liquidity";
                        "type": {
                            "defined": "Liquidity";
                        };
                    },
                    {
                        "name": "lowerTickIndex";
                        "type": "i32";
                    },
                    {
                        "name": "upperTickIndex";
                        "type": "i32";
                    },
                    {
                        "name": "feeGrowthInsideX";
                        "type": {
                            "defined": "FeeGrowth";
                        };
                    },
                    {
                        "name": "feeGrowthInsideY";
                        "type": {
                            "defined": "FeeGrowth";
                        };
                    },
                    {
                        "name": "secondsPerLiquidityInside";
                        "type": {
                            "defined": "FixedPoint";
                        };
                    },
                    {
                        "name": "lastSlot";
                        "type": "u64";
                    },
                    {
                        "name": "tokensOwedX";
                        "type": {
                            "defined": "FixedPoint";
                        };
                    },
                    {
                        "name": "tokensOwedY";
                        "type": {
                            "defined": "FixedPoint";
                        };
                    },
                    {
                        "name": "bump";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "positionList";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "head";
                        "type": "u32";
                    },
                    {
                        "name": "bump";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "state";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "admin";
                        "type": "publicKey";
                    },
                    {
                        "name": "nonce";
                        "type": "u8";
                    },
                    {
                        "name": "authority";
                        "type": "publicKey";
                    },
                    {
                        "name": "bump";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "tick";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "pool";
                        "type": "publicKey";
                    },
                    {
                        "name": "index";
                        "type": "i32";
                    },
                    {
                        "name": "sign";
                        "type": "bool";
                    },
                    {
                        "name": "liquidityChange";
                        "type": {
                            "defined": "Liquidity";
                        };
                    },
                    {
                        "name": "liquidityGross";
                        "type": {
                            "defined": "Liquidity";
                        };
                    },
                    {
                        "name": "sqrtPrice";
                        "type": {
                            "defined": "Price";
                        };
                    },
                    {
                        "name": "feeGrowthOutsideX";
                        "type": {
                            "defined": "FeeGrowth";
                        };
                    },
                    {
                        "name": "feeGrowthOutsideY";
                        "type": {
                            "defined": "FeeGrowth";
                        };
                    },
                    {
                        "name": "secondsPerLiquidityOutside";
                        "type": {
                            "defined": "FixedPoint";
                        };
                    },
                    {
                        "name": "secondsOutside";
                        "type": "u64";
                    },
                    {
                        "name": "bump";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "tickmap";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "bitmap";
                        "type": {
                            "array": [
                                "u8",
                                11091
                            ];
                        };
                    }
                ];
            };
        }
    ];
    "types": [
        {
            "name": "Price";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "v";
                        "type": "u128";
                    }
                ];
            };
        },
        {
            "name": "Liquidity";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "v";
                        "type": "u128";
                    }
                ];
            };
        },
        {
            "name": "FeeGrowth";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "v";
                        "type": "u128";
                    }
                ];
            };
        },
        {
            "name": "FixedPoint";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "v";
                        "type": "u128";
                    }
                ];
            };
        },
        {
            "name": "Record";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "timestamp";
                        "type": "u64";
                    },
                    {
                        "name": "price";
                        "type": {
                            "defined": "Price";
                        };
                    }
                ];
            };
        }
    ];
    "errors": [
        {
            "code": 6000;
            "name": "ZeroAmount";
            "msg": "Amount is zero";
        },
        {
            "code": 6001;
            "name": "ZeroOutput";
            "msg": "Output would be zero";
        },
        {
            "code": 6002;
            "name": "WrongTick";
            "msg": "Not the expected tick";
        },
        {
            "code": 6003;
            "name": "WrongLimit";
            "msg": "Price limit is on the wrong side of price";
        },
        {
            "code": 6004;
            "name": "InvalidTickIndex";
            "msg": "Tick index not divisible by spacing or over limit";
        },
        {
            "code": 6005;
            "name": "InvalidTickInterval";
            "msg": "Invalid tick_lower or tick_upper";
        },
        {
            "code": 6006;
            "name": "NoMoreTicks";
            "msg": "There is no more tick in that direction";
        },
        {
            "code": 6007;
            "name": "TickNotFound";
            "msg": "Correct tick not found in context";
        },
        {
            "code": 6008;
            "name": "PriceLimitReached";
            "msg": "Price would cross swap limit";
        },
        {
            "code": 6009;
            "name": "InvalidTickLiquidity";
            "msg": "Invalid tick liquidity";
        },
        {
            "code": 6010;
            "name": "EmptyPositionPokes";
            "msg": "Disable empty position pokes";
        },
        {
            "code": 6011;
            "name": "InvalidPositionLiquidity";
            "msg": "Invalid tick liquidity";
        },
        {
            "code": 6012;
            "name": "InvalidPoolLiquidity";
            "msg": "Invalid pool liquidity";
        },
        {
            "code": 6013;
            "name": "InvalidPositionIndex";
            "msg": "Invalid position index";
        },
        {
            "code": 6014;
            "name": "PositionWithoutLiquidity";
            "msg": "Position liquidity would be zero";
        },
        {
            "code": 6015;
            "name": "Unauthorized";
            "msg": "You are not admin";
        },
        {
            "code": 6016;
            "name": "InvalidPoolTokenAddresses";
            "msg": "Invalid pool token addresses";
        },
        {
            "code": 6017;
            "name": "NegativeTime";
            "msg": "Time cannot be negative";
        },
        {
            "code": 6018;
            "name": "OracleAlreadyInitialized";
            "msg": "Oracle is already initialized";
        },
        {
            "code": 6019;
            "name": "LimitReached";
            "msg": "Absolute price limit was reached";
        },
        {
            "code": 6020;
            "name": "InvalidProtocolFee";
            "msg": "Invalid protocol fee";
        },
        {
            "code": 6021;
            "name": "NoGainSwap";
            "msg": "Swap amount out is 0";
        },
        {
            "code": 6022;
            "name": "InvalidTokenAccount";
            "msg": "Provided token account is different than expected";
        },
        {
            "code": 6023;
            "name": "InvalidAdmin";
            "msg": "Admin address is different than expected";
        },
        {
            "code": 6024;
            "name": "InvalidAuthority";
            "msg": "Provided authority is different than expected";
        },
        {
            "code": 6025;
            "name": "InvalidOwner";
            "msg": "Provided token owner is different than expected";
        },
        {
            "code": 6026;
            "name": "InvalidMint";
            "msg": "Provided token account mint is different than expected mint token";
        },
        {
            "code": 6027;
            "name": "InvalidTickmap";
            "msg": "Provided tickmap is different than expected";
        },
        {
            "code": 6028;
            "name": "InvalidTickmapOwner";
            "msg": "Provided tickmap owner is different than program ID";
        },
        {
            "code": 6029;
            "name": "InvalidListOwner";
            "msg": "Recipient list address and owner list address should be different";
        },
        {
            "code": 6030;
            "name": "InvalidTickSpacing";
            "msg": "Invalid tick spacing";
        }
    ];
};
declare const IDL: Invariant;

declare enum Network {
    LOCAL = 0,
    DEV = 1,
    MAIN = 2
}
declare const getMarketAddress: (network: Network) => "HyaB3W9q6XdA5xwpU4XnSZV94htfmbmqJXZcEbRaJutt" | "9aiirQKPZ2peE9QrXYmsbTtR7wSDJi2HkQdHuaMpTpei";
declare const MOCK_TOKENS: {
    USDC: string;
    USDT: string;
    SOL: string;
    MSOL: string;
    WSOL: string;
    BTC: string;
    REN_DOGE: string;
    USDH: string;
    HBB: string;
};

declare const TICK_CROSSES_PER_IX = 19;
declare const FEE_TIER = "feetierv1";
declare class Market {
    connection: Connection;
    wallet: IWallet;
    program: Program<Invariant>;
    stateAddress: PublicKey;
    programAuthority: PublicKey;
    network: Network;
    private constructor();
    static build(network: Network, wallet: IWallet, connection: Connection, programId?: PublicKey): Promise<Market>;
    createPool(createPool: CreatePool): Promise<void>;
    createPoolTx({ pair, payer, initTick }: CreatePoolTx): Promise<{
        transaction: Transaction;
        signers: Keypair[];
    }>;
    getProgramAuthority(): Promise<{
        programAuthority: PublicKey;
        nonce: number;
    }>;
    getFeeTier(feeTier: FeeTier): Promise<FeeTierStructure>;
    getPool(pair: Pair): Promise<PoolStructure>;
    getPoolByAddress(address: PublicKey): Promise<PoolStructure>;
    onPoolChange(tokenX: PublicKey, tokenY: PublicKey, feeTier: FeeTier, fn: (poolStructure: PoolStructure) => void): Promise<void>;
    onTickChange(pair: Pair, index: number, fn: (tick: Tick) => void): Promise<void>;
    unsubscribeTick(pair: Pair, index: number): Promise<void>;
    onTickmapChange(tickmap: PublicKey, fn: (tickmap: Tickmap) => void): Promise<void>;
    getFeeTierAddress(feeTier: FeeTier): Promise<{
        address: PublicKey;
        bump: number;
    }>;
    getTickmap(pair: Pair): Promise<Tickmap>;
    isInitialized(pair: Pair, index: number): Promise<boolean>;
    getTick(pair: Pair, index: number): Promise<Tick>;
    getTickByPool(poolAddress: PublicKey, index: number): Promise<Tick>;
    getClosestTicks(pair: Pair, limit: number, maxRange?: number, oneWay?: 'up' | 'down'): Promise<Tick[]>;
    getAllTicks(pair: Pair): Promise<Tick[]>;
    getAllPoolLiquidityInTokens(poolAddress: PublicKey): Promise<BN>;
    getActiveLiquidityInTokens(poolAddress: PublicKey, currentTickIndex: number): Promise<BN>;
    getAllPositions(owner: PublicKey): Promise<Position[]>;
    getAllUserPositions(owner: PublicKey): Promise<PositionStructure[]>;
    getLiquidityOnTicks(pair: Pair): Promise<{
        liquidity: BN;
        index: number;
    }[]>;
    getPositionList(owner: PublicKey): Promise<PositionList>;
    getPosition(owner: PublicKey, index: number): Promise<Position>;
    getPositionsFromIndexes(owner: PublicKey, indexes: number[]): Promise<Position[]>;
    getPositionsFromRange(owner: PublicKey, lowerIndex: number, upperIndex: number): Promise<Position[]>;
    getTickAddress(pair: Pair, index: number): Promise<{
        tickAddress: PublicKey;
        tickBump: number;
    }>;
    getTickAddressByPool(poolAddress: PublicKey, index: number): Promise<{
        tickAddress: PublicKey;
        tickBump: number;
    }>;
    getPositionListAddress(owner: PublicKey): Promise<{
        positionListAddress: PublicKey;
        positionListBump: number;
    }>;
    getPositionAddress(owner: PublicKey, index: number): Promise<{
        positionAddress: PublicKey;
        positionBump: number;
    }>;
    getNewPositionAddress(owner: PublicKey): Promise<{
        positionAddress: PublicKey;
        positionBump: number;
    }>;
    getPositionsForPool(pool: PublicKey): Promise<PositionWithAddress[]>;
    createFeeTierInstruction({ feeTier, admin }: CreateFeeTier): Promise<TransactionInstruction>;
    createFeeTierTransaction(createFeeTier: CreateFeeTier): Promise<Transaction>;
    createFeeTier(createFeeTier: CreateFeeTier, signer: Keypair): Promise<void>;
    createStateInstruction(admin?: PublicKey): Promise<TransactionInstruction>;
    createStateTransaction(admin?: PublicKey): Promise<Transaction>;
    createState(admin: PublicKey, signer: Keypair): Promise<void>;
    getStateAddress(): Promise<{
        address: PublicKey;
        bump: number;
    }>;
    getState(): Promise<State>;
    createTickInstruction({ pair, index, payer }: CreateTick): Promise<TransactionInstruction>;
    createTickTransaction(createTick: CreateTick): Promise<Transaction>;
    createTick(createTick: CreateTick, signer: Keypair): Promise<void>;
    createPositionListInstruction(owner?: PublicKey): Promise<TransactionInstruction>;
    createPositionListTransaction(owner?: PublicKey): Promise<Transaction>;
    createPositionList(owner: PublicKey, signer: Keypair): Promise<void>;
    initPositionInstruction({ pair, owner, userTokenX, userTokenY, lowerTick, upperTick, liquidityDelta, knownPrice, slippage }: InitPosition, assumeFirstPosition?: boolean): Promise<TransactionInstruction>;
    initPositionTx(initPosition: InitPosition): Promise<Transaction>;
    initPosition(initPosition: InitPosition, signer: Keypair): Promise<void>;
    initPoolAndPositionTx({ pair, owner, userTokenX, userTokenY, lowerTick, upperTick, liquidityDelta, initTick, knownPrice, slippage }: InitPoolAndPosition, payer?: Keypair): Promise<{
        transaction: Transaction;
        signers: Keypair[];
    }>;
    initPoolAndPosition(createPool: InitPoolAndPosition, signer: Keypair): Promise<void>;
    swapInstruction(swap: Swap): Promise<Transaction>;
    swapTransaction(swap: Swap): Promise<Transaction>;
    swap(swap: Swap, signer: Keypair): Promise<string>;
    getReserveBalances(pair: Pair, tokenX: Token, tokenY: Token): Promise<{
        x: _solana_spl_token.u64;
        y: _solana_spl_token.u64;
    }>;
    claimFeeInstruction(claimFee: ClaimFee): Promise<TransactionInstruction>;
    claimFeeTransaction(claimFee: ClaimFee): Promise<Transaction>;
    claimFee(claimFee: ClaimFee, signer: Keypair): Promise<void>;
    withdrawProtocolFeeInstruction(withdrawProtocolFee: WithdrawProtocolFee): Promise<TransactionInstruction>;
    withdrawProtocolFeeTransaction(withdrawProtocolFee: WithdrawProtocolFee): Promise<Transaction>;
    withdrawProtocolFee(withdrawProtocolFee: WithdrawProtocolFee, signer: Keypair): Promise<void>;
    removePositionInstruction(removePosition: RemovePosition): Promise<TransactionInstruction>;
    removePositionTransaction(removePosition: RemovePosition): Promise<Transaction>;
    removePosition(removePosition: RemovePosition, signer: Keypair): Promise<void>;
    transferPositionOwnershipInstruction(transferPositionOwnership: TransferPositionOwnership): Promise<TransactionInstruction>;
    transferPositionOwnershipTransaction(transferPositionOwnership: TransferPositionOwnership): Promise<Transaction>;
    transferPositionOwnership(transferPositionOwnership: TransferPositionOwnership, signer: Keypair): Promise<void>;
    updateSecondsPerLiquidityInstruction(updateSecondsPerLiquidity: UpdateSecondsPerLiquidity): Promise<TransactionInstruction>;
    updateSecondsPerLiquidityTransaction(updateSecondsPerLiquidity: UpdateSecondsPerLiquidity): Promise<Transaction>;
    updateSecondsPerLiquidity(updateSecondsPerLiquidity: UpdateSecondsPerLiquidity, signer: Keypair): Promise<void>;
    initializeOracle({ pair, payer }: InitializeOracle): Promise<string>;
    getOracle(pair: Pair): Promise<_project_serum_anchor_dist_cjs_program_namespace_types.TypeDef<{
        name: "feeTier";
        type: {
            kind: "struct";
            fields: [{
                name: "fee";
                type: {
                    defined: "FixedPoint";
                };
            }, {
                name: "tickSpacing";
                type: "u16";
            }, {
                name: "bump";
                type: "u8";
            }];
        };
    } | {
        name: "oracle";
        type: {
            kind: "struct";
            fields: [{
                name: "data";
                type: {
                    array: [{
                        defined: "Record";
                    }, 256];
                };
            }, {
                name: "head";
                type: "u16";
            }, {
                name: "amount";
                type: "u16";
            }, {
                name: "size";
                type: "u16";
            }];
        };
    } | {
        name: "pool";
        type: {
            kind: "struct";
            fields: [{
                name: "tokenX";
                type: "publicKey";
            }, {
                name: "tokenY";
                type: "publicKey";
            }, {
                name: "tokenXReserve";
                type: "publicKey";
            }, {
                name: "tokenYReserve";
                type: "publicKey";
            }, {
                name: "positionIterator";
                type: "u128";
            }, {
                name: "tickSpacing";
                type: "u16";
            }, {
                name: "fee";
                type: {
                    defined: "FixedPoint";
                };
            }, {
                name: "protocolFee";
                type: {
                    defined: "FixedPoint";
                };
            }, {
                name: "liquidity";
                type: {
                    defined: "Liquidity";
                };
            }, {
                name: "sqrtPrice";
                type: {
                    defined: "Price";
                };
            }, {
                name: "currentTickIndex";
                type: "i32";
            }, {
                name: "tickmap";
                type: "publicKey";
            }, {
                name: "feeGrowthGlobalX";
                type: {
                    defined: "FeeGrowth";
                };
            }, {
                name: "feeGrowthGlobalY";
                type: {
                    defined: "FeeGrowth";
                };
            }, {
                name: "feeProtocolTokenX";
                type: "u64";
            }, {
                name: "feeProtocolTokenY";
                type: "u64";
            }, {
                name: "secondsPerLiquidityGlobal";
                type: {
                    defined: "FixedPoint";
                };
            }, {
                name: "startTimestamp";
                type: "u64";
            }, {
                name: "lastTimestamp";
                type: "u64";
            }, {
                name: "feeReceiver";
                type: "publicKey";
            }, {
                name: "oracleAddress";
                type: "publicKey";
            }, {
                name: "oracleInitialized";
                type: "bool";
            }, {
                name: "bump";
                type: "u8";
            }];
        };
    } | {
        name: "position";
        type: {
            kind: "struct";
            fields: [{
                name: "owner";
                type: "publicKey";
            }, {
                name: "pool";
                type: "publicKey";
            }, {
                name: "id";
                type: "u128";
            }, {
                name: "liquidity";
                type: {
                    defined: "Liquidity";
                };
            }, {
                name: "lowerTickIndex";
                type: "i32";
            }, {
                name: "upperTickIndex";
                type: "i32";
            }, {
                name: "feeGrowthInsideX";
                type: {
                    defined: "FeeGrowth";
                };
            }, {
                name: "feeGrowthInsideY";
                type: {
                    defined: "FeeGrowth";
                };
            }, {
                name: "secondsPerLiquidityInside";
                type: {
                    defined: "FixedPoint";
                };
            }, {
                name: "lastSlot";
                type: "u64";
            }, {
                name: "tokensOwedX";
                type: {
                    defined: "FixedPoint";
                };
            }, {
                name: "tokensOwedY";
                type: {
                    defined: "FixedPoint";
                };
            }, {
                name: "bump";
                type: "u8";
            }];
        };
    } | {
        name: "positionList";
        type: {
            kind: "struct";
            fields: [{
                name: "head";
                type: "u32";
            }, {
                name: "bump";
                type: "u8";
            }];
        };
    } | {
        name: "state";
        type: {
            kind: "struct";
            fields: [{
                name: "admin";
                type: "publicKey";
            }, {
                name: "nonce";
                type: "u8";
            }, {
                name: "authority";
                type: "publicKey";
            }, {
                name: "bump";
                type: "u8";
            }];
        };
    } | {
        name: "tick";
        type: {
            kind: "struct";
            fields: [{
                name: "pool";
                type: "publicKey";
            }, {
                name: "index";
                type: "i32";
            }, {
                name: "sign";
                type: "bool";
            }, {
                name: "liquidityChange";
                type: {
                    defined: "Liquidity";
                };
            }, {
                name: "liquidityGross";
                type: {
                    defined: "Liquidity";
                };
            }, {
                name: "sqrtPrice";
                type: {
                    defined: "Price";
                };
            }, {
                name: "feeGrowthOutsideX";
                type: {
                    defined: "FeeGrowth";
                };
            }, {
                name: "feeGrowthOutsideY";
                type: {
                    defined: "FeeGrowth";
                };
            }, {
                name: "secondsPerLiquidityOutside";
                type: {
                    defined: "FixedPoint";
                };
            }, {
                name: "secondsOutside";
                type: "u64";
            }, {
                name: "bump";
                type: "u8";
            }];
        };
    } | {
        name: "tickmap";
        type: {
            kind: "struct";
            fields: [{
                name: "bitmap";
                type: {
                    array: ["u8", 11091];
                };
            }];
        };
    }, _project_serum_anchor.IdlTypes<Invariant>>>;
    changeProtocolFeeInstruction(changeProtocolFee: ChangeProtocolFee): Promise<TransactionInstruction>;
    changeProtocolFeeTransaction(changeProtocolFee: ChangeProtocolFee): Promise<Transaction>;
    changeProtocolFee(changeProtocolFee: ChangeProtocolFee, signer: Keypair): Promise<void>;
    changeFeeReceiverInstruction(changeFeeReceiver: ChangeFeeReceiver): Promise<TransactionInstruction>;
    changeFeeReceiverTransaction(changeFeeReceiver: ChangeFeeReceiver): Promise<Transaction>;
    changeFeeReceiver(changeFeeReceiver: ChangeFeeReceiver, signer: Keypair): Promise<void>;
    getWholeLiquidity(pair: Pair): Promise<BN>;
    getGlobalFee(pair: Pair): Promise<{
        feeX: BN;
        feeY: BN;
    }>;
    getVolume(pair: Pair): Promise<{
        volumeX: BN;
        volumeY: BN;
    }>;
    getAllPools(): Promise<PoolStructure[]>;
    getPairLiquidityValues(pair: Pair): Promise<{
        liquidityX: BN;
        liquidityY: BN;
    }>;
}
interface Decimal {
    v: BN;
}
interface FeeGrowth {
    v: BN;
}
interface State {
    admin: PublicKey;
    nonce: number;
    authority: PublicKey;
    bump: number;
}
interface FeeTierStructure {
    fee: Decimal;
    tickSpacing: number;
    bump: number;
}
interface PoolStructure {
    tokenX: PublicKey;
    tokenY: PublicKey;
    tokenXReserve: PublicKey;
    tokenYReserve: PublicKey;
    positionIterator: BN;
    tickSpacing: number;
    fee: Decimal;
    protocolFee: Decimal;
    liquidity: Decimal;
    sqrtPrice: Decimal;
    currentTickIndex: number;
    tickmap: PublicKey;
    feeGrowthGlobalX: FeeGrowth;
    feeGrowthGlobalY: FeeGrowth;
    feeProtocolTokenX: BN;
    feeProtocolTokenY: BN;
    secondsPerLiquidityGlobal: Decimal;
    startTimestamp: BN;
    lastTimestamp: BN;
    feeReceiver: PublicKey;
    oracleAddress: PublicKey;
    oracleInitialized: boolean;
    bump: number;
}
interface PoolData {
    currentTickIndex: number;
    tickSpacing: number;
    liquidity: Decimal;
    fee: Decimal;
    sqrtPrice: Decimal;
}
interface Tickmap {
    bitmap: number[];
}
interface PositionList {
    head: number;
    bump: number;
}
interface Tick {
    pool: PublicKey;
    index: number;
    sign: boolean;
    liquidityChange: Decimal;
    liquidityGross: Decimal;
    sqrtPrice: Decimal;
    feeGrowthOutsideX: Decimal;
    feeGrowthOutsideY: Decimal;
    secondsPerLiquidityOutside: Decimal;
    bump: number;
}
interface Position {
    owner: PublicKey;
    pool: PublicKey;
    id: BN;
    liquidity: Decimal;
    lowerTickIndex: number;
    upperTickIndex: number;
    feeGrowthInsideX: Decimal;
    feeGrowthInsideY: Decimal;
    secondsPerLiquidityInside: Decimal;
    lastSlot: BN;
    tokensOwedX: Decimal;
    tokensOwedY: Decimal;
    bump: number;
}
interface PositionStructure {
    tokenX: PublicKey;
    tokenY: PublicKey;
    feeTier: FeeTier;
    amountTokenX: BN;
    amountTokenY: BN;
    lowerPrice: Decimal;
    upperPrice: Decimal;
    unclaimedFeesX: BN;
    unclaimedFeesY: BN;
}
interface FeeTier {
    fee: BN;
    tickSpacing?: number;
}
interface InitPosition {
    pair: Pair;
    owner?: PublicKey;
    userTokenX: PublicKey;
    userTokenY: PublicKey;
    lowerTick: number;
    upperTick: number;
    liquidityDelta: Decimal;
    knownPrice: Decimal;
    slippage: Decimal;
}
interface InitPoolAndPosition extends InitPosition {
    initTick?: number;
}
interface CreatePoolTx {
    pair: Pair;
    payer?: Keypair;
    initTick?: number;
}
interface CreatePool extends CreatePoolTx {
    payer: Keypair;
}
interface ClaimFee {
    pair: Pair;
    owner?: PublicKey;
    userTokenX: PublicKey;
    userTokenY: PublicKey;
    index: number;
}
interface Swap {
    pair: Pair;
    owner?: PublicKey;
    xToY: boolean;
    amount: BN;
    estimatedPriceAfterSwap: Decimal;
    slippage: Decimal;
    accountX: PublicKey;
    accountY: PublicKey;
    byAmountIn: boolean;
    referralAccount?: PublicKey;
}
interface UpdateSecondsPerLiquidity {
    pair: Pair;
    owner?: PublicKey;
    signer?: PublicKey;
    lowerTickIndex: number;
    upperTickIndex: number;
    index: number;
}
interface ChangeProtocolFee {
    pair: Pair;
    admin?: PublicKey;
    protocolFee: Decimal;
}
interface CreateFeeTier {
    feeTier: FeeTier;
    admin?: PublicKey;
}
interface CreateTick {
    pair: Pair;
    index: number;
    payer?: PublicKey;
}
interface WithdrawProtocolFee {
    pair: Pair;
    accountX: PublicKey;
    accountY: PublicKey;
    admin?: PublicKey;
}
interface RemovePosition {
    pair: Pair;
    owner?: PublicKey;
    index: number;
    userTokenX: PublicKey;
    userTokenY: PublicKey;
}
interface TransferPositionOwnership {
    owner?: PublicKey;
    recipient?: PublicKey;
    index: number;
}
interface InitializeOracle {
    pair: Pair;
    payer: Keypair;
}
interface ChangeFeeReceiver {
    pair: Pair;
    admin?: PublicKey;
    feeReceiver: PublicKey;
}
interface PositionWithAddress extends Position {
    address: PublicKey;
}

declare const SEED = "Invariant";
declare const DENOMINATOR: BN;
declare const LIQUIDITY_DENOMINATOR: BN;
declare const PRICE_DENOMINATOR: BN;
declare enum INVARIANT_ERRORS {
    ZERO_AMOUNT = "0x1770",
    ZERO_OUTPUT = "0x1771",
    WRONG_TICK = "0x1772",
    WRONG_LIMIT = "0x1773",
    INVALID_TICK_INDEX = "0x1774",
    INVALID_TICK_INTERVAL = "0x1775",
    NO_MORE_TICKS = "0x1776",
    TICK_NOT_FOUND = "0x1777",
    PRICE_LIMIT_REACHED = "0x1778",
    INVALID_TICK_LIQUIDITY = "0x1779",
    EMPTY_POSITION_POKES = "0x177a",
    INVALID_POSITION_LIQUIDITY = "0x177b",
    INVALID_POOL_LIQUIDITY = "0x177c",
    INVALID_POSITION_INDEX = "0x177d",
    POSITION_WITHOUT_LIQUIDITY = "0x177e",
    INVALID_POOL_TOKEN_ADDRESSES = "0x1780",
    NO_GAIN_SWAP = "0x1785",
    INVALID_TOKEN_ACCOUNT = "0x1786",
    INVALID_ADMIN = "0x1787",
    INVALID_AUTHORITY = "0x1788",
    INVALID_OWNER = "0x1789",
    INVALID_MINT = "0x178a",
    INVALID_TICKMAP = "0x178b",
    INVALID_TICKMAP_OWNER = "0x178c",
    INVALID_LIST_OWNER = "0x178d",
    INVALID_TICK_SPACING = "0x178e"
}
interface SimulateSwapInterface {
    xToY: boolean;
    byAmountIn: boolean;
    swapAmount: BN;
    priceLimit: Decimal;
    slippage: Decimal;
    ticks: Map<number, Tick>;
    tickmap: Tickmap;
    pool: PoolData;
}
interface SimulationResult {
    status: SimulationStatus;
    amountPerTick: BN[];
    crossedTicks: number[];
    accumulatedAmountIn: BN;
    accumulatedAmountOut: BN;
    accumulatedFee: BN;
    minReceived: BN;
    priceImpact: BN;
    priceAfterSwap: BN;
}
declare const computeUnitsInstruction: (units: number, wallet: PublicKey) => TransactionInstruction;
declare const signAndSend: (tx: Transaction, signers: Keypair[], connection: Connection, opts?: ConfirmOptions) => Promise<string>;
declare const sleep: (ms: number) => Promise<unknown>;
declare const toDecimal: (x: number, decimals?: number) => Decimal;
declare enum SimulationStatus {
    Ok = 0,
    WrongLimit = "Price limit is on the wrong side of price",
    PriceLimitReached = "Price would cross swap limit",
    TickNotFound = "tick crossed but not passed to simulation",
    NoGainSwap = "Amount out is zero",
    TooLargeGap = "Too large liquidity gap",
    LimitReached = "At the end of price range"
}
declare const simulateSwap: (swapParameters: SimulateSwapInterface) => SimulationResult;

declare const TICK_LIMIT = 44364;
declare const MAX_TICK = 221818;
declare const MIN_TICK: number;
declare const TICK_SEARCH_RANGE = 256;
declare const fromInteger: (integer: number) => {
    v: BN;
};
declare const calculatePriceSqrt: (tickIndex: number) => Decimal;
declare const findClosestTicks: (ticks: number[], current: number, tickSpacing: number, limit: number, maxRange?: number, oneWay?: 'up' | 'down' | undefined) => number[];

declare class Pair {
    tokenX: PublicKey;
    tokenY: PublicKey;
    feeTier: FeeTier;
    feeTierAddress: PublicKey | null;
    tickSpacing: number;
    constructor(first: PublicKey, second: PublicKey, feeTier: FeeTier);
    getAddressAndBump(programId: PublicKey): Promise<[PublicKey, number]>;
    getAddress(programId: PublicKey): Promise<PublicKey>;
    getFeeTierAddress(programId: PublicKey): Promise<PublicKey>;
}

interface TickmapChange {
    [index: number]: 'added' | 'removed';
}
declare const findTickmapChanges: (currentTickmap: number[], nextTickmap: number[], tickSpacing?: number, offset?: number) => TickmapChange;

interface IWallet {
    signTransaction: (tx: Transaction) => Promise<Transaction>;
    signAllTransactions: (txs: Transaction[]) => Promise<Transaction[]>;
    publicKey: PublicKey;
}

export { DENOMINATOR, FEE_TIER, IDL, INVARIANT_ERRORS, IWallet, Invariant, LIQUIDITY_DENOMINATOR, MAX_TICK, MIN_TICK, MOCK_TOKENS, Market, Network, PRICE_DENOMINATOR, Pair, PoolData, PoolStructure, SEED, SimulateSwapInterface, TICK_CROSSES_PER_IX, TICK_LIMIT, TICK_SEARCH_RANGE, Tick, Tickmap, calculatePriceSqrt, computeUnitsInstruction, findClosestTicks, findTickmapChanges, fromInteger, getMarketAddress, signAndSend, simulateSwap, sleep, toDecimal };
