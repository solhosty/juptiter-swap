{"version":3,"file":"math.esm.js","sources":["../src/utils.ts","../src/math/curve.ts","../src/amm/stable.ts","../src/amm/fees.ts","../src/amm/tokenswap-stable.ts","../src/amm/tokenswap-constant-product.ts","../src/fraction.ts"],"sourcesContent":["import JSBI from 'jsbi';\nimport Decimal from 'decimal.js';\n\nexport type SwapResult = {\n  priceImpact: Decimal;\n  fees: JSBI;\n  expectedOutputAmount: JSBI;\n};\n\nexport type SwapExactOutputResult = {\n  priceImpact: Decimal;\n  fees: JSBI;\n  expectedInputAmount: JSBI;\n};\n\nexport const ZERO = JSBI.BigInt(0);\nexport const ONE = JSBI.BigInt(1);\nexport const TWO = JSBI.BigInt(2);\n\nexport function abs(number: JSBI) {\n  if (JSBI.GE(number, ZERO)) {\n    return number;\n  }\n\n  return JSBI.unaryMinus(number);\n}\n\nexport function sumArray(numbers: JSBI[]) {\n  return numbers.reduce((prev, curr) => {\n    return JSBI.add(prev, curr);\n  }, ZERO);\n}\n\nexport function mulArray(numbers: JSBI[]) {\n  return numbers.reduce((prev, curr) => {\n    return JSBI.multiply(prev, curr);\n  }, ONE);\n}\n\nexport function ceilingDivision(dividend: JSBI, divisor: JSBI): [JSBI, JSBI] {\n  let quotient = JSBI.divide(dividend, divisor);\n  if (JSBI.equal(quotient, ZERO)) {\n    return [ZERO, ZERO];\n  }\n\n  let remainder = JSBI.remainder(dividend, divisor);\n  if (JSBI.greaterThan(remainder, ZERO)) {\n    quotient = JSBI.add(quotient, ONE);\n    divisor = JSBI.divide(dividend, quotient);\n    remainder = JSBI.remainder(dividend, quotient);\n    if (JSBI.greaterThan(remainder, ZERO)) {\n      divisor = JSBI.add(divisor, ONE);\n    }\n  }\n\n  return [quotient, divisor];\n}\n\nexport function toDecimal(input: JSBI, shift = 0) {\n  return new Decimal(input.toString()).div(new Decimal(10).pow(shift));\n}\n","import JSBI from 'jsbi';\nimport { mulArray, ONE, sumArray, TWO, ZERO } from '../utils';\nimport Decimal from 'decimal.js';\n\nconst MAX_ITERATIONS = 32;\n\nexport class Curve {\n  constructor(private numberOfCurrencies: JSBI, private amplificationFactor: JSBI, private targetPrices: JSBI[]) {}\n\n  public exchange(\n    tokenAmounts: JSBI[],\n    inputIndex: number,\n    outputIndex: number,\n    amount: JSBI,\n    minusOne: boolean = true,\n  ) {\n    if (tokenAmounts.length !== JSBI.toNumber(this.numberOfCurrencies)) {\n      throw new Error('Number of currencies does not match');\n    }\n\n    let xp = this.xp(tokenAmounts);\n    let dx = JSBI.multiply(amount, this.targetPrices[inputIndex]);\n    let x = JSBI.add(xp[inputIndex], dx);\n    let y = this.computeY(tokenAmounts, inputIndex, outputIndex, x);\n    let dy = JSBI.subtract(xp[outputIndex], y);\n\n    // This is a special condition on Curve stable algo. For TokenSwap, they don't seem to apply this minus one.\n    if (minusOne) {\n      dy = JSBI.subtract(dy, ONE);\n    }\n\n    return JSBI.divide(dy, this.targetPrices[outputIndex]);\n  }\n\n  public computeBaseY(tokenAmounts: JSBI[], inputIndex: number, outputIndex: number, amount: JSBI) {\n    let d = this.computeD(tokenAmounts);\n    let xp = this.xp(tokenAmounts);\n    let nn = JSBI.exponentiate(this.numberOfCurrencies, this.numberOfCurrencies);\n    let sum = sumArray(xp);\n    let product = mulArray(xp);\n    let k = JSBI.subtract(\n      JSBI.add(JSBI.multiply(JSBI.multiply(this.amplificationFactor, nn), sum), d),\n      JSBI.multiply(JSBI.multiply(this.amplificationFactor, d), nn),\n    );\n    let b = JSBI.multiply(JSBI.multiply(JSBI.multiply(this.amplificationFactor, nn), nn), product);\n    let c = JSBI.multiply(JSBI.multiply(nn, product), k);\n    let numerator = JSBI.add(b, JSBI.divide(c, xp[inputIndex]));\n    let denominator = JSBI.add(b, JSBI.divide(c, xp[outputIndex]));\n\n    // Convert to number since JSBI doesn't support log10\n    let inputFactor = Math.log10(JSBI.toNumber(this.targetPrices[inputIndex]));\n    let outputFactor = Math.log10(JSBI.toNumber(this.targetPrices[outputIndex]));\n    let factor = Math.abs(outputFactor - inputFactor);\n\n    if (inputFactor >= outputFactor) {\n      return JSBI.BigInt(\n        new Decimal(numerator.toString())\n          .mul(new Decimal(amount.toString()))\n          .div(new Decimal(denominator.toString()))\n          .mul(Math.pow(10, factor))\n          .floor()\n          .toString(),\n      );\n    } else {\n      return JSBI.BigInt(\n        new Decimal(numerator.toString())\n          .mul(new Decimal(amount.toString()))\n          .div(new Decimal(denominator.toString()))\n          .div(Math.pow(10, factor))\n          .floor()\n          .toString(),\n      );\n    }\n  }\n\n  private computeY(tokenAmounts: JSBI[], inputIndex: number, outputIndex: number, newTotalAmount: JSBI) {\n    let d = this.computeD(tokenAmounts);\n    let xx = this.xp(tokenAmounts);\n    xx[inputIndex] = newTotalAmount;\n    xx.splice(outputIndex, 1);\n\n    let ann = JSBI.multiply(this.amplificationFactor, this.numberOfCurrencies);\n    let c = d;\n\n    for (const y of xx) {\n      c = JSBI.divide(JSBI.multiply(c, d), JSBI.multiply(y, this.numberOfCurrencies));\n    }\n    c = JSBI.divide(JSBI.multiply(c, d), JSBI.multiply(this.numberOfCurrencies, ann));\n\n    let b = JSBI.subtract(JSBI.add(sumArray(xx), JSBI.divide(d, ann)), d);\n    let yPrev = ZERO;\n    let y = d;\n\n    for (let i = 0; i < MAX_ITERATIONS; i++) {\n      yPrev = y;\n      y = JSBI.divide(JSBI.add(JSBI.exponentiate(y, TWO), c), JSBI.add(JSBI.multiply(TWO, y), b));\n\n      if (JSBI.greaterThan(y, yPrev)) {\n        if (JSBI.lessThanOrEqual(JSBI.subtract(y, yPrev), ONE)) {\n          break;\n        }\n      } else {\n        if (JSBI.lessThanOrEqual(JSBI.subtract(yPrev, y), ONE)) {\n          break;\n        }\n      }\n    }\n\n    return y;\n  }\n\n  private computeD(tokenAmounts: JSBI[]) {\n    let dPrev = ZERO;\n    let xp = this.xp(tokenAmounts);\n    let sum = sumArray(xp);\n    let d = sum;\n    let ann = JSBI.multiply(this.amplificationFactor, this.numberOfCurrencies);\n\n    for (let i = 0; i < MAX_ITERATIONS; i++) {\n      let dP = d;\n      for (const x of xp) {\n        dP = JSBI.divide(JSBI.multiply(dP, d), JSBI.multiply(this.numberOfCurrencies, x));\n      }\n      dPrev = d;\n      let numerator = JSBI.multiply(JSBI.add(JSBI.multiply(ann, sum), JSBI.multiply(dP, this.numberOfCurrencies)), d);\n      let denominator = JSBI.add(\n        JSBI.multiply(JSBI.subtract(ann, ONE), d),\n        JSBI.multiply(JSBI.add(this.numberOfCurrencies, ONE), dP),\n      );\n      d = JSBI.divide(numerator, denominator);\n\n      if (JSBI.greaterThan(d, dPrev)) {\n        if (JSBI.lessThanOrEqual(JSBI.subtract(d, dPrev), ONE)) {\n          break;\n        }\n      } else {\n        if (JSBI.lessThanOrEqual(JSBI.subtract(dPrev, d), ONE)) {\n          break;\n        }\n      }\n    }\n\n    return d;\n  }\n\n  private xp(tokenAmounts: JSBI[]) {\n    return tokenAmounts.map((tokenAmount, index) => {\n      return JSBI.multiply(tokenAmount, this.targetPrices[index]);\n    });\n  }\n\n  setAmplificationFactor(amplificationFactor: JSBI) {\n    this.amplificationFactor = amplificationFactor;\n  }\n}\n","import JSBI from 'jsbi';\nimport { Curve } from '../math/curve';\nimport { SwapResult, toDecimal, ZERO } from '../utils';\nimport Decimal from 'decimal.js';\nimport { Fraction } from '..';\n\nexport class Stable {\n  private curve: Curve;\n\n  constructor(numberOfCurrencies: JSBI, amp: JSBI, private targetPrices: JSBI[], private traderFee: Fraction) {\n    this.curve = new Curve(numberOfCurrencies, amp, this.targetPrices);\n  }\n\n  public exchange(tokenAmounts: JSBI[], inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): SwapResult {\n    let outputAmountWithoutFees = this.getOutputAmount(tokenAmounts, inputTradeAmount, inputIndex, outputIndex);\n    let fees = this.getFees(outputAmountWithoutFees);\n    let expectedOutputAmount = JSBI.subtract(outputAmountWithoutFees, fees);\n\n    return {\n      priceImpact: this.getPriceImpact(tokenAmounts, inputTradeAmount, expectedOutputAmount, inputIndex, outputIndex),\n      fees: fees,\n      expectedOutputAmount: expectedOutputAmount,\n    };\n  }\n\n  private getPriceImpact(\n    tokenAmounts: JSBI[],\n    inputTradeAmountJSBI: JSBI,\n    expectedOutputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(inputTradeAmountJSBI, ZERO) ||\n      JSBI.equal(tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageOutputAmount = toDecimal(\n      this.getOutputAmountWithNoSlippage(tokenAmounts, inputTradeAmountJSBI, inputIndex, outputIndex),\n    );\n    const expectedOutputAmount = toDecimal(expectedOutputAmountJSBI);\n    const impact = noSlippageOutputAmount.sub(expectedOutputAmount).div(noSlippageOutputAmount);\n\n    return impact;\n  }\n\n  private getFees(outputAmountWithoutFees: JSBI): JSBI {\n    return JSBI.equal(this.traderFee.numerator, ZERO)\n      ? ZERO\n      : JSBI.divide(JSBI.multiply(outputAmountWithoutFees, this.traderFee.numerator), this.traderFee.denominator);\n  }\n\n  private getOutputAmount(tokenAmounts: JSBI[], inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    return this.curve.exchange(tokenAmounts, inputIndex, outputIndex, inputTradeAmount);\n  }\n\n  private getOutputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    return this.curve.computeBaseY(tokenAmounts, inputIndex, outputIndex, inputTradeAmount);\n  }\n\n  setAmp(amp: JSBI) {\n    this.curve.setAmplificationFactor(amp);\n  }\n\n  setTraderFee(traderFee: Fraction) {\n    this.traderFee = traderFee;\n  }\n}\n","import JSBI from 'jsbi';\nimport { Fraction } from '../fraction';\nimport { ZERO, ONE } from '../utils';\n\n/** calculates fee amount given a fee fraction, returning one when fee is set but amount is zero */\nexport function calculateFeeAmount(amount: JSBI, fee: Fraction): JSBI {\n  if (JSBI.equal(fee.numerator, ZERO) || JSBI.equal(amount, ZERO)) {\n    return ZERO;\n  } else {\n    const feeAmount = JSBI.divide(JSBI.multiply(amount, fee.numerator), fee.denominator);\n    if (JSBI.equal(feeAmount, ZERO)) {\n      return ONE;\n    }\n    return feeAmount;\n  }\n}\n","import JSBI from 'jsbi';\nimport { Curve } from '../math/curve';\nimport { ONE, SwapResult, toDecimal, ZERO, TWO } from '../utils';\nimport Decimal from 'decimal.js';\nimport { Fraction } from '../fraction';\nimport { calculateFeeAmount } from './fees';\n\nexport class TokenSwapStable {\n  private curve: Curve;\n\n  constructor(amp: JSBI, private traderFee: Fraction, private ownerFee: Fraction) {\n    this.curve = new Curve(TWO, amp, [ONE, ONE]);\n  }\n\n  public exchange(tokenAmounts: JSBI[], inputTradeAmount: JSBI, outputIndex: number): SwapResult {\n    let inputIndex = outputIndex === 0 ? 1 : 0;\n    let expectedOutputAmount = this.getExpectedOutputAmount(tokenAmounts, inputTradeAmount, inputIndex, outputIndex);\n\n    return {\n      priceImpact: this.getPriceImpact(tokenAmounts, inputTradeAmount, expectedOutputAmount, inputIndex, outputIndex),\n      fees: this.getFees(inputTradeAmount),\n      expectedOutputAmount,\n    };\n  }\n\n  private getPriceImpact(\n    tokenAmounts: JSBI[],\n    inputTradeAmountJSBI: JSBI,\n    expectedOutputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(inputTradeAmountJSBI, ZERO) ||\n      JSBI.equal(tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageOutputAmount = toDecimal(\n      this.getExpectedOutputAmountWithNoSlippage(tokenAmounts, inputTradeAmountJSBI, inputIndex, outputIndex),\n    );\n\n    const expectedOutputAmount = toDecimal(expectedOutputAmountJSBI);\n    const impact = noSlippageOutputAmount.sub(expectedOutputAmount).div(noSlippageOutputAmount);\n\n    return impact;\n  }\n\n  private getFees(inputTradeAmount: JSBI): JSBI {\n    const tradingFee = calculateFeeAmount(inputTradeAmount, this.traderFee);\n    const ownerFee = calculateFeeAmount(inputTradeAmount, this.ownerFee);\n\n    return JSBI.add(tradingFee, ownerFee);\n  }\n\n  private getExpectedOutputAmount(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    const inputTradeAmountLessFees = this.getInputAmountLessFees(inputTradeAmount);\n\n    return this.getOutputAmount(tokenAmounts, inputTradeAmountLessFees, inputIndex, outputIndex);\n  }\n\n  private getExpectedOutputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    const inputTradeAmountLessFees = this.getInputAmountLessFees(inputTradeAmount);\n\n    return this.getOutputAmountWithNoSlippage(tokenAmounts, inputTradeAmountLessFees, inputIndex, outputIndex);\n  }\n\n  private getInputAmountLessFees(inputTradeAmount: JSBI): JSBI {\n    return JSBI.subtract(inputTradeAmount, this.getFees(inputTradeAmount));\n  }\n\n  private getOutputAmount(\n    tokenAmounts: JSBI[],\n    inputTradeAmountLessFees: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    return this.curve.exchange(tokenAmounts, inputIndex, outputIndex, inputTradeAmountLessFees, false);\n  }\n\n  private getOutputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    inputTradeAmountLessFees: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    return this.curve.computeBaseY(tokenAmounts, inputIndex, outputIndex, inputTradeAmountLessFees);\n  }\n}\n","import JSBI from 'jsbi';\nimport { SwapResult, toDecimal, ZERO, ceilingDivision, SwapExactOutputResult } from '../utils';\nimport Decimal from 'decimal.js';\nimport { Fraction } from '..';\nimport { calculateFeeAmount } from './fees';\n\nexport class TokenSwapConstantProduct {\n  constructor(private traderFee: Fraction, private ownerFee: Fraction, private feesOnInput: boolean = true) {}\n\n  public exchange(tokenAmounts: JSBI[], inputTradeAmount: JSBI, outputIndex: number): SwapResult {\n    const inputIndex = outputIndex === 0 ? 1 : 0;\n    const newInputTradeAmount = this.feesOnInput ? this.getAmountLessFees(inputTradeAmount) : inputTradeAmount;\n\n    let expectedOutputAmount = this.getExpectedOutputAmount(tokenAmounts, newInputTradeAmount, inputIndex, outputIndex);\n\n    const fees = this.getFees(this.feesOnInput ? inputTradeAmount : expectedOutputAmount);\n\n    if (!this.feesOnInput) {\n      expectedOutputAmount = this.getAmountLessFees(expectedOutputAmount);\n    }\n\n    return {\n      priceImpact: this.getPriceImpact(\n        tokenAmounts,\n        newInputTradeAmount,\n        expectedOutputAmount,\n        inputIndex,\n        outputIndex,\n      ),\n      fees,\n      expectedOutputAmount,\n    };\n  }\n\n  public exchangeForExactOutput(\n    tokenAmounts: JSBI[],\n    outputTradeAmount: JSBI,\n    outputIndex: number,\n  ): SwapExactOutputResult {\n    const inputIndex = outputIndex === 0 ? 1 : 0;\n    const newOutputTradeAmount = this.feesOnInput ? outputTradeAmount : this.getAmountPlusFees(outputTradeAmount);\n\n    let expectedInputAmount = this.getInputAmount(tokenAmounts, newOutputTradeAmount, inputIndex, outputIndex);\n\n    const fees = this.getFees(this.feesOnInput ? expectedInputAmount : outputTradeAmount);\n\n    if (this.feesOnInput) {\n      expectedInputAmount = this.getAmountPlusFees(expectedInputAmount);\n    }\n\n    return {\n      priceImpact: this.getPriceImpactExactOutput(\n        tokenAmounts,\n        expectedInputAmount,\n        newOutputTradeAmount,\n        inputIndex,\n        outputIndex,\n      ),\n      fees,\n      expectedInputAmount,\n    };\n  }\n\n  private getPriceImpact(\n    tokenAmounts: JSBI[],\n    inputTradeAmountJSBI: JSBI,\n    expectedOutputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(inputTradeAmountJSBI, ZERO) ||\n      JSBI.equal(tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageOutputAmount = toDecimal(\n      this.getExpectedOutputAmountWithNoSlippage(tokenAmounts, inputTradeAmountJSBI, inputIndex, outputIndex),\n    );\n    const expectedOutputAmount = toDecimal(expectedOutputAmountJSBI);\n    const impact = noSlippageOutputAmount.sub(expectedOutputAmount).div(noSlippageOutputAmount);\n\n    return impact;\n  }\n\n  private getPriceImpactExactOutput(\n    tokenAmounts: JSBI[],\n    expectedInputTradeAmountJSBI: JSBI,\n    outputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(outputAmountJSBI, ZERO) ||\n      JSBI.equal(tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageInputAmount = toDecimal(\n      this.getExpectedInputAmountWithNoSlippage(tokenAmounts, outputAmountJSBI, inputIndex, outputIndex),\n    );\n    const expectedInputAmount = toDecimal(expectedInputTradeAmountJSBI);\n    const impact = expectedInputAmount.sub(noSlippageInputAmount).div(noSlippageInputAmount);\n\n    return impact;\n  }\n\n  private getFees(tradeAmount: JSBI): JSBI {\n    const tradingFee = calculateFeeAmount(tradeAmount, this.traderFee);\n    const ownerFee = calculateFeeAmount(tradeAmount, this.ownerFee);\n\n    return JSBI.add(tradingFee, ownerFee);\n  }\n\n  private getExpectedOutputAmount(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    return this.getOutputAmount(tokenAmounts, inputTradeAmount, inputIndex, outputIndex);\n  }\n\n  private getExpectedOutputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    if (JSBI.equal(tokenAmounts[inputIndex], ZERO)) {\n      return tokenAmounts[outputIndex];\n    }\n\n    const expectedOutputAmountWithNoSlippage = JSBI.divide(\n      JSBI.multiply(inputTradeAmount, tokenAmounts[outputIndex]),\n      tokenAmounts[inputIndex],\n    );\n\n    if (this.feesOnInput) {\n      return expectedOutputAmountWithNoSlippage;\n    } else {\n      return this.getAmountLessFees(expectedOutputAmountWithNoSlippage);\n    }\n  }\n\n  private getExpectedInputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    outputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    if (JSBI.equal(tokenAmounts[outputIndex], ZERO)) {\n      return tokenAmounts[inputIndex];\n    }\n\n    const expectedInputAmountWithNoSlippage = JSBI.divide(\n      JSBI.multiply(outputTradeAmount, tokenAmounts[inputIndex]),\n      tokenAmounts[outputIndex],\n    );\n\n    if (this.feesOnInput) {\n      return this.getAmountPlusFees(expectedInputAmountWithNoSlippage);\n    } else {\n      return expectedInputAmountWithNoSlippage;\n    }\n  }\n\n  private getAmountLessFees(tradeAmount: JSBI): JSBI {\n    return JSBI.subtract(tradeAmount, this.getFees(tradeAmount));\n  }\n\n  private getAmountPlusFees(tradeAmount: JSBI): JSBI {\n    return JSBI.add(tradeAmount, this.getFees(tradeAmount));\n  }\n\n  private getOutputAmount(tokenAmounts: JSBI[], inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    const [poolInputAmount, poolOutputAmount] = [tokenAmounts[inputIndex], tokenAmounts[outputIndex]];\n\n    const invariant = this.getInvariant(tokenAmounts);\n\n    const [newPoolOutputAmount] = ceilingDivision(invariant, JSBI.add(poolInputAmount, inputTradeAmount));\n\n    return JSBI.subtract(poolOutputAmount, newPoolOutputAmount);\n  }\n\n  private getInputAmount(tokenAmounts: JSBI[], outputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    const [poolInputAmount, poolOutputAmount] = [tokenAmounts[inputIndex], tokenAmounts[outputIndex]];\n\n    const invariant = this.getInvariant(tokenAmounts);\n\n    if (JSBI.greaterThanOrEqual(outputTradeAmount, poolOutputAmount)) {\n      throw new Error('Insufficient liquidity to provide outputTradeAmount');\n    }\n    const [newPoolInputAmount] = ceilingDivision(invariant, JSBI.subtract(poolOutputAmount, outputTradeAmount));\n    return JSBI.subtract(newPoolInputAmount, poolInputAmount);\n  }\n\n  getInvariant(tokenAmounts: JSBI[]) {\n    return JSBI.multiply(tokenAmounts[0], tokenAmounts[1]);\n  }\n}\n","import JSBI from 'jsbi';\n\nexport class Fraction {\n  constructor(public numerator: JSBI, public denominator: JSBI) {}\n}\n\nexport const ZERO_FRACTION = new Fraction(JSBI.BigInt(0), JSBI.BigInt(1));\n"],"names":["ZERO","JSBI","BigInt","ONE","TWO","abs","number","GE","unaryMinus","sumArray","numbers","reduce","prev","curr","add","mulArray","multiply","ceilingDivision","dividend","divisor","quotient","divide","equal","remainder","greaterThan","toDecimal","input","shift","Decimal","toString","div","pow","MAX_ITERATIONS","Curve","numberOfCurrencies","amplificationFactor","targetPrices","exchange","tokenAmounts","inputIndex","outputIndex","amount","minusOne","length","toNumber","Error","xp","dx","x","y","computeY","dy","subtract","computeBaseY","d","computeD","nn","exponentiate","sum","product","k","b","c","numerator","denominator","inputFactor","Math","log10","outputFactor","factor","mul","floor","newTotalAmount","xx","splice","ann","yPrev","i","lessThanOrEqual","dPrev","dP","map","tokenAmount","index","setAmplificationFactor","Stable","amp","traderFee","curve","inputTradeAmount","outputAmountWithoutFees","getOutputAmount","fees","getFees","expectedOutputAmount","priceImpact","getPriceImpact","inputTradeAmountJSBI","expectedOutputAmountJSBI","noSlippageOutputAmount","getOutputAmountWithNoSlippage","impact","sub","setAmp","setTraderFee","calculateFeeAmount","fee","feeAmount","TokenSwapStable","ownerFee","getExpectedOutputAmount","getExpectedOutputAmountWithNoSlippage","tradingFee","inputTradeAmountLessFees","getInputAmountLessFees","TokenSwapConstantProduct","feesOnInput","newInputTradeAmount","getAmountLessFees","exchangeForExactOutput","outputTradeAmount","newOutputTradeAmount","getAmountPlusFees","expectedInputAmount","getInputAmount","getPriceImpactExactOutput","expectedInputTradeAmountJSBI","outputAmountJSBI","noSlippageInputAmount","getExpectedInputAmountWithNoSlippage","tradeAmount","expectedOutputAmountWithNoSlippage","expectedInputAmountWithNoSlippage","poolInputAmount","poolOutputAmount","invariant","getInvariant","newPoolOutputAmount","greaterThanOrEqual","newPoolInputAmount","Fraction","ZERO_FRACTION"],"mappings":"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"}