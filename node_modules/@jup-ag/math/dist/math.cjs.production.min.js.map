{"version":3,"file":"math.cjs.production.min.js","sources":["../src/utils.ts","../src/math/curve.ts","../src/amm/stable.ts","../src/amm/fees.ts","../src/amm/tokenswap-stable.ts","../src/amm/tokenswap-constant-product.ts","../src/fraction.ts"],"sourcesContent":["import JSBI from 'jsbi';\nimport Decimal from 'decimal.js';\n\nexport type SwapResult = {\n  priceImpact: Decimal;\n  fees: JSBI;\n  expectedOutputAmount: JSBI;\n};\n\nexport type SwapExactOutputResult = {\n  priceImpact: Decimal;\n  fees: JSBI;\n  expectedInputAmount: JSBI;\n};\n\nexport const ZERO = JSBI.BigInt(0);\nexport const ONE = JSBI.BigInt(1);\nexport const TWO = JSBI.BigInt(2);\n\nexport function abs(number: JSBI) {\n  if (JSBI.GE(number, ZERO)) {\n    return number;\n  }\n\n  return JSBI.unaryMinus(number);\n}\n\nexport function sumArray(numbers: JSBI[]) {\n  return numbers.reduce((prev, curr) => {\n    return JSBI.add(prev, curr);\n  }, ZERO);\n}\n\nexport function mulArray(numbers: JSBI[]) {\n  return numbers.reduce((prev, curr) => {\n    return JSBI.multiply(prev, curr);\n  }, ONE);\n}\n\nexport function ceilingDivision(dividend: JSBI, divisor: JSBI): [JSBI, JSBI] {\n  let quotient = JSBI.divide(dividend, divisor);\n  if (JSBI.equal(quotient, ZERO)) {\n    return [ZERO, ZERO];\n  }\n\n  let remainder = JSBI.remainder(dividend, divisor);\n  if (JSBI.greaterThan(remainder, ZERO)) {\n    quotient = JSBI.add(quotient, ONE);\n    divisor = JSBI.divide(dividend, quotient);\n    remainder = JSBI.remainder(dividend, quotient);\n    if (JSBI.greaterThan(remainder, ZERO)) {\n      divisor = JSBI.add(divisor, ONE);\n    }\n  }\n\n  return [quotient, divisor];\n}\n\nexport function toDecimal(input: JSBI, shift = 0) {\n  return new Decimal(input.toString()).div(new Decimal(10).pow(shift));\n}\n","import JSBI from 'jsbi';\nimport { mulArray, ONE, sumArray, TWO, ZERO } from '../utils';\nimport Decimal from 'decimal.js';\n\nconst MAX_ITERATIONS = 32;\n\nexport class Curve {\n  constructor(private numberOfCurrencies: JSBI, private amplificationFactor: JSBI, private targetPrices: JSBI[]) {}\n\n  public exchange(\n    tokenAmounts: JSBI[],\n    inputIndex: number,\n    outputIndex: number,\n    amount: JSBI,\n    minusOne: boolean = true,\n  ) {\n    if (tokenAmounts.length !== JSBI.toNumber(this.numberOfCurrencies)) {\n      throw new Error('Number of currencies does not match');\n    }\n\n    let xp = this.xp(tokenAmounts);\n    let dx = JSBI.multiply(amount, this.targetPrices[inputIndex]);\n    let x = JSBI.add(xp[inputIndex], dx);\n    let y = this.computeY(tokenAmounts, inputIndex, outputIndex, x);\n    let dy = JSBI.subtract(xp[outputIndex], y);\n\n    // This is a special condition on Curve stable algo. For TokenSwap, they don't seem to apply this minus one.\n    if (minusOne) {\n      dy = JSBI.subtract(dy, ONE);\n    }\n\n    return JSBI.divide(dy, this.targetPrices[outputIndex]);\n  }\n\n  public computeBaseY(tokenAmounts: JSBI[], inputIndex: number, outputIndex: number, amount: JSBI) {\n    let d = this.computeD(tokenAmounts);\n    let xp = this.xp(tokenAmounts);\n    let nn = JSBI.exponentiate(this.numberOfCurrencies, this.numberOfCurrencies);\n    let sum = sumArray(xp);\n    let product = mulArray(xp);\n    let k = JSBI.subtract(\n      JSBI.add(JSBI.multiply(JSBI.multiply(this.amplificationFactor, nn), sum), d),\n      JSBI.multiply(JSBI.multiply(this.amplificationFactor, d), nn),\n    );\n    let b = JSBI.multiply(JSBI.multiply(JSBI.multiply(this.amplificationFactor, nn), nn), product);\n    let c = JSBI.multiply(JSBI.multiply(nn, product), k);\n    let numerator = JSBI.add(b, JSBI.divide(c, xp[inputIndex]));\n    let denominator = JSBI.add(b, JSBI.divide(c, xp[outputIndex]));\n\n    // Convert to number since JSBI doesn't support log10\n    let inputFactor = Math.log10(JSBI.toNumber(this.targetPrices[inputIndex]));\n    let outputFactor = Math.log10(JSBI.toNumber(this.targetPrices[outputIndex]));\n    let factor = Math.abs(outputFactor - inputFactor);\n\n    if (inputFactor >= outputFactor) {\n      return JSBI.BigInt(\n        new Decimal(numerator.toString())\n          .mul(new Decimal(amount.toString()))\n          .div(new Decimal(denominator.toString()))\n          .mul(Math.pow(10, factor))\n          .floor()\n          .toString(),\n      );\n    } else {\n      return JSBI.BigInt(\n        new Decimal(numerator.toString())\n          .mul(new Decimal(amount.toString()))\n          .div(new Decimal(denominator.toString()))\n          .div(Math.pow(10, factor))\n          .floor()\n          .toString(),\n      );\n    }\n  }\n\n  private computeY(tokenAmounts: JSBI[], inputIndex: number, outputIndex: number, newTotalAmount: JSBI) {\n    let d = this.computeD(tokenAmounts);\n    let xx = this.xp(tokenAmounts);\n    xx[inputIndex] = newTotalAmount;\n    xx.splice(outputIndex, 1);\n\n    let ann = JSBI.multiply(this.amplificationFactor, this.numberOfCurrencies);\n    let c = d;\n\n    for (const y of xx) {\n      c = JSBI.divide(JSBI.multiply(c, d), JSBI.multiply(y, this.numberOfCurrencies));\n    }\n    c = JSBI.divide(JSBI.multiply(c, d), JSBI.multiply(this.numberOfCurrencies, ann));\n\n    let b = JSBI.subtract(JSBI.add(sumArray(xx), JSBI.divide(d, ann)), d);\n    let yPrev = ZERO;\n    let y = d;\n\n    for (let i = 0; i < MAX_ITERATIONS; i++) {\n      yPrev = y;\n      y = JSBI.divide(JSBI.add(JSBI.exponentiate(y, TWO), c), JSBI.add(JSBI.multiply(TWO, y), b));\n\n      if (JSBI.greaterThan(y, yPrev)) {\n        if (JSBI.lessThanOrEqual(JSBI.subtract(y, yPrev), ONE)) {\n          break;\n        }\n      } else {\n        if (JSBI.lessThanOrEqual(JSBI.subtract(yPrev, y), ONE)) {\n          break;\n        }\n      }\n    }\n\n    return y;\n  }\n\n  private computeD(tokenAmounts: JSBI[]) {\n    let dPrev = ZERO;\n    let xp = this.xp(tokenAmounts);\n    let sum = sumArray(xp);\n    let d = sum;\n    let ann = JSBI.multiply(this.amplificationFactor, this.numberOfCurrencies);\n\n    for (let i = 0; i < MAX_ITERATIONS; i++) {\n      let dP = d;\n      for (const x of xp) {\n        dP = JSBI.divide(JSBI.multiply(dP, d), JSBI.multiply(this.numberOfCurrencies, x));\n      }\n      dPrev = d;\n      let numerator = JSBI.multiply(JSBI.add(JSBI.multiply(ann, sum), JSBI.multiply(dP, this.numberOfCurrencies)), d);\n      let denominator = JSBI.add(\n        JSBI.multiply(JSBI.subtract(ann, ONE), d),\n        JSBI.multiply(JSBI.add(this.numberOfCurrencies, ONE), dP),\n      );\n      d = JSBI.divide(numerator, denominator);\n\n      if (JSBI.greaterThan(d, dPrev)) {\n        if (JSBI.lessThanOrEqual(JSBI.subtract(d, dPrev), ONE)) {\n          break;\n        }\n      } else {\n        if (JSBI.lessThanOrEqual(JSBI.subtract(dPrev, d), ONE)) {\n          break;\n        }\n      }\n    }\n\n    return d;\n  }\n\n  private xp(tokenAmounts: JSBI[]) {\n    return tokenAmounts.map((tokenAmount, index) => {\n      return JSBI.multiply(tokenAmount, this.targetPrices[index]);\n    });\n  }\n\n  setAmplificationFactor(amplificationFactor: JSBI) {\n    this.amplificationFactor = amplificationFactor;\n  }\n}\n","import JSBI from 'jsbi';\nimport { Curve } from '../math/curve';\nimport { SwapResult, toDecimal, ZERO } from '../utils';\nimport Decimal from 'decimal.js';\nimport { Fraction } from '..';\n\nexport class Stable {\n  private curve: Curve;\n\n  constructor(numberOfCurrencies: JSBI, amp: JSBI, private targetPrices: JSBI[], private traderFee: Fraction) {\n    this.curve = new Curve(numberOfCurrencies, amp, this.targetPrices);\n  }\n\n  public exchange(tokenAmounts: JSBI[], inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): SwapResult {\n    let outputAmountWithoutFees = this.getOutputAmount(tokenAmounts, inputTradeAmount, inputIndex, outputIndex);\n    let fees = this.getFees(outputAmountWithoutFees);\n    let expectedOutputAmount = JSBI.subtract(outputAmountWithoutFees, fees);\n\n    return {\n      priceImpact: this.getPriceImpact(tokenAmounts, inputTradeAmount, expectedOutputAmount, inputIndex, outputIndex),\n      fees: fees,\n      expectedOutputAmount: expectedOutputAmount,\n    };\n  }\n\n  private getPriceImpact(\n    tokenAmounts: JSBI[],\n    inputTradeAmountJSBI: JSBI,\n    expectedOutputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(inputTradeAmountJSBI, ZERO) ||\n      JSBI.equal(tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageOutputAmount = toDecimal(\n      this.getOutputAmountWithNoSlippage(tokenAmounts, inputTradeAmountJSBI, inputIndex, outputIndex),\n    );\n    const expectedOutputAmount = toDecimal(expectedOutputAmountJSBI);\n    const impact = noSlippageOutputAmount.sub(expectedOutputAmount).div(noSlippageOutputAmount);\n\n    return impact;\n  }\n\n  private getFees(outputAmountWithoutFees: JSBI): JSBI {\n    return JSBI.equal(this.traderFee.numerator, ZERO)\n      ? ZERO\n      : JSBI.divide(JSBI.multiply(outputAmountWithoutFees, this.traderFee.numerator), this.traderFee.denominator);\n  }\n\n  private getOutputAmount(tokenAmounts: JSBI[], inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    return this.curve.exchange(tokenAmounts, inputIndex, outputIndex, inputTradeAmount);\n  }\n\n  private getOutputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    return this.curve.computeBaseY(tokenAmounts, inputIndex, outputIndex, inputTradeAmount);\n  }\n\n  setAmp(amp: JSBI) {\n    this.curve.setAmplificationFactor(amp);\n  }\n\n  setTraderFee(traderFee: Fraction) {\n    this.traderFee = traderFee;\n  }\n}\n","import JSBI from 'jsbi';\nimport { Fraction } from '../fraction';\nimport { ZERO, ONE } from '../utils';\n\n/** calculates fee amount given a fee fraction, returning one when fee is set but amount is zero */\nexport function calculateFeeAmount(amount: JSBI, fee: Fraction): JSBI {\n  if (JSBI.equal(fee.numerator, ZERO) || JSBI.equal(amount, ZERO)) {\n    return ZERO;\n  } else {\n    const feeAmount = JSBI.divide(JSBI.multiply(amount, fee.numerator), fee.denominator);\n    if (JSBI.equal(feeAmount, ZERO)) {\n      return ONE;\n    }\n    return feeAmount;\n  }\n}\n","import JSBI from 'jsbi';\nimport { Curve } from '../math/curve';\nimport { ONE, SwapResult, toDecimal, ZERO, TWO } from '../utils';\nimport Decimal from 'decimal.js';\nimport { Fraction } from '../fraction';\nimport { calculateFeeAmount } from './fees';\n\nexport class TokenSwapStable {\n  private curve: Curve;\n\n  constructor(amp: JSBI, private traderFee: Fraction, private ownerFee: Fraction) {\n    this.curve = new Curve(TWO, amp, [ONE, ONE]);\n  }\n\n  public exchange(tokenAmounts: JSBI[], inputTradeAmount: JSBI, outputIndex: number): SwapResult {\n    let inputIndex = outputIndex === 0 ? 1 : 0;\n    let expectedOutputAmount = this.getExpectedOutputAmount(tokenAmounts, inputTradeAmount, inputIndex, outputIndex);\n\n    return {\n      priceImpact: this.getPriceImpact(tokenAmounts, inputTradeAmount, expectedOutputAmount, inputIndex, outputIndex),\n      fees: this.getFees(inputTradeAmount),\n      expectedOutputAmount,\n    };\n  }\n\n  private getPriceImpact(\n    tokenAmounts: JSBI[],\n    inputTradeAmountJSBI: JSBI,\n    expectedOutputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(inputTradeAmountJSBI, ZERO) ||\n      JSBI.equal(tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageOutputAmount = toDecimal(\n      this.getExpectedOutputAmountWithNoSlippage(tokenAmounts, inputTradeAmountJSBI, inputIndex, outputIndex),\n    );\n\n    const expectedOutputAmount = toDecimal(expectedOutputAmountJSBI);\n    const impact = noSlippageOutputAmount.sub(expectedOutputAmount).div(noSlippageOutputAmount);\n\n    return impact;\n  }\n\n  private getFees(inputTradeAmount: JSBI): JSBI {\n    const tradingFee = calculateFeeAmount(inputTradeAmount, this.traderFee);\n    const ownerFee = calculateFeeAmount(inputTradeAmount, this.ownerFee);\n\n    return JSBI.add(tradingFee, ownerFee);\n  }\n\n  private getExpectedOutputAmount(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    const inputTradeAmountLessFees = this.getInputAmountLessFees(inputTradeAmount);\n\n    return this.getOutputAmount(tokenAmounts, inputTradeAmountLessFees, inputIndex, outputIndex);\n  }\n\n  private getExpectedOutputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    const inputTradeAmountLessFees = this.getInputAmountLessFees(inputTradeAmount);\n\n    return this.getOutputAmountWithNoSlippage(tokenAmounts, inputTradeAmountLessFees, inputIndex, outputIndex);\n  }\n\n  private getInputAmountLessFees(inputTradeAmount: JSBI): JSBI {\n    return JSBI.subtract(inputTradeAmount, this.getFees(inputTradeAmount));\n  }\n\n  private getOutputAmount(\n    tokenAmounts: JSBI[],\n    inputTradeAmountLessFees: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    return this.curve.exchange(tokenAmounts, inputIndex, outputIndex, inputTradeAmountLessFees, false);\n  }\n\n  private getOutputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    inputTradeAmountLessFees: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    return this.curve.computeBaseY(tokenAmounts, inputIndex, outputIndex, inputTradeAmountLessFees);\n  }\n}\n","import JSBI from 'jsbi';\nimport { SwapResult, toDecimal, ZERO, ceilingDivision, SwapExactOutputResult } from '../utils';\nimport Decimal from 'decimal.js';\nimport { Fraction } from '..';\nimport { calculateFeeAmount } from './fees';\n\nexport class TokenSwapConstantProduct {\n  constructor(private traderFee: Fraction, private ownerFee: Fraction, private feesOnInput: boolean = true) {}\n\n  public exchange(tokenAmounts: JSBI[], inputTradeAmount: JSBI, outputIndex: number): SwapResult {\n    const inputIndex = outputIndex === 0 ? 1 : 0;\n    const newInputTradeAmount = this.feesOnInput ? this.getAmountLessFees(inputTradeAmount) : inputTradeAmount;\n\n    let expectedOutputAmount = this.getExpectedOutputAmount(tokenAmounts, newInputTradeAmount, inputIndex, outputIndex);\n\n    const fees = this.getFees(this.feesOnInput ? inputTradeAmount : expectedOutputAmount);\n\n    if (!this.feesOnInput) {\n      expectedOutputAmount = this.getAmountLessFees(expectedOutputAmount);\n    }\n\n    return {\n      priceImpact: this.getPriceImpact(\n        tokenAmounts,\n        newInputTradeAmount,\n        expectedOutputAmount,\n        inputIndex,\n        outputIndex,\n      ),\n      fees,\n      expectedOutputAmount,\n    };\n  }\n\n  public exchangeForExactOutput(\n    tokenAmounts: JSBI[],\n    outputTradeAmount: JSBI,\n    outputIndex: number,\n  ): SwapExactOutputResult {\n    const inputIndex = outputIndex === 0 ? 1 : 0;\n    const newOutputTradeAmount = this.feesOnInput ? outputTradeAmount : this.getAmountPlusFees(outputTradeAmount);\n\n    let expectedInputAmount = this.getInputAmount(tokenAmounts, newOutputTradeAmount, inputIndex, outputIndex);\n\n    const fees = this.getFees(this.feesOnInput ? expectedInputAmount : outputTradeAmount);\n\n    if (this.feesOnInput) {\n      expectedInputAmount = this.getAmountPlusFees(expectedInputAmount);\n    }\n\n    return {\n      priceImpact: this.getPriceImpactExactOutput(\n        tokenAmounts,\n        expectedInputAmount,\n        newOutputTradeAmount,\n        inputIndex,\n        outputIndex,\n      ),\n      fees,\n      expectedInputAmount,\n    };\n  }\n\n  private getPriceImpact(\n    tokenAmounts: JSBI[],\n    inputTradeAmountJSBI: JSBI,\n    expectedOutputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(inputTradeAmountJSBI, ZERO) ||\n      JSBI.equal(tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageOutputAmount = toDecimal(\n      this.getExpectedOutputAmountWithNoSlippage(tokenAmounts, inputTradeAmountJSBI, inputIndex, outputIndex),\n    );\n    const expectedOutputAmount = toDecimal(expectedOutputAmountJSBI);\n    const impact = noSlippageOutputAmount.sub(expectedOutputAmount).div(noSlippageOutputAmount);\n\n    return impact;\n  }\n\n  private getPriceImpactExactOutput(\n    tokenAmounts: JSBI[],\n    expectedInputTradeAmountJSBI: JSBI,\n    outputAmountJSBI: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): Decimal {\n    if (\n      JSBI.equal(outputAmountJSBI, ZERO) ||\n      JSBI.equal(tokenAmounts[inputIndex], ZERO) ||\n      JSBI.equal(tokenAmounts[outputIndex], ZERO)\n    ) {\n      return new Decimal(0);\n    }\n\n    const noSlippageInputAmount = toDecimal(\n      this.getExpectedInputAmountWithNoSlippage(tokenAmounts, outputAmountJSBI, inputIndex, outputIndex),\n    );\n    const expectedInputAmount = toDecimal(expectedInputTradeAmountJSBI);\n    const impact = expectedInputAmount.sub(noSlippageInputAmount).div(noSlippageInputAmount);\n\n    return impact;\n  }\n\n  private getFees(tradeAmount: JSBI): JSBI {\n    const tradingFee = calculateFeeAmount(tradeAmount, this.traderFee);\n    const ownerFee = calculateFeeAmount(tradeAmount, this.ownerFee);\n\n    return JSBI.add(tradingFee, ownerFee);\n  }\n\n  private getExpectedOutputAmount(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    return this.getOutputAmount(tokenAmounts, inputTradeAmount, inputIndex, outputIndex);\n  }\n\n  private getExpectedOutputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    inputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    if (JSBI.equal(tokenAmounts[inputIndex], ZERO)) {\n      return tokenAmounts[outputIndex];\n    }\n\n    const expectedOutputAmountWithNoSlippage = JSBI.divide(\n      JSBI.multiply(inputTradeAmount, tokenAmounts[outputIndex]),\n      tokenAmounts[inputIndex],\n    );\n\n    if (this.feesOnInput) {\n      return expectedOutputAmountWithNoSlippage;\n    } else {\n      return this.getAmountLessFees(expectedOutputAmountWithNoSlippage);\n    }\n  }\n\n  private getExpectedInputAmountWithNoSlippage(\n    tokenAmounts: JSBI[],\n    outputTradeAmount: JSBI,\n    inputIndex: number,\n    outputIndex: number,\n  ): JSBI {\n    if (JSBI.equal(tokenAmounts[outputIndex], ZERO)) {\n      return tokenAmounts[inputIndex];\n    }\n\n    const expectedInputAmountWithNoSlippage = JSBI.divide(\n      JSBI.multiply(outputTradeAmount, tokenAmounts[inputIndex]),\n      tokenAmounts[outputIndex],\n    );\n\n    if (this.feesOnInput) {\n      return this.getAmountPlusFees(expectedInputAmountWithNoSlippage);\n    } else {\n      return expectedInputAmountWithNoSlippage;\n    }\n  }\n\n  private getAmountLessFees(tradeAmount: JSBI): JSBI {\n    return JSBI.subtract(tradeAmount, this.getFees(tradeAmount));\n  }\n\n  private getAmountPlusFees(tradeAmount: JSBI): JSBI {\n    return JSBI.add(tradeAmount, this.getFees(tradeAmount));\n  }\n\n  private getOutputAmount(tokenAmounts: JSBI[], inputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    const [poolInputAmount, poolOutputAmount] = [tokenAmounts[inputIndex], tokenAmounts[outputIndex]];\n\n    const invariant = this.getInvariant(tokenAmounts);\n\n    const [newPoolOutputAmount] = ceilingDivision(invariant, JSBI.add(poolInputAmount, inputTradeAmount));\n\n    return JSBI.subtract(poolOutputAmount, newPoolOutputAmount);\n  }\n\n  private getInputAmount(tokenAmounts: JSBI[], outputTradeAmount: JSBI, inputIndex: number, outputIndex: number): JSBI {\n    const [poolInputAmount, poolOutputAmount] = [tokenAmounts[inputIndex], tokenAmounts[outputIndex]];\n\n    const invariant = this.getInvariant(tokenAmounts);\n\n    if (JSBI.greaterThanOrEqual(outputTradeAmount, poolOutputAmount)) {\n      throw new Error('Insufficient liquidity to provide outputTradeAmount');\n    }\n    const [newPoolInputAmount] = ceilingDivision(invariant, JSBI.subtract(poolOutputAmount, outputTradeAmount));\n    return JSBI.subtract(newPoolInputAmount, poolInputAmount);\n  }\n\n  getInvariant(tokenAmounts: JSBI[]) {\n    return JSBI.multiply(tokenAmounts[0], tokenAmounts[1]);\n  }\n}\n","import JSBI from 'jsbi';\n\nexport class Fraction {\n  constructor(public numerator: JSBI, public denominator: JSBI) {}\n}\n\nexport const ZERO_FRACTION = new Fraction(JSBI.BigInt(0), JSBI.BigInt(1));\n"],"names":["ZERO","JSBI","BigInt","ONE","TWO","sumArray","numbers","reduce","prev","curr","add","mulArray","multiply","ceilingDivision","dividend","divisor","quotient","divide","equal","remainder","greaterThan","toDecimal","input","shift","Decimal","toString","div","pow","Curve","numberOfCurrencies","amplificationFactor","targetPrices","this","_proto","prototype","exchange","tokenAmounts","inputIndex","outputIndex","amount","minusOne","length","toNumber","Error","xp","dx","x","y","computeY","dy","subtract","computeBaseY","d","computeD","nn","exponentiate","sum","product","k","b","c","numerator","denominator","inputFactor","Math","log10","outputFactor","factor","abs","mul","floor","newTotalAmount","xx","splice","_step","ann","_iterator","_createForOfIteratorHelperLoose","done","value","yPrev","i","lessThanOrEqual","dPrev","_step2","dP","_iterator2","_this","map","tokenAmount","index","setAmplificationFactor","Stable","amp","traderFee","curve","inputTradeAmount","outputAmountWithoutFees","getOutputAmount","fees","getFees","expectedOutputAmount","priceImpact","getPriceImpact","inputTradeAmountJSBI","expectedOutputAmountJSBI","noSlippageOutputAmount","getOutputAmountWithNoSlippage","sub","setAmp","setTraderFee","calculateFeeAmount","fee","feeAmount","TokenSwapStable","ownerFee","getExpectedOutputAmount","getExpectedOutputAmountWithNoSlippage","tradingFee","inputTradeAmountLessFees","getInputAmountLessFees","TokenSwapConstantProduct","feesOnInput","newInputTradeAmount","getAmountLessFees","exchangeForExactOutput","outputTradeAmount","newOutputTradeAmount","getAmountPlusFees","expectedInputAmount","getInputAmount","getPriceImpactExactOutput","expectedInputTradeAmountJSBI","outputAmountJSBI","noSlippageInputAmount","getExpectedInputAmountWithNoSlippage","tradeAmount","expectedOutputAmountWithNoSlippage","expectedInputAmountWithNoSlippage","_ref","poolInputAmount","poolOutputAmount","_ceilingDivision","getInvariant","_ref2","invariant","greaterThanOrEqual","_ceilingDivision2","Fraction","ZERO_FRACTION","number","GE","unaryMinus"],"mappings":"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"}