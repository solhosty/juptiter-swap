import { TransactionInstruction, Transaction } from "@solana/web3.js";
import { BorshCoder } from "@project-serum/anchor";
import { DexIDL } from "@dradex/idl";
export const dexCoder = new BorshCoder(DexIDL);
export const FEE_BPS_BASE = 10000;
export var Side;
(function (Side) {
    Side[Side["BID"] = 0] = "BID";
    Side[Side["ASK"] = 1] = "ASK";
})(Side || (Side = {}));
export class InstructionSet {
    constructor(instructions, provider) {
        this.instructions = instructions;
        this.provider = provider;
    }
    tx() {
        return new Transaction().add(...this.instructions);
    }
    add(...items) {
        items.forEach((item) => {
            if (item instanceof TransactionInstruction) {
                this.instructions.push(item);
            }
            else {
                this.instructions.push(...item.instructions);
            }
        });
    }
    instruction() {
        if (this.instructions.length == 0) {
            throw new Error("no instruction available");
        }
        return this.instructions[0];
    }
    exec({ signers, ...options } = {}) {
        var _a, _b;
        if (!this.provider) {
            throw new Error("provider not available");
        }
        if (!signers) {
            throw new Error("signers not available");
        }
        return (_b = (_a = this.provider).send) === null || _b === void 0 ? void 0 : _b.call(_a, this.tx(), signers, options);
    }
}
