/// <reference types="node" />
import { PublicKey, AccountMeta, TransactionInstruction } from "@solana/web3.js";
import { Address, Program, Provider } from "@project-serum/anchor";
import { Dex } from "@dradex/idl";
import { DexMarket } from "./market";
import { InstructionSet, OrderInput } from "./core";
export interface DexMetadata {
    address: Address;
    master: [Address, number];
}
export interface MarketOperationAccountsInput {
    marketUser?: PublicKey;
    dexUser?: PublicKey;
    t0User?: PublicKey;
    t1User?: PublicKey;
}
export declare class DexProgram extends Program<Dex> {
    loggerProgramId: PublicKey;
    systemAccounts: {
        signer: PublicKey;
        master: PublicKey;
        rent: PublicKey;
        clock: PublicKey;
        systemProgram: PublicKey;
        tokenProgram: PublicKey;
        logger: PublicKey;
    };
    bumps: {
        master: number;
    };
    constructor(options?: {
        provider?: Provider;
        loggerProgramId?: Address;
        dexMetadata?: DexMetadata;
    });
    loadDexMetadata(dexMetadata: DexMetadata): void;
    get connection(): import("@solana/web3.js").Connection;
    get signer(): PublicKey;
    createInstructionSet(instructions: TransactionInstruction[]): InstructionSet;
    getMarket(address: PublicKey): Promise<DexMarket>;
    loadMarket(market: DexMarket): Promise<void>;
    private toAccountInfoMap;
    findProgramAddress(seeds: Buffer[], programId?: PublicKey): Promise<[PublicKey, number]>;
    getProgramAddress(seeds: Buffer[]): Promise<PublicKey>;
    getMarketUserAddress(market: PublicKey, user?: PublicKey): Promise<PublicKey>;
    getDexUserAddress(user?: PublicKey): Promise<PublicKey>;
    createOrder(market: DexMarket, input: OrderInput, options?: {
        accounts?: MarketOperationAccountsInput;
        remainingAccounts?: AccountMeta[];
    }): Promise<InstructionSet>;
    createDexUser(user?: PublicKey): Promise<InstructionSet>;
    createMarketUser(market: DexMarket, user?: PublicKey): Promise<InstructionSet>;
}
//# sourceMappingURL=program.d.ts.map