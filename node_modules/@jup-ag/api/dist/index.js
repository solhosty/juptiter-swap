"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// generated/index.ts
var generated_exports = {};
__export(generated_exports, {
  BASE_PATH: () => BASE_PATH,
  BaseAPI: () => BaseAPI,
  BlobApiResponse: () => BlobApiResponse,
  COLLECTION_FORMATS: () => COLLECTION_FORMATS,
  Configuration: () => Configuration,
  Def0FromJSON: () => Def0FromJSON,
  Def0FromJSONTyped: () => Def0FromJSONTyped,
  Def0ToJSON: () => Def0ToJSON,
  Def1FromJSON: () => Def1FromJSON,
  Def1FromJSONTyped: () => Def1FromJSONTyped,
  Def1SwapModeEnum: () => Def1SwapModeEnum,
  Def1ToJSON: () => Def1ToJSON,
  Def2FromJSON: () => Def2FromJSON,
  Def2FromJSONTyped: () => Def2FromJSONTyped,
  Def2ToJSON: () => Def2ToJSON,
  DefaultApi: () => DefaultApi,
  InlineObjectFromJSON: () => InlineObjectFromJSON,
  InlineObjectFromJSONTyped: () => InlineObjectFromJSONTyped,
  InlineObjectToJSON: () => InlineObjectToJSON,
  InlineResponse2001FromJSON: () => InlineResponse2001FromJSON,
  InlineResponse2001FromJSONTyped: () => InlineResponse2001FromJSONTyped,
  InlineResponse2001ToJSON: () => InlineResponse2001ToJSON,
  InlineResponse2002FromJSON: () => InlineResponse2002FromJSON,
  InlineResponse2002FromJSONTyped: () => InlineResponse2002FromJSONTyped,
  InlineResponse2002ToJSON: () => InlineResponse2002ToJSON,
  InlineResponse2003FromJSON: () => InlineResponse2003FromJSON,
  InlineResponse2003FromJSONTyped: () => InlineResponse2003FromJSONTyped,
  InlineResponse2003ToJSON: () => InlineResponse2003ToJSON,
  InlineResponse200DataFromJSON: () => InlineResponse200DataFromJSON,
  InlineResponse200DataFromJSONTyped: () => InlineResponse200DataFromJSONTyped,
  InlineResponse200DataSwapModeEnum: () => InlineResponse200DataSwapModeEnum,
  InlineResponse200DataToJSON: () => InlineResponse200DataToJSON,
  InlineResponse200FeesFromJSON: () => InlineResponse200FeesFromJSON,
  InlineResponse200FeesFromJSONTyped: () => InlineResponse200FeesFromJSONTyped,
  InlineResponse200FeesToJSON: () => InlineResponse200FeesToJSON,
  InlineResponse200FromJSON: () => InlineResponse200FromJSON,
  InlineResponse200FromJSONTyped: () => InlineResponse200FromJSONTyped,
  InlineResponse200LpFeeFromJSON: () => InlineResponse200LpFeeFromJSON,
  InlineResponse200LpFeeFromJSONTyped: () => InlineResponse200LpFeeFromJSONTyped,
  InlineResponse200LpFeeToJSON: () => InlineResponse200LpFeeToJSON,
  InlineResponse200MarketInfosFromJSON: () => InlineResponse200MarketInfosFromJSON,
  InlineResponse200MarketInfosFromJSONTyped: () => InlineResponse200MarketInfosFromJSONTyped,
  InlineResponse200MarketInfosToJSON: () => InlineResponse200MarketInfosToJSON,
  InlineResponse200ToJSON: () => InlineResponse200ToJSON,
  InlineResponse409DataFromJSON: () => InlineResponse409DataFromJSON,
  InlineResponse409DataFromJSONTyped: () => InlineResponse409DataFromJSONTyped,
  InlineResponse409DataToJSON: () => InlineResponse409DataToJSON,
  InlineResponse409FromJSON: () => InlineResponse409FromJSON,
  InlineResponse409FromJSONTyped: () => InlineResponse409FromJSONTyped,
  InlineResponse409ToJSON: () => InlineResponse409ToJSON,
  JSONApiResponse: () => JSONApiResponse,
  RequiredError: () => RequiredError,
  TextApiResponse: () => TextApiResponse,
  V4QuoteGetSwapModeEnum: () => V4QuoteGetSwapModeEnum,
  VoidApiResponse: () => VoidApiResponse,
  canConsumeForm: () => canConsumeForm,
  exists: () => exists,
  mapValues: () => mapValues,
  querystring: () => querystring
});
module.exports = __toCommonJS(generated_exports);

// generated/runtime.ts
var BASE_PATH = "http://localhost".replace(/\/+$/, "");
var isBlob = (value) => typeof Blob !== "undefined" && value instanceof Blob;
var BaseAPI = class {
  constructor(configuration = new Configuration()) {
    this.configuration = configuration;
    this.fetchApi = async (url, init) => {
      let fetchParams = { url, init };
      for (const middleware of this.middleware) {
        if (middleware.pre) {
          fetchParams = await middleware.pre({
            fetch: this.fetchApi,
            ...fetchParams
          }) || fetchParams;
        }
      }
      let response = await (this.configuration.fetchApi || fetch)(fetchParams.url, fetchParams.init);
      for (const middleware of this.middleware) {
        if (middleware.post) {
          response = await middleware.post({
            fetch: this.fetchApi,
            url: fetchParams.url,
            init: fetchParams.init,
            response: response.clone()
          }) || response;
        }
      }
      return response;
    };
    this.middleware = configuration.middleware;
  }
  withMiddleware(...middlewares) {
    const next = this.clone();
    next.middleware = next.middleware.concat(...middlewares);
    return next;
  }
  withPreMiddleware(...preMiddlewares) {
    const middlewares = preMiddlewares.map((pre) => ({ pre }));
    return this.withMiddleware(...middlewares);
  }
  withPostMiddleware(...postMiddlewares) {
    const middlewares = postMiddlewares.map((post) => ({ post }));
    return this.withMiddleware(...middlewares);
  }
  async request(context, initOverrides) {
    const { url, init } = this.createFetchParams(context, initOverrides);
    const response = await this.fetchApi(url, init);
    if (response.status >= 200 && response.status < 300) {
      return response;
    }
    throw response;
  }
  createFetchParams(context, initOverrides) {
    let url = this.configuration.basePath + context.path;
    if (context.query !== void 0 && Object.keys(context.query).length !== 0) {
      url += "?" + this.configuration.queryParamsStringify(context.query);
    }
    const body = typeof FormData !== "undefined" && context.body instanceof FormData || context.body instanceof URLSearchParams || isBlob(context.body) ? context.body : JSON.stringify(context.body);
    const headers = Object.assign({}, this.configuration.headers, context.headers);
    const init = {
      method: context.method,
      headers,
      body,
      credentials: this.configuration.credentials,
      ...initOverrides
    };
    return { url, init };
  }
  clone() {
    const constructor = this.constructor;
    const next = new constructor(this.configuration);
    next.middleware = this.middleware.slice();
    return next;
  }
};
var RequiredError = class extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
    this.name = "RequiredError";
  }
};
var COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "	",
  pipes: "|"
};
var Configuration = class {
  constructor(configuration = {}) {
    this.configuration = configuration;
  }
  get basePath() {
    return this.configuration.basePath != null ? this.configuration.basePath : BASE_PATH;
  }
  get fetchApi() {
    return this.configuration.fetchApi;
  }
  get middleware() {
    return this.configuration.middleware || [];
  }
  get queryParamsStringify() {
    return this.configuration.queryParamsStringify || querystring;
  }
  get username() {
    return this.configuration.username;
  }
  get password() {
    return this.configuration.password;
  }
  get apiKey() {
    const apiKey = this.configuration.apiKey;
    if (apiKey) {
      return typeof apiKey === "function" ? apiKey : () => apiKey;
    }
    return void 0;
  }
  get accessToken() {
    const accessToken = this.configuration.accessToken;
    if (accessToken) {
      return typeof accessToken === "function" ? accessToken : async () => accessToken;
    }
    return void 0;
  }
  get headers() {
    return this.configuration.headers;
  }
  get credentials() {
    return this.configuration.credentials;
  }
};
function exists(json, key) {
  const value = json[key];
  return value !== null && value !== void 0;
}
function querystring(params, prefix = "") {
  return Object.keys(params).map((key) => {
    const fullKey = prefix + (prefix.length ? `[${key}]` : key);
    const value = params[key];
    if (value instanceof Array) {
      const multiValue = value.map((singleValue) => encodeURIComponent(String(singleValue))).join(`&${encodeURIComponent(fullKey)}=`);
      return `${encodeURIComponent(fullKey)}=${multiValue}`;
    }
    if (value instanceof Date) {
      return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;
    }
    if (value instanceof Object) {
      return querystring(value, fullKey);
    }
    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;
  }).filter((part) => part.length > 0).join("&");
}
function mapValues(data, fn) {
  return Object.keys(data).reduce(
    (acc, key) => ({ ...acc, [key]: fn(data[key]) }),
    {}
  );
}
function canConsumeForm(consumes) {
  for (const consume of consumes) {
    if ("multipart/form-data" === consume.contentType) {
      return true;
    }
  }
  return false;
}
var JSONApiResponse = class {
  constructor(raw, transformer = (jsonValue) => jsonValue) {
    this.raw = raw;
    this.transformer = transformer;
  }
  async value() {
    return this.transformer(await this.raw.json());
  }
};
var VoidApiResponse = class {
  constructor(raw) {
    this.raw = raw;
  }
  async value() {
    return void 0;
  }
};
var BlobApiResponse = class {
  constructor(raw) {
    this.raw = raw;
  }
  async value() {
    return await this.raw.blob();
  }
};
var TextApiResponse = class {
  constructor(raw) {
    this.raw = raw;
  }
  async value() {
    return await this.raw.text();
  }
};

// generated/models/InlineResponse200LpFee.ts
function InlineResponse200LpFeeFromJSON(json) {
  return InlineResponse200LpFeeFromJSONTyped(json, false);
}
function InlineResponse200LpFeeFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "amount": !exists(json, "amount") ? void 0 : json["amount"],
    "mint": !exists(json, "mint") ? void 0 : json["mint"],
    "pct": !exists(json, "pct") ? void 0 : json["pct"]
  };
}
function InlineResponse200LpFeeToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "amount": value.amount,
    "mint": value.mint,
    "pct": value.pct
  };
}

// generated/models/Def0.ts
function Def0FromJSON(json) {
  return Def0FromJSONTyped(json, false);
}
function Def0FromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": !exists(json, "id") ? void 0 : json["id"],
    "label": !exists(json, "label") ? void 0 : json["label"],
    "inputMint": !exists(json, "inputMint") ? void 0 : json["inputMint"],
    "outputMint": !exists(json, "outputMint") ? void 0 : json["outputMint"],
    "notEnoughLiquidity": !exists(json, "notEnoughLiquidity") ? void 0 : json["notEnoughLiquidity"],
    "inAmount": !exists(json, "inAmount") ? void 0 : json["inAmount"],
    "outAmount": !exists(json, "outAmount") ? void 0 : json["outAmount"],
    "minInAmount": !exists(json, "minInAmount") ? void 0 : json["minInAmount"],
    "minOutAmount": !exists(json, "minOutAmount") ? void 0 : json["minOutAmount"],
    "priceImpactPct": !exists(json, "priceImpactPct") ? void 0 : json["priceImpactPct"],
    "lpFee": !exists(json, "lpFee") ? void 0 : InlineResponse200LpFeeFromJSON(json["lpFee"]),
    "platformFee": !exists(json, "platformFee") ? void 0 : InlineResponse200LpFeeFromJSON(json["platformFee"])
  };
}
function Def0ToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "label": value.label,
    "inputMint": value.inputMint,
    "outputMint": value.outputMint,
    "notEnoughLiquidity": value.notEnoughLiquidity,
    "inAmount": value.inAmount,
    "outAmount": value.outAmount,
    "minInAmount": value.minInAmount,
    "minOutAmount": value.minOutAmount,
    "priceImpactPct": value.priceImpactPct,
    "lpFee": InlineResponse200LpFeeToJSON(value.lpFee),
    "platformFee": InlineResponse200LpFeeToJSON(value.platformFee)
  };
}

// generated/models/InlineResponse200Fees.ts
function InlineResponse200FeesFromJSON(json) {
  return InlineResponse200FeesFromJSONTyped(json, false);
}
function InlineResponse200FeesFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "signatureFee": !exists(json, "signatureFee") ? void 0 : json["signatureFee"],
    "openOrdersDeposits": !exists(json, "openOrdersDeposits") ? void 0 : json["openOrdersDeposits"],
    "ataDeposits": !exists(json, "ataDeposits") ? void 0 : json["ataDeposits"],
    "totalFeeAndDeposits": !exists(json, "totalFeeAndDeposits") ? void 0 : json["totalFeeAndDeposits"],
    "minimumSOLForTransaction": !exists(json, "minimumSOLForTransaction") ? void 0 : json["minimumSOLForTransaction"]
  };
}
function InlineResponse200FeesToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "signatureFee": value.signatureFee,
    "openOrdersDeposits": value.openOrdersDeposits,
    "ataDeposits": value.ataDeposits,
    "totalFeeAndDeposits": value.totalFeeAndDeposits,
    "minimumSOLForTransaction": value.minimumSOLForTransaction
  };
}

// generated/models/InlineResponse200MarketInfos.ts
function InlineResponse200MarketInfosFromJSON(json) {
  return InlineResponse200MarketInfosFromJSONTyped(json, false);
}
function InlineResponse200MarketInfosFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": !exists(json, "id") ? void 0 : json["id"],
    "label": !exists(json, "label") ? void 0 : json["label"],
    "inputMint": !exists(json, "inputMint") ? void 0 : json["inputMint"],
    "outputMint": !exists(json, "outputMint") ? void 0 : json["outputMint"],
    "notEnoughLiquidity": !exists(json, "notEnoughLiquidity") ? void 0 : json["notEnoughLiquidity"],
    "inAmount": !exists(json, "inAmount") ? void 0 : json["inAmount"],
    "outAmount": !exists(json, "outAmount") ? void 0 : json["outAmount"],
    "minInAmount": !exists(json, "minInAmount") ? void 0 : json["minInAmount"],
    "minOutAmount": !exists(json, "minOutAmount") ? void 0 : json["minOutAmount"],
    "priceImpactPct": !exists(json, "priceImpactPct") ? void 0 : json["priceImpactPct"],
    "lpFee": !exists(json, "lpFee") ? void 0 : InlineResponse200LpFeeFromJSON(json["lpFee"]),
    "platformFee": !exists(json, "platformFee") ? void 0 : InlineResponse200LpFeeFromJSON(json["platformFee"])
  };
}
function InlineResponse200MarketInfosToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "label": value.label,
    "inputMint": value.inputMint,
    "outputMint": value.outputMint,
    "notEnoughLiquidity": value.notEnoughLiquidity,
    "inAmount": value.inAmount,
    "outAmount": value.outAmount,
    "minInAmount": value.minInAmount,
    "minOutAmount": value.minOutAmount,
    "priceImpactPct": value.priceImpactPct,
    "lpFee": InlineResponse200LpFeeToJSON(value.lpFee),
    "platformFee": InlineResponse200LpFeeToJSON(value.platformFee)
  };
}

// generated/models/Def1.ts
var Def1SwapModeEnum = /* @__PURE__ */ ((Def1SwapModeEnum2) => {
  Def1SwapModeEnum2["ExactIn"] = "ExactIn";
  Def1SwapModeEnum2["ExactOut"] = "ExactOut";
  return Def1SwapModeEnum2;
})(Def1SwapModeEnum || {});
function Def1FromJSON(json) {
  return Def1FromJSONTyped(json, false);
}
function Def1FromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "inAmount": json["inAmount"],
    "outAmount": json["outAmount"],
    "priceImpactPct": json["priceImpactPct"],
    "marketInfos": json["marketInfos"].map(InlineResponse200MarketInfosFromJSON),
    "amount": json["amount"],
    "slippageBps": json["slippageBps"],
    "otherAmountThreshold": json["otherAmountThreshold"],
    "swapMode": json["swapMode"],
    "fees": !exists(json, "fees") ? void 0 : InlineResponse200FeesFromJSON(json["fees"])
  };
}
function Def1ToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "inAmount": value.inAmount,
    "outAmount": value.outAmount,
    "priceImpactPct": value.priceImpactPct,
    "marketInfos": value.marketInfos.map(InlineResponse200MarketInfosToJSON),
    "amount": value.amount,
    "slippageBps": value.slippageBps,
    "otherAmountThreshold": value.otherAmountThreshold,
    "swapMode": value.swapMode,
    "fees": InlineResponse200FeesToJSON(value.fees)
  };
}

// generated/models/Def2.ts
function Def2FromJSON(json) {
  return Def2FromJSONTyped(json, false);
}
function Def2FromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "id": !exists(json, "id") ? void 0 : json["id"],
    "mintSymbol": !exists(json, "mintSymbol") ? void 0 : json["mintSymbol"],
    "vsToken": !exists(json, "vsToken") ? void 0 : json["vsToken"],
    "vsTokenSymbol": !exists(json, "vsTokenSymbol") ? void 0 : json["vsTokenSymbol"],
    "price": !exists(json, "price") ? void 0 : json["price"]
  };
}
function Def2ToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "id": value.id,
    "mintSymbol": value.mintSymbol,
    "vsToken": value.vsToken,
    "vsTokenSymbol": value.vsTokenSymbol,
    "price": value.price
  };
}

// generated/models/InlineObject.ts
function InlineObjectFromJSON(json) {
  return InlineObjectFromJSONTyped(json, false);
}
function InlineObjectFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "route": Def1FromJSON(json["route"]),
    "userPublicKey": json["userPublicKey"],
    "wrapUnwrapSOL": !exists(json, "wrapUnwrapSOL") ? void 0 : json["wrapUnwrapSOL"],
    "feeAccount": !exists(json, "feeAccount") ? void 0 : json["feeAccount"],
    "asLegacyTransaction": !exists(json, "asLegacyTransaction") ? void 0 : json["asLegacyTransaction"],
    "computeUnitPriceMicroLamports": !exists(json, "computeUnitPriceMicroLamports") ? void 0 : json["computeUnitPriceMicroLamports"],
    "destinationWallet": !exists(json, "destinationWallet") ? void 0 : json["destinationWallet"]
  };
}
function InlineObjectToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "route": Def1ToJSON(value.route),
    "userPublicKey": value.userPublicKey,
    "wrapUnwrapSOL": value.wrapUnwrapSOL,
    "feeAccount": value.feeAccount,
    "asLegacyTransaction": value.asLegacyTransaction,
    "computeUnitPriceMicroLamports": value.computeUnitPriceMicroLamports,
    "destinationWallet": value.destinationWallet
  };
}

// generated/models/InlineResponse200Data.ts
var InlineResponse200DataSwapModeEnum = /* @__PURE__ */ ((InlineResponse200DataSwapModeEnum2) => {
  InlineResponse200DataSwapModeEnum2["ExactIn"] = "ExactIn";
  InlineResponse200DataSwapModeEnum2["ExactOut"] = "ExactOut";
  return InlineResponse200DataSwapModeEnum2;
})(InlineResponse200DataSwapModeEnum || {});
function InlineResponse200DataFromJSON(json) {
  return InlineResponse200DataFromJSONTyped(json, false);
}
function InlineResponse200DataFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "inAmount": json["inAmount"],
    "outAmount": json["outAmount"],
    "priceImpactPct": json["priceImpactPct"],
    "marketInfos": json["marketInfos"].map(InlineResponse200MarketInfosFromJSON),
    "amount": json["amount"],
    "slippageBps": json["slippageBps"],
    "otherAmountThreshold": json["otherAmountThreshold"],
    "swapMode": json["swapMode"],
    "fees": !exists(json, "fees") ? void 0 : InlineResponse200FeesFromJSON(json["fees"])
  };
}
function InlineResponse200DataToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "inAmount": value.inAmount,
    "outAmount": value.outAmount,
    "priceImpactPct": value.priceImpactPct,
    "marketInfos": value.marketInfos.map(InlineResponse200MarketInfosToJSON),
    "amount": value.amount,
    "slippageBps": value.slippageBps,
    "otherAmountThreshold": value.otherAmountThreshold,
    "swapMode": value.swapMode,
    "fees": InlineResponse200FeesToJSON(value.fees)
  };
}

// generated/models/InlineResponse200.ts
function InlineResponse200FromJSON(json) {
  return InlineResponse200FromJSONTyped(json, false);
}
function InlineResponse200FromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : json["data"].map(InlineResponse200DataFromJSON),
    "timeTaken": !exists(json, "timeTaken") ? void 0 : json["timeTaken"],
    "contextSlot": !exists(json, "contextSlot") ? void 0 : json["contextSlot"]
  };
}
function InlineResponse200ToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": value.data === void 0 ? void 0 : value.data.map(InlineResponse200DataToJSON),
    "timeTaken": value.timeTaken,
    "contextSlot": value.contextSlot
  };
}

// generated/models/InlineResponse2001.ts
function InlineResponse2001FromJSON(json) {
  return InlineResponse2001FromJSONTyped(json, false);
}
function InlineResponse2001FromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "swapTransaction": !exists(json, "swapTransaction") ? void 0 : json["swapTransaction"]
  };
}
function InlineResponse2001ToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "swapTransaction": value.swapTransaction
  };
}

// generated/models/InlineResponse2002.ts
function InlineResponse2002FromJSON(json) {
  return InlineResponse2002FromJSONTyped(json, false);
}
function InlineResponse2002FromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : mapValues(json["data"], Def2FromJSON),
    "timeTaken": !exists(json, "timeTaken") ? void 0 : json["timeTaken"],
    "contextSlot": !exists(json, "contextSlot") ? void 0 : json["contextSlot"]
  };
}
function InlineResponse2002ToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": value.data === void 0 ? void 0 : mapValues(value.data, Def2ToJSON),
    "timeTaken": value.timeTaken,
    "contextSlot": value.contextSlot
  };
}

// generated/models/InlineResponse2003.ts
function InlineResponse2003FromJSON(json) {
  return InlineResponse2003FromJSONTyped(json, false);
}
function InlineResponse2003FromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "mintKeys": !exists(json, "mintKeys") ? void 0 : json["mintKeys"],
    "indexedRouteMap": !exists(json, "indexedRouteMap") ? void 0 : json["indexedRouteMap"]
  };
}
function InlineResponse2003ToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "mintKeys": value.mintKeys,
    "indexedRouteMap": value.indexedRouteMap
  };
}

// generated/models/InlineResponse409Data.ts
function InlineResponse409DataFromJSON(json) {
  return InlineResponse409DataFromJSONTyped(json, false);
}
function InlineResponse409DataFromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "error": !exists(json, "error") ? void 0 : json["error"],
    "addresses": !exists(json, "addresses") ? void 0 : json["addresses"]
  };
}
function InlineResponse409DataToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "error": value.error,
    "addresses": value.addresses
  };
}

// generated/models/InlineResponse409.ts
function InlineResponse409FromJSON(json) {
  return InlineResponse409FromJSONTyped(json, false);
}
function InlineResponse409FromJSONTyped(json, ignoreDiscriminator) {
  if (json === void 0 || json === null) {
    return json;
  }
  return {
    "data": !exists(json, "data") ? void 0 : InlineResponse409DataFromJSON(json["data"])
  };
}
function InlineResponse409ToJSON(value) {
  if (value === void 0) {
    return void 0;
  }
  if (value === null) {
    return null;
  }
  return {
    "data": InlineResponse409DataToJSON(value.data)
  };
}

// generated/apis/DefaultApi.ts
var DefaultApi = class extends BaseAPI {
  async v4IndexedRouteMapGetRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    if (requestParameters.onlyDirectRoutes !== void 0) {
      queryParameters["onlyDirectRoutes"] = requestParameters.onlyDirectRoutes;
    }
    const headerParameters = {};
    const response = await this.request({
      path: `/v4/indexed-route-map`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => InlineResponse2003FromJSON(jsonValue));
  }
  async v4IndexedRouteMapGet(requestParameters = {}, initOverrides) {
    const response = await this.v4IndexedRouteMapGetRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async v4PriceGetRaw(requestParameters, initOverrides) {
    if (requestParameters.ids === null || requestParameters.ids === void 0) {
      throw new RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling v4PriceGet.");
    }
    const queryParameters = {};
    if (requestParameters.ids !== void 0) {
      queryParameters["ids"] = requestParameters.ids;
    }
    if (requestParameters.vsToken !== void 0) {
      queryParameters["vsToken"] = requestParameters.vsToken;
    }
    if (requestParameters.vsAmount !== void 0) {
      queryParameters["vsAmount"] = requestParameters.vsAmount;
    }
    const headerParameters = {};
    const response = await this.request({
      path: `/v4/price`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
  }
  async v4PriceGet(requestParameters, initOverrides) {
    const response = await this.v4PriceGetRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async v4QuoteGetRaw(requestParameters, initOverrides) {
    if (requestParameters.inputMint === null || requestParameters.inputMint === void 0) {
      throw new RequiredError("inputMint", "Required parameter requestParameters.inputMint was null or undefined when calling v4QuoteGet.");
    }
    if (requestParameters.outputMint === null || requestParameters.outputMint === void 0) {
      throw new RequiredError("outputMint", "Required parameter requestParameters.outputMint was null or undefined when calling v4QuoteGet.");
    }
    if (requestParameters.amount === null || requestParameters.amount === void 0) {
      throw new RequiredError("amount", "Required parameter requestParameters.amount was null or undefined when calling v4QuoteGet.");
    }
    const queryParameters = {};
    if (requestParameters.inputMint !== void 0) {
      queryParameters["inputMint"] = requestParameters.inputMint;
    }
    if (requestParameters.outputMint !== void 0) {
      queryParameters["outputMint"] = requestParameters.outputMint;
    }
    if (requestParameters.amount !== void 0) {
      queryParameters["amount"] = requestParameters.amount;
    }
    if (requestParameters.swapMode !== void 0) {
      queryParameters["swapMode"] = requestParameters.swapMode;
    }
    if (requestParameters.slippageBps !== void 0) {
      queryParameters["slippageBps"] = requestParameters.slippageBps;
    }
    if (requestParameters.feeBps !== void 0) {
      queryParameters["feeBps"] = requestParameters.feeBps;
    }
    if (requestParameters.onlyDirectRoutes !== void 0) {
      queryParameters["onlyDirectRoutes"] = requestParameters.onlyDirectRoutes;
    }
    if (requestParameters.userPublicKey !== void 0) {
      queryParameters["userPublicKey"] = requestParameters.userPublicKey;
    }
    if (requestParameters.asLegacyTransaction !== void 0) {
      queryParameters["asLegacyTransaction"] = requestParameters.asLegacyTransaction;
    }
    const headerParameters = {};
    const response = await this.request({
      path: `/v4/quote`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
  }
  async v4QuoteGet(requestParameters, initOverrides) {
    const response = await this.v4QuoteGetRaw(requestParameters, initOverrides);
    return await response.value();
  }
  async v4SwapPostRaw(requestParameters, initOverrides) {
    const queryParameters = {};
    const headerParameters = {};
    headerParameters["Content-Type"] = "application/json";
    const response = await this.request({
      path: `/v4/swap`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: InlineObjectToJSON(requestParameters.body)
    }, initOverrides);
    return new JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
  }
  async v4SwapPost(requestParameters = {}, initOverrides) {
    const response = await this.v4SwapPostRaw(requestParameters, initOverrides);
    return await response.value();
  }
};
var V4QuoteGetSwapModeEnum = /* @__PURE__ */ ((V4QuoteGetSwapModeEnum2) => {
  V4QuoteGetSwapModeEnum2["ExactIn"] = "ExactIn";
  V4QuoteGetSwapModeEnum2["ExactOut"] = "ExactOut";
  return V4QuoteGetSwapModeEnum2;
})(V4QuoteGetSwapModeEnum || {});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BASE_PATH,
  BaseAPI,
  BlobApiResponse,
  COLLECTION_FORMATS,
  Configuration,
  Def0FromJSON,
  Def0FromJSONTyped,
  Def0ToJSON,
  Def1FromJSON,
  Def1FromJSONTyped,
  Def1SwapModeEnum,
  Def1ToJSON,
  Def2FromJSON,
  Def2FromJSONTyped,
  Def2ToJSON,
  DefaultApi,
  InlineObjectFromJSON,
  InlineObjectFromJSONTyped,
  InlineObjectToJSON,
  InlineResponse2001FromJSON,
  InlineResponse2001FromJSONTyped,
  InlineResponse2001ToJSON,
  InlineResponse2002FromJSON,
  InlineResponse2002FromJSONTyped,
  InlineResponse2002ToJSON,
  InlineResponse2003FromJSON,
  InlineResponse2003FromJSONTyped,
  InlineResponse2003ToJSON,
  InlineResponse200DataFromJSON,
  InlineResponse200DataFromJSONTyped,
  InlineResponse200DataSwapModeEnum,
  InlineResponse200DataToJSON,
  InlineResponse200FeesFromJSON,
  InlineResponse200FeesFromJSONTyped,
  InlineResponse200FeesToJSON,
  InlineResponse200FromJSON,
  InlineResponse200FromJSONTyped,
  InlineResponse200LpFeeFromJSON,
  InlineResponse200LpFeeFromJSONTyped,
  InlineResponse200LpFeeToJSON,
  InlineResponse200MarketInfosFromJSON,
  InlineResponse200MarketInfosFromJSONTyped,
  InlineResponse200MarketInfosToJSON,
  InlineResponse200ToJSON,
  InlineResponse409DataFromJSON,
  InlineResponse409DataFromJSONTyped,
  InlineResponse409DataToJSON,
  InlineResponse409FromJSON,
  InlineResponse409FromJSONTyped,
  InlineResponse409ToJSON,
  JSONApiResponse,
  RequiredError,
  TextApiResponse,
  V4QuoteGetSwapModeEnum,
  VoidApiResponse,
  canConsumeForm,
  exists,
  mapValues,
  querystring
});
