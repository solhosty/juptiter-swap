import * as lo from '@solana/buffer-layout';
import { PublicKey, Connection, TransactionInstruction, AccountInfo } from '@solana/web3.js';
import * as _solana_spl_token from '@solana/spl-token';
import { Program } from '@project-serum/anchor';

interface ControllerLayout {
    sighash: Uint8Array;
    seed: Buffer;
    bump: number;
    admin: PublicKey;
    suspended: number;
    decimals: number;
    mint: PublicKey;
    dailyReward: bigint;
    totalStakingShare: bigint;
    stakingBalance: bigint;
    lastDistributionTime: bigint;
    withdrawFee: number;
}
declare const CONTROLLER_LAYOUT: lo.Structure<ControllerLayout>;

interface LiquidityAccountLayout {
    sighash: Uint8Array;
    mint: PublicKey;
    bump: number;
    share: bigint;
    ptMinted: bigint;
    amountDeposited: bigint;
}
declare const LIQUIDITY_ACCOUNT_LAYOUT: lo.Structure<LiquidityAccountLayout>;

interface Oracle {
    elements: Array<{
        address: PublicKey;
        inverse: boolean;
    }>;
    n: bigint;
    padding: Uint8Array;
}
interface OracleComponent {
    address: PublicKey;
    inverse: boolean;
    padding: Uint8Array;
}
declare const ORACLE_ELEMENT_LAYOUT: lo.Structure<OracleComponent>;
declare const ORACLE_LAYOUT: lo.Structure<Oracle>;
interface PairLayout {
    sighash: Uint8Array;
    controller: PublicKey;
    mints: Array<PublicKey>;
    oracles: Array<Oracle>;
    nOracle: bigint;
    fee_collector: PublicKey;
    A: number;
    feeRates: Array<number>;
    maxDelay: bigint;
    confidence: bigint;
    balancer: PublicKey;
    excessiveConfiscateRate: number;
    feeCollector: PublicKey;
    platformFeeRate: Array<number>;
    rebalanceRebates: Array<number>;
    volumes: Array<bigint>;
    enableRebalanceSwap: boolean;
}
declare const PAIR_LAYOUT: lo.Structure<PairLayout>;

interface SSLLayout {
    sighash: Uint8Array;
    controller: PublicKey;
    mint: PublicKey;
    decimals: number;
    bump: number;
    ptBump: number;
    suspended: boolean;
    cranker: PublicKey;
    weight: bigint;
    swappedLiabilityNative: bigint;
    totalShare: bigint;
}
declare const SSL_LAYOUT: lo.Structure<SSLLayout>;

interface StakingAccountLayout {
    sighash: Uint8Array;
    controller: PublicKey;
    bump: number;
    share: bigint;
    amountStaked: bigint;
}
declare const STAKING_ACCOUNT_LAYOUT: lo.Structure<StakingAccountLayout>;

/* tslint:disable */
/* eslint-disable */
/**
* @param {Uint8Array} ssl_in
* @param {Uint8Array} ssl_out
* @param {Uint8Array} pair
* @param {bigint} liability_in
* @param {bigint} liability_out
* @param {bigint} swapped_liability_in
* @param {bigint} swapped_liability_out
* @param {OracleRegistry} oracles
* @param {bigint} amount_in
* @returns {SwapResult}
*/
declare function swap(ssl_in: Uint8Array, ssl_out: Uint8Array, pair: Uint8Array, liability_in: bigint, liability_out: bigint, swapped_liability_in: bigint, swapped_liability_out: bigint, oracles: OracleRegistry, amount_in: bigint): SwapResult;
/**
* Initialize Javascript logging and panic handler
*/
declare function solana_program_init(): void;
/**
*/
declare class Hash {
  free(): void;
/**
* Create a new Hash object
*
* * `value` - optional hash as a base58 encoded string, `Uint8Array`, `[number]`
* @param {any} value
*/
  constructor(value: any);
/**
* Return the base58 string representation of the hash
* @returns {string}
*/
  toString(): string;
/**
* Checks if two `Hash`s are equal
* @param {Hash} other
* @returns {boolean}
*/
  equals(other: Hash): boolean;
/**
* Return the `Uint8Array` representation of the hash
* @returns {Uint8Array}
*/
  toBytes(): Uint8Array;
}
/**
* A directive for a single invocation of a Solana program.
*
* An instruction specifies which program it is calling, which accounts it may
* read or modify, and additional data that serves as input to the program. One
* or more instructions are included in transactions submitted by Solana
* clients. Instructions are also used to describe [cross-program
* invocations][cpi].
*
* [cpi]: https://docs.solana.com/developing/programming-model/calling-between-programs
*
* During execution, a program will receive a list of account data as one of
* its arguments, in the same order as specified during `Instruction`
* construction.
*
* While Solana is agnostic to the format of the instruction data, it has
* built-in support for serialization via [`borsh`] and [`bincode`].
*
* [`borsh`]: https://docs.rs/borsh/latest/borsh/
* [`bincode`]: https://docs.rs/bincode/latest/bincode/
*
* # Specifying account metadata
*
* When constructing an [`Instruction`], a list of all accounts that may be
* read or written during the execution of that instruction must be supplied as
* [`AccountMeta`] values.
*
* Any account whose data may be mutated by the program during execution must
* be specified as writable. During execution, writing to an account that was
* not specified as writable will cause the transaction to fail. Writing to an
* account that is not owned by the program will cause the transaction to fail.
*
* Any account whose lamport balance may be mutated by the program during
* execution must be specified as writable. During execution, mutating the
* lamports of an account that was not specified as writable will cause the
* transaction to fail. While _subtracting_ lamports from an account not owned
* by the program will cause the transaction to fail, _adding_ lamports to any
* account is allowed, as long is it is mutable.
*
* Accounts that are not read or written by the program may still be specified
* in an `Instruction`'s account list. These will affect scheduling of program
* execution by the runtime, but will otherwise be ignored.
*
* When building a transaction, the Solana runtime coalesces all accounts used
* by all instructions in that transaction, along with accounts and permissions
* required by the runtime, into a single account list. Some accounts and
* account permissions required by the runtime to process a transaction are
* _not_ required to be included in an `Instruction`s account list. These
* include:
*
* - The program ID &mdash; it is a separate field of `Instruction`
* - The transaction's fee-paying account &mdash; it is added during [`Message`]
*   construction. A program may still require the fee payer as part of the
*   account list if it directly references it.
*
* [`Message`]: crate::message::Message
*
* Programs may require signatures from some accounts, in which case they
* should be specified as signers during `Instruction` construction. The
* program must still validate during execution that the account is a signer.
*/
declare class Instruction {
  free(): void;
}
/**
*/
declare class Instructions {
  free(): void;
/**
*/
  constructor();
/**
* @param {Instruction} instruction
*/
  push(instruction: Instruction): void;
}
/**
* A vanilla Ed25519 key pair
*/
declare class Keypair {
  free(): void;
/**
* Create a new `Keypair `
*/
  constructor();
/**
* Convert a `Keypair` to a `Uint8Array`
* @returns {Uint8Array}
*/
  toBytes(): Uint8Array;
/**
* Recover a `Keypair` from a `Uint8Array`
* @param {Uint8Array} bytes
* @returns {Keypair}
*/
  static fromBytes(bytes: Uint8Array): Keypair;
/**
* Return the `Pubkey` for this `Keypair`
* @returns {Pubkey}
*/
  pubkey(): Pubkey;
}
/**
* A Solana transaction message (legacy).
*
* See the [`message`] module documentation for further description.
*
* [`message`]: crate::message
*
* Some constructors accept an optional `payer`, the account responsible for
* paying the cost of executing a transaction. In most cases, callers should
* specify the payer explicitly in these constructors. In some cases though,
* the caller is not _required_ to specify the payer, but is still allowed to:
* in the `Message` structure, the first account is always the fee-payer, so if
* the caller has knowledge that the first account of the constructed
* transaction's `Message` is both a signer and the expected fee-payer, then
* redundantly specifying the fee-payer is not strictly required.
*/
declare class Message {
  free(): void;
/**
* The id of a recent ledger entry.
*/
  recent_blockhash: Hash;
}
/**
*/
declare class OracleRegistry {
  free(): void;
/**
*/
  constructor();
/**
* @param {Uint8Array} key
* @param {Uint8Array} data
*/
  add_oracle(key: Uint8Array, data: Uint8Array): void;
}
/**
*/
declare class Pubkey {
  free(): void;
/**
* Create a new Pubkey object
*
* * `value` - optional public key as a base58 encoded string, `Uint8Array`, `[number]`
* @param {any} value
*/
  constructor(value: any);
/**
* Return the base58 string representation of the public key
* @returns {string}
*/
  toString(): string;
/**
* Check if a `Pubkey` is on the ed25519 curve.
* @returns {boolean}
*/
  isOnCurve(): boolean;
/**
* Checks if two `Pubkey`s are equal
* @param {Pubkey} other
* @returns {boolean}
*/
  equals(other: Pubkey): boolean;
/**
* Return the `Uint8Array` representation of the public key
* @returns {Uint8Array}
*/
  toBytes(): Uint8Array;
/**
* Derive a Pubkey from another Pubkey, string seed, and a program id
* @param {Pubkey} base
* @param {string} seed
* @param {Pubkey} owner
* @returns {Pubkey}
*/
  static createWithSeed(base: Pubkey, seed: string, owner: Pubkey): Pubkey;
/**
* Derive a program address from seeds and a program id
* @param {any[]} seeds
* @param {Pubkey} program_id
* @returns {Pubkey}
*/
  static createProgramAddress(seeds: any[], program_id: Pubkey): Pubkey;
/**
* Find a valid program address
*
* Returns:
* * `[PubKey, number]` - the program address and bump seed
* @param {any[]} seeds
* @param {Pubkey} program_id
* @returns {any}
*/
  static findProgramAddress(seeds: any[], program_id: Pubkey): any;
}
/**
*/
declare class SwapResult {
  free(): void;
/**
*/
  amount_in: bigint;
/**
*/
  amount_out: bigint;
/**
*/
  fee_paid: bigint;
/**
*/
  insta_price: number;
/**
*/
  iter: number;
/**
*/
  oracle_price: number;
/**
*/
  price_impact: number;
/**
*/
  swap_price: number;
}
/**
* An atomically-commited sequence of instructions.
*
* While [`Instruction`]s are the basic unit of computation in Solana,
* they are submitted by clients in [`Transaction`]s containing one or
* more instructions, and signed by one or more [`Signer`]s.
*
* [`Signer`]: crate::signer::Signer
*
* See the [module documentation] for more details about transactions.
*
* [module documentation]: self
*
* Some constructors accept an optional `payer`, the account responsible for
* paying the cost of executing a transaction. In most cases, callers should
* specify the payer explicitly in these constructors. In some cases though,
* the caller is not _required_ to specify the payer, but is still allowed to:
* in the [`Message`] structure, the first account is always the fee-payer, so
* if the caller has knowledge that the first account of the constructed
* transaction's `Message` is both a signer and the expected fee-payer, then
* redundantly specifying the fee-payer is not strictly required.
*/
declare class Transaction {
  free(): void;
/**
* Create a new `Transaction`
* @param {Instructions} instructions
* @param {Pubkey | undefined} payer
*/
  constructor(instructions: Instructions, payer?: Pubkey);
/**
* Return a message containing all data that should be signed.
* @returns {Message}
*/
  message(): Message;
/**
* Return the serialized message data to sign.
* @returns {Uint8Array}
*/
  messageData(): Uint8Array;
/**
* Verify the transaction
*/
  verify(): void;
/**
* @param {Keypair} keypair
* @param {Hash} recent_blockhash
*/
  partialSign(keypair: Keypair, recent_blockhash: Hash): void;
/**
* @returns {boolean}
*/
  isSigned(): boolean;
/**
* @returns {Uint8Array}
*/
  toBytes(): Uint8Array;
/**
* @param {Uint8Array} bytes
* @returns {Transaction}
*/
  static fromBytes(bytes: Uint8Array): Transaction;
}

type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly __wbg_oracleregistry_free: (a: number) => void;
  readonly oracleregistry_new: () => number;
  readonly oracleregistry_add_oracle: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
  readonly __wbg_swapresult_free: (a: number) => void;
  readonly __wbg_get_swapresult_amount_in: (a: number) => number;
  readonly __wbg_set_swapresult_amount_in: (a: number, b: number) => void;
  readonly __wbg_get_swapresult_fee_paid: (a: number) => number;
  readonly __wbg_set_swapresult_fee_paid: (a: number, b: number) => void;
  readonly __wbg_get_swapresult_amount_out: (a: number) => number;
  readonly __wbg_set_swapresult_amount_out: (a: number, b: number) => void;
  readonly __wbg_get_swapresult_price_impact: (a: number) => number;
  readonly __wbg_set_swapresult_price_impact: (a: number, b: number) => void;
  readonly __wbg_get_swapresult_swap_price: (a: number) => number;
  readonly __wbg_set_swapresult_swap_price: (a: number, b: number) => void;
  readonly __wbg_get_swapresult_insta_price: (a: number) => number;
  readonly __wbg_set_swapresult_insta_price: (a: number, b: number) => void;
  readonly __wbg_get_swapresult_oracle_price: (a: number) => number;
  readonly __wbg_set_swapresult_oracle_price: (a: number, b: number) => void;
  readonly __wbg_get_swapresult_iter: (a: number) => number;
  readonly __wbg_set_swapresult_iter: (a: number, b: number) => void;
  readonly swap: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number) => void;
  readonly __wbg_transaction_free: (a: number) => void;
  readonly transaction_constructor: (a: number, b: number) => number;
  readonly transaction_message: (a: number) => number;
  readonly transaction_messageData: (a: number, b: number) => void;
  readonly transaction_verify: (a: number, b: number) => void;
  readonly transaction_partialSign: (a: number, b: number, c: number) => void;
  readonly transaction_isSigned: (a: number) => number;
  readonly transaction_toBytes: (a: number, b: number) => void;
  readonly transaction_fromBytes: (a: number, b: number, c: number) => void;
  readonly __wbg_keypair_free: (a: number) => void;
  readonly keypair_constructor: () => number;
  readonly keypair_toBytes: (a: number, b: number) => void;
  readonly keypair_fromBytes: (a: number, b: number, c: number) => void;
  readonly keypair_pubkey: (a: number) => number;
  readonly __wbg_instruction_free: (a: number) => void;
  readonly systeminstruction_createAccount: (a: number, b: number, c: number, d: number, e: number) => number;
  readonly systeminstruction_createAccountWithSeed: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => number;
  readonly systeminstruction_assign: (a: number, b: number) => number;
  readonly systeminstruction_assignWithSeed: (a: number, b: number, c: number, d: number, e: number) => number;
  readonly systeminstruction_transfer: (a: number, b: number, c: number) => number;
  readonly systeminstruction_transferWithSeed: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => number;
  readonly systeminstruction_allocate: (a: number, b: number) => number;
  readonly systeminstruction_allocateWithSeed: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
  readonly systeminstruction_createNonceAccount: (a: number, b: number, c: number, d: number) => number;
  readonly systeminstruction_advanceNonceAccount: (a: number, b: number) => number;
  readonly systeminstruction_withdrawNonceAccount: (a: number, b: number, c: number, d: number) => number;
  readonly systeminstruction_authorizeNonceAccount: (a: number, b: number, c: number) => number;
  readonly __wbg_message_free: (a: number) => void;
  readonly __wbg_get_message_recent_blockhash: (a: number) => number;
  readonly __wbg_set_message_recent_blockhash: (a: number, b: number) => void;
  readonly __wbg_pubkey_free: (a: number) => void;
  readonly pubkey_constructor: (a: number, b: number) => void;
  readonly pubkey_toString: (a: number, b: number) => void;
  readonly pubkey_isOnCurve: (a: number) => number;
  readonly pubkey_equals: (a: number, b: number) => number;
  readonly pubkey_toBytes: (a: number, b: number) => void;
  readonly pubkey_createWithSeed: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly pubkey_createProgramAddress: (a: number, b: number, c: number, d: number) => void;
  readonly pubkey_findProgramAddress: (a: number, b: number, c: number, d: number) => void;
  readonly solana_program_init: () => void;
  readonly hash_constructor: (a: number, b: number) => void;
  readonly hash_toString: (a: number, b: number) => void;
  readonly hash_equals: (a: number, b: number) => number;
  readonly hash_toBytes: (a: number, b: number) => void;
  readonly __wbg_instructions_free: (a: number) => void;
  readonly instructions_constructor: () => number;
  readonly instructions_push: (a: number, b: number) => void;
  readonly __wbg_hash_free: (a: number) => void;
  readonly __wbindgen_malloc: (a: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number) => number;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_free: (a: number, b: number) => void;
  readonly __wbindgen_exn_store: (a: number) => void;
}

type SyncInitInput = BufferSource | WebAssembly.Module;
/**
* Instantiates the given `module`, which can either be bytes or
* a precompiled `WebAssembly.Module`.
*
* @param {SyncInitInput} module
*
* @returns {InitOutput}
*/
declare function initSync(module: SyncInitInput): InitOutput;

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {InitInput | Promise<InitInput>} module_or_path
*
* @returns {Promise<InitOutput>}
*/
declare function init (module_or_path: InitInput | Promise<InitInput>): Promise<InitOutput>;

declare const wasm_swap: typeof swap;
declare const wasm_solana_program_init: typeof solana_program_init;
type wasm_Hash = Hash;
declare const wasm_Hash: typeof Hash;
type wasm_Instruction = Instruction;
declare const wasm_Instruction: typeof Instruction;
type wasm_Instructions = Instructions;
declare const wasm_Instructions: typeof Instructions;
type wasm_Keypair = Keypair;
declare const wasm_Keypair: typeof Keypair;
type wasm_Message = Message;
declare const wasm_Message: typeof Message;
type wasm_OracleRegistry = OracleRegistry;
declare const wasm_OracleRegistry: typeof OracleRegistry;
type wasm_Pubkey = Pubkey;
declare const wasm_Pubkey: typeof Pubkey;
type wasm_SwapResult = SwapResult;
declare const wasm_SwapResult: typeof SwapResult;
type wasm_Transaction = Transaction;
declare const wasm_Transaction: typeof Transaction;
type wasm_InitInput = InitInput;
type wasm_InitOutput = InitOutput;
type wasm_SyncInitInput = SyncInitInput;
declare const wasm_initSync: typeof initSync;
declare namespace wasm {
  export {
    init as default,
    wasm_swap as swap,
    wasm_solana_program_init as solana_program_init,
    wasm_Hash as Hash,
    wasm_Instruction as Instruction,
    wasm_Instructions as Instructions,
    wasm_Keypair as Keypair,
    wasm_Message as Message,
    wasm_OracleRegistry as OracleRegistry,
    wasm_Pubkey as Pubkey,
    wasm_SwapResult as SwapResult,
    wasm_Transaction as Transaction,
    wasm_InitInput as InitInput,
    wasm_InitOutput as InitOutput,
    wasm_SyncInitInput as SyncInitInput,
    wasm_initSync as initSync,
  };
}

interface Quote {
    amountIn: bigint;
    fee: bigint;
    amountOut: bigint;
    impact: number;
    swapPrice: number;
    instantPrice: number;
    oraclePrice: number;
}
declare class SyncSwap {
    controller: PublicKey;
    programId: PublicKey;
    constructor(controller?: PublicKey, programId?: PublicKey);
    getPairAddress: (tokenA: PublicKey, tokenB: PublicKey) => PublicKey;
    getSyncQuoter(tokenIn: PublicKey, tokenOut: PublicKey): SyncQuoter;
}
declare class Swap extends SyncSwap {
    connection: Connection;
    constructor(connection: Connection, controller?: PublicKey, programId?: PublicKey);
    getWasm(): Promise<typeof wasm>;
    createAssociatedTokenAccountIx: (mint: PublicKey, associatedAccount: PublicKey, owner: PublicKey) => TransactionInstruction;
    getQuoter: (tokenIn: PublicKey, tokenOut: PublicKey) => Promise<Quoter>;
    getQuote: (tokenIn: PublicKey, tokenOut: PublicKey, inTokenAmount: bigint) => Promise<Quote>;
    getMinimumQuote: (tokenA: PublicKey, tokenB: PublicKey, inTokenAmount: bigint, slippage: number) => Promise<bigint>;
    createSwapIx: (tokenA: PublicKey, tokenB: PublicKey, inTokenAmount: bigint, minOut: bigint, wallet: PublicKey, referrerTokenAccount?: PublicKey | undefined) => Promise<Array<TransactionInstruction>>;
}
declare type Prepared = {
    pairData: Buffer;
    sslInData: Buffer;
    sslOutData: Buffer;
    liabilityIn: bigint;
    swappedLiabilityIn: bigint;
    liabilityOut: bigint;
    swappedLiabilityOut: bigint;
    registry: OracleRegistry;
    suspended: boolean;
    publishedSlots: Array<bigint>;
    maxDelay: bigint;
};
declare const loadWasm: () => Promise<void>;
declare class SyncQuoter {
    programId: PublicKey;
    controller: PublicKey;
    tokenIn: PublicKey;
    tokenOut: PublicKey;
    constructor(programId: PublicKey, controller: PublicKey, tokenIn: PublicKey, tokenOut: PublicKey);
    getPairAddress: (tokenA: PublicKey, tokenB: PublicKey) => PublicKey;
    getAccounts(): {
        pairAddress: PublicKey;
        sslIn: PublicKey;
        sslOut: PublicKey;
        liabilityVaultIn: PublicKey;
        liabilityVaultOut: PublicKey;
        swappedLiabilityVaultIn: PublicKey;
        swappedLiabilityVaultOut: PublicKey;
    };
    getQuote(inTokenAmount: bigint, prepared: Prepared, silent?: boolean): Quote;
}
declare class Quoter extends SyncQuoter {
    connection: Connection;
    wasm: any;
    private prepared;
    constructor(connection: Connection, programId: PublicKey, controller: PublicKey, tokenIn: PublicKey, tokenOut: PublicKey, wasm: any);
    prepare(): Promise<void>;
    isSuspended(currentSlot?: bigint): boolean;
    quote(inTokenAmount: bigint, silent?: boolean): Quote;
}

declare class SSL {
    inner: SSLLayout;
    address: PublicKey;
    static loadByMint(connection: Connection, controller: PublicKey, mint: PublicKey, programId?: PublicKey): Promise<SSL | undefined>;
    static loadByAddress(connection: Connection, address: PublicKey, programId?: PublicKey): Promise<SSL | undefined>;
    static liabilityVault(connection: Connection, controller: PublicKey, mint: PublicKey, otherMint?: PublicKey, programId?: PublicKey): Promise<_solana_spl_token.Account>;
    static findAddress(controller: PublicKey, mint: PublicKey, programId?: PublicKey): PublicKey;
    constructor(ai: AccountInfo<Buffer>, programId?: PublicKey);
    isSuspended(): boolean;
    deposit(program: Program, controller: PublicKey, wallet: PublicKey, amount: bigint, programId?: PublicKey): Promise<TransactionInstruction>;
    static getLiquidityAccountAddress(controller: PublicKey, mint: PublicKey, wallet: PublicKey, programId: PublicKey): PublicKey;
    get controller(): PublicKey;
    get mint(): PublicKey;
    get decimals(): number;
    poolTokenMint(programId?: PublicKey): PublicKey;
    get suspended(): boolean;
    get weight(): bigint;
    get swappedLiabilityNative(): bigint;
    get totalShare(): bigint;
}

declare type Network = "MAINNET" | "DEVNET";
declare const ADDRESSES: {
    MAINNET: {
        CONTROLLER_PROGRAM_ID: PublicKey;
        SSL_PROGRAM_ID: PublicKey;
        GFX_CONTROLLER: PublicKey;
    };
    DEVNET: {
        CONTROLLER_PROGRAM_ID: PublicKey;
        SSL_PROGRAM_ID: PublicKey;
        GFX_CONTROLLER: PublicKey;
    };
};

var version$1 = "0.1.0";
var name$1 = "contract";
var instructions$1 = [
	{
		name: "createStakingAccount",
		accounts: [
			{
				name: "controller",
				isMut: false,
				isSigner: false
			},
			{
				name: "stakingAccount",
				isMut: true,
				isSigner: false
			},
			{
				name: "userWallet",
				isMut: true,
				isSigner: true
			},
			{
				name: "systemProgram",
				isMut: false,
				isSigner: false
			},
			{
				name: "rent",
				isMut: false,
				isSigner: false
			}
		],
		args: [
		]
	},
	{
		name: "stake",
		accounts: [
			{
				name: "controller",
				isMut: true,
				isSigner: false
			},
			{
				name: "stakingAccount",
				isMut: true,
				isSigner: false
			},
			{
				name: "vault",
				isMut: true,
				isSigner: false
			},
			{
				name: "userAta",
				isMut: true,
				isSigner: false
			},
			{
				name: "userWallet",
				isMut: false,
				isSigner: true
			},
			{
				name: "tokenProgram",
				isMut: false,
				isSigner: false
			}
		],
		args: [
			{
				name: "amount",
				type: "u64"
			}
		]
	},
	{
		name: "unstake",
		accounts: [
			{
				name: "controller",
				isMut: true,
				isSigner: false
			},
			{
				name: "stakingAccount",
				isMut: true,
				isSigner: false
			},
			{
				name: "vault",
				isMut: true,
				isSigner: false
			},
			{
				name: "userAta",
				isMut: true,
				isSigner: false
			},
			{
				name: "feeCollectorAta",
				isMut: true,
				isSigner: false
			},
			{
				name: "userWallet",
				isMut: false,
				isSigner: true
			},
			{
				name: "tokenProgram",
				isMut: false,
				isSigner: false
			}
		],
		args: [
			{
				name: "unstakePercent",
				type: "u64"
			}
		]
	}
];
var accounts$1 = [
];
var errors$1 = [
	{
		code: 6000,
		name: "Suspended",
		msg: "[G000] The pool is suspended"
	},
	{
		code: 6001,
		name: "NotAdmin",
		msg: "[G001] Not admin"
	},
	{
		code: 6002,
		name: "PercentageOutOfRange",
		msg: "[G002] Percentage out of range"
	},
	{
		code: 6003,
		name: "NotEnoughRewardReserve",
		msg: "[G003] Not enough reward reserve"
	}
];
var gfx_controller_idl = {
	version: version$1,
	name: name$1,
	instructions: instructions$1,
	accounts: accounts$1,
	errors: errors$1
};

declare namespace gfx_controller_idl$1 {
  export {
    version$1 as version,
    name$1 as name,
    instructions$1 as instructions,
    accounts$1 as accounts,
    errors$1 as errors,
    gfx_controller_idl as default,
  };
}

var version = "0.1.0";
var name = "contract";
var instructions = [
	{
		name: "createLiquidityAccount",
		accounts: [
			{
				name: "controller",
				isMut: false,
				isSigner: false
			},
			{
				name: "ssl",
				isMut: true,
				isSigner: false
			},
			{
				name: "liquidityAccount",
				isMut: true,
				isSigner: false
			},
			{
				name: "userWallet",
				isMut: true,
				isSigner: true
			},
			{
				name: "systemProgram",
				isMut: false,
				isSigner: false
			},
			{
				name: "rent",
				isMut: false,
				isSigner: false
			}
		],
		args: [
		]
	},
	{
		name: "deposit",
		accounts: [
			{
				name: "controller",
				isMut: false,
				isSigner: false
			},
			{
				name: "ssl",
				isMut: true,
				isSigner: false
			},
			{
				name: "liquidityAccount",
				isMut: true,
				isSigner: false
			},
			{
				name: "rtVault",
				isMut: true,
				isSigner: false
			},
			{
				name: "userRtAta",
				isMut: true,
				isSigner: false
			},
			{
				name: "userWallet",
				isMut: false,
				isSigner: true
			},
			{
				name: "tokenProgram",
				isMut: false,
				isSigner: false
			}
		],
		args: [
			{
				name: "amount",
				type: "u64"
			}
		]
	},
	{
		name: "withdraw",
		accounts: [
			{
				name: "controller",
				isMut: false,
				isSigner: false
			},
			{
				name: "ssl",
				isMut: true,
				isSigner: false
			},
			{
				name: "liquidityAccount",
				isMut: true,
				isSigner: false
			},
			{
				name: "rtVault",
				isMut: true,
				isSigner: false
			},
			{
				name: "userRtAta",
				isMut: true,
				isSigner: false
			},
			{
				name: "userWallet",
				isMut: false,
				isSigner: true
			},
			{
				name: "tokenProgram",
				isMut: false,
				isSigner: false
			}
		],
		args: [
			{
				name: "withdrawPercent",
				type: "u64"
			}
		]
	},
	{
		name: "mintPt",
		accounts: [
			{
				name: "controller",
				isMut: false,
				isSigner: false
			},
			{
				name: "ssl",
				isMut: true,
				isSigner: false
			},
			{
				name: "rtVault",
				isMut: true,
				isSigner: false
			},
			{
				name: "liquidityAccount",
				isMut: true,
				isSigner: false
			},
			{
				name: "ptMint",
				isMut: true,
				isSigner: false
			},
			{
				name: "userPtAta",
				isMut: true,
				isSigner: false
			},
			{
				name: "userWallet",
				isMut: false,
				isSigner: true
			},
			{
				name: "tokenProgram",
				isMut: false,
				isSigner: false
			}
		],
		args: [
			{
				name: "amountToMint",
				type: "u64"
			}
		]
	},
	{
		name: "burnPt",
		accounts: [
			{
				name: "controller",
				isMut: false,
				isSigner: false
			},
			{
				name: "ssl",
				isMut: true,
				isSigner: false
			},
			{
				name: "liquidityAccount",
				isMut: true,
				isSigner: false
			},
			{
				name: "ptMint",
				isMut: true,
				isSigner: false
			},
			{
				name: "userPtAta",
				isMut: true,
				isSigner: false
			},
			{
				name: "userWallet",
				isMut: false,
				isSigner: true
			},
			{
				name: "tokenProgram",
				isMut: false,
				isSigner: false
			}
		],
		args: [
			{
				name: "amountToBurn",
				type: "u64"
			}
		]
	},
	{
		name: "swap",
		accounts: [
			{
				name: "controller",
				isMut: false,
				isSigner: false
			},
			{
				name: "pair",
				isMut: true,
				isSigner: false
			},
			{
				name: "sslIn",
				isMut: true,
				isSigner: false
			},
			{
				name: "sslOut",
				isMut: true,
				isSigner: false
			},
			{
				name: "liabilityVaultIn",
				isMut: true,
				isSigner: false
			},
			{
				name: "swappedLiabilityVaultIn",
				isMut: true,
				isSigner: false
			},
			{
				name: "liabilityVaultOut",
				isMut: true,
				isSigner: false
			},
			{
				name: "swappedLiabilityVaultOut",
				isMut: true,
				isSigner: false
			},
			{
				name: "userInAta",
				isMut: true,
				isSigner: false
			},
			{
				name: "userOutAta",
				isMut: true,
				isSigner: false
			},
			{
				name: "feeCollectorAta",
				isMut: true,
				isSigner: false
			},
			{
				name: "userWallet",
				isMut: false,
				isSigner: true
			},
			{
				name: "feeCollector",
				isMut: false,
				isSigner: false
			},
			{
				name: "tokenProgram",
				isMut: false,
				isSigner: false
			}
		],
		args: [
			{
				name: "amountIn",
				type: "u64"
			},
			{
				name: "minOut",
				type: "u64"
			}
		]
	}
];
var accounts = [
];
var errors = [
	{
		code: 6000,
		name: "Suspended",
		msg: "[G100] The pool is suspended"
	},
	{
		code: 6001,
		name: "NotAdmin",
		msg: "[G101] Not admin"
	},
	{
		code: 6002,
		name: "MintsNotSorted",
		msg: "[G102] Mints are not sorted"
	},
	{
		code: 6003,
		name: "WrongRTMint",
		msg: "[G103] The risk token mint is wrong"
	},
	{
		code: 6004,
		name: "OracleNotPresent",
		msg: "[G104] The required oracle is not present"
	},
	{
		code: 6005,
		name: "OracleNotHealthyStatus",
		msg: "[G105] The oracle is not in a healthy state (status)"
	},
	{
		code: 6006,
		name: "OracleNotHealthyDelay",
		msg: "[G106] The oracle is not in a healthy state (delay)"
	},
	{
		code: 6007,
		name: "OracleNotHealthyConfidence",
		msg: "[G107] The oracle is not in a healthy state (confidence)"
	},
	{
		code: 6008,
		name: "SlippageTooLarge",
		msg: "[G108] SlippageTooLarge"
	},
	{
		code: 6009,
		name: "PercentageOutOfRange",
		msg: "[G109] Percentage out of range"
	},
	{
		code: 6010,
		name: "SwapIXNotInOrder",
		msg: "[G110] Swap instruction is not executed in order"
	},
	{
		code: 6011,
		name: "MintNotMatchPair",
		msg: "[G111] Mint does not match the pair"
	},
	{
		code: 6012,
		name: "FeeCollectorIncorrect",
		msg: "[G112] Fee collector account incorrect"
	}
];
var gfx_ssl_idl = {
	version: version,
	name: name,
	instructions: instructions,
	accounts: accounts,
	errors: errors
};

declare const gfx_ssl_idl$1_version: typeof version;
declare const gfx_ssl_idl$1_name: typeof name;
declare const gfx_ssl_idl$1_instructions: typeof instructions;
declare const gfx_ssl_idl$1_accounts: typeof accounts;
declare const gfx_ssl_idl$1_errors: typeof errors;
declare namespace gfx_ssl_idl$1 {
  export {
    gfx_ssl_idl$1_version as version,
    gfx_ssl_idl$1_name as name,
    gfx_ssl_idl$1_instructions as instructions,
    gfx_ssl_idl$1_accounts as accounts,
    gfx_ssl_idl$1_errors as errors,
    gfx_ssl_idl as default,
  };
}

export { ADDRESSES, gfx_controller_idl$1 as CONTROLLER_IDL, CONTROLLER_LAYOUT, ControllerLayout, LIQUIDITY_ACCOUNT_LAYOUT, LiquidityAccountLayout, Network, ORACLE_ELEMENT_LAYOUT, ORACLE_LAYOUT, PAIR_LAYOUT, PairLayout, Quote, SSL, SSLLayout, gfx_ssl_idl$1 as SSL_IDL, SSL_LAYOUT, STAKING_ACCOUNT_LAYOUT, StakingAccountLayout, Swap, SyncSwap, loadWasm, wasm };
