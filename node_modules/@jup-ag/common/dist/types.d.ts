import { TransactionError } from '@mercurial-finance/optimist';
import type { SignerWalletAdapter } from '@solana/wallet-adapter-base';
import { BlockhashWithExpiryBlockHeight, PublicKey, TransactionSignature, VersionedTransactionResponse } from '@solana/web3.js';
import JSBI from 'jsbi';
import { Instruction } from './utils';
export type TokenMintAddress = string;
export type PlatformFeeAndAccounts = {
    feeBps: number;
    feeAccounts: Map<string, PublicKey>;
};
export type PlatformFee = {
    feeBps: number;
    feeAccount: PublicKey;
};
export type QuoteMintToReferrer = Map<TokenMintAddress, PublicKey>;
export interface Fee {
    amount: JSBI;
    mint: string;
    pct: number;
}
export type SwapResult = {
    txid: string;
    inputAddress: PublicKey;
    outputAddress: PublicKey;
    inputAmount: number;
    outputAmount: number;
} | {
    error?: TransactionError;
};
export declare enum SwapMode {
    ExactIn = "ExactIn",
    ExactOut = "ExactOut"
}
export type OnTransaction = (txid: TransactionSignature, awaiter: Promise<VersionedTransactionResponse | TransactionError | null>) => void;
export type ExecuteParams = {
    wallet?: Pick<SignerWalletAdapter, 'signAllTransactions' | 'signTransaction'>;
    /**
     * Allows to customize control of sending and awaiting confirmation in the single/multi transaction flow
     */
    onTransaction?: OnTransaction;
};
export interface TransactionFeeInfo {
    signatureFee: number;
    openOrdersDeposits: number[];
    ataDeposits: number[];
    totalFeeAndDeposits: number;
    minimumSOLForTransaction: number;
}
export interface ExchangeParams<T> {
    routeInfo: T;
    /**
     * This will overwrite the default Jupiter.setUser, useful for stateless usage like API
     */
    userPublicKey?: PublicKey;
    /**
     * This will overwrite the default fee account, useful for stateless usage like API
     */
    feeAccount?: PublicKey;
    /**
     * This will overwrite the default wrapUnwrapSOL, useful for stateless usage like API
     */
    wrapUnwrapSOL?: boolean;
    /**
     * The transaction will use the blockhash and valid blockheight to create transaction
     */
    blockhashWithExpiryBlockHeight?: BlockhashWithExpiryBlockHeight;
    /**
     * Produces a legacy transaction
     */
    asLegacyTransaction?: boolean;
    /**
     * compute unit price in micro lamports, the swap transaction will cost consumed compute units * computeUnitPriceMicroLamports, see https://docs.solana.com/developing/programming-model/runtime#prioritization-fees
     */
    computeUnitPriceMicroLamports?: number | 'auto';
}
export type SetupInstructions = {
    openOrders: ((Instruction & {
        address: PublicKey;
    }) | undefined)[];
    intermediates: (Instruction & {
        address: PublicKey;
    })[];
    destination: Instruction & {
        address: PublicKey;
    };
};
