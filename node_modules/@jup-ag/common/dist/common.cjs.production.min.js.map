{"version":3,"file":"common.cjs.production.min.js","sources":["../src/idl/jupiter.ts","../src/constants.ts","../src/utils/errors.ts","../src/utils/wait.ts","../src/utils/transactionHelpers.ts","../src/utils/executeTransaction.ts","../src/utils/fee.ts","../src/utils/Owner.ts","../src/utils/indexedRouteMap.ts","../src/utils/TransactionBuilder.ts","../src/utils/token.ts","../src/utils/instruction.ts","../src/types.ts","../src/instructions.ts","../src/fee.ts"],"sourcesContent":["export type Jupiter = {\n  version: '0.1.0';\n  name: 'jupiter';\n  instructions: [\n    {\n      name: 'route';\n      accounts: [\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'destinationTokenAccount';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'swapLeg';\n          type: {\n            defined: 'SwapLeg';\n          };\n        },\n        {\n          name: 'inAmount';\n          type: 'u64';\n        },\n        {\n          name: 'quotedOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'slippageBps';\n          type: 'u16';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'whirlpoolSwapExactOutput';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'whirlpool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray0';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray1';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray2';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'oracle';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'outAmount';\n          type: 'u64';\n        },\n        {\n          name: 'inAmountWithSlippage';\n          type: {\n            defined: 'AmountWithSlippage';\n          };\n        },\n        {\n          name: 'aToB';\n          type: 'bool';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'raydiumSwapExactOutput';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammId';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammOpenOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolCoinTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolPcTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumProgramId';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'serumMarket';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumBids';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumAsks';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumEventQueue';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumCoinVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumPcVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumVaultSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceOwner';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [\n        {\n          name: 'outAmount';\n          type: 'u64';\n        },\n        {\n          name: 'inAmountWithSlippage';\n          type: {\n            defined: 'AmountWithSlippage';\n          };\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'raydiumClmmSwapExactOutput';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'payer';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'ammConfig';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'observationState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'outAmount';\n          type: 'u64';\n        },\n        {\n          name: 'inAmountWithSlippage';\n          type: {\n            defined: 'AmountWithSlippage';\n          };\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'createOpenOrders';\n      accounts: [\n        {\n          name: 'openOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'payer';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'dexProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'market';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'mercurialSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'sourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'cykuraSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'signer';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'factoryState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'lastObservationState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'coreProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'serumSwap';\n      accounts: [\n        {\n          name: 'market';\n          accounts: [\n            {\n              name: 'market';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'openOrders';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'requestQueue';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'eventQueue';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'bids';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'asks';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'coinVault';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'pcVault';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'vaultSigner';\n              isMut: false;\n              isSigner: false;\n            },\n          ];\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'orderPayerTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'coinWallet';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'pcWallet';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'dexProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'saberSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feesTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'saberAddDecimals';\n      accounts: [\n        {\n          name: 'addDecimalsProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapper';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userWrappedTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'tokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'senchaSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputFeesAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputFeesAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'stepSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'cropperSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'raydiumSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammId';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammOpenOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolCoinTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolPcTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumProgramId';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'serumMarket';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumBids';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumAsks';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumEventQueue';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumCoinVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumPcVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumVaultSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceOwner';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'cremaSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'clmmConfig';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'clmmpool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenA';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenB';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'accountA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'accountB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenAVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenBVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArrayMap';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'partner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'partnerAtaA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'partnerAtaB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'lifinitySwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'amm';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'sourceInfo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destinationInfo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feeAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pythAccount';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pythPcAccount';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'configAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'marinadeDeposit';\n      accounts: [\n        {\n          name: 'marinadeFinanceProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'state';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'msolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolSolLegPda';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolMsolLeg';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolMsolLegAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'reservePda';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'transferFrom';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'mintTo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'msolMintAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userWsolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tempWsolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'wsolMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'marinadeUnstake';\n      accounts: [\n        {\n          name: 'marinadeFinanceProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'state';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'msolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolSolLegPda';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolMsolLeg';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'treasuryMsolAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'getMsolFrom';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'getMsolFromAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'transferSolTo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userWsolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'aldrinSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'baseTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'quoteTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feePoolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userBaseTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userQuoteTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'aldrinV2Swap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'baseTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'quoteTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feePoolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userBaseTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userQuoteTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'curve';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'whirlpoolSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'whirlpool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray0';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray1';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray2';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'oracle';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'invariantSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'state';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickmap';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'accountX';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'accountY';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'reserveX';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'reserveY';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'programAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'meteoraSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceToken';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationToken';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'aVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'bVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'aTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'bTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'aVaultLpMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'bVaultLpMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'aVaultLp';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'bVaultLp';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'adminTokenFee';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'vaultProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'goosefxSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'controller';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pair';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'sslIn';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'sslOut';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liabilityVaultIn';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swappedLiabilityVaultIn';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liabilityVaultOut';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swappedLiabilityVaultOut';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userInAta';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userOutAta';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feeCollectorAta';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userWallet';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'feeCollector';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'deltafiSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'marketConfig';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapInfo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceToken';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationToken';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSourceToken';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestinationToken';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'deltafiUser';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'adminDestinationToken';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'pythPriceBase';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pythPriceQuote';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'balansolSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'taxMan';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'bidMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'treasurer';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'srcTreasury';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'srcAssociatedTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'askMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'dstTreasury';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'dstAssociatedTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'dstTokenAccountTaxman';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'associatedTokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'marcoPoloSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'state';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenX';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenY';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolXAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolYAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapperXAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapperYAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapper';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'referrerXAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'referrerYAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'referrer';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'programAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'associatedTokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'dradexSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pair';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'market';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'eventQueue';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'dexUser';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'marketUser';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'bids';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'asks';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 't0Vault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 't1Vault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 't0User';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 't1User';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'master';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'signer';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'logger';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'lifinityV2Swap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'amm';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'sourceInfo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destinationInfo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feeAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'oracleMainAccount';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'oracleSubAccount';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'oraclePcAccount';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'raydiumClmmSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'payer';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'ammConfig';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'observationState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'phoenixSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'logAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'market';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'trader';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'baseAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'quoteAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'baseVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'quoteVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'symmetrySwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'buyer';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'fundState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'pdaAccount';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pdaFromTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'buyerFromTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'pdaToTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'buyerToTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapFeeAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'hostFeeAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'managerFeeAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenInfo';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'prismData';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n  ];\n  types: [\n    {\n      name: 'AmountWithSlippage';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'amount';\n            type: 'u64';\n          },\n          {\n            name: 'slippageBps';\n            type: 'u16';\n          },\n        ];\n      };\n    },\n    {\n      name: 'SplitLegDeeper';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'percent';\n            type: 'u8';\n          },\n          {\n            name: 'swapLeg';\n            type: {\n              defined: 'SwapLegSwap';\n            };\n          },\n        ];\n      };\n    },\n    {\n      name: 'SplitLeg';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'percent';\n            type: 'u8';\n          },\n          {\n            name: 'swapLeg';\n            type: {\n              defined: 'SwapLegDeeper';\n            };\n          },\n        ];\n      };\n    },\n    {\n      name: 'SwapInstrution';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'Swap';\n            fields: [\n              {\n                defined: 'Swap';\n              },\n            ];\n          },\n        ];\n      };\n    },\n    {\n      name: 'Side';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'Bid';\n          },\n          {\n            name: 'Ask';\n          },\n        ];\n      };\n    },\n    {\n      name: 'SwapLegSwap';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'PlaceholderOne';\n          },\n          {\n            name: 'PlaceholderTwo';\n          },\n          {\n            name: 'Swap';\n            fields: [\n              {\n                name: 'swap';\n                type: {\n                  defined: 'Swap';\n                };\n              },\n            ];\n          },\n        ];\n      };\n    },\n    {\n      name: 'SwapLegDeeper';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'Chain';\n            fields: [\n              {\n                name: 'swap_legs';\n                type: {\n                  vec: {\n                    defined: 'SwapLegSwap';\n                  };\n                };\n              },\n            ];\n          },\n          {\n            name: 'Split';\n            fields: [\n              {\n                name: 'split_legs';\n                type: {\n                  vec: {\n                    defined: 'SplitLegDeeper';\n                  };\n                };\n              },\n            ];\n          },\n          {\n            name: 'Swap';\n            fields: [\n              {\n                name: 'swap';\n                type: {\n                  defined: 'Swap';\n                };\n              },\n            ];\n          },\n        ];\n      };\n    },\n    {\n      name: 'SwapLeg';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'Chain';\n            fields: [\n              {\n                name: 'swap_legs';\n                type: {\n                  vec: {\n                    defined: 'SwapLegDeeper';\n                  };\n                };\n              },\n            ];\n          },\n          {\n            name: 'Split';\n            fields: [\n              {\n                name: 'split_legs';\n                type: {\n                  vec: {\n                    defined: 'SplitLeg';\n                  };\n                };\n              },\n            ];\n          },\n          {\n            name: 'Swap';\n            fields: [\n              {\n                name: 'swap';\n                type: {\n                  defined: 'Swap';\n                };\n              },\n            ];\n          },\n        ];\n      };\n    },\n    {\n      name: 'Swap';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'Saber';\n          },\n          {\n            name: 'SaberAddDecimalsDeposit';\n          },\n          {\n            name: 'SaberAddDecimalsWithdraw';\n          },\n          {\n            name: 'TokenSwap';\n          },\n          {\n            name: 'Sencha';\n          },\n          {\n            name: 'Step';\n          },\n          {\n            name: 'Cropper';\n          },\n          {\n            name: 'Raydium';\n          },\n          {\n            name: 'Crema';\n            fields: [\n              {\n                name: 'a_to_b';\n                type: 'bool';\n              },\n            ];\n          },\n          {\n            name: 'Lifinity';\n          },\n          {\n            name: 'Mercurial';\n          },\n          {\n            name: 'Cykura';\n          },\n          {\n            name: 'Serum';\n            fields: [\n              {\n                name: 'side';\n                type: {\n                  defined: 'Side';\n                };\n              },\n            ];\n          },\n          {\n            name: 'MarinadeDeposit';\n          },\n          {\n            name: 'MarinadeUnstake';\n          },\n          {\n            name: 'Aldrin';\n            fields: [\n              {\n                name: 'side';\n                type: {\n                  defined: 'Side';\n                };\n              },\n            ];\n          },\n          {\n            name: 'AldrinV2';\n            fields: [\n              {\n                name: 'side';\n                type: {\n                  defined: 'Side';\n                };\n              },\n            ];\n          },\n          {\n            name: 'Whirlpool';\n            fields: [\n              {\n                name: 'a_to_b';\n                type: 'bool';\n              },\n            ];\n          },\n          {\n            name: 'Invariant';\n            fields: [\n              {\n                name: 'x_to_y';\n                type: 'bool';\n              },\n            ];\n          },\n          {\n            name: 'Meteora';\n          },\n          {\n            name: 'GooseFX';\n          },\n          {\n            name: 'DeltaFi';\n            fields: [\n              {\n                name: 'stable';\n                type: 'bool';\n              },\n            ];\n          },\n          {\n            name: 'Balansol';\n          },\n          {\n            name: 'MarcoPolo';\n            fields: [\n              {\n                name: 'x_to_y';\n                type: 'bool';\n              },\n            ];\n          },\n          {\n            name: 'Dradex';\n            fields: [\n              {\n                name: 'side';\n                type: {\n                  defined: 'Side';\n                };\n              },\n            ];\n          },\n          {\n            name: 'LifinityV2';\n          },\n          {\n            name: 'RaydiumClmm';\n          },\n          {\n            name: 'Openbook';\n            fields: [\n              {\n                name: 'side';\n                type: {\n                  defined: 'Side';\n                };\n              },\n            ];\n          },\n          {\n            name: 'Phoenix';\n            fields: [\n              {\n                name: 'side';\n                type: {\n                  defined: 'Side';\n                };\n              },\n            ];\n          },\n          {\n            name: 'Symmetry';\n            fields: [\n              {\n                name: 'fromTokenId';\n                type: 'u64';\n              },\n              {\n                name: 'toTokenId';\n                type: 'u64';\n              },\n            ];\n          },\n        ];\n      };\n    },\n    {\n      name: 'SwapAction';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'SetupSplit';\n            fields: [\n              {\n                name: 'percents';\n                type: 'bytes';\n              },\n            ];\n          },\n          {\n            name: 'NextSplitLeg';\n          },\n          {\n            name: 'MergeSplit';\n          },\n          {\n            name: 'Swap';\n            fields: [\n              {\n                name: 'swap';\n                type: {\n                  defined: 'Swap';\n                };\n              },\n            ];\n          },\n        ];\n      };\n    },\n  ];\n  events: [\n    {\n      name: 'Swap';\n      fields: [\n        {\n          name: 'amm';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'inputMint';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'inputAmount';\n          type: 'u64';\n          index: false;\n        },\n        {\n          name: 'outputMint';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'outputAmount';\n          type: 'u64';\n          index: false;\n        },\n      ];\n    },\n    {\n      name: 'Fee';\n      fields: [\n        {\n          name: 'account';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'mint';\n          type: 'publicKey';\n          index: false;\n        },\n        {\n          name: 'amount';\n          type: 'u64';\n          index: false;\n        },\n      ];\n    },\n  ];\n  errors: [\n    {\n      code: 6000;\n      name: 'EmptyRoute';\n      msg: 'Empty route';\n    },\n    {\n      code: 6001;\n      name: 'SlippageToleranceExceeded';\n      msg: 'Slippage tolerance exceeded';\n    },\n    {\n      code: 6002;\n      name: 'InvalidCalculation';\n      msg: 'Invalid calculation';\n    },\n    {\n      code: 6003;\n      name: 'MissingPlatformFeeAccount';\n      msg: 'Missing platform fee account';\n    },\n    {\n      code: 6004;\n      name: 'InvalidSlippage';\n      msg: 'Invalid slippage';\n    },\n    {\n      code: 6005;\n      name: 'NotEnoughPercent';\n      msg: 'Not enough percent to 100';\n    },\n    {\n      code: 6006;\n      name: 'InAmountsStackIsEmpty';\n      msg: 'In amounts stack is empty';\n    },\n    {\n      code: 6007;\n      name: 'OutAmountsStackIsEmpty';\n      msg: 'Out amounts stack is empty';\n    },\n    {\n      code: 6008;\n      name: 'NotEnoughAccountKeys';\n      msg: 'Not Enough Account keys';\n    },\n  ];\n};\n\nexport const IDL: Jupiter = {\n  version: '0.1.0',\n  name: 'jupiter',\n  instructions: [\n    {\n      name: 'route',\n      accounts: [\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'destinationTokenAccount',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'swapLeg',\n          type: {\n            defined: 'SwapLeg',\n          },\n        },\n        {\n          name: 'inAmount',\n          type: 'u64',\n        },\n        {\n          name: 'quotedOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'slippageBps',\n          type: 'u16',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'whirlpoolSwapExactOutput',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'whirlpool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray0',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray1',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray2',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'oracle',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'outAmount',\n          type: 'u64',\n        },\n        {\n          name: 'inAmountWithSlippage',\n          type: {\n            defined: 'AmountWithSlippage',\n          },\n        },\n        {\n          name: 'aToB',\n          type: 'bool',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'raydiumSwapExactOutput',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammId',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammOpenOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolCoinTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolPcTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumProgramId',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'serumMarket',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumBids',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumAsks',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumEventQueue',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumCoinVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumPcVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumVaultSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceOwner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'outAmount',\n          type: 'u64',\n        },\n        {\n          name: 'inAmountWithSlippage',\n          type: {\n            defined: 'AmountWithSlippage',\n          },\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'raydiumClmmSwapExactOutput',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'payer',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'ammConfig',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'observationState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'outAmount',\n          type: 'u64',\n        },\n        {\n          name: 'inAmountWithSlippage',\n          type: {\n            defined: 'AmountWithSlippage',\n          },\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'createOpenOrders',\n      accounts: [\n        {\n          name: 'openOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'payer',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'dexProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'market',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'mercurialSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'sourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'cykuraSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'signer',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'factoryState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lastObservationState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'coreProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'serumSwap',\n      accounts: [\n        {\n          name: 'market',\n          accounts: [\n            {\n              name: 'market',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'openOrders',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'requestQueue',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'eventQueue',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'bids',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'asks',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'coinVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'pcVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultSigner',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'orderPayerTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'coinWallet',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'pcWallet',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'dexProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'saberSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feesTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'saberAddDecimals',\n      accounts: [\n        {\n          name: 'addDecimalsProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapper',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userWrappedTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'tokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'senchaSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputFeesAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputFeesAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'stepSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'cropperSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'raydiumSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammId',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammOpenOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolCoinTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolPcTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumProgramId',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'serumMarket',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumBids',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumAsks',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumEventQueue',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumCoinVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumPcVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumVaultSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceOwner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'cremaSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clmmConfig',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clmmpool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenA',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenB',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'accountA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'accountB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenBVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArrayMap',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'partner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'partnerAtaA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'partnerAtaB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'lifinitySwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'amm',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'sourceInfo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destinationInfo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feeAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pythAccount',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pythPcAccount',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'configAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'marinadeDeposit',\n      accounts: [\n        {\n          name: 'marinadeFinanceProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'state',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'msolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolSolLegPda',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolMsolLeg',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolMsolLegAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'reservePda',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'transferFrom',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mintTo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'msolMintAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userWsolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tempWsolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'wsolMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'marinadeUnstake',\n      accounts: [\n        {\n          name: 'marinadeFinanceProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'state',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'msolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolSolLegPda',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolMsolLeg',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasuryMsolAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'getMsolFrom',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'getMsolFromAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'transferSolTo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userWsolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'aldrinSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'quoteTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feePoolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userBaseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userQuoteTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'aldrinV2Swap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'quoteTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feePoolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userBaseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userQuoteTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'curve',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'whirlpoolSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'whirlpool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray0',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray1',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray2',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'oracle',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'invariantSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'state',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickmap',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'accountX',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'accountY',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'reserveX',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'reserveY',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'programAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'meteoraSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceToken',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationToken',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'aVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'bVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'aTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'bTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'aVaultLpMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'bVaultLpMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'aVaultLp',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'bVaultLp',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'adminTokenFee',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'vaultProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'goosefxSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'controller',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pair',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'sslIn',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'sslOut',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liabilityVaultIn',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swappedLiabilityVaultIn',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liabilityVaultOut',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swappedLiabilityVaultOut',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userInAta',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userOutAta',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feeCollectorAta',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userWallet',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'feeCollector',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'deltafiSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'marketConfig',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapInfo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceToken',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationToken',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSourceToken',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestinationToken',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'deltafiUser',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'adminDestinationToken',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'pythPriceBase',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pythPriceQuote',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'balansolSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'taxMan',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'bidMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'srcTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'srcAssociatedTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'askMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'dstTreasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'dstAssociatedTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'dstTokenAccountTaxman',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'marcoPoloSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'state',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenX',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenY',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolXAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolYAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapperXAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapperYAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapper',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'referrerXAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'referrerYAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'referrer',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'programAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'dradexSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pair',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'market',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'eventQueue',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'dexUser',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'marketUser',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'bids',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'asks',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 't0Vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 't1Vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 't0User',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 't1User',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'master',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'signer',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'logger',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'lifinityV2Swap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'amm',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'sourceInfo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destinationInfo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feeAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'oracleMainAccount',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'oracleSubAccount',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'oraclePcAccount',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'raydiumClmmSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'payer',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'ammConfig',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'observationState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'phoenixSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'logAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'market',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'trader',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'baseAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'quoteAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'quoteVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'symmetrySwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'buyer',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'fundState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'pdaAccount',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pdaFromTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'buyerFromTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'pdaToTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'buyerToTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapFeeAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'hostFeeAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'managerFeeAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenInfo',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'prismData',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  types: [\n    {\n      name: 'AmountWithSlippage',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n          {\n            name: 'slippageBps',\n            type: 'u16',\n          },\n        ],\n      },\n    },\n    {\n      name: 'SplitLegDeeper',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'percent',\n            type: 'u8',\n          },\n          {\n            name: 'swapLeg',\n            type: {\n              defined: 'SwapLegSwap',\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'SplitLeg',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'percent',\n            type: 'u8',\n          },\n          {\n            name: 'swapLeg',\n            type: {\n              defined: 'SwapLegDeeper',\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'SwapInstrution',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Swap',\n            fields: [\n              {\n                defined: 'Swap',\n              },\n            ],\n          },\n        ],\n      },\n    },\n    {\n      name: 'Side',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Bid',\n          },\n          {\n            name: 'Ask',\n          },\n        ],\n      },\n    },\n    {\n      name: 'SwapLegSwap',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'PlaceholderOne',\n          },\n          {\n            name: 'PlaceholderTwo',\n          },\n          {\n            name: 'Swap',\n            fields: [\n              {\n                name: 'swap',\n                type: {\n                  defined: 'Swap',\n                },\n              },\n            ],\n          },\n        ],\n      },\n    },\n    {\n      name: 'SwapLegDeeper',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Chain',\n            fields: [\n              {\n                name: 'swap_legs',\n                type: {\n                  vec: {\n                    defined: 'SwapLegSwap',\n                  },\n                },\n              },\n            ],\n          },\n          {\n            name: 'Split',\n            fields: [\n              {\n                name: 'split_legs',\n                type: {\n                  vec: {\n                    defined: 'SplitLegDeeper',\n                  },\n                },\n              },\n            ],\n          },\n          {\n            name: 'Swap',\n            fields: [\n              {\n                name: 'swap',\n                type: {\n                  defined: 'Swap',\n                },\n              },\n            ],\n          },\n        ],\n      },\n    },\n    {\n      name: 'SwapLeg',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Chain',\n            fields: [\n              {\n                name: 'swap_legs',\n                type: {\n                  vec: {\n                    defined: 'SwapLegDeeper',\n                  },\n                },\n              },\n            ],\n          },\n          {\n            name: 'Split',\n            fields: [\n              {\n                name: 'split_legs',\n                type: {\n                  vec: {\n                    defined: 'SplitLeg',\n                  },\n                },\n              },\n            ],\n          },\n          {\n            name: 'Swap',\n            fields: [\n              {\n                name: 'swap',\n                type: {\n                  defined: 'Swap',\n                },\n              },\n            ],\n          },\n        ],\n      },\n    },\n    {\n      name: 'Swap',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Saber',\n          },\n          {\n            name: 'SaberAddDecimalsDeposit',\n          },\n          {\n            name: 'SaberAddDecimalsWithdraw',\n          },\n          {\n            name: 'TokenSwap',\n          },\n          {\n            name: 'Sencha',\n          },\n          {\n            name: 'Step',\n          },\n          {\n            name: 'Cropper',\n          },\n          {\n            name: 'Raydium',\n          },\n          {\n            name: 'Crema',\n            fields: [\n              {\n                name: 'a_to_b',\n                type: 'bool',\n              },\n            ],\n          },\n          {\n            name: 'Lifinity',\n          },\n          {\n            name: 'Mercurial',\n          },\n          {\n            name: 'Cykura',\n          },\n          {\n            name: 'Serum',\n            fields: [\n              {\n                name: 'side',\n                type: {\n                  defined: 'Side',\n                },\n              },\n            ],\n          },\n          {\n            name: 'MarinadeDeposit',\n          },\n          {\n            name: 'MarinadeUnstake',\n          },\n          {\n            name: 'Aldrin',\n            fields: [\n              {\n                name: 'side',\n                type: {\n                  defined: 'Side',\n                },\n              },\n            ],\n          },\n          {\n            name: 'AldrinV2',\n            fields: [\n              {\n                name: 'side',\n                type: {\n                  defined: 'Side',\n                },\n              },\n            ],\n          },\n          {\n            name: 'Whirlpool',\n            fields: [\n              {\n                name: 'a_to_b',\n                type: 'bool',\n              },\n            ],\n          },\n          {\n            name: 'Invariant',\n            fields: [\n              {\n                name: 'x_to_y',\n                type: 'bool',\n              },\n            ],\n          },\n          {\n            name: 'Meteora',\n          },\n          {\n            name: 'GooseFX',\n          },\n          {\n            name: 'DeltaFi',\n            fields: [\n              {\n                name: 'stable',\n                type: 'bool',\n              },\n            ],\n          },\n          {\n            name: 'Balansol',\n          },\n          {\n            name: 'MarcoPolo',\n            fields: [\n              {\n                name: 'x_to_y',\n                type: 'bool',\n              },\n            ],\n          },\n          {\n            name: 'Dradex',\n            fields: [\n              {\n                name: 'side',\n                type: {\n                  defined: 'Side',\n                },\n              },\n            ],\n          },\n          {\n            name: 'LifinityV2',\n          },\n          {\n            name: 'RaydiumClmm',\n          },\n          {\n            name: 'Openbook',\n            fields: [\n              {\n                name: 'side',\n                type: {\n                  defined: 'Side',\n                },\n              },\n            ],\n          },\n          {\n            name: 'Phoenix',\n            fields: [\n              {\n                name: 'side',\n                type: {\n                  defined: 'Side',\n                },\n              },\n            ],\n          },\n          {\n            name: 'Symmetry',\n            fields: [\n              {\n                name: 'fromTokenId',\n                type: 'u64',\n              },\n              {\n                name: 'toTokenId',\n                type: 'u64',\n              },\n            ],\n          },\n        ],\n      },\n    },\n    {\n      name: 'SwapAction',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'SetupSplit',\n            fields: [\n              {\n                name: 'percents',\n                type: 'bytes',\n              },\n            ],\n          },\n          {\n            name: 'NextSplitLeg',\n          },\n          {\n            name: 'MergeSplit',\n          },\n          {\n            name: 'Swap',\n            fields: [\n              {\n                name: 'swap',\n                type: {\n                  defined: 'Swap',\n                },\n              },\n            ],\n          },\n        ],\n      },\n    },\n  ],\n  events: [\n    {\n      name: 'Swap',\n      fields: [\n        {\n          name: 'amm',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'inputMint',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'inputAmount',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'outputMint',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'outputAmount',\n          type: 'u64',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'Fee',\n      fields: [\n        {\n          name: 'account',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'mint',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'amount',\n          type: 'u64',\n          index: false,\n        },\n      ],\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: 'EmptyRoute',\n      msg: 'Empty route',\n    },\n    {\n      code: 6001,\n      name: 'SlippageToleranceExceeded',\n      msg: 'Slippage tolerance exceeded',\n    },\n    {\n      code: 6002,\n      name: 'InvalidCalculation',\n      msg: 'Invalid calculation',\n    },\n    {\n      code: 6003,\n      name: 'MissingPlatformFeeAccount',\n      msg: 'Missing platform fee account',\n    },\n    {\n      code: 6004,\n      name: 'InvalidSlippage',\n      msg: 'Invalid slippage',\n    },\n    {\n      code: 6005,\n      name: 'NotEnoughPercent',\n      msg: 'Not enough percent to 100',\n    },\n    {\n      code: 6006,\n      name: 'InAmountsStackIsEmpty',\n      msg: 'In amounts stack is empty',\n    },\n    {\n      code: 6007,\n      name: 'OutAmountsStackIsEmpty',\n      msg: 'Out amounts stack is empty',\n    },\n    {\n      code: 6008,\n      name: 'NotEnoughAccountKeys',\n      msg: 'Not Enough Account keys',\n    },\n  ],\n};\n","import { Program, Provider } from '@project-serum/anchor';\nimport { Cluster, PublicKey } from '@solana/web3.js';\nimport { Jupiter as JupiterIDL, IDL } from './idl/jupiter';\n\nexport const JUPITER_PROGRAM_ID_DEVNET = new PublicKey('BHzPYvC5J38kUeqkcUXwfraLWJ68cmGWm43ksF3i8bmk');\nexport const JUPITER_PROGRAM_ID_STAGING = new PublicKey('JUPSjgjMFjU4453KMgxhqVmzep6W352bQpE4RsNqXAx');\nexport const JUPITER_PROGRAM_ID_PRODUCTION = new PublicKey('JUP4Fb2cqiRUcaTHdrPC8h2gNsA2ETXiPDD33WcGuJB');\n\nexport const JUPITER_PROGRAM_ID = JUPITER_PROGRAM_ID_PRODUCTION;\n\nexport const JUPITER_PROGRAM = new Program<JupiterIDL>(IDL, JUPITER_PROGRAM_ID, {} as Provider);\n\nexport const MAINNET_SERUM_DEX_PROGRAM = new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin');\n\nexport const DEVNET_SERUM_DEX_PROGRAM = new PublicKey('DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY');\n\nexport const RAYDIUM_AMM_V4_PROGRAM_ID = new PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8');\n\nexport const ALDRIN_SWAP_PROGRAM_ID = new PublicKey('AMM55ShdkoGRB5jVYPjWziwk8m5MpwyDgsMWHaMSQWH6');\n\n// https://github.com/aldrin-exchange/aldrin-sdk/blob/f93fe3f2d847d79d8ddff507d8d4f62fd803421b/src/v2.json\nexport const ALDRIN_SWAP_V2_PROGRAM_ID = new PublicKey('CURVGoZn8zycx6FXwwevgBTB2gVvdbGTEpvMJDbgs2t4');\n\nexport const SABER_ADD_DECIMALS_PROGRAM_ID = new PublicKey('DecZY86MU5Gj7kppfUCEmd4LbXXuyZH1yHaP2NTqdiZB');\n\nexport const CROPPER_PROGRAM_ID = new PublicKey('CTMAxxk34HjKWxQ3QLZK1HpaLXmBveao3ESePXbiyfzh');\n\nexport const SENCHA_PROGRAM_ID = new PublicKey('SCHAtsf8mbjyjiv4LkhLKutTf6JnZAbdJKFkXQNMFHZ');\n\nexport const LIFINITY_PROGRAM_ID = new PublicKey('EewxydAPCCVuNEyrVN68PuSYdQ7wKn27V9Gjeoi8dy3S');\n\nexport const CREMA_PROGRAM_ID = new PublicKey('CLMM9tUoggJu2wagPkkqs9eFG4BWhVBZWkP1qv3Sp7tR');\n// Crema requires a separate partner account controlled by them\nexport const CREMA_PARTNER_ACCOUNT = new PublicKey('FxYoB1VAx8TfLCwvmworJy16VH89v992qznUvBX5aR8K');\n\nexport const MERCURIAL_SWAP_PROGRAM_ID = new PublicKey('MERLuDFBMmsHnsBPZw2sDQZHvXFMwp8EdjudcU2HKky');\n\nexport const WHIRLPOOL_PROGRAM_ID = new PublicKey('whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc');\n\nexport const INVARIANT_PROGRAM_ID = new PublicKey('HyaB3W9q6XdA5xwpU4XnSZV94htfmbmqJXZcEbRaJutt');\nexport const INVARIANT_STATE_ID = new PublicKey('8NsPwRFYqob3FzYvHYTjFK6WVFJADFN8Hn7yNQKcVNW1');\nexport const INVARIANT_PROGRAM_AUTHORITY_ID = new PublicKey('J4uBbeoWpZE8fH58PM1Fp9n9K6f1aThyeVCyRdJbaXqt');\n\nexport const CYKURA_PROGRAM_ID = new PublicKey('cysPXAjehMpVKUapzbMCCnpFxUFFryEWEaLgnb9NrR8');\n\nexport const CYKURA_FACTORY_STATE_ADDRESS = new PublicKey('DBsMwKfeoUHhxMi9x6wd2AsT12UwUCssjNbUzu1aKgqj');\n\nexport const MARINADE_PROGRAM_ID = new PublicKey('MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD');\n\nexport const STEPN_PROGRAM_ID = new PublicKey('Dooar9JkhdZ7J3LHN3A7YCuoGRUggXhQaG4kijfLGU2j');\nexport const ORCA_V1_PROGRAM_ID = new PublicKey('DjVE6JNiYqPL2QXyCUUh8rNjHrbz9hXHNYt99MQ59qw1');\nexport const ORCA_V2_PROGRAM_ID = new PublicKey('9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP');\nexport const STEP_TOKEN_SWAP_PROGRAM_ID = new PublicKey('SSwpMgqNDsyV7mAgN9ady4bDVu5ySjmmXejXvy2vLt1');\n\nexport const PENGUIN_PROGRAM_ID = new PublicKey('PSwapMdSai8tjrEXcxFeQth87xC4rRsa4VA5mhGhXkP');\nexport const SAROS_PROGRAM_ID = new PublicKey('SSwapUtytfBdBn1b9NUGG6foMVPtcWgpRU32HToDUZr');\n\nexport const METEORA_PROGRAM_ID = new PublicKey('Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB');\nexport const METEORA_VAULT_PROGRAM_ID = new PublicKey('24Uqj9JCLxUeoC3hGfh5W3s9FM9uCHDS2SG3LYwBpyTi');\n\nexport const DELTA_FI_PROGRAM_ID = new PublicKey('GNExJhNUhc9LN2DauuQAUJnXoy6DJ6zey3t9kT9A2PF3');\nexport const DELTA_FI_USER_ID = new PublicKey('ziSPuDShwunW4xNrCfTnSHTPVT6FZDREtdofpf1BJwe');\n\nexport const GOOSE_FX_PROGRAM_ID = new PublicKey('7WduLbRfYhTJktjLw5FDEyrqoEv61aTTCuGAetgLjzN5');\nexport const GOOSE_FX_CONTROLLER_ID = new PublicKey('8CxKnuJeoeQXFwiG6XiGY2akBjvJA5k3bE52BfnuEmNQ');\n\nexport const BALANSOL_PROGRAM_ID = new PublicKey('D3BBjqUdCYuP18fNvvMbPAZ8DpcRi4io2EsYHQawJDag');\n\nexport const DRADEX_PROGRAM_ID = new PublicKey('dp2waEWSBy5yKmq65ergoU3G6qRLmqa6K7We4rZSKph');\nexport const DRADEX_LOGGER_PROGRAM_ID = new PublicKey('1gE3LGQze8DQ3KD2C4ZUCmRX5g4njhY5yLfYmnmcvJR');\nexport const DRADEX_MASTER_ID = new PublicKey('76ygWLcvJLR6nSzRUpiQqqtX4Pabkq4vpaTxwr3mDcXA');\n\nexport const LIFINITY_V2_PROGRAM_ID = new PublicKey('2wT8Yq49kHgDzXuPxZSaeLaH1qbmGXtEyPy64bL7aD3c');\n\n// This is DexUser for Dradex with `BUX7s2ef2htTGb2KKoPHWkmzxPj4nTWMWRgs5CSbQxf9` as owner.\nexport const DRADEX_DEX_USER = new PublicKey('571oqNkJauZ2tccLwf8CUB56hpLPZkop9X1Px4DE9rnQ');\n\nexport const RAYDIUM_CLMM_PROGRAM_ID = new PublicKey('CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK');\nexport const OPENBOOK_PROGRAM_ID = new PublicKey('srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX');\n\nexport const MARCO_POLO_PROGRAM_ID = new PublicKey('9tKE7Mbmj4mxDjWatikzGAtkoWosiiZX9y6J4Hfm2R8H');\nexport const MARCO_POLO_STATE_ID = new PublicKey('BE5YRQ6N6LCw7UL3JwzVp317EWa4mzJY6JKDaudcXu7A');\nexport const MARCO_POLO_PROGRAM_AUTHORITY = new PublicKey('JM78XNzeQRmZXDAP4DSq88ZdErbuSXSLE6fkRsVDKSu');\n\nexport const BONK_SWAP_PROGRAM_ID = new PublicKey('BSwp6bEBihVLdqJRKGgzjcGLHkcTuzmSo1TQkHepzH8p');\nexport const BONK_SWAP_STATE_ID = new PublicKey('2QWN6WjrJ3RAk51ecxLxaLPfFCYLAnmWJwJ1oKA92CRD');\nexport const BONK_SWAP_PROGRAM_AUTHORITY = new PublicKey('8NyaPDJeC2eaBGpkRpZKnD9S448AZGgjSvumFe92DRK2');\n\nexport const PHOENIX_PROGRAM_ID = new PublicKey('PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY');\n\nexport const SYMMETRY_PROGRAM_ID = new PublicKey('2KehYt3KsEQR53jYcxjbQp2d2kCp4AkuQW68atufRwSr');\n\nexport const WRAPPED_SOL_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n\nexport const MARKETS_URL: Record<Cluster, string> = {\n  devnet: 'https://jupiter-devnet.zhen8558.workers.dev/markets?v=3', // 'https://api.jup.ag/api/markets/cache/devnet',\n  'mainnet-beta': 'https://cache.jup.ag/markets?v=3',\n  testnet: 'https://api.jup.ag/api/markets/cache/devnet',\n};\n\nexport const INDEXED_ROUTE_MAP_URL = 'https://cache.jup.ag/indexed-route-maps-v2';\n\nexport const TOKEN_LIST_URL: Record<Cluster, string> = {\n  devnet: 'https://api.jup.ag/api/tokens/devnet',\n  testnet: 'https://api.jup.ag/api/markets/devnet',\n  'mainnet-beta': 'https://cache.jup.ag/tokens',\n};\n\nexport const LAMPORTS_PER_SIGNATURE = 5000;\n\n// The default wallet collecting referrer fees\nexport const JUPITER_FEE_OWNER = new PublicKey('BUX7s2ef2htTGb2KKoPHWkmzxPj4nTWMWRgs5CSbQxf9');\n\nexport interface ErrorDetails {\n  code: number;\n  name: string;\n  msg: string;\n}\n\ntype JUPITER_ERROR_TYPES =\n  | 'TransactionNotConfirmed'\n  | 'BalancesNotExtractedProperly'\n  | 'InsufficientSOL'\n  | (typeof IDL.errors)[number]['name'];\n\nexport const JUPITER_ERRORS: Record<JUPITER_ERROR_TYPES, ErrorDetails> = Object.freeze({\n  AlreadyInUse: {\n    code: 1,\n    name: 'AlreadyInUsed',\n    msg: 'Account already In Used',\n  },\n  InsufficientSOL: {\n    code: 1,\n    name: 'InsufficientSOL',\n    msg: 'Insufficient SOL',\n  },\n  TransactionNotConfirmed: {\n    code: 7000, // a code that is not in the list of errors\n    name: 'TransactionNotConfirmed',\n    msg: 'Transaction was not confirmed',\n  },\n  BalancesNotExtractedProperly: {\n    code: 7001, // a code that is not in the list of errors\n    name: 'BalancesNotExtractedProperly',\n    msg: 'Balances cannot be extracted properly',\n  },\n  ...IDL.errors.reduce((accErrors, error) => {\n    return { ...accErrors, [error.name]: error };\n  }, {} as Record<(typeof IDL.errors)[number]['name'], ErrorDetails>),\n});\n","import { parseErrorForTransaction, TransactionError, UNKNOWN_ERROR } from '@mercurial-finance/optimist';\nimport { VersionedTransactionResponse } from '@solana/web3.js';\nimport { ErrorDetails, JUPITER_ERRORS, JUPITER_PROGRAM_ID } from '../constants';\n\nconst codeToErrorRecord = Object.values(JUPITER_ERRORS).reduce((record, error) => {\n  record[error.code] = error;\n  return record;\n}, {} as Record<number, ErrorDetails>);\n\n// Throws when not found or contains error to satisfy upper control flow\nexport function validateTransactionResponse({\n  txid,\n  transactionResponse,\n}: {\n  txid: string;\n  transactionResponse: VersionedTransactionResponse | null;\n}): VersionedTransactionResponse | TransactionError {\n  if (!transactionResponse) {\n    const errorDetails = JUPITER_ERRORS['TransactionNotConfirmed'];\n    return new TransactionError(errorDetails.msg, txid, errorDetails.code, [JUPITER_PROGRAM_ID.toBase58()]);\n  }\n  if (transactionResponse?.meta?.err) {\n    let { message, programIds, code } = parseErrorForTransaction(transactionResponse);\n\n    // only map message if first program is jupiter\n    if (programIds?.[0] === JUPITER_PROGRAM_ID.toBase58() && code) {\n      message = codeToErrorRecord[code]?.msg;\n    }\n\n    if (!message) {\n      message = UNKNOWN_ERROR;\n    }\n\n    return new TransactionError(message || 'Something went wrong', txid, code, programIds);\n  }\n  return transactionResponse;\n}\n","export const wait = (time: number) => new Promise<void>((resolve) => setTimeout(resolve, time));\n","import { TransactionError } from '@mercurial-finance/optimist';\nimport { bs58 } from '@project-serum/anchor/dist/cjs/utils/bytes';\nimport {\n  AccountKeysFromLookups,\n  Blockhash,\n  ConfirmedTransactionMeta,\n  Connection,\n  PublicKey,\n  SendOptions,\n  Signer,\n  Transaction,\n  TransactionMessage,\n  TransactionSignature,\n  VersionedMessage,\n  VersionedTransaction,\n  VersionedTransactionResponse,\n} from '@solana/web3.js';\nimport { WRAPPED_SOL_MINT, JUPITER_ERRORS, JUPITER_PROGRAM_ID } from '../constants';\nimport { wait } from './wait';\n\n/** Should this be a method in web3.js? */\nfunction getKeyMap(message: VersionedMessage, accountKeysFromLookups: AccountKeysFromLookups | undefined) {\n  return message\n    .getAccountKeys({ accountKeysFromLookups })\n    .keySegments()\n    .flat()\n    .reduce((acc, key, index) => {\n      acc.set(key.toBase58(), index);\n      return acc;\n    }, new Map<string, number>());\n}\n\nfunction diffTokenBalance(accountKeyIndex: number, meta: ConfirmedTransactionMeta): number | undefined {\n  const postBalance = meta.postTokenBalances?.find(\n    (postTokenBalance) => postTokenBalance.accountIndex === accountKeyIndex,\n  )?.uiTokenAmount.amount;\n  const preBalance = meta.preTokenBalances?.find((preTokenBalance) => preTokenBalance.accountIndex === accountKeyIndex)\n    ?.uiTokenAmount.amount;\n\n  // When token account is created it isn't present in preBalance\n  if (!postBalance) return;\n  return Math.abs(parseInt(postBalance) - (preBalance !== undefined ? parseInt(preBalance) : 0));\n}\n\nexport function extractTokenBalanceChangeFromTransaction(\n  meta: ConfirmedTransactionMeta,\n  keyMap: Map<string, number>,\n  tokenAccountAddress: PublicKey,\n): number | undefined {\n  if (!meta) return;\n  const accountKeyIndex = keyMap.get(tokenAccountAddress.toBase58());\n  if (accountKeyIndex === undefined) return;\n\n  return diffTokenBalance(accountKeyIndex, meta);\n}\n\n/** Assumption: user is the signer so it can never be rolled */\nexport function extractSOLChangeFromTransaction(\n  meta: ConfirmedTransactionMeta,\n  keyMap: Map<string, number>,\n  user: PublicKey,\n): number {\n  const accountKeyIndex = keyMap.get(user.toBase58());\n  if (accountKeyIndex !== undefined) {\n    return Math.abs(meta.postBalances[accountKeyIndex] - meta.preBalances[accountKeyIndex]);\n  }\n\n  return 0;\n}\n\nexport async function getTokenBalanceChangesFromTransactionResponse({\n  txid,\n  inputMint,\n  outputMint,\n  user,\n  sourceAddress,\n  destinationAddress,\n  transactionResponse,\n  hasWrappedSOL,\n}: {\n  txid: TransactionSignature;\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  user: PublicKey;\n  sourceAddress: PublicKey;\n  destinationAddress: PublicKey;\n  transactionResponse: VersionedTransactionResponse | null;\n  hasWrappedSOL: boolean;\n}) {\n  let sourceTokenBalanceChange: number | undefined;\n  let destinationTokenBalanceChange: number | undefined;\n\n  if (transactionResponse) {\n    let { meta, transaction } = transactionResponse;\n    if (meta) {\n      const keyMap = getKeyMap(transaction.message, meta.loadedAddresses);\n      console.log({ keyMap });\n      sourceTokenBalanceChange =\n        inputMint.equals(WRAPPED_SOL_MINT) && !hasWrappedSOL\n          ? extractSOLChangeFromTransaction(meta, keyMap, user)\n          : extractTokenBalanceChangeFromTransaction(meta, keyMap, sourceAddress);\n      destinationTokenBalanceChange =\n        outputMint.equals(WRAPPED_SOL_MINT) && !hasWrappedSOL\n          ? extractSOLChangeFromTransaction(meta, keyMap, user)\n          : extractTokenBalanceChangeFromTransaction(meta, keyMap, destinationAddress);\n    }\n  }\n\n  if (!(sourceTokenBalanceChange && destinationTokenBalanceChange)) {\n    throw new TransactionError(\n      'Cannot find source or destination token account balance change',\n      txid,\n      JUPITER_ERRORS['BalancesNotExtractedProperly'].code,\n      [JUPITER_PROGRAM_ID.toBase58()],\n    );\n  }\n\n  return [sourceTokenBalanceChange, destinationTokenBalanceChange];\n}\n\nexport function getUnixTs() {\n  return new Date().getTime();\n}\n\nconst SEND_OPTIONS: SendOptions = { skipPreflight: true, maxRetries: 2 };\n\ntype TransactionSenderAndConfirmationWaiterArgs = {\n  connection: Connection;\n  signedTransaction: Transaction | VersionedTransaction;\n  timeout?: number;\n  pollInterval?: number;\n  sendInterval?: number;\n  sendRetries?: number;\n};\n\n// An empty transaction with a fee payer and blockhash, to check blockhash validity through simulation\nfunction buildCanaryTransaction({ feePayer, blockhash }: { feePayer: PublicKey; blockhash: Blockhash }) {\n  const transactionMessage = new TransactionMessage({\n    payerKey: feePayer,\n    // Make the canary unique per call just in case\n    instructions: [\n      {\n        keys: [\n          {\n            pubkey: feePayer,\n            isSigner: true,\n            isWritable: true,\n          },\n        ],\n        programId: new PublicKey('MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr'),\n        data: Buffer.from(Math.random().toString(), 'utf8'),\n      },\n    ],\n    recentBlockhash: blockhash,\n  });\n  const messageV0 = transactionMessage.compileToV0Message([]);\n  const tx = new VersionedTransaction(messageV0);\n  return tx;\n}\n\nasync function checkIsBlockhashExpired({\n  connection,\n  canaryTx,\n}: {\n  connection: Connection;\n  canaryTx: VersionedTransaction;\n}): Promise<boolean> {\n  const simulationResult = await connection.simulateTransaction(canaryTx, {\n    sigVerify: false,\n    replaceRecentBlockhash: false,\n    commitment: 'processed',\n  });\n  const err = simulationResult.value.err;\n  if (err) {\n    if (err === 'BlockhashNotFound') {\n      return true;\n    } else {\n      throw new Error(`Unexpected error: ${err}`);\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n * awaits confirmation while resending the transaction periodically\n *\n * Our RPC node settings\n * solana_send_leader_count: 8\n * solana_send_retry_ms: 15000\n **/\nexport async function transactionSenderAndConfirmationWaiter({\n  connection,\n  signedTransaction,\n  pollInterval = 500,\n  sendInterval = 2_000,\n  sendRetries = 40,\n}: TransactionSenderAndConfirmationWaiterArgs): Promise<{\n  txid: TransactionSignature;\n  transactionResponse: VersionedTransactionResponse | null;\n}> {\n  const rawTransaction = signedTransaction.serialize();\n  const { feePayer, blockhash } = getTransactionBlockhashAndFeePayer(signedTransaction);\n  const canaryTx = buildCanaryTransaction({ feePayer, blockhash });\n  const txid = await connection.sendRawTransaction(rawTransaction, SEND_OPTIONS);\n  let lastSendTimestamp = getUnixTs();\n  let retries = 0;\n\n  while (true) {\n    const timestamp = getUnixTs();\n    if (retries < sendRetries && timestamp - lastSendTimestamp > sendInterval) {\n      lastSendTimestamp = timestamp;\n      retries += 1;\n      await connection.sendRawTransaction(rawTransaction, SEND_OPTIONS);\n    }\n    const isBlockhashExpired = await checkIsBlockhashExpired({ connection, canaryTx });\n    const response = await Promise.any([\n      connection.getTransaction(txid, {\n        commitment: 'confirmed',\n        maxSupportedTransactionVersion: 0,\n      }),\n      wait(5000),\n    ]);\n    if (response) return { txid, transactionResponse: response };\n    if (isBlockhashExpired)\n      return {\n        txid,\n        transactionResponse: null,\n      };\n    await wait(pollInterval);\n  }\n}\n\nexport function getSignature(transaction: Transaction | VersionedTransaction): string {\n  const signature = 'signature' in transaction ? transaction.signature : transaction.signatures[0];\n  if (!signature) {\n    throw new Error('Transaction has no signature');\n  }\n  return bs58.encode(signature);\n}\n\nexport function getTransactionBlockhashAndFeePayer(transaction: Transaction | VersionedTransaction): {\n  blockhash: Blockhash;\n  feePayer: PublicKey;\n} {\n  if ('message' in transaction) {\n    return { feePayer: transaction.message.staticAccountKeys[0], blockhash: transaction.message.recentBlockhash };\n  } else {\n    if (!transaction.feePayer) throw new Error('Missing feePayer');\n    if (!transaction.recentBlockhash) throw new Error('Missing blockhash');\n    return { feePayer: transaction.feePayer, blockhash: transaction.recentBlockhash };\n  }\n}\n\nexport function signTransaction(\n  transaction: Transaction | VersionedTransaction,\n  signers: Signer[],\n): TransactionSignature {\n  if ('message' in transaction) {\n    transaction.sign(signers);\n  } else {\n    transaction.sign(...signers);\n  }\n  return getSignature(transaction);\n}\n","import { Connection, PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { TransactionError } from '@mercurial-finance/optimist';\nimport { Owner } from './Owner';\nimport { ExecuteParams, OnTransaction, SwapResult } from '../types';\nimport {\n  getSignature,\n  getTokenBalanceChangesFromTransactionResponse,\n  signTransaction,\n  transactionSenderAndConfirmationWaiter,\n} from './transactionHelpers';\nimport { validateTransactionResponse } from './errors';\n\n/** sign, send and await confirmation for an exchange */\nexport const executeTransaction = async ({\n  connection,\n  wallet,\n  onTransaction,\n  inputMint,\n  outputMint,\n  sourceAddress,\n  destinationAddress,\n  swapTransaction,\n  owner,\n  wrapUnwrapSOL,\n}: {\n  connection: Connection;\n  wallet: ExecuteParams['wallet'];\n  onTransaction?: OnTransaction;\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  sourceAddress: PublicKey;\n  destinationAddress: PublicKey;\n  swapTransaction: Transaction | VersionedTransaction;\n  wrapUnwrapSOL?: boolean;\n  owner: Owner;\n}): Promise<SwapResult> => {\n  let swapError: TransactionError | undefined = undefined;\n  let swapResult: SwapResult | undefined = undefined;\n\n  try {\n    if (owner.signer) {\n      signTransaction(swapTransaction, [owner.signer]);\n    } else {\n      if (!wallet) throw new Error('Signer wallet not found');\n      swapTransaction = await wallet.signTransaction(swapTransaction);\n    }\n\n    const swapTxid = getSignature(swapTransaction);\n\n    try {\n      const swapTransactionSender = async () => {\n        return await validateTransactionResponse(\n          await transactionSenderAndConfirmationWaiter({ connection, signedTransaction: swapTransaction }),\n        );\n      };\n      const swapPromise = swapTransactionSender();\n      onTransaction?.(swapTxid, swapPromise);\n      const transactionResponse = await swapPromise;\n\n      if (transactionResponse instanceof Error) {\n        throw transactionResponse;\n      }\n\n      const [sourceTokenBalanceChange, destinationTokenBalanceChange] =\n        await getTokenBalanceChangesFromTransactionResponse({\n          txid: swapTxid,\n          inputMint,\n          outputMint,\n          user: owner.publicKey,\n          sourceAddress,\n          destinationAddress,\n          transactionResponse,\n          hasWrappedSOL: !wrapUnwrapSOL,\n        });\n\n      swapResult = {\n        txid: swapTxid,\n        inputAddress: sourceAddress,\n        outputAddress: destinationAddress,\n        inputAmount: sourceTokenBalanceChange,\n        outputAmount: destinationTokenBalanceChange,\n      };\n    } catch (e: any) {\n      console.error(e);\n      swapError = e;\n    } finally {\n    }\n\n    if (swapError || !swapResult) {\n      throw swapError || new Error('Swap failed');\n    }\n\n    return swapResult;\n  } catch (error: any) {\n    return { error: error as TransactionError };\n  }\n};\n","import { deserializeAccount } from '@mercurial-finance/optimist';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { Connection, PublicKey } from '@solana/web3.js';\n\nexport async function getPlatformFeeAccounts(\n  connection: Connection,\n  feeAccountOwner: PublicKey,\n): Promise<Map<string, PublicKey>> {\n  const tokenAccounts = (\n    await connection.getTokenAccountsByOwner(feeAccountOwner, {\n      programId: TOKEN_PROGRAM_ID,\n    })\n  ).value;\n\n  const feeAccounts = tokenAccounts.reduce((acc, tokenAccount) => {\n    const deserializedtokenAccount = deserializeAccount(tokenAccount.account.data);\n    if (deserializedtokenAccount) {\n      acc.set(deserializedtokenAccount.mint.toBase58(), tokenAccount.pubkey);\n    }\n    return acc;\n  }, new Map<string, PublicKey>());\n\n  return feeAccounts;\n}\n","import { Keypair, PublicKey, Signer } from '@solana/web3.js';\n\ntype _Owner = Keypair | PublicKey;\n\nexport class Owner {\n  private readonly _owner: _Owner;\n\n  constructor(owner: _Owner) {\n    this._owner = owner;\n  }\n\n  get publicKey(): PublicKey {\n    if (Owner.isKeyPair(this._owner)) {\n      return this._owner.publicKey;\n    }\n\n    return this._owner;\n  }\n\n  get signer(): Signer | undefined {\n    return Owner.isKeyPair(this._owner) ? this._owner : undefined;\n  }\n\n  get isKeyPair(): boolean {\n    return Owner.isKeyPair(this._owner);\n  }\n\n  get isPublicKey(): boolean {\n    return Owner.isPublicKey(this._owner);\n  }\n\n  static isKeyPair(owner: _Owner): owner is Keypair {\n    return (owner as Keypair).secretKey !== undefined;\n  }\n\n  static isPublicKey(owner: _Owner): owner is PublicKey {\n    return !Owner.isKeyPair(owner);\n  }\n}\n","import { INDEXED_ROUTE_MAP_URL } from '..';\n\nexport interface IndexedRouteMap {\n  mintKeys: string[];\n  indexedRouteMap: { [key: number]: number[] };\n}\n\nfunction getOrAddKeyToIndexMap(pk: string, mintToIndexMap: Map<string, number>): number {\n  let keyIndex = mintToIndexMap.get(pk);\n  if (keyIndex === undefined) {\n    keyIndex = mintToIndexMap.size;\n    mintToIndexMap.set(pk, keyIndex);\n  }\n  return keyIndex;\n}\n\n/** An indexed route map which is light (less data to compress/decompress) and can quickly be inflated into the full route map  */\nexport function routeMapToIndexedRouteMap(routeMap: Map<string, string[]>) {\n  const { mintToIndexMap, indexedRouteMap: innerIndexedRouteMap } = Array.from(routeMap).reduce<{\n    mintToIndexMap: Map<string, number>;\n    indexedRouteMap: Record<number, number[]>;\n  }>(\n    ({ mintToIndexMap, indexedRouteMap }, [key, item]) => {\n      const keyIndex = getOrAddKeyToIndexMap(key, mintToIndexMap);\n\n      const indexedOutputMintCache = [];\n      for (const routeOutputKey of item) {\n        const routeOutputKeyIndex = getOrAddKeyToIndexMap(routeOutputKey, mintToIndexMap);\n        indexedOutputMintCache.push(routeOutputKeyIndex);\n      }\n      indexedRouteMap[keyIndex] = indexedOutputMintCache;\n\n      return { mintToIndexMap, indexedRouteMap };\n    },\n    { mintToIndexMap: new Map(), indexedRouteMap: {} },\n  );\n\n  const indexedRouteMap = {\n    mintKeys: Array.from(mintToIndexMap.keys()),\n    indexedRouteMap: innerIndexedRouteMap,\n  };\n\n  return indexedRouteMap;\n}\n\nexport function indexedRouteMapToRouteMap(indexedRouteMap: IndexedRouteMap) {\n  const getMint = (index: number) => indexedRouteMap.mintKeys[index];\n\n  // generate route map by replacing indexes with mint addresses\n  const generatedRouteMap: Map<string, string[]> = new Map();\n  Object.keys(indexedRouteMap.indexedRouteMap).forEach((key) => {\n    generatedRouteMap.set(\n      getMint(key as any as number),\n      indexedRouteMap['indexedRouteMap'][key as any as number].map((index: number) => getMint(index)),\n    );\n  });\n\n  return generatedRouteMap;\n}\n\nexport async function getRemoteRouteMap(\n  {\n    onlyDirectRoutes,\n    restrictIntermediateTokens,\n    asLegacyTransaction,\n  }: { onlyDirectRoutes?: boolean; restrictIntermediateTokens?: boolean; asLegacyTransaction?: boolean },\n  indexedRouteMapUrl?: string,\n) {\n  let url = indexedRouteMapUrl || INDEXED_ROUTE_MAP_URL;\n  if (onlyDirectRoutes) {\n    url = url.concat('?onlyDirectRoutes=true');\n  } else if (restrictIntermediateTokens) {\n    url = url.concat('?restrictIntermediateTokens=true');\n  }\n\n  if (asLegacyTransaction) {\n    url = url.concat('?asLegacyTransaction=true');\n  }\n\n  const indexedRouteMap = (await (await fetch(url)).json()) as IndexedRouteMap;\n\n  return indexedRouteMapToRouteMap(indexedRouteMap);\n}\n","import {\n  Connection,\n  PublicKey,\n  Signer,\n  TransactionInstruction,\n  BlockhashWithExpiryBlockHeight,\n  sendAndConfirmRawTransaction,\n  TransactionMessage,\n  VersionedTransaction,\n  Transaction,\n  AddressLookupTableAccount,\n} from '@solana/web3.js';\nimport { Instruction, TransactionPayload } from './instruction';\nimport { Owner } from './Owner';\nimport { signTransaction } from './transactionHelpers';\n\nexport class TransactionBuilder {\n  private connection: Connection;\n  private feePayer: PublicKey;\n  private instructions: Instruction[];\n  private owner: Owner;\n\n  constructor(connection: Connection, feePayer: PublicKey, owner: Owner) {\n    this.connection = connection;\n    this.feePayer = feePayer;\n    this.instructions = [];\n    this.owner = owner;\n  }\n\n  addInstruction(instruction: Instruction): TransactionBuilder {\n    this.instructions.push(instruction);\n    return this;\n  }\n\n  async build(\n    blockhashWithExpiryBlockHeight: BlockhashWithExpiryBlockHeight,\n    addressLookupTables: AddressLookupTableAccount[],\n    asLegacyTransaction?: boolean,\n  ): Promise<TransactionPayload> {\n    let instructions: TransactionInstruction[] = [];\n    let setupInstructions: TransactionInstruction[] = [];\n    let cleanupInstructions: TransactionInstruction[] = [];\n    let signers: Signer[] = [];\n    this.instructions.forEach((curr) => {\n      setupInstructions = setupInstructions.concat(curr.setupInstructions);\n      instructions = instructions.concat(curr.instructions);\n      cleanupInstructions = cleanupInstructions.concat(curr.cleanupInstructions);\n      signers = signers.concat(curr.signers);\n    });\n\n    const transactionInstructions = setupInstructions.concat(instructions).concat(cleanupInstructions);\n\n    const transaction = asLegacyTransaction\n      ? this.buildLegacyTransaction({ transactionInstructions, blockhashWithExpiryBlockHeight })\n      : this.buildVersionedTransaction({\n          transactionInstructions,\n          blockhashWithExpiryBlockHeight,\n          addressLookupTables,\n        });\n\n    return {\n      transaction,\n      signers,\n      execute: this.owner.isKeyPair\n        ? () => {\n            const signature = signTransaction(transaction, [this.owner.signer!, ...signers]);\n            const serializedTx = transaction.serialize();\n            return sendAndConfirmRawTransaction(this.connection, Buffer.from(serializedTx), {\n              signature,\n              ...blockhashWithExpiryBlockHeight,\n            });\n          }\n        : async () => {\n            throw new Error('Please use a Keypair for the owner parameter to enable the execute function');\n          },\n    };\n  }\n\n  private buildLegacyTransaction({\n    transactionInstructions,\n    blockhashWithExpiryBlockHeight,\n  }: {\n    transactionInstructions: TransactionInstruction[];\n    blockhashWithExpiryBlockHeight: BlockhashWithExpiryBlockHeight;\n  }) {\n    return new Transaction({ feePayer: this.feePayer, ...blockhashWithExpiryBlockHeight }).add(\n      ...transactionInstructions,\n    );\n  }\n\n  private buildVersionedTransaction({\n    transactionInstructions,\n    blockhashWithExpiryBlockHeight,\n    addressLookupTables,\n  }: {\n    transactionInstructions: TransactionInstruction[];\n    blockhashWithExpiryBlockHeight: BlockhashWithExpiryBlockHeight;\n    addressLookupTables: AddressLookupTableAccount[];\n  }) {\n    const transactionMessage = new TransactionMessage({\n      payerKey: this.feePayer,\n      instructions: transactionInstructions,\n      recentBlockhash: blockhashWithExpiryBlockHeight.blockhash,\n    });\n\n    const messageV0 = transactionMessage.compileToV0Message(addressLookupTables);\n    return new VersionedTransaction(messageV0);\n  }\n}\n","import { deserializeAccount } from '@mercurial-finance/optimist';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { Connection, PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { WRAPPED_SOL_MINT } from '../constants';\nimport { getEmptyInstruction, Instruction } from './instruction';\nimport { Owner } from './Owner';\n\n// Leverage the existing ATA when present\nexport async function createAndCloseWSOLAccount({\n  connection,\n  amount,\n  owner: { publicKey },\n}: {\n  connection: Connection;\n  owner: Owner;\n  amount: JSBI;\n}): Promise<Instruction & { address: PublicKey }> {\n  const result = getEmptyInstruction();\n\n  const toAccount = findAssociatedTokenAddress({\n    walletAddress: publicKey,\n    tokenMintAddress: WRAPPED_SOL_MINT,\n  });\n\n  const info = await connection.getAccountInfo(toAccount);\n\n  if (info === null) {\n    result.setupInstructions.push(\n      createAssociatedTokenAccountInstruction(publicKey, toAccount, publicKey, WRAPPED_SOL_MINT),\n    );\n  }\n\n  // Fund account and sync\n  result.setupInstructions.push(\n    SystemProgram.transfer({\n      fromPubkey: publicKey,\n      toPubkey: toAccount,\n      lamports: JSBI.toNumber(amount),\n    }),\n  );\n  result.setupInstructions.push(\n    // This is not exposed by the types, but indeed it exists\n    (Token as any).createSyncNativeInstruction(TOKEN_PROGRAM_ID, toAccount),\n  );\n\n  result.cleanupInstructions = [\n    Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, toAccount, publicKey, publicKey, []),\n  ];\n\n  return {\n    address: toAccount,\n    ...result,\n  };\n}\n\nexport async function findOrCreateAssociatedAccountByMint({\n  connection,\n  payer,\n  owner: { publicKey },\n  mintAddress,\n  unwrapSOL,\n}: {\n  connection: Connection;\n  payer: PublicKey;\n  owner: Owner;\n  mintAddress: PublicKey | string;\n  unwrapSOL: boolean;\n}): Promise<Instruction & { address: PublicKey }> {\n  const mint = typeof mintAddress === 'string' ? new PublicKey(mintAddress) : mintAddress;\n  const toAccount = findAssociatedTokenAddress({\n    tokenMintAddress: mint,\n    walletAddress: publicKey,\n  });\n  const result = getEmptyInstruction();\n\n  const info = await connection.getAccountInfo(toAccount);\n\n  if (info === null) {\n    result.setupInstructions.push(createAssociatedTokenAccountInstruction(payer, toAccount, publicKey, mint));\n  } else {\n    const tokenAccountInfo = deserializeAccount(info.data);\n\n    if (tokenAccountInfo && !tokenAccountInfo.owner.equals(publicKey)) {\n      // What to do at the top level in UIs and SDK?\n      throw new Error(`/!\\ ATA ${toAccount.toBase58()} is not owned by ${publicKey.toBase58()}`);\n    }\n  }\n\n  // We close it when wrapped SOL\n  if (mint.equals(WRAPPED_SOL_MINT) && unwrapSOL) {\n    result.cleanupInstructions.push(\n      Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, toAccount, publicKey, publicKey, []),\n    );\n  }\n\n  return {\n    address: toAccount,\n    ...result,\n  };\n}\n\n// 0.1.x @solana/spl-token does not have the version without the rent sysvar\n// Source: https://github.com/solana-labs/solana-program-library/blob/dc5684445f0b42ba36a0157f06c561d967a7cb34/associated-token-account/program/src/instruction.rs#L16-L25\nexport function createAssociatedTokenAccountInstruction(\n  payer: PublicKey,\n  associatedToken: PublicKey,\n  owner: PublicKey,\n  mint: PublicKey,\n  programId = TOKEN_PROGRAM_ID,\n  associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n): TransactionInstruction {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedToken, isSigner: false, isWritable: true },\n    { pubkey: owner, isSigner: false, isWritable: false },\n    { pubkey: mint, isSigner: false, isWritable: false },\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    { pubkey: programId, isSigner: false, isWritable: false },\n  ];\n\n  return new TransactionInstruction({\n    keys,\n    programId: associatedTokenProgramId,\n    data: Buffer.alloc(0),\n  });\n}\n\nexport const findAssociatedTokenAddress = ({\n  walletAddress,\n  tokenMintAddress,\n}: {\n  walletAddress: PublicKey;\n  tokenMintAddress: PublicKey;\n}): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [walletAddress.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), tokenMintAddress.toBuffer()],\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n  )[0];\n};\n","import {\n  Signer,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  VersionedTransaction,\n} from '@solana/web3.js';\n\nexport const getEmptyInstruction: () => Instruction = () => ({\n  setupInstructions: [],\n  instructions: [],\n  cleanupInstructions: [],\n  signers: [],\n});\n\nexport type Instruction = {\n  setupInstructions: TransactionInstruction[];\n  instructions: TransactionInstruction[];\n  cleanupInstructions: TransactionInstruction[];\n  signers: Signer[];\n};\n\nexport type TransactionPayload = {\n  transaction: Transaction | VersionedTransaction;\n  signers: Signer[];\n  execute: () => Promise<TransactionSignature>;\n};\n","import { TransactionError } from '@mercurial-finance/optimist';\nimport type { SignerWalletAdapter } from '@solana/wallet-adapter-base';\nimport {\n  BlockhashWithExpiryBlockHeight,\n  PublicKey,\n  TransactionSignature,\n  VersionedTransactionResponse,\n} from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { Instruction } from './utils';\n\nexport type TokenMintAddress = string;\n\nexport type PlatformFeeAndAccounts = {\n  feeBps: number;\n  feeAccounts: Map<string, PublicKey>;\n};\n\nexport type PlatformFee = {\n  feeBps: number;\n  feeAccount: PublicKey;\n};\n\nexport type QuoteMintToReferrer = Map<TokenMintAddress, PublicKey>;\n\nexport interface Fee {\n  amount: JSBI;\n  mint: string;\n  pct: number;\n}\n\nexport type SwapResult =\n  | {\n      txid: string;\n      inputAddress: PublicKey;\n      outputAddress: PublicKey;\n      inputAmount: number;\n      outputAmount: number;\n    }\n  | {\n      error?: TransactionError;\n    };\n\nexport enum SwapMode {\n  ExactIn = 'ExactIn',\n  ExactOut = 'ExactOut',\n}\n\nexport type OnTransaction = (\n  txid: TransactionSignature,\n  awaiter: Promise<VersionedTransactionResponse | TransactionError | null>,\n) => void;\n\nexport type ExecuteParams = {\n  wallet?: Pick<SignerWalletAdapter, 'signAllTransactions' | 'signTransaction'>;\n  /**\n   * Allows to customize control of sending and awaiting confirmation in the single/multi transaction flow\n   */\n  onTransaction?: OnTransaction;\n};\n\nexport interface TransactionFeeInfo {\n  signatureFee: number;\n  openOrdersDeposits: number[];\n  ataDeposits: number[];\n  /* Overall amount that will be deducted from user wallet after the swap */\n  totalFeeAndDeposits: number;\n  /* Amount for fee, deposits and temporary token accounts */\n  minimumSOLForTransaction: number;\n}\n\nexport interface ExchangeParams<T> {\n  routeInfo: T;\n  /**\n   * This will overwrite the default Jupiter.setUser, useful for stateless usage like API\n   */\n  userPublicKey?: PublicKey;\n  /**\n   * This will overwrite the default fee account, useful for stateless usage like API\n   */\n  feeAccount?: PublicKey;\n  /**\n   * This will overwrite the default wrapUnwrapSOL, useful for stateless usage like API\n   */\n  wrapUnwrapSOL?: boolean;\n  /**\n   * The transaction will use the blockhash and valid blockheight to create transaction\n   */\n  blockhashWithExpiryBlockHeight?: BlockhashWithExpiryBlockHeight;\n  /**\n   * Produces a legacy transaction\n   */\n  asLegacyTransaction?: boolean;\n  /**\n   * compute unit price in micro lamports, the swap transaction will cost consumed compute units * computeUnitPriceMicroLamports, see https://docs.solana.com/developing/programming-model/runtime#prioritization-fees\n   */\n  computeUnitPriceMicroLamports?: number | 'auto';\n}\n\nexport type SetupInstructions = {\n  openOrders: ((Instruction & { address: PublicKey }) | undefined)[];\n  intermediates: (Instruction & { address: PublicKey })[];\n  destination: Instruction & { address: PublicKey };\n};\n","import { Connection, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { JUPITER_PROGRAM, JUPITER_PROGRAM_ID } from './constants';\nimport { findOrCreateAssociatedAccountByMint, getEmptyInstruction, Instruction, Owner } from './utils';\n\nexport function createOpenOrdersInstruction(\n  serumMarket: PublicKey,\n  serumProgramId: PublicKey,\n  userTransferAuthority: PublicKey,\n): [PublicKey, TransactionInstruction] {\n  const [openOrders] = PublicKey.findProgramAddressSync(\n    [Buffer.from('open_orders'), serumMarket.toBuffer(), userTransferAuthority.toBuffer()],\n    JUPITER_PROGRAM_ID,\n  );\n\n  const ix = JUPITER_PROGRAM.instruction.createOpenOrders({\n    accounts: {\n      openOrders,\n      payer: userTransferAuthority,\n      dexProgram: serumProgramId,\n      systemProgram: SystemProgram.programId,\n      rent: SYSVAR_RENT_PUBKEY,\n      market: serumMarket,\n    },\n  });\n\n  return [openOrders, ix];\n}\n\nexport async function getOrCreateOpenOrdersAddress(\n  connection: Connection,\n  user: PublicKey,\n  serumMarket: PublicKey,\n  serumProgramId: PublicKey,\n): Promise<(Instruction & { address: PublicKey }) | undefined> {\n  const result = getEmptyInstruction();\n\n  const [newOpenOrdersAddress, ix] = createOpenOrdersInstruction(serumMarket, serumProgramId, user);\n\n  const newOpenOrdersAddressInfo = await connection.getAccountInfo(newOpenOrdersAddress);\n\n  if (!newOpenOrdersAddressInfo) {\n    result.setupInstructions = [ix];\n  }\n\n  return {\n    ...result,\n    address: newOpenOrdersAddress,\n  };\n}\n\nexport async function getAtaInstructions({\n  connection,\n  outputMints,\n  owner,\n  unwrapSOL,\n}: {\n  connection: Connection;\n  outputMints: PublicKey[];\n  owner: Owner;\n  unwrapSOL: boolean;\n}) {\n  const userTokenAccountResults = await Promise.all(\n    outputMints.map((outputMint) =>\n      findOrCreateAssociatedAccountByMint({\n        connection,\n        payer: owner.publicKey,\n        owner,\n        mintAddress: outputMint,\n        unwrapSOL,\n      }),\n    ),\n  );\n\n  const [userDestinationTokenAccountResult] = userTokenAccountResults.splice(userTokenAccountResults.length - 1, 1);\n\n  return {\n    userIntermediaryTokenAccountResults: userTokenAccountResults,\n    userDestinationTokenAccountResult,\n  };\n}\n","import { FeeCalculator } from '@solana/web3.js';\nimport { SetupInstructions, TransactionFeeInfo } from './types';\n\nconst SERUM_OPEN_ACCOUNT_LAMPORTS = 23_352_760;\nconst OPEN_TOKEN_ACCOUNT_LAMPORTS = 2_039_280;\nconst WALLET_RENT_EXEMPT_MINIMUM = 890_880;\nconst LAMPORTS_PER_SIGNATURE = 5000;\n\nfunction sum(values: number[]) {\n  return values.reduce((value, acc) => {\n    acc += value;\n    return acc;\n  }, 0);\n}\n\nexport const calculateTransactionDepositAndFee = ({\n  intermediates,\n  destination,\n  openOrders,\n  hasWrapUnwrapSOL,\n  feeCalculator,\n}: SetupInstructions & {\n  hasWrapUnwrapSOL: boolean;\n  feeCalculator: FeeCalculator;\n}): TransactionFeeInfo => {\n  const openOrdersDeposits = openOrders\n    .filter((ooi) => ooi && ooi.setupInstructions.length > 0)\n    .map(() => SERUM_OPEN_ACCOUNT_LAMPORTS);\n  const ataDeposits = [...intermediates, destination]\n    .filter((item) => item?.setupInstructions.length && item.cleanupInstructions.length === 0)\n    .map(() => OPEN_TOKEN_ACCOUNT_LAMPORTS);\n\n  const signatureFee = feeCalculator.lamportsPerSignature;\n\n  const totalFeeAndDeposits = sum([signatureFee, ...openOrdersDeposits, ...ataDeposits]);\n\n  // We need to account for temporary wrapped SOL token accounts as intermediary or output\n  const minimumSOLForTransaction = sum([\n    signatureFee,\n    ...openOrdersDeposits,\n    ...ataDeposits,\n    WALLET_RENT_EXEMPT_MINIMUM,\n    hasWrapUnwrapSOL ? OPEN_TOKEN_ACCOUNT_LAMPORTS : 0,\n  ]);\n\n  return {\n    signatureFee,\n    openOrdersDeposits,\n    ataDeposits,\n    totalFeeAndDeposits,\n    minimumSOLForTransaction,\n  };\n};\n\ninterface CalculateTransactionFeeAndDepositParams {\n  numOfAtasToBeCreated: number; // missing ata for each tokens\n  numOfOpenOrdersToBeCreated: number; // missing open orders for each tokens\n}\n\nexport const calculateTransactionDepositAndFeeV2 = ({\n  numOfAtasToBeCreated,\n  numOfOpenOrdersToBeCreated,\n}: CalculateTransactionFeeAndDepositParams): TransactionFeeInfo => {\n  const openOrdersDeposits = new Array(numOfOpenOrdersToBeCreated).fill(0).map(() => SERUM_OPEN_ACCOUNT_LAMPORTS);\n  const ataDeposits = new Array(numOfAtasToBeCreated).fill(0).map(() => OPEN_TOKEN_ACCOUNT_LAMPORTS);\n\n  const signatureFee = LAMPORTS_PER_SIGNATURE;\n\n  const totalFeeAndDeposits = sum([signatureFee, ...openOrdersDeposits, ...ataDeposits]);\n\n  // We need to account for temporary wrapped SOL token accounts as intermediary or output\n  const minimumSOLForTransaction = sum([\n    signatureFee,\n    ...openOrdersDeposits,\n    ...ataDeposits,\n    WALLET_RENT_EXEMPT_MINIMUM,\n  ]);\n\n  return {\n    signatureFee,\n    openOrdersDeposits,\n    ataDeposits,\n    totalFeeAndDeposits,\n    minimumSOLForTransaction,\n  };\n};\n"],"names":["IDL","version","name","instructions","accounts","isMut","isSigner","args","type","defined","types","kind","fields","variants","vec","events","index","errors","code","msg","JUPITER_PROGRAM_ID_DEVNET","PublicKey","JUPITER_PROGRAM_ID_STAGING","JUPITER_PROGRAM_ID_PRODUCTION","JUPITER_PROGRAM_ID","JUPITER_PROGRAM","Program","MAINNET_SERUM_DEX_PROGRAM","DEVNET_SERUM_DEX_PROGRAM","RAYDIUM_AMM_V4_PROGRAM_ID","ALDRIN_SWAP_PROGRAM_ID","ALDRIN_SWAP_V2_PROGRAM_ID","SABER_ADD_DECIMALS_PROGRAM_ID","CROPPER_PROGRAM_ID","SENCHA_PROGRAM_ID","LIFINITY_PROGRAM_ID","CREMA_PROGRAM_ID","CREMA_PARTNER_ACCOUNT","MERCURIAL_SWAP_PROGRAM_ID","WHIRLPOOL_PROGRAM_ID","INVARIANT_PROGRAM_ID","INVARIANT_STATE_ID","INVARIANT_PROGRAM_AUTHORITY_ID","CYKURA_PROGRAM_ID","CYKURA_FACTORY_STATE_ADDRESS","MARINADE_PROGRAM_ID","STEPN_PROGRAM_ID","ORCA_V1_PROGRAM_ID","ORCA_V2_PROGRAM_ID","STEP_TOKEN_SWAP_PROGRAM_ID","PENGUIN_PROGRAM_ID","SAROS_PROGRAM_ID","METEORA_PROGRAM_ID","METEORA_VAULT_PROGRAM_ID","DELTA_FI_PROGRAM_ID","DELTA_FI_USER_ID","GOOSE_FX_PROGRAM_ID","GOOSE_FX_CONTROLLER_ID","BALANSOL_PROGRAM_ID","DRADEX_PROGRAM_ID","DRADEX_LOGGER_PROGRAM_ID","DRADEX_MASTER_ID","LIFINITY_V2_PROGRAM_ID","DRADEX_DEX_USER","RAYDIUM_CLMM_PROGRAM_ID","OPENBOOK_PROGRAM_ID","MARCO_POLO_PROGRAM_ID","MARCO_POLO_STATE_ID","MARCO_POLO_PROGRAM_AUTHORITY","BONK_SWAP_PROGRAM_ID","BONK_SWAP_STATE_ID","BONK_SWAP_PROGRAM_AUTHORITY","PHOENIX_PROGRAM_ID","SYMMETRY_PROGRAM_ID","WRAPPED_SOL_MINT","INDEXED_ROUTE_MAP_URL","JUPITER_FEE_OWNER","JUPITER_ERRORS","Object","freeze","_extends","AlreadyInUse","InsufficientSOL","TransactionNotConfirmed","BalancesNotExtractedProperly","reduce","accErrors","error","_extends2","codeToErrorRecord","values","record","validateTransactionResponse","_ref","_transactionResponse$","txid","transactionResponse","errorDetails","TransactionError","toBase58","meta","err","_codeToErrorRecord$co","parseErrorForTransaction","message","programIds","_parseErrorForTransac","UNKNOWN_ERROR","wait","time","Promise","resolve","setTimeout","getKeyMap","accountKeysFromLookups","getAccountKeys","keySegments","flat","acc","key","set","Map","extractTokenBalanceChangeFromTransaction","keyMap","tokenAccountAddress","accountKeyIndex","get","undefined","_meta$postTokenBalanc","_meta$postTokenBalanc2","_meta$preTokenBalance","_meta$preTokenBalance2","postBalance","postTokenBalances","find","postTokenBalance","accountIndex","uiTokenAmount","amount","preBalance","preTokenBalances","preTokenBalance","Math","abs","parseInt","diffTokenBalance","extractSOLChangeFromTransaction","user","postBalances","preBalances","getTokenBalanceChangesFromTransactionResponse","_x","_getTokenBalanceChangesFromTransactionResponse","apply","this","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","inputMint","outputMint","sourceAddress","destinationAddress","hasWrappedSOL","sourceTokenBalanceChange","destinationTokenBalanceChange","transaction","wrap","_context","prev","next","loadedAddresses","console","log","equals","abrupt","stop","getUnixTs","Date","getTime","SEND_OPTIONS","skipPreflight","maxRetries","buildCanaryTransaction","_ref2","feePayer","blockhash","messageV0","TransactionMessage","payerKey","keys","pubkey","isWritable","programId","data","Buffer","from","random","toString","recentBlockhash","compileToV0Message","VersionedTransaction","checkIsBlockhashExpired","_checkIsBlockhashExpired","_callee2","_ref3","connection","canaryTx","_context2","simulateTransaction","sigVerify","replaceRecentBlockhash","commitment","sent","value","Error","transactionSenderAndConfirmationWaiter","_x3","_transactionSenderAndConfirmationWaiter","_callee3","_ref4","signedTransaction","_ref4$pollInterval","pollInterval","_ref4$sendInterval","sendInterval","_ref4$sendRetries","sendRetries","rawTransaction","_getTransactionBlockh","lastSendTimestamp","retries","timestamp","isBlockhashExpired","response","_context3","serialize","getTransactionBlockhashAndFeePayer","sendRawTransaction","any","getTransaction","maxSupportedTransactionVersion","getSignature","signature","signatures","bs58","encode","staticAccountKeys","signTransaction","signers","sign","executeTransaction","wallet","onTransaction","swapTransaction","owner","wrapUnwrapSOL","swapError","swapResult","swapTxid","swapTransactionSender","swapPromise","_yield$getTokenBalanc","signer","t0","t1","publicKey","inputAddress","outputAddress","inputAmount","outputAmount","finish","feeAccountOwner","feeAccounts","getTokenAccountsByOwner","TOKEN_PROGRAM_ID","tokenAccount","deserializedtokenAccount","deserializeAccount","account","mint","Owner","_owner","isKeyPair","secretKey","isPublicKey","getOrAddKeyToIndexMap","pk","mintToIndexMap","keyIndex","size","indexedRouteMapToRouteMap","indexedRouteMap","getMint","mintKeys","generatedRouteMap","forEach","map","_getRemoteRouteMap","indexedRouteMapUrl","restrictIntermediateTokens","asLegacyTransaction","url","onlyDirectRoutes","concat","fetch","json","TransactionBuilder","_proto","prototype","addInstruction","instruction","push","build","_build","blockhashWithExpiryBlockHeight","addressLookupTables","setupInstructions","cleanupInstructions","transactionInstructions","_this","curr","buildLegacyTransaction","buildVersionedTransaction","execute","serializedTx","sendAndConfirmRawTransaction","_x2","_Transaction","Transaction","add","_createAndCloseWSOLAccount","result","toAccount","findAssociatedTokenAddress","walletAddress","tokenMintAddress","getAccountInfo","createAssociatedTokenAccountInstruction","SystemProgram","transfer","fromPubkey","toPubkey","lamports","JSBI","toNumber","Token","createSyncNativeInstruction","createCloseAccountInstruction","address","findOrCreateAssociatedAccountByMint","_findOrCreateAssociatedAccountByMint","payer","mintAddress","unwrapSOL","info","tokenAccountInfo","associatedToken","associatedTokenProgramId","ASSOCIATED_TOKEN_PROGRAM_ID","TransactionInstruction","alloc","SwapMode","findProgramAddressSync","toBuffer","createOpenOrdersInstruction","serumMarket","serumProgramId","userTransferAuthority","openOrders","createOpenOrders","dexProgram","systemProgram","rent","SYSVAR_RENT_PUBKEY","market","_getOrCreateOpenOrdersAddress","_createOpenOrdersInst","newOpenOrdersAddress","ix","_getAtaInstructions","outputMints","userTokenAccountResults","_userTokenAccountResu","all","splice","length","userIntermediaryTokenAccountResults","userDestinationTokenAccountResult","sum","devnet","testnet","intermediates","destination","hasWrapUnwrapSOL","feeCalculator","openOrdersDeposits","filter","ooi","ataDeposits","item","signatureFee","lamportsPerSignature","totalFeeAndDeposits","minimumSOLForTransaction","numOfAtasToBeCreated","Array","numOfOpenOrdersToBeCreated","fill","WALLET_RENT_EXEMPT_MINIMUM","_x5","_x4","_getPlatformFeeAccounts","routeMap","_step","indexedOutputMintCache","_iterator","_createForOfIteratorHelperLoose","done","routeOutputKeyIndex","innerIndexedRouteMap"],"mappings":"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"}