import { Program } from "@project-serum/anchor";
import { PublicKey } from "@solana/web3.js";
import { Psylend as PsyLend } from "./idl";
/**
 * Bump seeds used in deriving accounts for a reserve
 */
export type reserveBumpSeeds = {
    vault: number;
    feeNoteVault: number;
    dexOpenOrders: number;
    dexSwapTokens: number;
    depositNoteMint: number;
    loanNoteMint: number;
};
/**
 * Accounts derived for a reserve
 */
export type reserveAccounts = {
    vault: PublicKey;
    feeNoteVault: PublicKey;
    dexOpenOrders: PublicKey;
    dexSwapTokens: PublicKey;
    loanNoteMint: PublicKey;
    depositNoteMint: PublicKey;
};
/**
 * Bump seeds used in deriving accounts for a user/client making a deposit or loan on some reserve
 */
export type clientReserveBumpSeeds = {
    deposits: number;
    loan: number;
    collateral: number;
};
/**
 * Accounts derived for a user/client making a deposit or loan on some reserve
 */
export type clientReserveAccounts = {
    deposits: PublicKey;
    loan: PublicKey;
    collateral: PublicKey;
};
/**
 * Derive all the associated accounts for a reserve. See {@link deriveReserveAccountsSync} for sync variant.
 * @param program
 * @param reserveAddress The reserve address to derive the accounts for.
 * @param tokenMint The address of the mint for the token stored in the reserve.
 * @returns - accounts and bump seeds needed to create a reserve
 */
export declare const deriveReserveAccounts: (program: Program<PsyLend>, reserveAddress: PublicKey, tokenMint: PublicKey) => Promise<{
    accounts: reserveAccounts;
    bumpSeeds: reserveBumpSeeds;
}>;
/**
 * Derive all the associated accounts for a reserve.
 * @param programId
 * @param reserveAddress
 * @param tokenMint
 * @returns
 */
export declare const deriveReserveAccountsSync: (programId: PublicKey, reserveAddress: PublicKey, tokenMint: PublicKey) => {
    accounts: reserveAccounts;
    bumpSeeds: reserveBumpSeeds;
};
export declare const deriveDepositNoteMint: (programId: PublicKey, reserveAddress: PublicKey, tokenMint: PublicKey) => Promise<[PublicKey, number]>;
export declare const deriveDepositNoteMintSync: (programId: PublicKey, reserveAddress: PublicKey, tokenMint: PublicKey) => [PublicKey, number];
export declare const deriveUserDeposits: (programId: PublicKey, reserveAddress: PublicKey, userAddress: PublicKey) => Promise<[PublicKey, number]>;
export declare const deriveUserDepositsSync: (programId: PublicKey, reserveAddress: PublicKey, userAddress: PublicKey) => [PublicKey, number];
export declare const deriveUserLoan: (programId: PublicKey, reserveAddress: PublicKey, obligationAddress: PublicKey, userAddress: PublicKey) => Promise<[PublicKey, number]>;
export declare const deriveUserLoanSync: (programId: PublicKey, reserveAddress: PublicKey, obligationAddress: PublicKey, userAddress: PublicKey) => [PublicKey, number];
export declare const deriveUserCollateral: (programId: PublicKey, reserveAddress: PublicKey, obligationAddress: PublicKey, userAddress: PublicKey) => Promise<[PublicKey, number]>;
export declare const deriveUserCollateralSync: (programId: PublicKey, reserveAddress: PublicKey, obligationAddress: PublicKey, userAddress: PublicKey) => [PublicKey, number];
/**
 * Derives the accounts used in generating a user deposit account on some reserve. See
 * {@link deriveClientReserveAccountsSync} for the sync version
 *
 * Use {@link deriveUserObligation} or {@link deriveUserObligationSync}
 * to get the user's obligation on this market first.
 * @param program
 * @param reserveAddress
 * @param obligationAddress - Derived with {@link deriveUserObligation}
 * @param userAddress
 * @returns
 */
export declare const deriveClientReserveAccounts: (program: Program<PsyLend>, reserveAddress: PublicKey, obligationAddress: PublicKey, userAddress: PublicKey) => Promise<{
    accounts: clientReserveAccounts;
    bumpSeeds: clientReserveBumpSeeds;
}>;
/**
 * Same as {@link deriveClientReserveAccounts}, but doesn't require a program, only the id
 * @param programId
 * @param reserveAddress
 * @param obligationAddress
 * @param userAddress
 * @returns
 */
export declare const deriveClientReserveAccountsAlt: (programId: PublicKey, reserveAddress: PublicKey, obligationAddress: PublicKey, userAddress: PublicKey) => Promise<{
    accounts: clientReserveAccounts;
    bumpSeeds: clientReserveBumpSeeds;
}>;
/**
 * Derives the accounts used in generating a user deposit account on some reserve.
 *
 * Use {@link deriveUserObligationSync} to get the user's obligation on this market first.
 * @param programId
 * @param reserveAddress
 * @param obligationAddress
 * @param userAddress
 * @returns
 */
export declare const deriveClientReserveAccountsSync: (programId: PublicKey, reserveAddress: PublicKey, obligationAddress: PublicKey, userAddress: PublicKey) => {
    accounts: clientReserveAccounts;
    bumpSeeds: clientReserveBumpSeeds;
};
/**
 * Returns the user's obligation for a given market. A user has just one obligation for any
 * market, and this is a PDA. The obligation is used to derive loans and collateral for different
 * reserves for that user on that market.
 *
 * See {@link deriveUserObligationSync} for sync version
 * @param program
 * @param marketAddress
 * @param userAddress
 * @returns
 */
export declare const deriveUserObligation: (program: Program<PsyLend>, marketAddress: PublicKey, userAddress: PublicKey) => Promise<{
    obligationAccount: PublicKey;
    obligationBump: number;
}>;
/**
 * Same as {@link deriveUserObligation}, but doesn't require program, just the id
 * @param programId
 * @param marketAddress
 * @param userAddress
 * @returns
 */
export declare const deriveUserObligationAlt: (programId: PublicKey, marketAddress: PublicKey, userAddress: PublicKey) => Promise<{
    obligationAccount: PublicKey;
    obligationBump: number;
}>;
/**
 * Returns the user's obligation for a given market. A user has just one obligation for any
 * market, and this is a PDA. The obligation is used to derive loans and collateral for different
 * reserves for that user on that market.
 * @param programId
 * @param marketAddress
 * @param userAddress
 * @returns
 */
export declare const deriveUserObligationSync: (programId: PublicKey, marketAddress: PublicKey, userAddress: PublicKey) => Promise<{
    obligationAccount: PublicKey;
    obligationBump: number;
}>;
export declare const deriveMarketAuthority: (program: Program<PsyLend>, market: PublicKey) => Promise<[PublicKey, number]>;
/**
 * Same as {@link deriveMarketAuthority}
 * @param programId
 * @param market
 * @returns
 */
export declare const deriveMarketAuthorityAlt: (programId: PublicKey, market: PublicKey) => Promise<[PublicKey, number]>;
export declare const deriveMarketAuthoritySync: (programId: PublicKey, market: PublicKey) => Promise<[PublicKey, number]>;
export declare const deriveReserveVault: (programId: PublicKey, reserveAddress: PublicKey) => Promise<[PublicKey, number]>;
export declare const deriveReserveVaultSync: (programId: PublicKey, reserveAddress: PublicKey) => [PublicKey, number];
export declare const deriveDiscounts: (program: Program<PsyLend>) => Promise<[PublicKey, number]>;
export declare const deriveDiscountsAlt: (programId: PublicKey) => Promise<[PublicKey, number]>;
export declare const deriveDiscountsSync: (programId: PublicKey) => [PublicKey, number];
export declare const deriveRewardTokenAccount: (program: Program<PsyLend>, marketRewardAddress: PublicKey, stateIndex: number, rewardTokenMint: PublicKey) => Promise<[PublicKey, number]>;
export declare const deriveRewardTokenAccountAlt: (programId: PublicKey, marketRewardAddress: PublicKey, stateIndex: number, rewardTokenMint: PublicKey) => Promise<[PublicKey, number]>;
export declare const deriveRewardTokenAccountSync: (programId: PublicKey, marketRewardAddress: PublicKey, stateIndex: number, rewardTokenMint: PublicKey) => [PublicKey, number];
//# sourceMappingURL=pdas.d.ts.map