/// <reference types="node" />
/// <reference types="bn.js" />
import { BN } from "@project-serum/anchor";
import { PublicKey } from "@solana/web3.js";
import { CalculationCache, PsyMarketReserveInfo, Position, ReserveStateStruct } from "./types";
export declare const MAX_RESERVES = 32;
export declare const RESERVE_INFO_SIZE = 496;
export declare const decodePositionStruct: (buff: Buffer) => Position;
/**
 * Decodes buffer (typically from an Obligation's loan or collateral buffer) into an array of Position.
 *
 * @param buff - Buffer to decode
 * @param loadAll - Load all Positions, including uninitialized Positions, if true.
 */
export declare const decodePositionsList: (buff: Buffer, loadAll?: boolean) => Position[];
/**
 * Same as {@link decodeCalculationCacheStruct}, except that reserved and CacheStruct fields
 * are not loaded. Can be used whenever only the collateral and loan values are needed, otherwise use
 * {@link decodeCalculationCacheStruct} to read the complete CalculationCache
 * @param buff
 * @returns
 */
export declare const decodeCalculationCacheInner: (buff: Buffer) => {
    collateralValue: BN;
    discountedCollateralValue: BN;
    loanValue: BN;
};
/**
 * When fetching an Obligation, the CalculationCache can be converted to a buffer and then read
 * using this function.
 *
 * Use `Buffer.from(obligation.cached as any as number[])` to convert cache to a buffer
 * @param buff
 * @returns
 */
export declare const decodeCalculationCacheStruct: (buff: Buffer) => CalculationCache;
/**
 * When fetching a ReserveAccount, the ReserveStateStruct can be converted to a buffer and then read
 * using this function.
 *
 * Use `Buffer.from(reserve.state as any as number[])` to convert Reserve state to a buffer
 * @param buff
 * @returns
 */
export declare const decodeReserveStateStruct: (buff: Buffer) => ReserveStateStruct;
/**
 * Decode a single ReserveInfo from a buffer. Values returned are in the format stored, though U192
 * Amounts are converted into a BN.
 *
 * i.e. minCollateralRatio is stored as a U192 representation which has 15 decimal places,
 * which is returned as a BN with the same decimal places.
 *
 * This function can decode the first reserve, or use {@link decodeReserveInfoStructList} to decode
 * all reserves in the buffer.
 * @param buff
 * @returns
 */
export declare const decodeReserveInfoStruct: (buff: Buffer) => PsyMarketReserveInfo;
/**
 * Decode a list of 32 ReserveInfo from a buffer, including blanks. Every Market stores up to 32
 * reserves. Blank reserves are all zeros (including the default pubkey)
 *
 * You may need to use `Buffer.from(jetMarketAccount.reserves as any as number[])` to convert Market's reserves
 * to a buffer
 * @param buff
 * @returns
 */
export declare const decodeReserveInfoStructList: (buff: Buffer) => PsyMarketReserveInfo[];
/**
 * Given a reserveInfo list loaded with {@link decodeReserveInfoStructList} from a Market, returns
 * the reserve at some index in that market.
 *
 * Useful when presented with a reserveIndex and no reserve key (such as when loading an obligation)
 * to extract the original reserve data.
 * @param reserveIndex
 * @param info
 * @returns
 */
export declare const getReserveFromIndexInReserveInfo: (reserveIndex: number, info: PsyMarketReserveInfo[]) => PublicKey;
//# sourceMappingURL=decode.d.ts.map