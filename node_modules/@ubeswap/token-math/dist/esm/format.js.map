{"version":3,"file":"format.js","sourceRoot":"","sources":["../../src/format.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n *  toFormat v2.0.0\n *  Adds a toFormat instance method to big.js or decimal.js\n *  Copyright (c) 2017 Michael Mclaughlin\n *  MIT Licence\n */\n\nimport { default as Big } from \"big.js\";\nimport { default as Decimal } from \"decimal.js-light\";\nimport { default as invariant } from \"tiny-invariant\";\n\nimport { Rounding } from \"./constants.js\";\n\nexport const toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n};\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: Big.roundDown,\n  [Rounding.ROUND_HALF_UP]: Big.roundHalfUp,\n  [Rounding.ROUND_UP]: Big.roundUp,\n};\n\n/**\n * Default number format. (no grouping)\n */\nexport const DEFAULT_NUMBER_FORMAT: Required<NumberFormat> = {\n  decimalSeparator: \".\",\n  groupSeparator: \"\",\n  groupSize: 3,\n  rounding: Rounding.ROUND_DOWN,\n};\n\n/**\n * Default number format display.\n */\nexport const DEFAULT_DISPLAY_NUMBER_FORMAT: Required<NumberFormat> = {\n  ...DEFAULT_NUMBER_FORMAT,\n  groupSeparator: \",\",\n};\n\n/**\n * Formatting options for Decimal.js.\n */\nexport interface NumberFormat {\n  decimalSeparator?: string;\n  groupSeparator?: string;\n  groupSize?: number;\n  rounding?: Rounding;\n}\n\nconst formatNum = (\n  num: {\n    toString(): string;\n    toFixed: (places: number, rounding: number) => string;\n  },\n  isNegative: boolean,\n  roundingMethod: \"fixed\" | \"significant\",\n  decimalPlaces: number,\n  {\n    decimalSeparator = DEFAULT_NUMBER_FORMAT.decimalSeparator,\n    groupSeparator = DEFAULT_NUMBER_FORMAT.groupSeparator,\n    groupSize = DEFAULT_NUMBER_FORMAT.groupSize,\n    rounding = DEFAULT_NUMBER_FORMAT.rounding,\n  }: NumberFormat = DEFAULT_NUMBER_FORMAT\n) => {\n  const decInternal = num as {\n    e?: unknown;\n  };\n  if (!decInternal.e && decInternal.e !== 0) {\n    return num.toString(); // Infinity/NaN\n  }\n\n  const [integerPart, fractionPart] = num\n    .toFixed(\n      decimalPlaces,\n      roundingMethod === \"fixed\"\n        ? toFixedRounding[rounding]\n        : toSignificantRounding[rounding]\n    )\n    .split(\".\");\n\n  invariant(integerPart);\n\n  let displayIntegerPart: string = integerPart;\n  if (groupSeparator) {\n    // integer digits\n    const intd = isNegative ? integerPart.slice(1) : integerPart;\n    // number of integer digits\n    const nd = intd.length;\n    if (groupSize > 0 && nd > 0) {\n      let i = nd % groupSize || groupSize;\n      displayIntegerPart = intd.slice(0, i);\n      for (; i < nd; i += groupSize) {\n        displayIntegerPart += groupSeparator + intd.slice(i, i + groupSize);\n      }\n      if (isNegative) {\n        displayIntegerPart = \"-\" + displayIntegerPart;\n      }\n    }\n  }\n\n  if (fractionPart) {\n    return displayIntegerPart + (decimalSeparator ?? \"\") + fractionPart;\n  } else {\n    return displayIntegerPart;\n  }\n};\n\n/*\n *  Returns a string representing the value of this big number in fixed-point notation to `dp`\n *  decimal places using rounding mode `rm`, and formatted according to the properties of the\n * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\n *\n *  Example:\n *\n *  x = new Decimal('123456789.987654321')\n *\n *  // Add a format object to the constructor...\n *  Decimal.format = {\n *    decimalSeparator: '.',\n *    groupSeparator: ',',\n *    groupSize: 3,\n *    secondaryGroupSize: 0,\n *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\n *    fractionGroupSize : 0\n *  }\n *\n *  x.toFormat();                // 123,456,789.987654321\n *  x.toFormat(2, 1);            // 123,456,789.98\n *\n *  // And/or add a format object to the big number itself...\n *  x.format = {\n *    decimalSeparator: ',',\n *    groupSeparator: '',\n *  }\n *\n *  x.toFormat();                // 123456789,987654321\n *\n *  format = {\n *    decimalSeparator: '.',\n *    groupSeparator: ' ',\n *    groupSize: 3,\n *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\n *    fractionGroupSize : 5\n *  }\n *  // And/or pass a format object to the method call.\n *  x.toFormat(format);          // 123 456 789.98765 4321\n *  x.toFormat(4, format);       // 123 456 789.9877\n *  x.toFormat(2, 1, format);    // 123 456 789.98\n *\n *  [dp] {number} Decimal places. Integer.\n *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\n *  [fmt] {Object} A format object.\n *\n */\nexport const formatDecimal = (\n  dec: Decimal,\n  decimalPlaces: number,\n  fmt: NumberFormat = DEFAULT_NUMBER_FORMAT\n) => {\n  return formatNum(dec, dec.isNegative(), \"significant\", decimalPlaces, fmt);\n};\n\n/*\n *  Returns a string representing the value of this big number in fixed-point notation to `dp`\n *  decimal places using rounding mode `rm`, and formatted according to the properties of the\n * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\n *\n *  Example:\n *\n *  x = new Decimal('123456789.987654321')\n *\n *  // Add a format object to the constructor...\n *  Decimal.format = {\n *    decimalSeparator: '.',\n *    groupSeparator: ',',\n *    groupSize: 3,\n *    secondaryGroupSize: 0,\n *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\n *    fractionGroupSize : 0\n *  }\n *\n *  x.toFormat();                // 123,456,789.987654321\n *  x.toFormat(2, 1);            // 123,456,789.98\n *\n *  // And/or add a format object to the big number itself...\n *  x.format = {\n *    decimalSeparator: ',',\n *    groupSeparator: '',\n *  }\n *\n *  x.toFormat();                // 123456789,987654321\n *\n *  format = {\n *    decimalSeparator: '.',\n *    groupSeparator: ' ',\n *    groupSize: 3,\n *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\n *    fractionGroupSize : 5\n *  }\n *  // And/or pass a format object to the method call.\n *  x.toFormat(format);          // 123 456 789.98765 4321\n *  x.toFormat(4, format);       // 123 456 789.9877\n *  x.toFormat(2, 1, format);    // 123 456 789.98\n *\n *  [dp] {number} Decimal places. Integer.\n *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\n *  [fmt] {Object} A format object.\n *\n */\nexport const formatBig = (\n  big: Big,\n  decimalPlaces: number,\n  fmt: NumberFormat = DEFAULT_NUMBER_FORMAT\n) => {\n  return formatNum(big, big.s === -1, \"fixed\", decimalPlaces, fmt);\n};\n"]}