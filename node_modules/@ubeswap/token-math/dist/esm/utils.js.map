{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,IAAI,IAAI,EAAE,MAAM,MAAM,CAAC;AAEvC,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAYrC,MAAM,YAAY,GAAG,EAAE,CAAC;AAExB;;GAEG;AACH,MAAM,CAAC,MAAM,IAAI,GAAG,CAAC,GAAW,EAAE,EAAE;IAClC,OAAO,CACL,GAAG,KAAK,IAAI;QACZ,OAAO,GAAG,KAAK,QAAQ;QACtB,GAAG,CAAC,WAAqC,CAAC,QAAQ,KAAK,YAAY;QACpE,KAAK,CAAC,OAAO,CAAE,GAA2B,CAAC,KAAK,CAAC,CAClD,CAAC;AACJ,CAAC,CAAC;AAOF;;;;GAIG;AACH,MAAM,UAAU,cAAc,CAAC,SAAoB;IACjD,OAAO,SAAS,YAAY,IAAI;QAC9B,CAAC,CAAC,SAAS;QACX,CAAC,CAAC,OAAO,SAAS,KAAK,QAAQ,IAAI,OAAO,SAAS,KAAK,QAAQ;YAChE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;YACxB,CAAC,CAAC,OAAO,SAAS,KAAK,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC;gBAClD,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;gBACnC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AAC7B,CAAC;AAED,MAAM,uBAAuB,GAAyB,EAAE,CAAC;AAEzD;;;;GAIG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,QAAgB,EAAQ,EAAE;IAC9D,MAAM,MAAM,GAAG,uBAAuB,CAAC,QAAQ,CAAC,CAAC;IACjD,IAAI,MAAM,EAAE;QACV,OAAO,MAAM,CAAC;KACf;IACD,IAAI,QAAQ,IAAI,EAAE,EAAE;QAClB,OAAO,CAAC,uBAAuB,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,QAAQ,CAAC,CAAC,CAAC;KAC1E;IACD,OAAO,CAAC,uBAAuB,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,YAAY,CAC3D,GAAG,EACH,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CACtB,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { default as JSBI } from \"jsbi\";\n\nimport { TEN } from \"./constants.js\";\n\n/**\n * A type that is structurally compatible with BN.\n */\nexport type BNLike = {\n  toString(base?: number | \"hex\", length?: number): string;\n  gcd(b: BNLike): BNLike;\n  egcd(b: BNLike): { a: BNLike; b: BNLike; gcd: BNLike };\n  invm(b: BNLike): BNLike;\n};\n\nconst BN_WORD_SIZE = 26;\n\n/**\n * Checks if an object is a BN.\n */\nexport const isBN = (num: BNLike) => {\n  return (\n    num !== null &&\n    typeof num === \"object\" &&\n    (num.constructor as { wordSize?: number }).wordSize === BN_WORD_SIZE &&\n    Array.isArray((num as { words?: unknown }).words)\n  );\n};\n\n/**\n * Bigint-like number.\n */\nexport type BigintIsh = JSBI | string | number | bigint | BNLike;\n\n/**\n * Parses a {@link BigintIsh} into a {@link JSBI}.\n * @param bigintIsh\n * @returns\n */\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === \"string\" || typeof bigintIsh === \"number\"\n    ? JSBI.BigInt(bigintIsh)\n    : typeof bigintIsh === \"bigint\" || isBN(bigintIsh)\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh);\n}\n\nconst decimalMultipliersCache: Record<number, JSBI> = {};\n\n/**\n * Creates the multiplier for an amount of decimals.\n * @param decimals\n * @returns\n */\nexport const makeDecimalMultiplier = (decimals: number): JSBI => {\n  const cached = decimalMultipliersCache[decimals];\n  if (cached) {\n    return cached;\n  }\n  if (decimals <= 18) {\n    return (decimalMultipliersCache[decimals] = JSBI.BigInt(10 ** decimals));\n  }\n  return (decimalMultipliersCache[decimals] = JSBI.exponentiate(\n    TEN,\n    JSBI.BigInt(decimals)\n  ));\n};\n"]}