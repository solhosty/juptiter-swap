{"version":3,"file":"price.js","sourceRoot":"","sources":["../../src/price.ts"],"names":[],"mappings":";;;;AAAA,4EAAsD;AAItD,+CAAyC;AAIzC,yCAAmE;AAEnE,MAAsB,KAA0B,SAAQ,sBAAQ;IAK9D;;;;;;;OAOG;IACH,YACE,YAAe,EACf,aAAgB,EAChB,WAAsB,EACtB,SAAoB;QAEpB,KAAK,CAAC,IAAA,yBAAc,EAAC,SAAS,CAAC,EAAE,IAAA,yBAAc,EAAC,WAAW,CAAC,CAAC,CAAC;QAE9D,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,MAAM,GAAG,IAAI,sBAAQ,CACxB,IAAA,gCAAqB,EAAC,YAAY,CAAC,QAAQ,CAAC,EAC5C,IAAA,gCAAqB,EAAC,aAAa,CAAC,QAAQ,CAAC,CAC9C,CAAC;IACJ,CAAC;IAcD,IAAI,GAAG;QACL,OAAO,IAAI,sBAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACxD,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAC,GAAG,CACb,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,WAAW,CACjB,CAAC;IACJ,CAAC;IAEQ,QAAQ,CAAC,KAAW;QAC3B,IAAA,wBAAS,EACP,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,EAC7C,4BAA4B,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,KAAK,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,CACjG,CAAC;QACF,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC,GAAG,CACb,IAAI,CAAC,YAAY,EACjB,KAAK,CAAC,aAAa,EACnB,QAAQ,CAAC,WAAW,EACpB,QAAQ,CAAC,SAAS,CACnB,CAAC;IACJ,CAAC;IAED,sCAAsC;IACtC,KAAK,CAA2B,WAAc;QAC5C,IAAA,wBAAS,EACP,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAC3C,yBAAyB,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,CAC5F,CAAC;QACF,OAAO,WAAW,CAAC,GAAG,CACpB,IAAI,CAAC,aAAa,EAClB,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,QAAQ,CACzC,CAAC;IACJ,CAAC;IAEQ,aAAa,CACpB,iBAAiB,GAAG,CAAC,EACrB,MAAqB,EACrB,QAAmB;QAEnB,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,iBAAiB,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC1E,CAAC;IAEQ,OAAO,CACd,aAAa,GAAG,CAAC,EACjB,MAAqB,EACrB,QAAmB;QAEnB,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAChE,CAAC;IAED;;;;;OAKG;IACH,YAAY,CACV,SAAuB,EAAE,cAAc,EAAE,EAAE,EAAE,EAC7C,QAAmB;QAEnB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IACrE,CAAC;IAED,IAAa,QAAQ;QACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;IAChC,CAAC;CACF;AApHD,sBAoHC","sourcesContent":["import { default as invariant } from \"tiny-invariant\";\n\nimport type { Rounding } from \"./constants.js\";\nimport type { NumberFormat } from \"./format.js\";\nimport { Fraction } from \"./fraction.js\";\nimport type { Token } from \"./token.js\";\nimport type { TokenAmount } from \"./tokenAmount.js\";\nimport type { BigintIsh } from \"./utils.js\";\nimport { makeDecimalMultiplier, parseBigintIsh } from \"./utils.js\";\n\nexport abstract class Price<T extends Token<T>> extends Fraction {\n  readonly baseCurrency: T; // input i.e. denominator\n  readonly quoteCurrency: T; // output i.e. numerator\n  readonly scalar: Fraction; // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Constructs a Price.\n   *\n   * denominator and numerator _must_ be raw, i.e. in the native representation\n   *\n   * @param denominator Units of base currency. E.g. 1 BTC would be 1_00000000\n   * @param numerator Units of quote currency. E.g. $30k at 6 decimals would be 30_000_000000\n   */\n  constructor(\n    baseCurrency: T,\n    quoteCurrency: T,\n    denominator: BigintIsh,\n    numerator: BigintIsh\n  ) {\n    super(parseBigintIsh(numerator), parseBigintIsh(denominator));\n\n    this.baseCurrency = baseCurrency;\n    this.quoteCurrency = quoteCurrency;\n    this.scalar = new Fraction(\n      makeDecimalMultiplier(baseCurrency.decimals),\n      makeDecimalMultiplier(quoteCurrency.decimals)\n    );\n  }\n\n  /**\n   * Create a new Price.\n   * @param token\n   * @param amount\n   */\n  abstract new(\n    baseCurrency: T,\n    quoteCurrency: T,\n    denominator: BigintIsh,\n    numerator: BigintIsh\n  ): this;\n\n  get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator);\n  }\n\n  get adjusted(): Fraction {\n    return super.multiply(this.scalar);\n  }\n\n  override invert(): this {\n    return this.new(\n      this.quoteCurrency,\n      this.baseCurrency,\n      this.numerator,\n      this.denominator\n    );\n  }\n\n  override multiply(other: this): this {\n    invariant(\n      this.quoteCurrency.equals(other.baseCurrency),\n      `multiply token mismatch: ${this.quoteCurrency.toString()} !== ${other.baseCurrency.toString()}`\n    );\n    const fraction = super.multiply(other);\n    return this.new(\n      this.baseCurrency,\n      other.quoteCurrency,\n      fraction.denominator,\n      fraction.numerator\n    );\n  }\n\n  // performs floor division on overflow\n  quote<B extends TokenAmount<T>>(tokenAmount: B): B {\n    invariant(\n      tokenAmount.token.equals(this.baseCurrency),\n      `quote token mismatch: ${tokenAmount.token.toString()} !== ${this.baseCurrency.toString()}`\n    );\n    return tokenAmount.new(\n      this.quoteCurrency,\n      super.multiply(tokenAmount.raw).quotient\n    );\n  }\n\n  override toSignificant(\n    significantDigits = 6,\n    format?: NumberFormat,\n    rounding?: Rounding\n  ): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\n  }\n\n  override toFixed(\n    decimalPlaces = 4,\n    format?: NumberFormat,\n    rounding?: Rounding\n  ): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\n  }\n\n  /**\n   * Returns the price in terms of the quote currency.\n   * @param format\n   * @param rounding\n   * @returns\n   */\n  toFixedQuote(\n    format: NumberFormat = { groupSeparator: \"\" },\n    rounding?: Rounding\n  ): string {\n    return this.toFixed(this.quoteCurrency.decimals, format, rounding);\n  }\n\n  override get asNumber(): number {\n    return this.adjusted.asNumber;\n  }\n}\n"]}