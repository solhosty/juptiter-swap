{"version":3,"file":"percent.js","sourceRoot":"","sources":["../../src/percent.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Rounding } from \"./constants.js\";\nimport type { NumberFormat } from \"./format.js\";\nimport type { FractionObject } from \"./fraction.js\";\nimport { Fraction } from \"./fraction.js\";\nimport type { BigintIsh } from \"./utils.js\";\n\nconst ONE_HUNDRED = new Fraction(100);\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator);\n}\n\n/**\n * Serializable representation of a {@link Percent}.\n */\nexport interface PercentObject extends FractionObject {\n  readonly isPercent: true;\n}\n\nexport class Percent extends Fraction implements PercentObject {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  readonly isPercent = true as const;\n\n  /**\n   * Zero percent.\n   */\n  static override readonly ZERO: Percent = new Percent(0);\n\n  /**\n   * 1%\n   */\n  static override readonly ONE: Percent = new Percent(1, 100);\n\n  /**\n   * 100% (1/1)\n   */\n  static readonly ONE_HUNDRED: Percent = new Percent(1);\n\n  /**\n   * Parses a {@link Percent} from a float.\n   * @param number Number to parse. (100% is 1.00)\n   * @param decimals Number of decimals of precision. (default 10)\n   * @returns Percent\n   */\n  static override fromNumber(number: number, decimals = 10): Percent {\n    const frac = Fraction.fromNumber(number, decimals);\n    return new Percent(frac.numerator, frac.denominator);\n  }\n\n  /**\n   * Constructs an {@link Percent} from a {@link PercentObject}.\n   * @param other\n   * @returns\n   */\n  static override fromObject(other: PercentObject): Percent {\n    if (other instanceof Percent) {\n      return other;\n    }\n    return toPercent(Fraction.fromObject(other));\n  }\n\n  /**\n   * JSON representation of the {@link Percent}.\n   */\n  override toJSON(): PercentObject {\n    return {\n      ...super.toJSON(),\n      isPercent: true,\n    };\n  }\n\n  /**\n   * Creates a {@link Percent} from a {@link Fraction}.\n   */\n  static fromFraction(fraction: Fraction): Percent {\n    return toPercent(fraction);\n  }\n\n  /**\n   * Parses a {@link Percent} from a given number of bps.\n   * @returns Percent\n   */\n  static fromBPS(bps: BigintIsh): Percent {\n    return new Percent(bps, 10_000);\n  }\n\n  override add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other));\n  }\n\n  override subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other));\n  }\n\n  override multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other));\n  }\n\n  override divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other));\n  }\n\n  /**\n   * Swaps the numerator and denominator of the {@link Percent}.\n   * @returns\n   */\n  override invert(): Percent {\n    return new Percent(this.denominator, this.numerator);\n  }\n\n  override toSignificant(\n    significantDigits = 5,\n    format?: NumberFormat,\n    rounding?: Rounding\n  ): string {\n    return super\n      .multiply(ONE_HUNDRED)\n      .toSignificant(significantDigits, format, rounding);\n  }\n\n  override toFixed(\n    decimalPlaces = 2,\n    format?: NumberFormat,\n    rounding?: Rounding\n  ): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\n  }\n\n  /**\n   * Returns true if the other object is a {@link Percent}.\n   *\n   * @param other\n   * @returns\n   */\n  static isPercent(other: unknown): other is Percent {\n    return (\n      Fraction.isFraction(other) &&\n      (other as unknown as Record<string, unknown>)?.isPercent === true\n    );\n  }\n}\n"]}