{"version":3,"file":"tokenAmount.js","sourceRoot":"","sources":["../../src/tokenAmount.ts"],"names":[],"mappings":"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","sourcesContent":["import { default as Big } from \"big.js\";\nimport { default as JSBI } from \"jsbi\";\nimport { default as invariant } from \"tiny-invariant\";\n\nimport { MAX_U64, MAX_U256, Rounding, ZERO } from \"./constants.js\";\nimport type { NumberFormat } from \"./format.js\";\nimport { formatBig } from \"./format.js\";\nimport { Fraction } from \"./fraction.js\";\nimport { Percent } from \"./percent.js\";\nimport type { Token } from \"./token.js\";\nimport type { BigintIsh } from \"./utils.js\";\nimport { makeDecimalMultiplier, parseBigintIsh } from \"./utils.js\";\n\n/**\n * Gets the separator of the provided locale.\n *\n * Source: {@link https://stackoverflow.com/questions/1074660/with-a-browser-how-do-i-know-which-decimal-separator-does-the-operating-system}\n *\n * @param separatorType\n * @param locale\n * @returns\n */\nexport const getSeparator = (\n  separatorType: \"decimal\" | \"group\",\n  locale?: string\n) => {\n  const numberWithDecimalSeparator = 1000.1;\n  return Intl.NumberFormat(locale)\n    .formatToParts(numberWithDecimalSeparator)\n    .find((part) => part.type === separatorType)?.value;\n};\n\n/**\n * Gets the decimal separator of the provided locale.\n *\n * Source: {@link https://stackoverflow.com/questions/1074660/with-a-browser-how-do-i-know-which-decimal-separator-does-the-operating-system}\n *\n * @param locale\n * @returns\n */\nexport const getDecimalSeparator = (locale?: string) => {\n  return getSeparator(\"decimal\", locale);\n};\n\n/**\n * Gets the group separator of the provided locale.\n *\n * Source: {@link https://stackoverflow.com/questions/1074660/with-a-browser-how-do-i-know-which-decimal-separator-does-the-operating-system}\n *\n * @param locale\n * @returns\n */\nexport const getGroupSeparator = (locale?: string) => {\n  return getSeparator(\"group\", locale);\n};\n\n/**\n * The decimal separator of the default locale.\n */\nexport const DEFAULT_LOCALE_DECIMAL_SEPARATOR = getDecimalSeparator() ?? \".\";\n\n/**\n * The group separator of the default locale.\n */\nexport const DEFAULT_LOCALE_GROUP_SEPARATOR = getGroupSeparator() ?? \",\";\n\n/**\n * The default decimal separator.\n */\nexport const DEFAULT_DECIMAL_SEPARATOR = \".\";\n\n/**\n * The default group separator.\n */\nexport const DEFAULT_GROUP_SEPARATOR = \",\";\n\n/**\n * Parses a token amount from a decimal representation.\n * @param token\n * @param uiAmount\n * @returns\n */\nexport const parseAmountFromString = <Tk extends Token<Tk>>(\n  token: Tk,\n  uiAmount: string,\n  decimalSeparator = DEFAULT_DECIMAL_SEPARATOR,\n  groupSeparator = DEFAULT_GROUP_SEPARATOR\n): JSBI => {\n  const parts = uiAmount.split(decimalSeparator);\n  if (parts.length === 0) {\n    throw new Error(\"empty number\");\n  }\n  const [wholeRaw, fractionRaw] = parts;\n  const whole = wholeRaw\n    ? JSBI.BigInt(wholeRaw.split(groupSeparator).join(\"\"))\n    : ZERO;\n  const fraction = fractionRaw\n    ? JSBI.BigInt(\n        fractionRaw.slice(0, token.decimals) +\n          Array(token.decimals).fill(\"0\").slice(fractionRaw.length).join(\"\")\n      )\n    : ZERO;\n  const combined = JSBI.add(\n    JSBI.multiply(whole, makeDecimalMultiplier(token.decimals)),\n    fraction\n  );\n  return combined;\n};\n\n/**\n * Thrown when a token amount overflows.\n */\nexport class TokenAmountOverflow extends RangeError {\n  constructor(type: string, amount: JSBI) {\n    super(`Token amount overflows ${type}: ${amount.toString()}`);\n  }\n}\n\n/**\n * Thrown when a token amount underflows.\n */\nexport class TokenAmountUnderflow extends RangeError {\n  constructor(amount: JSBI) {\n    super(`Token amount must be greater than zero: ${amount.toString()}`);\n  }\n}\n\n/**\n * Validates that a number falls within the range of u64.\n * @param value\n */\nexport function validateU64(value: JSBI): void {\n  if (!JSBI.greaterThanOrEqual(value, ZERO)) {\n    throw new TokenAmountUnderflow(value);\n  }\n  if (!JSBI.lessThanOrEqual(value, MAX_U64)) {\n    throw new TokenAmountOverflow(\"u64\", value);\n  }\n}\n\n/**\n * Validates that a number falls within the range of u256.\n * @param value\n */\nexport function validateU256(value: JSBI): void {\n  if (!JSBI.greaterThanOrEqual(value, ZERO)) {\n    throw new TokenAmountUnderflow(value);\n  }\n  if (!JSBI.lessThanOrEqual(value, MAX_U256)) {\n    throw new TokenAmountOverflow(\"u256\", value);\n  }\n}\n\n/**\n * Uint formatting options.\n */\nexport interface IFormatUint {\n  /**\n   * If specified, format this according to `toLocaleString`\n   */\n  numberFormatOptions?: Intl.NumberFormatOptions;\n  /**\n   * Locale of the number\n   */\n  locale?: string;\n}\n\nexport const stripTrailingZeroes = (num: string): string => {\n  const [head, tail, ...rest] = num.split(\".\");\n  if (rest.length > 0 || !head) {\n    console.warn(`Invalid number passed to stripTrailingZeroes: ${num}`);\n    return num;\n  }\n  if (!tail) {\n    return num;\n  }\n  const newTail = tail.replace(/0+$/, \"\");\n  return newTail === \"\" ? head : `${head}.${newTail}`;\n};\n\n/**\n * Represents a quantity of tokens.\n */\nexport abstract class TokenAmount<T extends Token<T>> extends Fraction {\n  /**\n   * amount _must_ be raw, i.e. in the native representation\n   */\n  constructor(\n    readonly token: T,\n    amount: BigintIsh,\n    validate?: (value: JSBI) => void\n  ) {\n    const parsedAmount = parseBigintIsh(amount);\n    validate?.(parsedAmount);\n\n    super(parsedAmount, makeDecimalMultiplier(token.decimals));\n    this.token = token;\n  }\n\n  /**\n   * Create a new TokenAmount.\n   * @param token\n   * @param amount\n   */\n  abstract new(token: T, amount: BigintIsh): this;\n\n  withAmount(amount: BigintIsh): this {\n    return this.new(this.token, amount);\n  }\n\n  get raw(): JSBI {\n    return this.numerator;\n  }\n\n  override toSignificant(\n    significantDigits = 6,\n    format?: NumberFormat,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding);\n  }\n\n  override toFixed(\n    decimalPlaces: number = this.token.decimals,\n    format?: NumberFormat,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.token.decimals, \"DECIMALS\");\n    return super.toFixed(decimalPlaces, format, rounding);\n  }\n\n  toExact(format: NumberFormat = { groupSeparator: \"\" }): string {\n    return formatBig(\n      new Big(this.numerator.toString()).div(this.denominator.toString()),\n      this.token.decimals,\n      format\n    );\n  }\n\n  override add(other: this): this {\n    invariant(\n      this.token.equals(other.token),\n      `add token mismatch: ${this.token.toString()} !== ${other.token.toString()}`\n    );\n    return this.withAmount(JSBI.add(this.raw, other.raw));\n  }\n\n  override subtract(other: this): this {\n    invariant(\n      this.token.equals(other.token),\n      `subtract token mismatch: ${this.token.toString()} !== ${other.token.toString()}`\n    );\n    return this.withAmount(JSBI.subtract(this.raw, other.raw));\n  }\n\n  /**\n   * Gets this TokenAmount as a percentage of the other TokenAmount.\n   * @param other\n   * @returns\n   */\n  percentOf(other: this): Percent {\n    invariant(\n      this.token.equals(other.token),\n      `percentOf token mismatch: ${this.token.toString()} !== ${other.token.toString()}`\n    );\n    const frac = this.divide(other);\n    return new Percent(frac.numerator, frac.denominator);\n  }\n\n  /**\n   * Gets this TokenAmount as a percentage of the other TokenAmount.\n   * @param other\n   * @returns\n   */\n  divideBy(other: Fraction): Percent {\n    const frac = this.divide(other);\n    return new Percent(frac.numerator, frac.denominator);\n  }\n\n  /**\n   * Multiplies this token amount by a fraction.\n   * WARNING: this loses precision\n   * @param percent\n   * @returns\n   */\n  scale(fraction: Fraction): this {\n    return this.withAmount(fraction.asFraction.multiply(this.raw).toFixed(0));\n  }\n\n  /**\n   * Reduces this token amount by a percent.\n   * WARNING: this loses precision\n   * @param percent\n   * @returns\n   */\n  reduceBy(percent: Percent): this {\n    return this.scale(Percent.ONE_HUNDRED.subtract(percent));\n  }\n\n  /**\n   * Formats the token amount quantity with units.\n   *\n   * This function is not locale-specific: it hardcodes \"en-US\"-like behavior.\n   *\n   * @returns\n   */\n  formatUnits(): string {\n    return `${stripTrailingZeroes(\n      this.toExact({\n        groupSeparator: DEFAULT_GROUP_SEPARATOR,\n        groupSize: 3,\n        decimalSeparator: DEFAULT_DECIMAL_SEPARATOR,\n      })\n    )} ${this.token.symbol}`;\n  }\n\n  /**\n   * Formats this number using Intl.NumberFormatOptions\n   * @param param0\n   * @returns\n   */\n  format({ numberFormatOptions, locale }: IFormatUint = {}): string {\n    return `${\n      numberFormatOptions !== undefined\n        ? this.asNumber.toLocaleString(locale, numberFormatOptions)\n        : stripTrailingZeroes(this.toFixed(this.token.decimals))\n    }`;\n  }\n\n  /**\n   * Gets the value of this {@link TokenAmount} as a number.\n   */\n  override get asNumber(): number {\n    return parseFloat(this.toExact());\n  }\n\n  /**\n   * Returns true if the other object is a {@link TokenAmount}.\n   *\n   * @param other\n   * @returns\n   */\n  static isTokenAmount<T extends Token<T>, A extends TokenAmount<T>>(\n    other: unknown\n  ): other is A {\n    return (\n      Fraction.isFraction(other) &&\n      !!(other as unknown as Record<string, unknown>)?.token\n    );\n  }\n\n  // ----------------------------------------------------------------\n  // DEPRECATED FUNCTIONS\n  // ----------------------------------------------------------------\n\n  /**\n   * Gets this TokenAmount as a percentage of the other TokenAmount.\n   * @param other\n   * @deprecated use {@link percentOf}\n   * @returns\n   */\n  divideByAmount(other: this): Percent {\n    return this.percentOf(other);\n  }\n\n  /**\n   * Multiplies this token amount by a fraction.\n   * WARNING: this loses precision\n   * @param percent\n   * @deprecated use {@link scale}\n   * @returns\n   */\n  multiplyBy(fraction: Fraction): this {\n    return this.scale(fraction);\n  }\n}\n"]}