"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ORDER_SIZE = exports.OrderBook = exports.OB_LAYOUT = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
const buffer_layout_1 = require("@solana/buffer-layout");
const base_1 = require("./base");
const OB_HEADER_LAYOUT = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)("flag"), (0, buffer_layout_1.u32)("len")], "header");
const ORDER_LAYOUT = (0, buffer_layout_1.struct)([
    (0, base_1.u128)("key"),
    (0, base_1.publicKeyLayout)("owner"),
    (0, base_1.u64)("quantity"),
    (0, base_1.u64)("clientOrderId"),
    (0, buffer_layout_1.u8)("feeTier"),
    (0, base_1.u64)("total"),
]);
exports.OB_LAYOUT = (0, buffer_layout_1.struct)([
    OB_HEADER_LAYOUT,
    (0, buffer_layout_1.seq)(ORDER_LAYOUT, (0, buffer_layout_1.offset)(
    // @ts-expect-error
    OB_HEADER_LAYOUT.layoutFor("len"), OB_HEADER_LAYOUT.offsetOf("len") - OB_HEADER_LAYOUT.span), "nodes"),
]);
class OrderBook {
    constructor(header, nodes) {
        this.header = header;
        this.nodes = nodes || [];
    }
    get isDescending() {
        return this.header.flag == 1 ? true : false;
    }
    static decode(buffer) {
        return exports.OB_LAYOUT.decode(buffer);
    }
    static getPriceFromKey(key) {
        return key.ushrn(64);
    }
    get(searchKey) {
        return this.nodes.find((n) => n.key.eq(searchKey));
    }
    get items() {
        return this.nodes;
    }
    allItems(descending = false) {
        return descending != this.isDescending
            ? this.nodes.slice().reverse()
            : this.nodes;
    }
    find(clientOrderId) {
        if (!(clientOrderId instanceof bn_js_1.default)) {
            clientOrderId = new bn_js_1.default(clientOrderId);
        }
        return this.nodes.find((n) => n.clientOrderId.eq(clientOrderId));
    }
    findMinMax(isMax) {
        return this.allItems(isMax)[0] || null;
    }
}
exports.OrderBook = OrderBook;
(0, base_1.setLayoutDecoder)(exports.OB_LAYOUT, ({ header, nodes }) => new OrderBook(header, nodes));
exports.ORDER_SIZE = ORDER_LAYOUT.span;
