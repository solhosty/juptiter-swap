"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setLayoutEncoder = exports.setLayoutDecoder = exports.u128 = exports.u64 = exports.publicKeyLayout = exports.publicKey = void 0;
const buffer_layout_1 = require("@solana/buffer-layout");
const web3_js_1 = require("@solana/web3.js");
const bn_js_1 = __importDefault(require("bn.js"));
class PublicKeyLayout extends buffer_layout_1.Layout {
    constructor(property) {
        const layout = (0, buffer_layout_1.blob)(32);
        super(layout.span, property);
        this.layout = layout;
    }
    getSpan(b, offset) {
        return this.layout.getSpan(b, offset);
    }
    decode(b, offset) {
        return new web3_js_1.PublicKey(this.layout.decode(b, offset));
    }
    encode(src, b, offset) {
        return this.layout.encode(src.toBuffer(), b, offset);
    }
}
/**
 * Layout for a public key
 */
const publicKey = (property) => new PublicKeyLayout(property);
exports.publicKey = publicKey;
function publicKeyLayout(property) {
    return new PublicKeyLayout(property);
}
exports.publicKeyLayout = publicKeyLayout;
class BNLayout extends buffer_layout_1.Blob {
    decode(b, offset) {
        return new bn_js_1.default(super.decode(b, offset), 10, "le");
    }
    encode(src, b, offset) {
        return super.encode(src.toArrayLike(Buffer, "le", this.span), b, offset);
    }
}
function u64(property) {
    return new BNLayout(8, property);
}
exports.u64 = u64;
function u128(property) {
    return new BNLayout(16, property);
}
exports.u128 = u128;
function setLayoutDecoder(layout, decoder) {
    const originalDecode = layout.decode;
    layout.decode = function decode(b, offset = 0) {
        return decoder(originalDecode.call(this, b, offset));
    };
}
exports.setLayoutDecoder = setLayoutDecoder;
function setLayoutEncoder(layout, encoder) {
    const originalEncode = layout.encode;
    layout.encode = function encode(src, b, offset) {
        return originalEncode.call(this, encoder(src), b, offset);
    };
    return layout;
}
exports.setLayoutEncoder = setLayoutEncoder;
