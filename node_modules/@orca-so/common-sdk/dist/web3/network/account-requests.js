"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMultipleAccounts = exports.getMultipleParsedAccounts = exports.getParsedAccount = void 0;
const tiny_invariant_1 = __importDefault(require("tiny-invariant"));
const address_util_1 = require("../address-util");
function getParsedAccount(connection, address, parser) {
    return __awaiter(this, void 0, void 0, function* () {
        const value = yield connection.getAccountInfo(address_util_1.AddressUtil.toPubKey(address));
        return parser.parse(value === null || value === void 0 ? void 0 : value.data);
    });
}
exports.getParsedAccount = getParsedAccount;
function getMultipleParsedAccounts(connection, addresses, parser) {
    return __awaiter(this, void 0, void 0, function* () {
        if (addresses.length === 0) {
            return [];
        }
        const values = yield getMultipleAccounts(connection, address_util_1.AddressUtil.toPubKeys(addresses));
        const results = values
            .map((value) => parser.parse(value === null || value === void 0 ? void 0 : value.data))
            .filter((value) => value !== undefined);
        (0, tiny_invariant_1.default)(results.length === addresses.length, "not enough results fetched");
        return results;
    });
}
exports.getMultipleParsedAccounts = getMultipleParsedAccounts;
function getMultipleAccounts(connection, addresses) {
    return __awaiter(this, void 0, void 0, function* () {
        if (addresses.length === 0) {
            return [];
        }
        const responses = [];
        const chunk = 100; // getMultipleAccounts has limitation of 100 accounts per request
        for (let i = 0; i < addresses.length; i += chunk) {
            const addressChunk = addresses.slice(i, i + chunk);
            const res = connection.getMultipleAccountsInfo(address_util_1.AddressUtil.toPubKeys(addressChunk), connection.commitment);
            responses.push(res);
        }
        const combinedResult = (yield Promise.all(responses)).flat();
        (0, tiny_invariant_1.default)(combinedResult.length === addresses.length, "getMultipleAccounts not enough results");
        return combinedResult;
    });
}
exports.getMultipleAccounts = getMultipleAccounts;
