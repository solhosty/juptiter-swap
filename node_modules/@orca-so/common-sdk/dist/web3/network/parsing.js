"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.staticImplements = exports.ParsableMintInfo = exports.ParsableTokenAccountInfo = void 0;
const web3_js_1 = require("@solana/web3.js");
const spl_token_1 = require("@solana/spl-token");
const token_util_1 = require("../token-util");
/**
 * @category Parsables
 */
let ParsableTokenAccountInfo = class ParsableTokenAccountInfo {
    constructor() { }
    static parse(data) {
        if (!data) {
            return null;
        }
        try {
            return token_util_1.TokenUtil.deserializeTokenAccount(data);
        }
        catch (e) {
            console.error(`error while parsing TokenAccount: ${e}`);
            return null;
        }
    }
};
ParsableTokenAccountInfo = __decorate([
    staticImplements()
], ParsableTokenAccountInfo);
exports.ParsableTokenAccountInfo = ParsableTokenAccountInfo;
/**
 * @category Parsables
 */
let ParsableMintInfo = class ParsableMintInfo {
    constructor() { }
    static parse(data) {
        if (!data) {
            return null;
        }
        try {
            if (data.byteLength !== spl_token_1.MintLayout.span) {
                throw new Error("Invalid data length for MintInfo");
            }
            const buffer = spl_token_1.MintLayout.decode(data);
            const mintInfo = {
                mintAuthority: buffer.mintAuthorityOption === 0 ? null : new web3_js_1.PublicKey(buffer.mintAuthority),
                supply: spl_token_1.u64.fromBuffer(buffer.supply),
                decimals: buffer.decimals,
                isInitialized: buffer.isInitialized !== 0,
                freezeAuthority: buffer.freezeAuthorityOption === 0 ? null : new web3_js_1.PublicKey(buffer.freezeAuthority),
            };
            return mintInfo;
        }
        catch (e) {
            console.error(`error while parsing MintInfo: ${e}`);
            return null;
        }
    }
};
ParsableMintInfo = __decorate([
    staticImplements()
], ParsableMintInfo);
exports.ParsableMintInfo = ParsableMintInfo;
/**
 * Class decorator to define an interface with static methods
 * Reference: https://github.com/Microsoft/TypeScript/issues/13462#issuecomment-295685298
 */
function staticImplements() {
    return (constructor) => {
        constructor;
    };
}
exports.staticImplements = staticImplements;
