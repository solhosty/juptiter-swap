import { AccountInfo, u64 } from "@solana/spl-token";
import { Connection, PublicKey } from "@solana/web3.js";
import { Instruction } from "../web3";
/**
 * @category Util
 */
export declare class TokenUtil {
    static isNativeMint(mint: PublicKey): boolean;
    static deserializeTokenAccount: (data: Buffer | undefined) => AccountInfo | null;
    /**
     * Create an ix to send a spl-token / native-mint to another wallet.
     * This function will handle the associated token accounts internally for spl-token.
     * SOL is sent directly to the user's wallet.
     *
     * @param connection - Connection object
     * @param sourceWallet - PublicKey for the sender's wallet
     * @param destinationWallet - PublicKey for the receiver's wallet
     * @param tokenMint - Mint for the token that is being sent.
     * @param tokenDecimals - Decimal for the token that is being sent.
     * @param amount - Amount of token to send
     * @param getAccountRentExempt - Fn to fetch the account rent exempt value
     * @param payer - PublicKey for the payer that would fund the possibly new token-accounts. (must sign the txn)
     * @returns
     */
    static createSendTokensToWalletInstruction(connection: Connection, sourceWallet: PublicKey, destinationWallet: PublicKey, tokenMint: PublicKey, tokenDecimals: number, amount: u64, getAccountRentExempt: () => Promise<number>, payer?: PublicKey): Promise<Instruction>;
}
