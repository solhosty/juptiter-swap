"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } } function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }// src/instructions/refreshReserve.ts
var _web3js = require('@solana/web3.js');
var _bufferlayout = require('buffer-layout'); var BufferLayout = _interopRequireWildcard(_bufferlayout); var BufferLayout3 = _interopRequireWildcard(_bufferlayout); var BufferLayout2 = _interopRequireWildcard(_bufferlayout); var BufferLayout4 = _interopRequireWildcard(_bufferlayout); var BufferLayout5 = _interopRequireWildcard(_bufferlayout); var BufferLayout6 = _interopRequireWildcard(_bufferlayout);
var refreshReserveInstruction = (reserve, solendProgramAddress, oracle, switchboardFeedAddress) => {
  const dataLayout = BufferLayout.struct([BufferLayout.u8("instruction")]);
  const data = Buffer.alloc(dataLayout.span);
  dataLayout.encode({ instruction: 3 /* RefreshReserve */ }, data);
  const keys = [{ pubkey: reserve, isSigner: false, isWritable: true }];
  if (oracle) {
    keys.push({ pubkey: oracle, isSigner: false, isWritable: false });
  }
  if (switchboardFeedAddress) {
    keys.push({
      pubkey: switchboardFeedAddress,
      isSigner: false,
      isWritable: false
    });
  }
  return new (0, _web3js.TransactionInstruction)({
    keys,
    programId: solendProgramAddress,
    data
  });
};

// src/state/lastUpdate.ts


// src/utils/layout.ts

var _bnjs = require('bn.js'); var _bnjs2 = _interopRequireDefault(_bnjs);

var publicKey = (property = "publicKey") => {
  const publicKeyLayout = BufferLayout2.blob(32, property);
  const _decode = publicKeyLayout.decode.bind(publicKeyLayout);
  const _encode = publicKeyLayout.encode.bind(publicKeyLayout);
  publicKeyLayout.decode = (buffer, offset2) => {
    const data = _decode(buffer, offset2);
    return new (0, _web3js.PublicKey)(data);
  };
  publicKeyLayout.encode = (key, buffer, offset2) => _encode(key.toBuffer(), buffer, offset2);
  return publicKeyLayout;
};
var uint64 = (property = "uint64") => {
  const layout = BufferLayout2.blob(8, property);
  const _decode = layout.decode.bind(layout);
  const _encode = layout.encode.bind(layout);
  layout.decode = (buffer, offset2) => {
    const data = _decode(buffer, offset2);
    return new (0, _bnjs2.default)(
      [...data].reverse().map((i) => `00${i.toString(16)}`.slice(-2)).join(""),
      16
    );
  };
  layout.encode = (num, buffer, offset2) => {
    const a = num.toArray().reverse();
    let b = Buffer.from(a);
    if (b.length !== 8) {
      const zeroPad = Buffer.alloc(8);
      b.copy(zeroPad);
      b = zeroPad;
    }
    return _encode(b, buffer, offset2);
  };
  return layout;
};
var uint128 = (property = "uint128") => {
  const layout = BufferLayout2.blob(16, property);
  const _decode = layout.decode.bind(layout);
  const _encode = layout.encode.bind(layout);
  layout.decode = (buffer, offset2) => {
    const data = _decode(buffer, offset2);
    return new (0, _bnjs2.default)(
      [...data].reverse().map((i) => `00${i.toString(16)}`.slice(-2)).join(""),
      16
    );
  };
  layout.encode = (num, buffer, offset2) => {
    const a = num.toArray().reverse();
    let b = Buffer.from(a);
    if (b.length !== 16) {
      const zeroPad = Buffer.alloc(16);
      b.copy(zeroPad);
      b = zeroPad;
    }
    return _encode(b, buffer, offset2);
  };
  return layout;
};

// src/state/lastUpdate.ts
var LastUpdateLayout = BufferLayout3.struct(
  [uint64("slot"), BufferLayout3.u8("stale")],
  "lastUpdate"
);

// src/state/lendingMarket.ts

var LendingMarketLayout = BufferLayout4.struct([
  BufferLayout4.u8("version"),
  BufferLayout4.u8("bumpSeed"),
  publicKey("owner"),
  publicKey("quoteTokenMint"),
  publicKey("tokenProgramId"),
  publicKey("oracleProgramId"),
  publicKey("switchboardOracleProgramId"),
  BufferLayout4.blob(128, "padding")
]);
var LENDING_MARKET_SIZE = LendingMarketLayout.span;
var isLendingMarket = (info) => info.data.length === LendingMarketLayout.span;
var parseLendingMarket = (pubkey, info) => {
  const buffer = Buffer.from(info.data);
  const lendingMarket = LendingMarketLayout.decode(buffer);
  const details = {
    pubkey,
    account: {
      ...info
    },
    info: lendingMarket
  };
  return details;
};

// src/state/reserve.ts

var _buffer = require('buffer');
var ReserveConfigLayout = BufferLayout5.struct(
  [
    BufferLayout5.u8("optimalUtilizationRate"),
    BufferLayout5.u8("loanToValueRatio"),
    BufferLayout5.u8("liquidationBonus"),
    BufferLayout5.u8("liquidationThreshold"),
    BufferLayout5.u8("minBorrowRate"),
    BufferLayout5.u8("optimalBorrowRate"),
    BufferLayout5.u8("maxBorrowRate"),
    BufferLayout5.struct(
      [
        uint64("borrowFeeWad"),
        uint64("flashLoanFeeWad"),
        BufferLayout5.u8("hostFeePercentage")
      ],
      "fees"
    ),
    uint64("depositLimit"),
    uint64("borrowLimit"),
    publicKey("feeReceiver"),
    BufferLayout5.u8("protocolLiquidationFee"),
    BufferLayout5.u8("protocolTakeRate")
  ],
  "config"
);
var ReserveLayout = BufferLayout5.struct(
  [
    BufferLayout5.u8("version"),
    LastUpdateLayout,
    publicKey("lendingMarket"),
    BufferLayout5.struct(
      [
        publicKey("mintPubkey"),
        BufferLayout5.u8("mintDecimals"),
        publicKey("supplyPubkey"),
        publicKey("pythOracle"),
        publicKey("switchboardOracle"),
        uint64("availableAmount"),
        uint128("borrowedAmountWads"),
        uint128("cumulativeBorrowRateWads"),
        uint128("marketPrice")
      ],
      "liquidity"
    ),
    BufferLayout5.struct(
      [
        publicKey("mintPubkey"),
        uint64("mintTotalSupply"),
        publicKey("supplyPubkey")
      ],
      "collateral"
    ),
    ReserveConfigLayout,
    BufferLayout5.blob(247, "padding")
  ]
);
var RESERVE_SIZE = ReserveLayout.span;
var isReserve = (info) => info.data.length === ReserveLayout.span;
var parseReserve = (pubkey, info) => {
  const { data } = info;
  const buffer = _buffer.Buffer.from(data);
  const reserve = ReserveLayout.decode(buffer);
  if (reserve.lastUpdate.slot.isZero()) {
    return null;
  }
  const details = {
    pubkey,
    account: {
      ...info
    },
    info: reserve
  };
  return details;
};
function reserveToString(reserve) {
  return JSON.stringify(
    reserve,
    (key, value) => {
      if (key === "padding") {
        return null;
      }
      switch (value.constructor.name) {
        case "PublicKey":
          return value.toBase58();
        case "BN":
          return value.toString();
        default:
          return value;
      }
    },
    2
  );
}

// src/state/obligation.ts


_bnjs2.default.prototype.toJSON = void 0;
function obligationToString(obligation) {
  return JSON.stringify(
    obligation,
    (key, value) => {
      if (key === "padding") {
        return null;
      }
      switch (value.constructor.name) {
        case "PublicKey":
          return value.toBase58();
        case "BN":
          return value.toString();
        default:
          return value;
      }
    },
    2
  );
}
var ObligationLayout = BufferLayout6.struct([
  BufferLayout6.u8("version"),
  LastUpdateLayout,
  publicKey("lendingMarket"),
  publicKey("owner"),
  uint128("depositedValue"),
  uint128("borrowedValue"),
  uint128("allowedBorrowValue"),
  uint128("unhealthyBorrowValue"),
  BufferLayout6.blob(64, "_padding"),
  BufferLayout6.u8("depositsLen"),
  BufferLayout6.u8("borrowsLen"),
  BufferLayout6.blob(1096, "dataFlat")
]);
var ObligationCollateralLayout = BufferLayout6.struct([
  publicKey("depositReserve"),
  uint64("depositedAmount"),
  uint128("marketValue"),
  BufferLayout6.blob(32, "padding")
]);
var ObligationLiquidityLayout = BufferLayout6.struct([
  publicKey("borrowReserve"),
  uint128("cumulativeBorrowRateWads"),
  uint128("borrowedAmountWads"),
  uint128("marketValue"),
  BufferLayout6.blob(32, "padding")
]);
var OBLIGATION_SIZE = ObligationLayout.span;
var isObligation = (info) => info.data.length === ObligationLayout.span;
var parseObligation = (pubkey, info) => {
  const { data } = info;
  const buffer = Buffer.from(data);
  const {
    version,
    lastUpdate,
    lendingMarket,
    owner,
    depositedValue,
    borrowedValue,
    allowedBorrowValue,
    unhealthyBorrowValue,
    depositsLen,
    borrowsLen,
    dataFlat
  } = ObligationLayout.decode(buffer);
  if (lastUpdate.slot.isZero()) {
    return null;
  }
  const depositsBuffer = dataFlat.slice(
    0,
    depositsLen * ObligationCollateralLayout.span
  );
  const deposits = BufferLayout6.seq(
    ObligationCollateralLayout,
    depositsLen
  ).decode(depositsBuffer);
  const borrowsBuffer = dataFlat.slice(
    depositsBuffer.length,
    depositsLen * ObligationCollateralLayout.span + borrowsLen * ObligationLiquidityLayout.span
  );
  const borrows = BufferLayout6.seq(
    ObligationLiquidityLayout,
    borrowsLen
  ).decode(borrowsBuffer);
  const obligation = {
    version,
    lastUpdate,
    lendingMarket,
    owner,
    depositedValue,
    borrowedValue,
    allowedBorrowValue,
    unhealthyBorrowValue,
    deposits,
    borrows
  };
  const details = {
    pubkey,
    account: {
      ...info
    },
    info: obligation
  };
  return details;
};




















exports.LENDING_MARKET_SIZE = LENDING_MARKET_SIZE; exports.LastUpdateLayout = LastUpdateLayout; exports.LendingMarketLayout = LendingMarketLayout; exports.OBLIGATION_SIZE = OBLIGATION_SIZE; exports.ObligationCollateralLayout = ObligationCollateralLayout; exports.ObligationLayout = ObligationLayout; exports.ObligationLiquidityLayout = ObligationLiquidityLayout; exports.RESERVE_SIZE = RESERVE_SIZE; exports.ReserveConfigLayout = ReserveConfigLayout; exports.ReserveLayout = ReserveLayout; exports.isLendingMarket = isLendingMarket; exports.isObligation = isObligation; exports.isReserve = isReserve; exports.obligationToString = obligationToString; exports.parseLendingMarket = parseLendingMarket; exports.parseObligation = parseObligation; exports.parseReserve = parseReserve; exports.refreshReserveInstruction = refreshReserveInstruction; exports.reserveToString = reserveToString;
//# sourceMappingURL=index.js.map