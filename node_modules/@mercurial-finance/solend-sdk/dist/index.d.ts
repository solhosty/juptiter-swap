import { PublicKey, TransactionInstruction, AccountInfo } from '@solana/web3.js';
import BN from 'bn.js';
import * as BufferLayout from 'buffer-layout';
import { Buffer as Buffer$1 } from 'buffer';

declare const refreshReserveInstruction: (reserve: PublicKey, solendProgramAddress: PublicKey, oracle?: PublicKey, switchboardFeedAddress?: PublicKey) => TransactionInstruction;

declare const LastUpdateLayout: typeof BufferLayout.Structure;
interface LastUpdate {
    slot: BN;
    stale: boolean;
}

interface LendingMarket {
    version: number;
    isInitialized: boolean;
    quoteTokenMint: PublicKey;
    tokenProgramId: PublicKey;
}
declare const LendingMarketLayout: typeof BufferLayout.Structure;
declare const LENDING_MARKET_SIZE: any;
declare const isLendingMarket: (info: AccountInfo<Buffer>) => boolean;
declare const parseLendingMarket: (pubkey: PublicKey, info: AccountInfo<Buffer>) => {
    pubkey: PublicKey;
    account: {
        executable: boolean;
        owner: PublicKey;
        lamports: number;
        data: Buffer;
        rentEpoch?: number;
    };
    info: LendingMarket;
};

interface Reserve {
    version: number;
    lastUpdate: LastUpdate;
    lendingMarket: PublicKey;
    liquidity: ReserveLiquidity;
    collateral: ReserveCollateral;
    config: ReserveConfig;
}
interface ReserveLiquidity {
    mintPubkey: PublicKey;
    mintDecimals: number;
    supplyPubkey: PublicKey;
    oracleOption: number;
    pythOraclePubkey: PublicKey;
    switchboardOraclePubkey: PublicKey;
    availableAmount: BN;
    borrowedAmountWads: BN;
    cumulativeBorrowRateWads: BN;
    marketPrice: BN;
}
interface ReserveCollateral {
    mintPubkey: PublicKey;
    mintTotalSupply: BN;
    supplyPubkey: PublicKey;
}
interface ReserveConfig {
    optimalUtilizationRate: number;
    loanToValueRatio: number;
    liquidationBonus: number;
    liquidationThreshold: number;
    minBorrowRate: number;
    optimalBorrowRate: number;
    maxBorrowRate: number;
    fees: {
        borrowFeeWad: BN;
        flashLoanFeeWad: BN;
        hostFeePercentage: number;
    };
    depositLimit: BN;
    borrowLimit: BN;
    feeReceiver?: PublicKey;
    protocolLiquidationFee: number;
    protocolTakeRate: number;
}
declare const ReserveConfigLayout: any;
declare const ReserveLayout: typeof BufferLayout.Structure;
declare const RESERVE_SIZE: any;
declare const isReserve: (info: AccountInfo<Buffer$1>) => boolean;
declare const parseReserve: (pubkey: PublicKey, info: AccountInfo<Buffer$1>) => {
    pubkey: PublicKey;
    account: {
        executable: boolean;
        owner: PublicKey;
        lamports: number;
        data: Buffer$1;
        rentEpoch?: number;
    };
    info: Reserve;
};
declare function reserveToString(reserve: Reserve): string;

interface Obligation {
    version: number;
    lastUpdate: LastUpdate;
    lendingMarket: PublicKey;
    owner: PublicKey;
    deposits: ObligationCollateral[];
    borrows: ObligationLiquidity[];
    depositedValue: BN;
    borrowedValue: BN;
    allowedBorrowValue: BN;
    unhealthyBorrowValue: BN;
}
declare function obligationToString(obligation: Obligation): string;
interface ObligationCollateral {
    depositReserve: PublicKey;
    depositedAmount: BN;
    marketValue: BN;
}
interface ObligationLiquidity {
    borrowReserve: PublicKey;
    cumulativeBorrowRateWads: BN;
    borrowedAmountWads: BN;
    marketValue: BN;
}
declare const ObligationLayout: typeof BufferLayout.Structure;
declare const ObligationCollateralLayout: typeof BufferLayout.Structure;
declare const ObligationLiquidityLayout: typeof BufferLayout.Structure;
declare const OBLIGATION_SIZE: any;
declare const isObligation: (info: AccountInfo<Buffer>) => boolean;
interface ProtoObligation {
    version: number;
    lastUpdate: LastUpdate;
    lendingMarket: PublicKey;
    owner: PublicKey;
    depositedValue: BN;
    borrowedValue: BN;
    allowedBorrowValue: BN;
    unhealthyBorrowValue: BN;
    depositsLen: number;
    borrowsLen: number;
    dataFlat: Buffer;
}
declare const parseObligation: (pubkey: PublicKey, info: AccountInfo<Buffer>) => {
    pubkey: PublicKey;
    account: {
        executable: boolean;
        owner: PublicKey;
        lamports: number;
        data: Buffer;
        rentEpoch?: number;
    };
    info: Obligation;
};

export { LENDING_MARKET_SIZE, LastUpdate, LastUpdateLayout, LendingMarket, LendingMarketLayout, OBLIGATION_SIZE, Obligation, ObligationCollateral, ObligationCollateralLayout, ObligationLayout, ObligationLiquidity, ObligationLiquidityLayout, ProtoObligation, RESERVE_SIZE, Reserve, ReserveCollateral, ReserveConfig, ReserveConfigLayout, ReserveLayout, ReserveLiquidity, isLendingMarket, isObligation, isReserve, obligationToString, parseLendingMarket, parseObligation, parseReserve, refreshReserveInstruction, reserveToString };
