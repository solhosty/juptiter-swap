{"version":3,"sources":["../src/instructions/refreshReserve.ts","../src/state/lastUpdate.ts","../src/utils/layout.ts","../src/state/lendingMarket.ts","../src/state/reserve.ts","../src/state/obligation.ts"],"names":["BufferLayout","PublicKey","offset","Buffer","BN"],"mappings":"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","sourcesContent":["import { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport * as BufferLayout from \"buffer-layout\";\nimport { LendingInstruction } from \"./instruction\";\n\n/// Accrue interest and update market price of liquidity on a reserve.\n///\n/// Accounts expected by this instruction:\n///\n///   0. `[writable]` Reserve account.\n///   1. `[]` Clock sysvar.\n///   2. `[optional]` Reserve liquidity oracle account.\n///                     Required if the reserve currency is not the lending market quote\n///                     currency.\nexport const refreshReserveInstruction = (\n  reserve: PublicKey,\n  solendProgramAddress: PublicKey,\n  oracle?: PublicKey,\n  switchboardFeedAddress?: PublicKey\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([BufferLayout.u8(\"instruction\")]);\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({ instruction: LendingInstruction.RefreshReserve }, data);\n\n  const keys = [{ pubkey: reserve, isSigner: false, isWritable: true }];\n\n  if (oracle) {\n    keys.push({ pubkey: oracle, isSigner: false, isWritable: false });\n  }\n  if (switchboardFeedAddress) {\n    keys.push({\n      pubkey: switchboardFeedAddress,\n      isSigner: false,\n      isWritable: false,\n    });\n  }\n\n  return new TransactionInstruction({\n    keys,\n    programId: solendProgramAddress,\n    data,\n  });\n};\n","import BN from \"bn.js\";\nimport * as BufferLayout from \"buffer-layout\";\nimport * as Layout from \"../utils/layout\";\n\nexport const LastUpdateLayout: typeof BufferLayout.Structure =\n  BufferLayout.struct(\n    [Layout.uint64(\"slot\"), BufferLayout.u8(\"stale\")],\n    \"lastUpdate\"\n  );\n\nexport interface LastUpdate {\n  slot: BN;\n  stale: boolean;\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport * as BufferLayout from \"buffer-layout\";\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property = \"publicKey\"): unknown => {\n  const publicKeyLayout = BufferLayout.blob(32, property);\n\n  const _decode = publicKeyLayout.decode.bind(publicKeyLayout);\n  const _encode = publicKeyLayout.encode.bind(publicKeyLayout);\n\n  publicKeyLayout.decode = (buffer: Buffer, offset: number) => {\n    const data = _decode(buffer, offset);\n    return new PublicKey(data);\n  };\n\n  publicKeyLayout.encode = (key: PublicKey, buffer: Buffer, offset: number) =>\n    _encode(key.toBuffer(), buffer, offset);\n\n  return publicKeyLayout;\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property = \"uint64\"): unknown => {\n  const layout = BufferLayout.blob(8, property);\n\n  const _decode = layout.decode.bind(layout);\n  const _encode = layout.encode.bind(layout);\n\n  layout.decode = (buffer: Buffer, offset: number) => {\n    const data = _decode(buffer, offset);\n    return new BN(\n      [...data]\n        .reverse()\n        .map((i) => `00${i.toString(16)}`.slice(-2))\n        .join(\"\"),\n      16\n    );\n  };\n\n  layout.encode = (num: BN, buffer: Buffer, offset: number) => {\n    const a = num.toArray().reverse();\n    let b = Buffer.from(a);\n    if (b.length !== 8) {\n      const zeroPad = Buffer.alloc(8);\n      b.copy(zeroPad);\n      b = zeroPad;\n    }\n    return _encode(b, buffer, offset);\n  };\n\n  return layout;\n};\n\nexport const uint128 = (property = \"uint128\"): unknown => {\n  const layout = BufferLayout.blob(16, property);\n\n  const _decode = layout.decode.bind(layout);\n  const _encode = layout.encode.bind(layout);\n\n  layout.decode = (buffer: Buffer, offset: number) => {\n    const data = _decode(buffer, offset);\n    return new BN(\n      [...data]\n        .reverse()\n        .map((i) => `00${i.toString(16)}`.slice(-2))\n        .join(\"\"),\n      16\n    );\n  };\n\n  layout.encode = (num: BN, buffer: Buffer, offset: number) => {\n    const a = num.toArray().reverse();\n    let b = Buffer.from(a);\n    if (b.length !== 16) {\n      const zeroPad = Buffer.alloc(16);\n      b.copy(zeroPad);\n      b = zeroPad;\n    }\n\n    return _encode(b, buffer, offset);\n  };\n\n  return layout;\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property = \"string\"): unknown => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32(\"length\"),\n      BufferLayout.u32(\"lengthPadding\"),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), \"chars\"),\n    ],\n    property\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: Buffer, offset: number) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString(\"utf8\");\n  };\n\n  rsl.encode = (str: string, buffer: Buffer, offset: number) => {\n    const data = {\n      chars: Buffer.from(str, \"utf8\"),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  return rsl;\n};\n","import { AccountInfo, PublicKey } from \"@solana/web3.js\";\nimport * as BufferLayout from \"buffer-layout\";\nimport * as Layout from \"../utils/layout\";\n\nexport interface LendingMarket {\n  version: number;\n  isInitialized: boolean;\n  quoteTokenMint: PublicKey;\n  tokenProgramId: PublicKey;\n}\n\nexport const LendingMarketLayout: typeof BufferLayout.Structure =\n  BufferLayout.struct([\n    BufferLayout.u8(\"version\"),\n    BufferLayout.u8(\"bumpSeed\"),\n    Layout.publicKey(\"owner\"),\n    Layout.publicKey(\"quoteTokenMint\"),\n    Layout.publicKey(\"tokenProgramId\"),\n    Layout.publicKey(\"oracleProgramId\"),\n    Layout.publicKey(\"switchboardOracleProgramId\"),\n\n    BufferLayout.blob(128, \"padding\"),\n  ]);\n\nexport const LENDING_MARKET_SIZE = LendingMarketLayout.span;\n\nexport const isLendingMarket = (info: AccountInfo<Buffer>) =>\n  info.data.length === LendingMarketLayout.span;\n\nexport const parseLendingMarket = (\n  pubkey: PublicKey,\n  info: AccountInfo<Buffer>\n) => {\n  const buffer = Buffer.from(info.data);\n  const lendingMarket = LendingMarketLayout.decode(buffer) as LendingMarket;\n\n  const details = {\n    pubkey,\n    account: {\n      ...info,\n    },\n    info: lendingMarket,\n  };\n\n  return details;\n};\n","import { AccountInfo, PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport * as BufferLayout from \"buffer-layout\";\nimport { Buffer } from \"buffer\";\nimport * as Layout from \"../utils/layout\";\nimport { LastUpdate, LastUpdateLayout } from \"./lastUpdate\";\n\nexport interface Reserve {\n  version: number;\n  lastUpdate: LastUpdate;\n  lendingMarket: PublicKey;\n  liquidity: ReserveLiquidity;\n  collateral: ReserveCollateral;\n  config: ReserveConfig;\n}\n\nexport interface ReserveLiquidity {\n  mintPubkey: PublicKey;\n  mintDecimals: number;\n  supplyPubkey: PublicKey;\n  // @FIXME: oracle option\n  oracleOption: number;\n  pythOraclePubkey: PublicKey;\n  switchboardOraclePubkey: PublicKey;\n  availableAmount: BN;\n  borrowedAmountWads: BN;\n  cumulativeBorrowRateWads: BN;\n  marketPrice: BN;\n}\n\nexport interface ReserveCollateral {\n  mintPubkey: PublicKey;\n  mintTotalSupply: BN;\n  supplyPubkey: PublicKey;\n}\n\nexport interface ReserveConfig {\n  optimalUtilizationRate: number;\n  loanToValueRatio: number;\n  liquidationBonus: number;\n  liquidationThreshold: number;\n  minBorrowRate: number;\n  optimalBorrowRate: number;\n  maxBorrowRate: number;\n  fees: {\n    borrowFeeWad: BN;\n    flashLoanFeeWad: BN;\n    hostFeePercentage: number;\n  };\n  depositLimit: BN;\n  borrowLimit: BN;\n  feeReceiver?: PublicKey;\n  protocolLiquidationFee: number;\n  protocolTakeRate: number;\n}\n\nexport const ReserveConfigLayout = BufferLayout.struct(\n  [\n    BufferLayout.u8(\"optimalUtilizationRate\"),\n    BufferLayout.u8(\"loanToValueRatio\"),\n    BufferLayout.u8(\"liquidationBonus\"),\n    BufferLayout.u8(\"liquidationThreshold\"),\n    BufferLayout.u8(\"minBorrowRate\"),\n    BufferLayout.u8(\"optimalBorrowRate\"),\n    BufferLayout.u8(\"maxBorrowRate\"),\n    BufferLayout.struct(\n      [\n        Layout.uint64(\"borrowFeeWad\"),\n        Layout.uint64(\"flashLoanFeeWad\"),\n        BufferLayout.u8(\"hostFeePercentage\"),\n      ],\n      \"fees\"\n    ),\n    Layout.uint64(\"depositLimit\"),\n    Layout.uint64(\"borrowLimit\"),\n    Layout.publicKey(\"feeReceiver\"),\n    BufferLayout.u8(\"protocolLiquidationFee\"),\n    BufferLayout.u8(\"protocolTakeRate\"),\n  ],\n  \"config\"\n);\n\nexport const ReserveLayout: typeof BufferLayout.Structure = BufferLayout.struct(\n  [\n    BufferLayout.u8(\"version\"),\n\n    LastUpdateLayout,\n\n    Layout.publicKey(\"lendingMarket\"),\n\n    BufferLayout.struct(\n      [\n        Layout.publicKey(\"mintPubkey\"),\n        BufferLayout.u8(\"mintDecimals\"),\n        Layout.publicKey(\"supplyPubkey\"),\n        // @FIXME: oracle option\n        // TODO: replace u32 option with generic equivalent\n        // BufferLayout.u32('oracleOption'),\n        Layout.publicKey(\"pythOracle\"),\n        Layout.publicKey(\"switchboardOracle\"),\n        Layout.uint64(\"availableAmount\"),\n        Layout.uint128(\"borrowedAmountWads\"),\n        Layout.uint128(\"cumulativeBorrowRateWads\"),\n        Layout.uint128(\"marketPrice\"),\n      ],\n      \"liquidity\"\n    ),\n\n    BufferLayout.struct(\n      [\n        Layout.publicKey(\"mintPubkey\"),\n        Layout.uint64(\"mintTotalSupply\"),\n        Layout.publicKey(\"supplyPubkey\"),\n      ],\n      \"collateral\"\n    ),\n    ReserveConfigLayout,\n    BufferLayout.blob(247, \"padding\"),\n  ]\n);\n\nexport const RESERVE_SIZE = ReserveLayout.span;\n\nexport const isReserve = (info: AccountInfo<Buffer>) =>\n  info.data.length === ReserveLayout.span;\n\nexport const parseReserve = (pubkey: PublicKey, info: AccountInfo<Buffer>) => {\n  const { data } = info;\n  const buffer = Buffer.from(data);\n  const reserve = ReserveLayout.decode(buffer) as Reserve;\n\n  if (reserve.lastUpdate.slot.isZero()) {\n    return null;\n  }\n\n  const details = {\n    pubkey,\n    account: {\n      ...info,\n    },\n    info: reserve,\n  };\n\n  return details;\n};\n\nexport function reserveToString(reserve: Reserve) {\n  return JSON.stringify(\n    reserve,\n    (key, value) => {\n      // Skip padding\n      if (key === \"padding\") {\n        return null;\n      }\n      switch (value.constructor.name) {\n        case \"PublicKey\":\n          return value.toBase58();\n        case \"BN\":\n          return value.toString();\n        default:\n          return value;\n      }\n    },\n    2\n  );\n}\n","import { AccountInfo, PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport * as BufferLayout from \"buffer-layout\";\nimport * as Layout from \"../utils/layout\";\nimport { LastUpdate, LastUpdateLayout } from \"./lastUpdate\";\n\nexport interface Obligation {\n  version: number;\n  lastUpdate: LastUpdate;\n  lendingMarket: PublicKey;\n  owner: PublicKey;\n  // @FIXME: check usages\n  deposits: ObligationCollateral[];\n  // @FIXME: check usages\n  borrows: ObligationLiquidity[];\n  depositedValue: BN; // decimals\n  borrowedValue: BN; // decimals\n  allowedBorrowValue: BN; // decimals\n  unhealthyBorrowValue: BN; // decimals\n}\n\n// BN defines toJSON property, which messes up serialization\n// @ts-ignore\nBN.prototype.toJSON = undefined;\n\nexport function obligationToString(obligation: Obligation) {\n  return JSON.stringify(\n    obligation,\n    (key, value) => {\n      // Skip padding\n      if (key === \"padding\") {\n        return null;\n      }\n      switch (value.constructor.name) {\n        case \"PublicKey\":\n          return value.toBase58();\n        case \"BN\":\n          return value.toString();\n        default:\n          return value;\n      }\n    },\n    2\n  );\n}\n\nexport interface ObligationCollateral {\n  depositReserve: PublicKey;\n  depositedAmount: BN;\n  marketValue: BN; // decimals\n}\n\nexport interface ObligationLiquidity {\n  borrowReserve: PublicKey;\n  cumulativeBorrowRateWads: BN; // decimals\n  borrowedAmountWads: BN; // decimals\n  marketValue: BN; // decimals\n}\n\nexport const ObligationLayout: typeof BufferLayout.Structure =\n  BufferLayout.struct([\n    BufferLayout.u8(\"version\"),\n\n    LastUpdateLayout,\n\n    Layout.publicKey(\"lendingMarket\"),\n    Layout.publicKey(\"owner\"),\n    Layout.uint128(\"depositedValue\"),\n    Layout.uint128(\"borrowedValue\"),\n    Layout.uint128(\"allowedBorrowValue\"),\n    Layout.uint128(\"unhealthyBorrowValue\"),\n    BufferLayout.blob(64, \"_padding\"),\n\n    BufferLayout.u8(\"depositsLen\"),\n    BufferLayout.u8(\"borrowsLen\"),\n    BufferLayout.blob(1096, \"dataFlat\"),\n  ]);\n\nexport const ObligationCollateralLayout: typeof BufferLayout.Structure =\n  BufferLayout.struct([\n    Layout.publicKey(\"depositReserve\"),\n    Layout.uint64(\"depositedAmount\"),\n    Layout.uint128(\"marketValue\"),\n    BufferLayout.blob(32, \"padding\"),\n  ]);\n\nexport const ObligationLiquidityLayout: typeof BufferLayout.Structure =\n  BufferLayout.struct([\n    Layout.publicKey(\"borrowReserve\"),\n    Layout.uint128(\"cumulativeBorrowRateWads\"),\n    Layout.uint128(\"borrowedAmountWads\"),\n    Layout.uint128(\"marketValue\"),\n    BufferLayout.blob(32, \"padding\"),\n  ]);\n\nexport const OBLIGATION_SIZE = ObligationLayout.span;\n\nexport const isObligation = (info: AccountInfo<Buffer>) =>\n  info.data.length === ObligationLayout.span;\n\nexport interface ProtoObligation {\n  version: number;\n  lastUpdate: LastUpdate;\n  lendingMarket: PublicKey;\n  owner: PublicKey;\n  depositedValue: BN; // decimals\n  borrowedValue: BN; // decimals\n  allowedBorrowValue: BN; // decimals\n  unhealthyBorrowValue: BN; // decimals\n  depositsLen: number;\n  borrowsLen: number;\n  dataFlat: Buffer;\n}\n\nexport const parseObligation = (\n  pubkey: PublicKey,\n  info: AccountInfo<Buffer>\n) => {\n  const { data } = info;\n  const buffer = Buffer.from(data);\n  const {\n    version,\n    lastUpdate,\n    lendingMarket,\n    owner,\n    depositedValue,\n    borrowedValue,\n    allowedBorrowValue,\n    unhealthyBorrowValue,\n    depositsLen,\n    borrowsLen,\n    dataFlat,\n  } = ObligationLayout.decode(buffer) as ProtoObligation;\n\n  if (lastUpdate.slot.isZero()) {\n    return null;\n  }\n\n  const depositsBuffer = dataFlat.slice(\n    0,\n    depositsLen * ObligationCollateralLayout.span\n  );\n  const deposits = BufferLayout.seq(\n    ObligationCollateralLayout,\n    depositsLen\n  ).decode(depositsBuffer) as ObligationCollateral[];\n\n  const borrowsBuffer = dataFlat.slice(\n    depositsBuffer.length,\n    depositsLen * ObligationCollateralLayout.span +\n      borrowsLen * ObligationLiquidityLayout.span\n  );\n  const borrows = BufferLayout.seq(\n    ObligationLiquidityLayout,\n    borrowsLen\n  ).decode(borrowsBuffer) as ObligationLiquidity[];\n\n  const obligation = {\n    version,\n    lastUpdate,\n    lendingMarket,\n    owner,\n    depositedValue,\n    borrowedValue,\n    allowedBorrowValue,\n    unhealthyBorrowValue,\n    deposits,\n    borrows,\n  } as Obligation;\n\n  const details = {\n    pubkey,\n    account: {\n      ...info,\n    },\n    info: obligation,\n  };\n\n  return details;\n};\n"]}