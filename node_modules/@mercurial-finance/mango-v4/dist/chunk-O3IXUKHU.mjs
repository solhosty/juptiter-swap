import {
  I80F48,
  ZERO_I80F48
} from "./chunk-62VGMIX5.mjs";

// ts/client/src/utils.ts
import {
  ASSOCIATED_TOKEN_PROGRAM_ID,
  TOKEN_PROGRAM_ID
} from "@solana/spl-token";
import {
  MessageV0,
  PublicKey as PublicKey2,
  SystemProgram,
  TransactionInstruction,
  VersionedTransaction
} from "@solana/web3.js";
import BN from "bn.js";

// ts/client/src/accounts/bank.ts
import { utf8 } from "@project-serum/anchor/dist/cjs/utils/bytes";
import { PublicKey } from "@solana/web3.js";
var QUOTE_DECIMALS = 6;
var Bank = class {
  constructor(publicKey, group, name, mint, vault, oracle, oracleConfig, stablePriceModel, depositIndex, borrowIndex, indexedDeposits, indexedBorrows, indexLastUpdated, bankRateLastUpdated, avgUtilization, adjustmentFactor, util0, rate0, util1, rate1, maxRate, collectedFeesNative, loanOriginationFeeRate, loanFeeRate, maintAssetWeight, initAssetWeight, maintLiabWeight, initLiabWeight, liquidationFee, dust, flashLoanTokenAccountInitial, flashLoanApprovedAmount, tokenIndex, mintDecimals, bankNum, minVaultToDepositsRatio, netBorrowLimitWindowSizeTs, lastNetBorrowsWindowStartTs, netBorrowLimitPerWindowQuote, netBorrowsInWindow, borrowWeightScaleStartQuote, depositWeightScaleStartQuote, reduceOnly) {
    this.publicKey = publicKey;
    this.group = group;
    this.mint = mint;
    this.vault = vault;
    this.oracle = oracle;
    this.stablePriceModel = stablePriceModel;
    this.indexLastUpdated = indexLastUpdated;
    this.bankRateLastUpdated = bankRateLastUpdated;
    this.tokenIndex = tokenIndex;
    this.mintDecimals = mintDecimals;
    this.bankNum = bankNum;
    this.minVaultToDepositsRatio = minVaultToDepositsRatio;
    this.netBorrowLimitWindowSizeTs = netBorrowLimitWindowSizeTs;
    this.lastNetBorrowsWindowStartTs = lastNetBorrowsWindowStartTs;
    this.netBorrowLimitPerWindowQuote = netBorrowLimitPerWindowQuote;
    this.netBorrowsInWindow = netBorrowsInWindow;
    this.borrowWeightScaleStartQuote = borrowWeightScaleStartQuote;
    this.depositWeightScaleStartQuote = depositWeightScaleStartQuote;
    this.reduceOnly = reduceOnly;
    this.name = utf8.decode(new Uint8Array(name)).split("\0")[0];
    this.oracleConfig = {
      confFilter: I80F48.from(oracleConfig.confFilter),
      maxStalenessSlots: oracleConfig.maxStalenessSlots
    };
    this.depositIndex = I80F48.from(depositIndex);
    this.borrowIndex = I80F48.from(borrowIndex);
    this.indexedDeposits = I80F48.from(indexedDeposits);
    this.indexedBorrows = I80F48.from(indexedBorrows);
    this.avgUtilization = I80F48.from(avgUtilization);
    this.adjustmentFactor = I80F48.from(adjustmentFactor);
    this.maxRate = I80F48.from(maxRate);
    this.util0 = I80F48.from(util0);
    this.rate0 = I80F48.from(rate0);
    this.util1 = I80F48.from(util1);
    this.rate1 = I80F48.from(rate1);
    this.collectedFeesNative = I80F48.from(collectedFeesNative);
    this.loanFeeRate = I80F48.from(loanFeeRate);
    this.loanOriginationFeeRate = I80F48.from(loanOriginationFeeRate);
    this.maintAssetWeight = I80F48.from(maintAssetWeight);
    this.initAssetWeight = I80F48.from(initAssetWeight);
    this.maintLiabWeight = I80F48.from(maintLiabWeight);
    this.initLiabWeight = I80F48.from(initLiabWeight);
    this.liquidationFee = I80F48.from(liquidationFee);
    this.dust = I80F48.from(dust);
    this._price = void 0;
    this._uiPrice = void 0;
    this._oracleLastUpdatedSlot = void 0;
  }
  static from(publicKey, obj) {
    return new Bank(
      publicKey,
      obj.group,
      obj.name,
      obj.mint,
      obj.vault,
      obj.oracle,
      obj.oracleConfig,
      obj.stablePriceModel,
      obj.depositIndex,
      obj.borrowIndex,
      obj.indexedDeposits,
      obj.indexedBorrows,
      obj.indexLastUpdated,
      obj.bankRateLastUpdated,
      obj.avgUtilization,
      obj.adjustmentFactor,
      obj.util0,
      obj.rate0,
      obj.util1,
      obj.rate1,
      obj.maxRate,
      obj.collectedFeesNative,
      obj.loanOriginationFeeRate,
      obj.loanFeeRate,
      obj.maintAssetWeight,
      obj.initAssetWeight,
      obj.maintLiabWeight,
      obj.initLiabWeight,
      obj.liquidationFee,
      obj.dust,
      obj.flashLoanTokenAccountInitial,
      obj.flashLoanApprovedAmount,
      obj.tokenIndex,
      obj.mintDecimals,
      obj.bankNum,
      obj.minVaultToDepositsRatio,
      obj.netBorrowLimitWindowSizeTs,
      obj.lastNetBorrowsWindowStartTs,
      obj.netBorrowLimitPerWindowQuote,
      obj.netBorrowsInWindow,
      obj.borrowWeightScaleStartQuote,
      obj.depositWeightScaleStartQuote,
      obj.reduceOnly == 1
    );
  }
  toString() {
    return "Bank \n public key - " + this.publicKey.toBase58() + "\n token index - " + this.tokenIndex + "\n token name - " + this.name + "\n vault - " + this.vault.toBase58() + "\n mintDecimals - " + this.mintDecimals + "\n oracle - " + this.oracle.toBase58() + "\n price - " + this._price?.toString() + "\n uiPrice - " + this._uiPrice + "\n deposit index - " + this.depositIndex.toString() + "\n borrow index - " + this.borrowIndex.toString() + "\n indexedDeposits - " + this.indexedDeposits.toString() + "\n indexedBorrows - " + this.indexedBorrows.toString() + "\n indexLastUpdated - " + new Date(this.indexLastUpdated.toNumber() * 1e3) + "\n bankRateLastUpdated - " + new Date(this.bankRateLastUpdated.toNumber() * 1e3) + "\n avgUtilization - " + this.avgUtilization.toString() + "\n adjustmentFactor - " + this.adjustmentFactor.toString() + "\n maxRate - " + this.maxRate.toString() + "\n util0 - " + this.util0.toString() + "\n rate0 - " + this.rate0.toString() + "\n util1 - " + this.util1.toString() + "\n rate1 - " + this.rate1.toString() + "\n loanFeeRate - " + this.loanFeeRate.toString() + "\n loanOriginationFeeRate - " + this.loanOriginationFeeRate.toString() + "\n maintAssetWeight - " + this.maintAssetWeight.toString() + "\n initAssetWeight - " + this.initAssetWeight.toString() + "\n maintLiabWeight - " + this.maintLiabWeight.toString() + "\n initLiabWeight - " + this.initLiabWeight.toString() + "\n liquidationFee - " + this.liquidationFee.toString() + "\n uiDeposits() - " + this.uiDeposits() + "\n uiBorrows() - " + this.uiBorrows() + "\n getDepositRate() - " + this.getDepositRate().toString() + "\n getBorrowRate() - " + this.getBorrowRate().toString();
  }
  scaledInitAssetWeight(price) {
    const depositsQuote = this.nativeDeposits().mul(price);
    if (this.depositWeightScaleStartQuote >= Number.MAX_SAFE_INTEGER || depositsQuote.lte(I80F48.fromNumber(this.depositWeightScaleStartQuote))) {
      return this.initAssetWeight;
    }
    return this.initAssetWeight.mul(
      I80F48.fromNumber(this.depositWeightScaleStartQuote).div(depositsQuote)
    );
  }
  scaledInitLiabWeight(price) {
    const borrowsQuote = this.nativeBorrows().mul(price);
    if (this.borrowWeightScaleStartQuote >= Number.MAX_SAFE_INTEGER || borrowsQuote.lte(I80F48.fromNumber(this.borrowWeightScaleStartQuote))) {
      return this.initLiabWeight;
    }
    return this.initLiabWeight.mul(
      borrowsQuote.div(I80F48.fromNumber(this.borrowWeightScaleStartQuote))
    );
  }
  get price() {
    if (!this._price) {
      throw new Error(
        `Undefined price for bank ${this.publicKey} with tokenIndex ${this.tokenIndex}!`
      );
    }
    return this._price;
  }
  get uiPrice() {
    if (!this._uiPrice) {
      throw new Error(
        `Undefined uiPrice for bank ${this.publicKey} with tokenIndex ${this.tokenIndex}!`
      );
    }
    return this._uiPrice;
  }
  get oracleLastUpdatedSlot() {
    if (!this._oracleLastUpdatedSlot) {
      throw new Error(
        `Undefined oracleLastUpdatedSlot for bank ${this.publicKey} with tokenIndex ${this.tokenIndex}!`
      );
    }
    return this._oracleLastUpdatedSlot;
  }
  nativeDeposits() {
    return this.indexedDeposits.mul(this.depositIndex);
  }
  nativeBorrows() {
    return this.indexedBorrows.mul(this.borrowIndex);
  }
  uiDeposits() {
    return toUiDecimals(
      this.indexedDeposits.mul(this.depositIndex),
      this.mintDecimals
    );
  }
  uiBorrows() {
    return toUiDecimals(
      this.indexedBorrows.mul(this.borrowIndex),
      this.mintDecimals
    );
  }
  /**
   *
   * @returns borrow rate, 0 is 0% where 1 is 100%
   */
  getBorrowRate() {
    const totalBorrows = this.nativeBorrows();
    const totalDeposits = this.nativeDeposits();
    if (totalDeposits.isZero() && totalBorrows.isZero()) {
      return ZERO_I80F48();
    }
    if (totalDeposits.lte(totalBorrows)) {
      return this.maxRate;
    }
    const utilization = totalBorrows.div(totalDeposits);
    if (utilization.gt(this.util1)) {
      const extraUtil = utilization.sub(this.util1);
      const slope = this.maxRate.sub(this.rate1).div(I80F48.fromNumber(1).sub(this.util1));
      return this.rate1.add(slope.mul(extraUtil));
    } else if (utilization.gt(this.util0)) {
      const extraUtil = utilization.sub(this.util0);
      const slope = this.maxRate.sub(this.rate0).div(I80F48.fromNumber(1).sub(this.util0));
      return this.rate0.add(slope.mul(extraUtil));
    } else {
      const slope = this.rate0.div(this.util0);
      return slope.mul(utilization);
    }
  }
  /**
   *
   * @returns borrow rate percentage
   */
  getBorrowRateUi() {
    return this.getBorrowRate().toNumber() * 100;
  }
  /**
   *
   * @returns deposit rate, 0 is 0% where 1 is 100%
   */
  getDepositRate() {
    const borrowRate = this.getBorrowRate();
    const totalBorrows = this.nativeBorrows();
    const totalDeposits = this.nativeDeposits();
    if (totalDeposits.isZero() && totalBorrows.isZero()) {
      return ZERO_I80F48();
    } else if (totalDeposits.isZero()) {
      return this.maxRate;
    }
    const utilization = totalBorrows.div(totalDeposits);
    return utilization.mul(borrowRate);
  }
  /**
   *
   * @returns deposit rate percentage
   */
  getDepositRateUi() {
    return this.getDepositRate().toNumber() * 100;
  }
};
var MintInfo = class {
  constructor(publicKey, group, tokenIndex, mint, banks, vaults, oracle, registrationTime, groupInsuranceFund) {
    this.publicKey = publicKey;
    this.group = group;
    this.tokenIndex = tokenIndex;
    this.mint = mint;
    this.banks = banks;
    this.vaults = vaults;
    this.oracle = oracle;
    this.registrationTime = registrationTime;
    this.groupInsuranceFund = groupInsuranceFund;
  }
  static from(publicKey, obj) {
    return new MintInfo(
      publicKey,
      obj.group,
      obj.tokenIndex,
      obj.mint,
      obj.banks,
      obj.vaults,
      obj.oracle,
      obj.registrationTime,
      obj.groupInsuranceFund
    );
  }
  firstBank() {
    return this.banks[0];
  }
  firstVault() {
    return this.vaults[0];
  }
  toString() {
    const res = "mint " + this.mint.toBase58() + "\n oracle " + this.oracle.toBase58() + "\n banks " + this.banks.filter((pk) => pk.toBase58() !== PublicKey.default.toBase58()).toString() + "\n vaults " + this.vaults.filter((pk) => pk.toBase58() !== PublicKey.default.toBase58()).toString();
    return res;
  }
};

// ts/client/src/utils.ts
var U64_MAX_BN = new BN("18446744073709551615");
var I64_MAX_BN = new BN("9223372036854775807").toTwos(64);
function toNativeI80F48ForQuote(uiAmount) {
  return I80F48.fromNumber(uiAmount * Math.pow(10, 6));
}
function toNativeI80F48(uiAmount, decimals) {
  return I80F48.fromNumber(uiAmount * Math.pow(10, decimals));
}
function toNative(uiAmount, decimals) {
  return new BN((uiAmount * Math.pow(10, decimals)).toFixed(0));
}
function toUiDecimals(nativeAmount, decimals) {
  if (nativeAmount instanceof BN) {
    nativeAmount = I80F48.fromU64(nativeAmount);
  }
  if (nativeAmount instanceof I80F48) {
    return nativeAmount.div(I80F48.fromNumber(Math.pow(10, decimals))).toNumber();
  }
  return nativeAmount / Math.pow(10, decimals);
}
function toUiDecimalsForQuote(nativeAmount) {
  return toUiDecimals(nativeAmount, QUOTE_DECIMALS);
}
function toUiI80F48(nativeAmount, decimals) {
  return nativeAmount.div(I80F48.fromNumber(Math.pow(10, decimals)));
}
async function getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {
  if (!allowOwnerOffCurve && !PublicKey2.isOnCurve(owner.toBuffer()))
    throw new Error("TokenOwnerOffCurve!");
  const [address] = await PublicKey2.findProgramAddress(
    [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],
    associatedTokenProgramId
  );
  return address;
}
async function createAssociatedTokenAccountIdempotentInstruction(payer, owner, mint) {
  const account = await getAssociatedTokenAddress(mint, owner);
  return new TransactionInstruction({
    keys: [
      { pubkey: payer, isSigner: true, isWritable: true },
      { pubkey: account, isSigner: false, isWritable: true },
      { pubkey: owner, isSigner: false, isWritable: false },
      { pubkey: mint, isSigner: false, isWritable: false },
      {
        pubkey: SystemProgram.programId,
        isSigner: false,
        isWritable: false
      },
      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false }
    ],
    programId: ASSOCIATED_TOKEN_PROGRAM_ID,
    data: Buffer.from([1])
  });
}
async function buildVersionedTx(provider, ix, additionalSigners = [], alts = []) {
  const message = MessageV0.compile({
    payerKey: provider.wallet.publicKey,
    instructions: ix,
    recentBlockhash: (await provider.connection.getLatestBlockhash()).blockhash,
    addressLookupTableAccounts: alts
  });
  const vTx = new VersionedTransaction(message);
  vTx.sign([
    provider.wallet.payer,
    ...additionalSigners
  ]);
  return vTx;
}

export {
  U64_MAX_BN,
  I64_MAX_BN,
  toNativeI80F48ForQuote,
  toNativeI80F48,
  toNative,
  toUiDecimals,
  toUiDecimalsForQuote,
  toUiI80F48,
  getAssociatedTokenAddress,
  createAssociatedTokenAccountIdempotentInstruction,
  buildVersionedTx,
  QUOTE_DECIMALS,
  Bank,
  MintInfo
};
//# sourceMappingURL=chunk-O3IXUKHU.mjs.map