// ts/client/src/scripts/mm/sequence-enforcer-util.ts
import { BN } from "@project-serum/anchor";
import {
  PublicKey,
  SystemProgram,
  TransactionInstruction
} from "@solana/web3.js";
import { createHash } from "crypto";
var seqEnforcerProgramIds = {
  devnet: new PublicKey("FBngRHN4s5cmHagqy3Zd6xcK3zPJBeX5DixtHFbBhyCn"),
  testnet: new PublicKey("FThcgpaJM8WiEbK5rw3i31Ptb8Hm4rQ27TrhfzeR1uUy"),
  "mainnet-beta": new PublicKey("GDDMwNyyx8uB6zrqwBFHjLLG3TBYk2F8Az4yrQC5RzMp")
};
function makeInitSequenceEnforcerAccountIx(account, ownerPk, bump, sym, cluster) {
  const keys = [
    { isSigner: false, isWritable: true, pubkey: account },
    { isSigner: true, isWritable: true, pubkey: ownerPk },
    { isSigner: false, isWritable: false, pubkey: SystemProgram.programId }
  ];
  const variant = createHash("sha256").update("global:initialize").digest().slice(0, 8);
  const bumpData = new BN(bump).toBuffer("le", 1);
  const strLen = new BN(sym.length).toBuffer("le", 4);
  const symEncoded = Buffer.from(sym);
  const data = Buffer.concat([variant, bumpData, strLen, symEncoded]);
  return new TransactionInstruction({
    keys,
    data,
    programId: seqEnforcerProgramIds[cluster]
  });
}
function makeCheckAndSetSequenceNumberIx(sequenceAccount, ownerPk, seqNum, cluster) {
  const keys = [
    { isSigner: false, isWritable: true, pubkey: sequenceAccount },
    { isSigner: true, isWritable: false, pubkey: ownerPk }
  ];
  const variant = createHash("sha256").update("global:check_and_set_sequence_number").digest().slice(0, 8);
  const seqNumBuffer = new BN(seqNum).toBuffer("le", 8);
  const data = Buffer.concat([variant, seqNumBuffer]);
  return new TransactionInstruction({
    keys,
    data,
    programId: seqEnforcerProgramIds[cluster]
  });
}

export {
  seqEnforcerProgramIds,
  makeInitSequenceEnforcerAccountIx,
  makeCheckAndSetSequenceNumberIx
};
//# sourceMappingURL=chunk-E5XEJZ4E.mjs.map