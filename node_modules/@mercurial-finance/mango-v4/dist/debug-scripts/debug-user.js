"use strict"; function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _chunkHFEILVW4js = require('../chunk-HFEILVW4.js');
require('../chunk-A355EMTI.js');
require('../chunk-74ANAXXV.js');



var _chunkC3X3GVS5js = require('../chunk-C3X3GVS5.js');
require('../chunk-UGHO4YHY.js');
require('../chunk-3ZYUOGD4.js');
require('../chunk-ZYSI4CYO.js');


var _chunkS6N5Y2X2js = require('../chunk-S6N5Y2X2.js');


var _chunk772SHZWXjs = require('../chunk-772SHZWX.js');
require('../chunk-S3PQ6OXS.js');
require('../chunk-WKB2GIFW.js');
require('../chunk-TBVE5N24.js');
require('../chunk-Y7A4QF6J.js');
require('../chunk-JC4IRQUL.js');

// ts/client/src/debug-scripts/debug-user.ts
var _anchor = require('@project-serum/anchor');
var _web3js = require('@solana/web3.js');
var _fs = require('fs'); var _fs2 = _interopRequireDefault(_fs);
var CLUSTER_URL = process.env.CLUSTER_URL_OVERRIDE || process.env.MB_CLUSTER_URL;
var PAYER_KEYPAIR = process.env.PAYER_KEYPAIR_OVERRIDE || process.env.MB_PAYER_KEYPAIR;
var USER_KEYPAIR = process.env.USER_KEYPAIR_OVERRIDE || process.env.MB_PAYER_KEYPAIR;
var GROUP_NUM = Number(process.env.GROUP_NUM || 0);
var MANGO_ACCOUNT_PK = process.env.MANGO_ACCOUNT_PK;
var CLUSTER = process.env.CLUSTER_OVERRIDE || "mainnet-beta";
async function debugUser(client, group, mangoAccount) {
  console.log(mangoAccount.toString(group));
  await mangoAccount.reload(client);
  console.log(
    "mangoAccount.getEquity() " + _chunk772SHZWXjs.toUiDecimalsForQuote.call(void 0, mangoAccount.getEquity(group).toNumber())
  );
  console.log(
    "mangoAccount.getHealth(HealthType.init) " + _chunk772SHZWXjs.toUiDecimalsForQuote.call(void 0, 
      mangoAccount.getHealth(group, _chunkC3X3GVS5js.HealthType.init).toNumber()
    )
  );
  console.log(
    "HealthCache.fromMangoAccount(group,mangoAccount).health(HealthType.init) " + _chunk772SHZWXjs.toUiDecimalsForQuote.call(void 0, 
      _chunkC3X3GVS5js.HealthCache.fromMangoAccount(group, mangoAccount).health(_chunkC3X3GVS5js.HealthType.init).toNumber()
    )
  );
  console.log(
    "mangoAccount.getHealthRatio(HealthType.init) " + mangoAccount.getHealthRatio(group, _chunkC3X3GVS5js.HealthType.init).toNumber()
  );
  console.log(
    "mangoAccount.getHealthRatioUi(HealthType.init) " + mangoAccount.getHealthRatioUi(group, _chunkC3X3GVS5js.HealthType.init)
  );
  console.log(
    "mangoAccount.getHealthRatio(HealthType.maint) " + mangoAccount.getHealthRatio(group, _chunkC3X3GVS5js.HealthType.maint).toNumber()
  );
  console.log(
    "mangoAccount.getHealthRatioUi(HealthType.maint) " + mangoAccount.getHealthRatioUi(group, _chunkC3X3GVS5js.HealthType.maint)
  );
  console.log(
    "mangoAccount.getCollateralValue() " + _chunk772SHZWXjs.toUiDecimalsForQuote.call(void 0, mangoAccount.getCollateralValue(group).toNumber())
  );
  console.log(
    "mangoAccount.getAssetsValue() " + _chunk772SHZWXjs.toUiDecimalsForQuote.call(void 0, 
      mangoAccount.getAssetsValue(group, _chunkC3X3GVS5js.HealthType.init).toNumber()
    )
  );
  console.log(
    "mangoAccount.getLiabsValue() " + _chunk772SHZWXjs.toUiDecimalsForQuote.call(void 0, 
      mangoAccount.getLiabsValue(group, _chunkC3X3GVS5js.HealthType.init).toNumber()
    )
  );
  async function getMaxWithdrawWithBorrowForTokenUiWrapper(token) {
    console.log(
      `mangoAccount.getMaxWithdrawWithBorrowForTokenUi(group, ${token}) ` + mangoAccount.getMaxWithdrawWithBorrowForTokenUi(
        group,
        group.banksMapByName.get(token)[0].mint
      )
    );
  }
  for (const srcToken of Array.from(group.banksMapByName.keys())) {
    await getMaxWithdrawWithBorrowForTokenUiWrapper(srcToken);
  }
  function getMaxSourceForTokenSwapWrapper(src, tgt) {
    let maxSourceUi;
    try {
      maxSourceUi = mangoAccount.getMaxSourceUiForTokenSwap(
        group,
        group.banksMapByName.get(src)[0].mint,
        group.banksMapByName.get(tgt)[0].mint
      );
    } catch (error) {
      console.log(`Error for ${src}->${tgt}, ` + error.toString());
    }
    const maxSourceWoFees = -maxSourceUi * (1 + group.banksMapByName.get(src)[0].loanOriginationFeeRate.toNumber());
    const maxTargetWoFees = -maxSourceWoFees * (group.banksMapByName.get(src)[0].uiPrice / group.banksMapByName.get(tgt)[0].uiPrice);
    const sim = mangoAccount.simHealthRatioWithTokenPositionUiChanges(group, [
      {
        mintPk: group.banksMapByName.get(src)[0].mint,
        uiTokenAmount: maxSourceWoFees
      },
      {
        mintPk: group.banksMapByName.get(tgt)[0].mint,
        uiTokenAmount: maxTargetWoFees
      }
    ]);
    console.log(
      `getMaxSourceForTokenSwap ${src.padEnd(4)} ${tgt.padEnd(4)} ` + maxSourceUi.toFixed(3).padStart(10) + `, health ratio after (${sim.toFixed(3).padStart(10)})`
    );
  }
  for (const srcToken of Array.from(group.banksMapByName.keys()).sort()) {
    for (const tgtToken of Array.from(group.banksMapByName.keys()).sort()) {
      getMaxSourceForTokenSwapWrapper(srcToken, tgtToken);
    }
  }
  function getMaxForPerpWrapper(perpMarket) {
    const maxQuoteUi = mangoAccount.getMaxQuoteForPerpBidUi(
      group,
      perpMarket.perpMarketIndex
    );
    const simMaxQuote = mangoAccount.simHealthRatioWithPerpBidUiChanges(
      group,
      perpMarket.perpMarketIndex,
      maxQuoteUi / perpMarket.uiPrice
    );
    const maxBaseUi = mangoAccount.getMaxBaseForPerpAskUi(
      group,
      perpMarket.perpMarketIndex
    );
    const simMaxBase = mangoAccount.simHealthRatioWithPerpAskUiChanges(
      group,
      perpMarket.perpMarketIndex,
      maxBaseUi
    );
    console.log(
      `getMaxPerp ${perpMarket.name.padStart(
        10
      )} getMaxQuoteForPerpBidUi ${maxQuoteUi.toFixed(3).padStart(10)} health ratio after (${simMaxQuote.toFixed(3).padStart(10)}), getMaxBaseForPerpAskUi ${maxBaseUi.toFixed(3).padStart(10)} health ratio after (${simMaxBase.toFixed(3).padStart(10)})`
    );
  }
  for (const perpMarket of Array.from(
    group.perpMarketsMapByMarketIndex.values()
  )) {
    getMaxForPerpWrapper(perpMarket);
  }
  function getMaxForSerum3Wrapper(serum3Market) {
    console.log(
      `getMaxQuoteForSerum3BidUi ${serum3Market.name} ` + mangoAccount.getMaxQuoteForSerum3BidUi(
        group,
        serum3Market.serumMarketExternal
      )
    );
    console.log(
      `- simHealthRatioWithSerum3BidUiChanges  ${serum3Market.name} ` + mangoAccount.simHealthRatioWithSerum3BidUiChanges(
        group,
        mangoAccount.getMaxQuoteForSerum3BidUi(
          group,
          serum3Market.serumMarketExternal
        ),
        serum3Market.serumMarketExternal,
        _chunkC3X3GVS5js.HealthType.init
      )
    );
    console.log(
      `getMaxBaseForSerum3AskUi ${serum3Market.name} ` + mangoAccount.getMaxBaseForSerum3AskUi(
        group,
        serum3Market.serumMarketExternal
      )
    );
    console.log(
      `- simHealthRatioWithSerum3BidUiChanges  ${serum3Market.name} ` + mangoAccount.simHealthRatioWithSerum3AskUiChanges(
        group,
        mangoAccount.getMaxBaseForSerum3AskUi(
          group,
          serum3Market.serumMarketExternal
        ),
        serum3Market.serumMarketExternal,
        _chunkC3X3GVS5js.HealthType.init
      )
    );
  }
  for (const serum3Market of Array.from(
    group.serum3MarketsMapByExternal.values()
  )) {
    getMaxForSerum3Wrapper(serum3Market);
  }
}
async function main() {
  const options = _anchor.AnchorProvider.defaultOptions();
  const connection = new (0, _web3js.Connection)(CLUSTER_URL, options);
  const admin = _web3js.Keypair.fromSecretKey(
    Buffer.from(JSON.parse(_fs2.default.readFileSync(PAYER_KEYPAIR, "utf-8")))
  );
  console.log(`Admin ${admin.publicKey.toBase58()}`);
  const adminWallet = new (0, _anchor.Wallet)(admin);
  const adminProvider = new (0, _anchor.AnchorProvider)(connection, adminWallet, options);
  const client = _chunkHFEILVW4js.MangoClient.connect(
    adminProvider,
    CLUSTER,
    _chunkS6N5Y2X2js.MANGO_V4_ID[CLUSTER],
    {
      idsSource: "api"
    }
  );
  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);
  for (const keypair of [USER_KEYPAIR]) {
    console.log();
    const user = _web3js.Keypair.fromSecretKey(
      Buffer.from(JSON.parse(_fs2.default.readFileSync(keypair, "utf-8")))
    );
    const userWallet = new (0, _anchor.Wallet)(user);
    console.log(`User ${userWallet.publicKey.toBase58()}`);
    const mangoAccounts = await client.getAllMangoAccounts(group);
    for (const mangoAccount of mangoAccounts) {
      if (!MANGO_ACCOUNT_PK || mangoAccount.publicKey.equals(new (0, _web3js.PublicKey)(MANGO_ACCOUNT_PK))) {
        console.log();
        console.log(`MangoAccount ${mangoAccount.publicKey}`);
        await debugUser(client, group, mangoAccount);
      }
    }
  }
  process.exit();
}
try {
  main();
} catch (error) {
  console.log(error);
}
//# sourceMappingURL=debug-user.js.map