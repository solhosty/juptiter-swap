"use strict"; function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }

var _chunkHFEILVW4js = require('../chunk-HFEILVW4.js');
require('../chunk-A355EMTI.js');
require('../chunk-74ANAXXV.js');
require('../chunk-C3X3GVS5.js');
require('../chunk-UGHO4YHY.js');
require('../chunk-3ZYUOGD4.js');
require('../chunk-ZYSI4CYO.js');


var _chunkS6N5Y2X2js = require('../chunk-S6N5Y2X2.js');
require('../chunk-772SHZWX.js');
require('../chunk-S3PQ6OXS.js');
require('../chunk-WKB2GIFW.js');
require('../chunk-TBVE5N24.js');
require('../chunk-Y7A4QF6J.js');
require('../chunk-JC4IRQUL.js');

// ts/client/src/debug-scripts/debug-perp.ts
var _anchor = require('@project-serum/anchor');
var _web3js = require('@solana/web3.js');
var _dotenv = require('dotenv'); var dotenv = _interopRequireWildcard(_dotenv);
dotenv.config();
var CLUSTER_URL = process.env.CLUSTER_URL_OVERRIDE || process.env.MB_CLUSTER_URL;
var PAYER_KEYPAIR = process.env.PAYER_KEYPAIR_OVERRIDE || process.env.MB_PAYER_KEYPAIR;
var GROUP_PK = process.env.GROUP_PK || "78b8f4cGCwmZ9ysPFMWLaLTkkaYnUjwMJYStWe5RTSSX";
var CLUSTER = process.env.CLUSTER_OVERRIDE || "mainnet-beta";
async function main() {
  const options = _anchor.AnchorProvider.defaultOptions();
  const connection = new (0, _web3js.Connection)(CLUSTER_URL, options);
  const wallet = new (0, _anchor.Wallet)(new (0, _web3js.Keypair)());
  const provider = new (0, _anchor.AnchorProvider)(connection, wallet, options);
  const client = _chunkHFEILVW4js.MangoClient.connect(provider, CLUSTER, _chunkS6N5Y2X2js.MANGO_V4_ID[CLUSTER], {
    idsSource: "get-program-accounts"
  });
  const group = await client.getGroup(new (0, _web3js.PublicKey)(GROUP_PK));
  const mangoAccounts = await client.getAllMangoAccounts(group);
  Array.from(group.perpMarketsMapByMarketIndex.values()).filter((perpMarket) => perpMarket.name != "SOMETHING-PERP").map((perpMarket) => {
    console.log(`name ${perpMarket.name}`);
    let getUnsettledPnlUiAgg = 0;
    let getBasePositionUiAgg = 0;
    let longSettledFundingAgg = 0;
    let shortSettledFundingAgg = 0;
    mangoAccounts.map((mangoAccount) => {
      const pp = mangoAccount.perpActive().find((pp2) => pp2.marketIndex === perpMarket.perpMarketIndex);
      if (pp) {
        getUnsettledPnlUiAgg += pp.getUnsettledPnlUi(perpMarket);
        getBasePositionUiAgg += pp.getBasePositionUi(perpMarket);
        longSettledFundingAgg += pp.longSettledFunding.toNumber();
        shortSettledFundingAgg += pp.shortSettledFunding.toNumber();
      }
    });
    console.log(
      `- unsettled pnl aggr ${getUnsettledPnlUiAgg.toFixed(4).padStart(10)}`
    );
    console.log(
      `- base position aggr ${getBasePositionUiAgg.toFixed(4).padStart(10)}`
    );
    console.log(
      `- base position aggr * price ${(getBasePositionUiAgg * perpMarket.uiPrice).toFixed(4).padStart(10)}`
    );
    console.log(
      `- unsettled pnl aggr - base position aggr * price ${(getUnsettledPnlUiAgg - getBasePositionUiAgg * perpMarket.uiPrice).toFixed(4).padStart(10)}`
    );
    console.log();
  });
  process.exit();
}
try {
  main();
} catch (error) {
  console.log(error);
}
//# sourceMappingURL=debug-perp.js.map