"use strict"; function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } } function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }

var _chunkHFEILVW4js = require('../chunk-HFEILVW4.js');
require('../chunk-A355EMTI.js');
require('../chunk-74ANAXXV.js');
require('../chunk-C3X3GVS5.js');
require('../chunk-UGHO4YHY.js');
require('../chunk-3ZYUOGD4.js');
require('../chunk-ZYSI4CYO.js');


var _chunkS6N5Y2X2js = require('../chunk-S6N5Y2X2.js');


var _chunk772SHZWXjs = require('../chunk-772SHZWX.js');



var _chunkS3PQ6OXSjs = require('../chunk-S3PQ6OXS.js');
require('../chunk-WKB2GIFW.js');
require('../chunk-TBVE5N24.js');
require('../chunk-Y7A4QF6J.js');
require('../chunk-JC4IRQUL.js');

// ts/client/src/debug-scripts/debug-banks.ts
var _anchor = require('@project-serum/anchor');
var _token = require('@project-serum/anchor/dist/cjs/spl/token');
var _web3js = require('@solana/web3.js');
var _dotenv = require('dotenv'); var dotenv = _interopRequireWildcard(_dotenv);
var _fs = require('fs'); var _fs2 = _interopRequireDefault(_fs);
dotenv.config();
var CLUSTER_URL = process.env.CLUSTER_URL_OVERRIDE || process.env.MB_CLUSTER_URL;
var PAYER_KEYPAIR = process.env.PAYER_KEYPAIR_OVERRIDE || process.env.MB_PAYER_KEYPAIR;
var GROUP_NUM = Number(process.env.GROUP_NUM || 0);
var CLUSTER = process.env.CLUSTER_OVERRIDE || "mainnet-beta";
async function main() {
  const options = _anchor.AnchorProvider.defaultOptions();
  const connection = new (0, _web3js.Connection)(CLUSTER_URL, options);
  const admin = _web3js.Keypair.fromSecretKey(
    Buffer.from(JSON.parse(_fs2.default.readFileSync(PAYER_KEYPAIR, "utf-8")))
  );
  const adminWallet = new (0, _anchor.Wallet)(admin);
  const adminProvider = new (0, _anchor.AnchorProvider)(connection, adminWallet, options);
  const client = _chunkHFEILVW4js.MangoClient.connect(
    adminProvider,
    CLUSTER,
    _chunkS6N5Y2X2js.MANGO_V4_ID[CLUSTER],
    { idsSource: "get-program-accounts" }
  );
  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);
  console.log(`Group ${group.publicKey.toBase58()}`);
  const banks = Array.from(group.banksMapByMint.values()).flat();
  const banksMapUsingTokenIndex = new Map(
    banks.map((bank) => {
      bank.indexedDepositsByMangoAccounts = _chunkS3PQ6OXSjs.ZERO_I80F48.call(void 0, );
      bank.indexedBorrowsByMangoAccounts = _chunkS3PQ6OXSjs.ZERO_I80F48.call(void 0, );
      return [bank.tokenIndex, bank];
    })
  );
  const mangoAccounts = await client.getAllMangoAccounts(group);
  mangoAccounts.map(
    (mangoAccount) => mangoAccount.tokensActive().forEach((token) => {
      const bank = banksMapUsingTokenIndex.get(token.tokenIndex);
      if (token.indexedPosition.isPos()) {
        bank.indexedDepositsByMangoAccounts = bank.indexedDepositsByMangoAccounts.add(
          token.indexedPosition.mul(
            banksMapUsingTokenIndex.get(token.tokenIndex).depositIndex
          )
        );
      }
      if (token.indexedPosition.isNeg()) {
        bank.indexedBorrowsByMangoAccounts = bank.indexedBorrowsByMangoAccounts.add(
          token.indexedPosition.abs().mul(banksMapUsingTokenIndex.get(token.tokenIndex).borrowIndex)
        );
      }
    })
  );
  for (const bank of await Array.from(banksMapUsingTokenIndex.values()).sort(
    (a, b) => a.tokenIndex - b.tokenIndex
  )) {
    const vault = _chunkS3PQ6OXSjs.I80F48.fromNumber(
      _token.coder.call(void 0, ).accounts.decode(
        "token",
        (await client.program.provider.connection.getAccountInfo(bank.vault)).data
      ).amount.toNumber()
    );
    const error = vault.sub(
      bank.indexedDepositsByMangoAccounts.sub(bank.indexedBorrowsByMangoAccounts).add(bank.collectedFeesNative).add(bank.dust)
    );
    let res = `${bank.name}`;
    res = res + `
 ${"tokenIndex".padEnd(40)} ${bank.tokenIndex}
 ${"bank".padEnd(40)} ${bank.publicKey}
 ${"vault".padEnd(40)} ${bank.vault}
 ${"oracle".padEnd(40)} ${bank.oracle}
 ${"mint".padEnd(40)} ${bank.mint}
 ${"price".padEnd(40)} ${_optionalChain([bank, 'access', _ => _.price, 'optionalAccess', _2 => _2.toNumber, 'call', _3 => _3()])}
 ${"uiPrice".padEnd(40)} ${bank.uiPrice}
 ${"error".padEnd(40)} ${error}
 ${"collectedFeesNative".padEnd(40)} ${bank.collectedFeesNative}
 ${"dust".padEnd(40)} ${bank.dust}
 ${"vault balance".padEnd(40)} ${_chunk772SHZWXjs.toUiDecimals.call(void 0, 
      vault,
      bank.mintDecimals
    )}, ${vault} native
 ${"deposits".padEnd(40)} ${bank.indexedDeposits.mul(
      bank.depositIndex
    )}
 ${"deposits (sum over all mango accounts)".padEnd(40)} ${bank.indexedDepositsByMangoAccounts}
 ${"borrows".padEnd(40)} ${bank.indexedBorrows.mul(
      bank.borrowIndex
    )}
 ${"borrows (sum over all mango accounts)".padEnd(40)} ${bank.indexedBorrowsByMangoAccounts}
 ${"avgUtilization since last rate update".padEnd(40)} ${(100 * bank.avgUtilization.toNumber()).toFixed(1)}%
 ${"rate parameters".padEnd(40)} ${(100 * bank.rate0.toNumber()).toFixed()}% @ ${(100 * bank.util0.toNumber()).toFixed()}% util, ${(100 * bank.rate1.toNumber()).toFixed()}% @${(100 * bank.util1.toNumber()).toFixed()}% util, ${(100 * bank.maxRate.toNumber()).toFixed()}% @ 100% util
 ${"depositRate".padEnd(40)} ${(100 * bank.getDepositRate().toNumber()).toFixed(2)}%
 ${"borrowRate".padEnd(40)} ${(100 * bank.getBorrowRate().toNumber()).toFixed(2)}%
 ${"last index update".padEnd(40)} ${new Date(
      1e3 * bank.indexLastUpdated.toNumber()
    )}
 ${"last rates update".padEnd(40)} ${new Date(
      1e3 * bank.bankRateLastUpdated.toNumber()
    )}
 ${"net borrows in window".padEnd(
      40
    )} ${bank.netBorrowsInWindow.toNumber()} / ${bank.netBorrowLimitPerWindowQuote.toNumber()}`;
    console.log(`${res}`);
  }
  process.exit();
}
try {
  main();
} catch (error) {
  console.log(error);
}
//# sourceMappingURL=debug-banks.js.map