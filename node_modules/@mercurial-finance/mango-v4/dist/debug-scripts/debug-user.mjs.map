{"version":3,"sources":["../../ts/client/src/debug-scripts/debug-user.ts"],"sourcesContent":["import { AnchorProvider, Wallet } from '@project-serum/anchor';\nimport { Cluster, Connection, Keypair, PublicKey } from '@solana/web3.js';\nimport fs from 'fs';\nimport { Group } from '../accounts/group';\nimport { HealthCache } from '../accounts/healthCache';\nimport { HealthType, MangoAccount } from '../accounts/mangoAccount';\nimport { PerpMarket } from '../accounts/perp';\nimport { Serum3Market } from '../accounts/serum3';\nimport { MangoClient } from '../client';\nimport { MANGO_V4_ID } from '../constants';\nimport { toUiDecimalsForQuote } from '../utils';\n\nconst CLUSTER_URL =\n  process.env.CLUSTER_URL_OVERRIDE || process.env.MB_CLUSTER_URL;\nconst PAYER_KEYPAIR =\n  process.env.PAYER_KEYPAIR_OVERRIDE || process.env.MB_PAYER_KEYPAIR;\nconst USER_KEYPAIR =\n  process.env.USER_KEYPAIR_OVERRIDE || process.env.MB_PAYER_KEYPAIR;\nconst GROUP_NUM = Number(process.env.GROUP_NUM || 0);\nconst MANGO_ACCOUNT_PK = process.env.MANGO_ACCOUNT_PK;\nconst CLUSTER: Cluster =\n  (process.env.CLUSTER_OVERRIDE as Cluster) || 'mainnet-beta';\n\nasync function debugUser(\n  client: MangoClient,\n  group: Group,\n  mangoAccount: MangoAccount,\n): Promise<void> {\n  console.log(mangoAccount.toString(group));\n\n  await mangoAccount.reload(client);\n\n  console.log(\n    'mangoAccount.getEquity() ' +\n      toUiDecimalsForQuote(mangoAccount.getEquity(group)!.toNumber()),\n  );\n  console.log(\n    'mangoAccount.getHealth(HealthType.init) ' +\n      toUiDecimalsForQuote(\n        mangoAccount.getHealth(group, HealthType.init)!.toNumber(),\n      ),\n  );\n  console.log(\n    'HealthCache.fromMangoAccount(group,mangoAccount).health(HealthType.init) ' +\n      toUiDecimalsForQuote(\n        HealthCache.fromMangoAccount(group, mangoAccount)\n          .health(HealthType.init)\n          .toNumber(),\n      ),\n  );\n  console.log(\n    'mangoAccount.getHealthRatio(HealthType.init) ' +\n      mangoAccount.getHealthRatio(group, HealthType.init)!.toNumber(),\n  );\n  console.log(\n    'mangoAccount.getHealthRatioUi(HealthType.init) ' +\n      mangoAccount.getHealthRatioUi(group, HealthType.init),\n  );\n  console.log(\n    'mangoAccount.getHealthRatio(HealthType.maint) ' +\n      mangoAccount.getHealthRatio(group, HealthType.maint)!.toNumber(),\n  );\n  console.log(\n    'mangoAccount.getHealthRatioUi(HealthType.maint) ' +\n      mangoAccount.getHealthRatioUi(group, HealthType.maint),\n  );\n  console.log(\n    'mangoAccount.getCollateralValue() ' +\n      toUiDecimalsForQuote(mangoAccount.getCollateralValue(group)!.toNumber()),\n  );\n  console.log(\n    'mangoAccount.getAssetsValue() ' +\n      toUiDecimalsForQuote(\n        mangoAccount.getAssetsValue(group, HealthType.init)!.toNumber(),\n      ),\n  );\n  console.log(\n    'mangoAccount.getLiabsValue() ' +\n      toUiDecimalsForQuote(\n        mangoAccount.getLiabsValue(group, HealthType.init)!.toNumber(),\n      ),\n  );\n\n  async function getMaxWithdrawWithBorrowForTokenUiWrapper(\n    token,\n  ): Promise<void> {\n    console.log(\n      `mangoAccount.getMaxWithdrawWithBorrowForTokenUi(group, ${token}) ` +\n        mangoAccount.getMaxWithdrawWithBorrowForTokenUi(\n          group,\n          group.banksMapByName.get(token)![0].mint,\n        ),\n    );\n  }\n  for (const srcToken of Array.from(group.banksMapByName.keys())) {\n    await getMaxWithdrawWithBorrowForTokenUiWrapper(srcToken);\n  }\n\n  function getMaxSourceForTokenSwapWrapper(src, tgt): void {\n    // Turn on for debugging specific pairs\n    // if (src != 'USDC' || tgt != 'MNGO') return;\n\n    let maxSourceUi;\n    try {\n      maxSourceUi = mangoAccount.getMaxSourceUiForTokenSwap(\n        group,\n        group.banksMapByName.get(src)![0].mint,\n        group.banksMapByName.get(tgt)![0].mint,\n      );\n    } catch (error) {\n      console.log(`Error for ${src}->${tgt}, ` + error.toString());\n    }\n\n    const maxSourceWoFees =\n      -maxSourceUi *\n      (1 + group.banksMapByName.get(src)![0].loanOriginationFeeRate.toNumber());\n    const maxTargetWoFees =\n      -maxSourceWoFees *\n      (group.banksMapByName.get(src)![0].uiPrice /\n        group.banksMapByName.get(tgt)![0].uiPrice);\n\n    const sim = mangoAccount.simHealthRatioWithTokenPositionUiChanges(group, [\n      {\n        mintPk: group.banksMapByName.get(src)![0].mint,\n        uiTokenAmount: maxSourceWoFees,\n      },\n      {\n        mintPk: group.banksMapByName.get(tgt)![0].mint,\n        uiTokenAmount: maxTargetWoFees,\n      },\n    ]);\n    console.log(\n      `getMaxSourceForTokenSwap ${src.padEnd(4)} ${tgt.padEnd(4)} ` +\n        maxSourceUi.toFixed(3).padStart(10) +\n        `, health ratio after (${sim.toFixed(3).padStart(10)})`,\n    );\n  }\n  for (const srcToken of Array.from(group.banksMapByName.keys()).sort()) {\n    for (const tgtToken of Array.from(group.banksMapByName.keys()).sort()) {\n      getMaxSourceForTokenSwapWrapper(srcToken, tgtToken);\n    }\n  }\n\n  function getMaxForPerpWrapper(perpMarket: PerpMarket): void {\n    const maxQuoteUi = mangoAccount.getMaxQuoteForPerpBidUi(\n      group,\n      perpMarket.perpMarketIndex,\n    );\n    const simMaxQuote = mangoAccount.simHealthRatioWithPerpBidUiChanges(\n      group,\n      perpMarket.perpMarketIndex,\n      maxQuoteUi / perpMarket.uiPrice,\n    );\n    const maxBaseUi = mangoAccount.getMaxBaseForPerpAskUi(\n      group,\n      perpMarket.perpMarketIndex,\n    );\n    const simMaxBase = mangoAccount.simHealthRatioWithPerpAskUiChanges(\n      group,\n      perpMarket.perpMarketIndex,\n      maxBaseUi,\n    );\n    console.log(\n      `getMaxPerp ${perpMarket.name.padStart(\n        10,\n      )} getMaxQuoteForPerpBidUi ${maxQuoteUi\n        .toFixed(3)\n        .padStart(10)} health ratio after (${simMaxQuote\n        .toFixed(3)\n        .padStart(10)}), getMaxBaseForPerpAskUi ${maxBaseUi\n        .toFixed(3)\n        .padStart(10)} health ratio after (${simMaxBase\n        .toFixed(3)\n        .padStart(10)})`,\n    );\n  }\n  for (const perpMarket of Array.from(\n    group.perpMarketsMapByMarketIndex.values(),\n  )) {\n    getMaxForPerpWrapper(perpMarket);\n  }\n\n  function getMaxForSerum3Wrapper(serum3Market: Serum3Market): void {\n    console.log(\n      `getMaxQuoteForSerum3BidUi ${serum3Market.name} ` +\n        mangoAccount.getMaxQuoteForSerum3BidUi(\n          group,\n          serum3Market.serumMarketExternal,\n        ),\n    );\n    console.log(\n      `- simHealthRatioWithSerum3BidUiChanges  ${serum3Market.name} ` +\n        mangoAccount.simHealthRatioWithSerum3BidUiChanges(\n          group,\n          mangoAccount.getMaxQuoteForSerum3BidUi(\n            group,\n            serum3Market.serumMarketExternal,\n          ),\n          serum3Market.serumMarketExternal,\n          HealthType.init,\n        ),\n    );\n    console.log(\n      `getMaxBaseForSerum3AskUi ${serum3Market.name} ` +\n        mangoAccount.getMaxBaseForSerum3AskUi(\n          group,\n          serum3Market.serumMarketExternal,\n        ),\n    );\n    console.log(\n      `- simHealthRatioWithSerum3BidUiChanges  ${serum3Market.name} ` +\n        mangoAccount.simHealthRatioWithSerum3AskUiChanges(\n          group,\n          mangoAccount.getMaxBaseForSerum3AskUi(\n            group,\n            serum3Market.serumMarketExternal,\n          ),\n          serum3Market.serumMarketExternal,\n          HealthType.init,\n        ),\n    );\n  }\n  for (const serum3Market of Array.from(\n    group.serum3MarketsMapByExternal.values(),\n  )) {\n    getMaxForSerum3Wrapper(serum3Market);\n  }\n}\n\nasync function main(): Promise<void> {\n  const options = AnchorProvider.defaultOptions();\n  const connection = new Connection(CLUSTER_URL!, options);\n\n  const admin = Keypair.fromSecretKey(\n    Buffer.from(JSON.parse(fs.readFileSync(PAYER_KEYPAIR!, 'utf-8'))),\n  );\n  console.log(`Admin ${admin.publicKey.toBase58()}`);\n\n  const adminWallet = new Wallet(admin);\n  const adminProvider = new AnchorProvider(connection, adminWallet, options);\n  const client = MangoClient.connect(\n    adminProvider,\n    CLUSTER,\n    MANGO_V4_ID[CLUSTER],\n    {\n      idsSource: 'api',\n    },\n  );\n\n  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);\n\n  for (const keypair of [USER_KEYPAIR!]) {\n    console.log();\n    const user = Keypair.fromSecretKey(\n      Buffer.from(JSON.parse(fs.readFileSync(keypair, 'utf-8'))),\n    );\n    const userWallet = new Wallet(user);\n    console.log(`User ${userWallet.publicKey.toBase58()}`);\n\n    const mangoAccounts = await client.getAllMangoAccounts(group);\n\n    for (const mangoAccount of mangoAccounts) {\n      if (\n        !MANGO_ACCOUNT_PK ||\n        mangoAccount.publicKey.equals(new PublicKey(MANGO_ACCOUNT_PK))\n      ) {\n        console.log();\n        console.log(`MangoAccount ${mangoAccount.publicKey}`);\n        await debugUser(client, group, mangoAccount);\n      }\n    }\n  }\n\n  process.exit();\n}\n\ntry {\n  main();\n} catch (error) {\n  console.log(error);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,gBAAgB,cAAc;AACvC,SAAkB,YAAY,SAAS,iBAAiB;AACxD,OAAO,QAAQ;AAUf,IAAM,cACJ,QAAQ,IAAI,wBAAwB,QAAQ,IAAI;AAClD,IAAM,gBACJ,QAAQ,IAAI,0BAA0B,QAAQ,IAAI;AACpD,IAAM,eACJ,QAAQ,IAAI,yBAAyB,QAAQ,IAAI;AACnD,IAAM,YAAY,OAAO,QAAQ,IAAI,aAAa,CAAC;AACnD,IAAM,mBAAmB,QAAQ,IAAI;AACrC,IAAM,UACH,QAAQ,IAAI,oBAAgC;AAE/C,eAAe,UACb,QACA,OACA,cACe;AACf,UAAQ,IAAI,aAAa,SAAS,KAAK,CAAC;AAExC,QAAM,aAAa,OAAO,MAAM;AAEhC,UAAQ;AAAA,IACN,8BACE,qBAAqB,aAAa,UAAU,KAAK,EAAG,SAAS,CAAC;AAAA,EAClE;AACA,UAAQ;AAAA,IACN,6CACE;AAAA,MACE,aAAa,UAAU,OAAO,WAAW,IAAI,EAAG,SAAS;AAAA,IAC3D;AAAA,EACJ;AACA,UAAQ;AAAA,IACN,8EACE;AAAA,MACE,YAAY,iBAAiB,OAAO,YAAY,EAC7C,OAAO,WAAW,IAAI,EACtB,SAAS;AAAA,IACd;AAAA,EACJ;AACA,UAAQ;AAAA,IACN,kDACE,aAAa,eAAe,OAAO,WAAW,IAAI,EAAG,SAAS;AAAA,EAClE;AACA,UAAQ;AAAA,IACN,oDACE,aAAa,iBAAiB,OAAO,WAAW,IAAI;AAAA,EACxD;AACA,UAAQ;AAAA,IACN,mDACE,aAAa,eAAe,OAAO,WAAW,KAAK,EAAG,SAAS;AAAA,EACnE;AACA,UAAQ;AAAA,IACN,qDACE,aAAa,iBAAiB,OAAO,WAAW,KAAK;AAAA,EACzD;AACA,UAAQ;AAAA,IACN,uCACE,qBAAqB,aAAa,mBAAmB,KAAK,EAAG,SAAS,CAAC;AAAA,EAC3E;AACA,UAAQ;AAAA,IACN,mCACE;AAAA,MACE,aAAa,eAAe,OAAO,WAAW,IAAI,EAAG,SAAS;AAAA,IAChE;AAAA,EACJ;AACA,UAAQ;AAAA,IACN,kCACE;AAAA,MACE,aAAa,cAAc,OAAO,WAAW,IAAI,EAAG,SAAS;AAAA,IAC/D;AAAA,EACJ;AAEA,iBAAe,0CACb,OACe;AACf,YAAQ;AAAA,MACN,0DAA0D,YACxD,aAAa;AAAA,QACX;AAAA,QACA,MAAM,eAAe,IAAI,KAAK,EAAG,CAAC,EAAE;AAAA,MACtC;AAAA,IACJ;AAAA,EACF;AACA,aAAW,YAAY,MAAM,KAAK,MAAM,eAAe,KAAK,CAAC,GAAG;AAC9D,UAAM,0CAA0C,QAAQ;AAAA,EAC1D;AAEA,WAAS,gCAAgC,KAAK,KAAW;AAIvD,QAAI;AACJ,QAAI;AACF,oBAAc,aAAa;AAAA,QACzB;AAAA,QACA,MAAM,eAAe,IAAI,GAAG,EAAG,CAAC,EAAE;AAAA,QAClC,MAAM,eAAe,IAAI,GAAG,EAAG,CAAC,EAAE;AAAA,MACpC;AAAA,IACF,SAAS,OAAP;AACA,cAAQ,IAAI,aAAa,QAAQ,UAAU,MAAM,SAAS,CAAC;AAAA,IAC7D;AAEA,UAAM,kBACJ,CAAC,eACA,IAAI,MAAM,eAAe,IAAI,GAAG,EAAG,CAAC,EAAE,uBAAuB,SAAS;AACzE,UAAM,kBACJ,CAAC,mBACA,MAAM,eAAe,IAAI,GAAG,EAAG,CAAC,EAAE,UACjC,MAAM,eAAe,IAAI,GAAG,EAAG,CAAC,EAAE;AAEtC,UAAM,MAAM,aAAa,yCAAyC,OAAO;AAAA,MACvE;AAAA,QACE,QAAQ,MAAM,eAAe,IAAI,GAAG,EAAG,CAAC,EAAE;AAAA,QAC1C,eAAe;AAAA,MACjB;AAAA,MACA;AAAA,QACE,QAAQ,MAAM,eAAe,IAAI,GAAG,EAAG,CAAC,EAAE;AAAA,QAC1C,eAAe;AAAA,MACjB;AAAA,IACF,CAAC;AACD,YAAQ;AAAA,MACN,4BAA4B,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,OACvD,YAAY,QAAQ,CAAC,EAAE,SAAS,EAAE,IAClC,yBAAyB,IAAI,QAAQ,CAAC,EAAE,SAAS,EAAE;AAAA,IACvD;AAAA,EACF;AACA,aAAW,YAAY,MAAM,KAAK,MAAM,eAAe,KAAK,CAAC,EAAE,KAAK,GAAG;AACrE,eAAW,YAAY,MAAM,KAAK,MAAM,eAAe,KAAK,CAAC,EAAE,KAAK,GAAG;AACrE,sCAAgC,UAAU,QAAQ;AAAA,IACpD;AAAA,EACF;AAEA,WAAS,qBAAqB,YAA8B;AAC1D,UAAM,aAAa,aAAa;AAAA,MAC9B;AAAA,MACA,WAAW;AAAA,IACb;AACA,UAAM,cAAc,aAAa;AAAA,MAC/B;AAAA,MACA,WAAW;AAAA,MACX,aAAa,WAAW;AAAA,IAC1B;AACA,UAAM,YAAY,aAAa;AAAA,MAC7B;AAAA,MACA,WAAW;AAAA,IACb;AACA,UAAM,aAAa,aAAa;AAAA,MAC9B;AAAA,MACA,WAAW;AAAA,MACX;AAAA,IACF;AACA,YAAQ;AAAA,MACN,cAAc,WAAW,KAAK;AAAA,QAC5B;AAAA,MACF,6BAA6B,WAC1B,QAAQ,CAAC,EACT,SAAS,EAAE,yBAAyB,YACpC,QAAQ,CAAC,EACT,SAAS,EAAE,8BAA8B,UACzC,QAAQ,CAAC,EACT,SAAS,EAAE,yBAAyB,WACpC,QAAQ,CAAC,EACT,SAAS,EAAE;AAAA,IAChB;AAAA,EACF;AACA,aAAW,cAAc,MAAM;AAAA,IAC7B,MAAM,4BAA4B,OAAO;AAAA,EAC3C,GAAG;AACD,yBAAqB,UAAU;AAAA,EACjC;AAEA,WAAS,uBAAuB,cAAkC;AAChE,YAAQ;AAAA,MACN,6BAA6B,aAAa,UACxC,aAAa;AAAA,QACX;AAAA,QACA,aAAa;AAAA,MACf;AAAA,IACJ;AACA,YAAQ;AAAA,MACN,2CAA2C,aAAa,UACtD,aAAa;AAAA,QACX;AAAA,QACA,aAAa;AAAA,UACX;AAAA,UACA,aAAa;AAAA,QACf;AAAA,QACA,aAAa;AAAA,QACb,WAAW;AAAA,MACb;AAAA,IACJ;AACA,YAAQ;AAAA,MACN,4BAA4B,aAAa,UACvC,aAAa;AAAA,QACX;AAAA,QACA,aAAa;AAAA,MACf;AAAA,IACJ;AACA,YAAQ;AAAA,MACN,2CAA2C,aAAa,UACtD,aAAa;AAAA,QACX;AAAA,QACA,aAAa;AAAA,UACX;AAAA,UACA,aAAa;AAAA,QACf;AAAA,QACA,aAAa;AAAA,QACb,WAAW;AAAA,MACb;AAAA,IACJ;AAAA,EACF;AACA,aAAW,gBAAgB,MAAM;AAAA,IAC/B,MAAM,2BAA2B,OAAO;AAAA,EAC1C,GAAG;AACD,2BAAuB,YAAY;AAAA,EACrC;AACF;AAEA,eAAe,OAAsB;AACnC,QAAM,UAAU,eAAe,eAAe;AAC9C,QAAM,aAAa,IAAI,WAAW,aAAc,OAAO;AAEvD,QAAM,QAAQ,QAAQ;AAAA,IACpB,OAAO,KAAK,KAAK,MAAM,GAAG,aAAa,eAAgB,OAAO,CAAC,CAAC;AAAA,EAClE;AACA,UAAQ,IAAI,SAAS,MAAM,UAAU,SAAS,GAAG;AAEjD,QAAM,cAAc,IAAI,OAAO,KAAK;AACpC,QAAM,gBAAgB,IAAI,eAAe,YAAY,aAAa,OAAO;AACzE,QAAM,SAAS,YAAY;AAAA,IACzB;AAAA,IACA;AAAA,IACA,YAAY,OAAO;AAAA,IACnB;AAAA,MACE,WAAW;AAAA,IACb;AAAA,EACF;AAEA,QAAM,QAAQ,MAAM,OAAO,mBAAmB,MAAM,WAAW,SAAS;AAExE,aAAW,WAAW,CAAC,YAAa,GAAG;AACrC,YAAQ,IAAI;AACZ,UAAM,OAAO,QAAQ;AAAA,MACnB,OAAO,KAAK,KAAK,MAAM,GAAG,aAAa,SAAS,OAAO,CAAC,CAAC;AAAA,IAC3D;AACA,UAAM,aAAa,IAAI,OAAO,IAAI;AAClC,YAAQ,IAAI,QAAQ,WAAW,UAAU,SAAS,GAAG;AAErD,UAAM,gBAAgB,MAAM,OAAO,oBAAoB,KAAK;AAE5D,eAAW,gBAAgB,eAAe;AACxC,UACE,CAAC,oBACD,aAAa,UAAU,OAAO,IAAI,UAAU,gBAAgB,CAAC,GAC7D;AACA,gBAAQ,IAAI;AACZ,gBAAQ,IAAI,gBAAgB,aAAa,WAAW;AACpD,cAAM,UAAU,QAAQ,OAAO,YAAY;AAAA,MAC7C;AAAA,IACF;AAAA,EACF;AAEA,UAAQ,KAAK;AACf;AAEA,IAAI;AACF,OAAK;AACP,SAAS,OAAP;AACA,UAAQ,IAAI,KAAK;AACnB;","names":[]}