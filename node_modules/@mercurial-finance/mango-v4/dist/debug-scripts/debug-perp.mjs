import {
  MangoClient
} from "../chunk-HVUWVEE5.mjs";
import "../chunk-PDNGNLHE.mjs";
import "../chunk-TSHDMTGJ.mjs";
import "../chunk-P2PWY3QH.mjs";
import "../chunk-TCNCMUFM.mjs";
import "../chunk-BYB3CFSH.mjs";
import "../chunk-36PUIGQD.mjs";
import {
  MANGO_V4_ID
} from "../chunk-5SDTDLZO.mjs";
import "../chunk-O3IXUKHU.mjs";
import "../chunk-62VGMIX5.mjs";
import "../chunk-34DSBDDD.mjs";
import "../chunk-FP7S2XO3.mjs";
import "../chunk-Z2RB6KEX.mjs";
import "../chunk-5VRACIDE.mjs";

// ts/client/src/debug-scripts/debug-perp.ts
import { AnchorProvider, Wallet } from "@project-serum/anchor";
import { Connection, Keypair, PublicKey } from "@solana/web3.js";
import * as dotenv from "dotenv";
dotenv.config();
var CLUSTER_URL = process.env.CLUSTER_URL_OVERRIDE || process.env.MB_CLUSTER_URL;
var PAYER_KEYPAIR = process.env.PAYER_KEYPAIR_OVERRIDE || process.env.MB_PAYER_KEYPAIR;
var GROUP_PK = process.env.GROUP_PK || "78b8f4cGCwmZ9ysPFMWLaLTkkaYnUjwMJYStWe5RTSSX";
var CLUSTER = process.env.CLUSTER_OVERRIDE || "mainnet-beta";
async function main() {
  const options = AnchorProvider.defaultOptions();
  const connection = new Connection(CLUSTER_URL, options);
  const wallet = new Wallet(new Keypair());
  const provider = new AnchorProvider(connection, wallet, options);
  const client = MangoClient.connect(provider, CLUSTER, MANGO_V4_ID[CLUSTER], {
    idsSource: "get-program-accounts"
  });
  const group = await client.getGroup(new PublicKey(GROUP_PK));
  const mangoAccounts = await client.getAllMangoAccounts(group);
  Array.from(group.perpMarketsMapByMarketIndex.values()).filter((perpMarket) => perpMarket.name != "SOMETHING-PERP").map((perpMarket) => {
    console.log(`name ${perpMarket.name}`);
    let getUnsettledPnlUiAgg = 0;
    let getBasePositionUiAgg = 0;
    let longSettledFundingAgg = 0;
    let shortSettledFundingAgg = 0;
    mangoAccounts.map((mangoAccount) => {
      const pp = mangoAccount.perpActive().find((pp2) => pp2.marketIndex === perpMarket.perpMarketIndex);
      if (pp) {
        getUnsettledPnlUiAgg += pp.getUnsettledPnlUi(perpMarket);
        getBasePositionUiAgg += pp.getBasePositionUi(perpMarket);
        longSettledFundingAgg += pp.longSettledFunding.toNumber();
        shortSettledFundingAgg += pp.shortSettledFunding.toNumber();
      }
    });
    console.log(
      `- unsettled pnl aggr ${getUnsettledPnlUiAgg.toFixed(4).padStart(10)}`
    );
    console.log(
      `- base position aggr ${getBasePositionUiAgg.toFixed(4).padStart(10)}`
    );
    console.log(
      `- base position aggr * price ${(getBasePositionUiAgg * perpMarket.uiPrice).toFixed(4).padStart(10)}`
    );
    console.log(
      `- unsettled pnl aggr - base position aggr * price ${(getUnsettledPnlUiAgg - getBasePositionUiAgg * perpMarket.uiPrice).toFixed(4).padStart(10)}`
    );
    console.log();
  });
  process.exit();
}
try {
  main();
} catch (error) {
  console.log(error);
}
//# sourceMappingURL=debug-perp.mjs.map