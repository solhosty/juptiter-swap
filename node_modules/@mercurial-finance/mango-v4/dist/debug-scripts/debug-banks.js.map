{"version":3,"sources":["../../ts/client/src/debug-scripts/debug-banks.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnchorProvider, Wallet } from '@project-serum/anchor';\nimport { coder } from '@project-serum/anchor/dist/cjs/spl/token';\nimport { Cluster, Connection, Keypair } from '@solana/web3.js';\nimport * as dotenv from 'dotenv';\nimport fs from 'fs';\nimport { MangoClient } from '../client';\nimport { MANGO_V4_ID } from '../constants';\nimport { I80F48, ZERO_I80F48 } from '../numbers/I80F48';\nimport { toUiDecimals } from '../utils';\ndotenv.config();\n\nconst CLUSTER_URL =\n  process.env.CLUSTER_URL_OVERRIDE || process.env.MB_CLUSTER_URL;\nconst PAYER_KEYPAIR =\n  process.env.PAYER_KEYPAIR_OVERRIDE || process.env.MB_PAYER_KEYPAIR;\nconst GROUP_NUM = Number(process.env.GROUP_NUM || 0);\nconst CLUSTER: Cluster =\n  (process.env.CLUSTER_OVERRIDE as Cluster) || 'mainnet-beta';\n\nasync function main(): Promise<void> {\n  const options = AnchorProvider.defaultOptions();\n  const connection = new Connection(CLUSTER_URL!, options);\n\n  const admin = Keypair.fromSecretKey(\n    Buffer.from(JSON.parse(fs.readFileSync(PAYER_KEYPAIR!, 'utf-8'))),\n  );\n\n  const adminWallet = new Wallet(admin);\n  const adminProvider = new AnchorProvider(connection, adminWallet, options);\n  const client = MangoClient.connect(\n    adminProvider,\n    CLUSTER,\n    MANGO_V4_ID[CLUSTER],\n    { idsSource: 'get-program-accounts' },\n  );\n\n  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);\n  console.log(`Group ${group.publicKey.toBase58()}`);\n\n  const banks = Array.from(group.banksMapByMint.values()).flat();\n  const banksMapUsingTokenIndex = new Map(\n    banks.map((bank) => {\n      (bank as any).indexedDepositsByMangoAccounts = ZERO_I80F48();\n      (bank as any).indexedBorrowsByMangoAccounts = ZERO_I80F48();\n      return [bank.tokenIndex, bank];\n    }),\n  );\n\n  const mangoAccounts = await client.getAllMangoAccounts(group);\n\n  mangoAccounts.map((mangoAccount) =>\n    mangoAccount.tokensActive().forEach((token) => {\n      const bank = banksMapUsingTokenIndex.get(token.tokenIndex);\n      if (token.indexedPosition.isPos()) {\n        (bank as any).indexedDepositsByMangoAccounts = (\n          bank as any\n        ).indexedDepositsByMangoAccounts.add(\n          token.indexedPosition.mul(\n            banksMapUsingTokenIndex.get(token.tokenIndex)!.depositIndex,\n          ),\n        );\n      }\n      if (token.indexedPosition.isNeg()) {\n        (bank as any).indexedBorrowsByMangoAccounts = (\n          bank as any\n        ).indexedBorrowsByMangoAccounts.add(\n          token.indexedPosition\n            .abs()\n            .mul(banksMapUsingTokenIndex.get(token.tokenIndex)!.borrowIndex),\n        );\n      }\n    }),\n  );\n\n  for (const bank of await Array.from(banksMapUsingTokenIndex.values()).sort(\n    (a, b) => a.tokenIndex - b.tokenIndex,\n  )) {\n    const vault = I80F48.fromNumber(\n      coder()\n        .accounts.decode(\n          'token',\n          (await client.program.provider.connection.getAccountInfo(bank.vault))!\n            .data,\n        )\n        .amount.toNumber(),\n    );\n\n    const error = vault.sub(\n      (bank as any).indexedDepositsByMangoAccounts\n        .sub((bank as any).indexedBorrowsByMangoAccounts)\n        .add(bank.collectedFeesNative)\n        .add(bank.dust),\n    );\n\n    let res = `${bank.name}`;\n    res =\n      res +\n      `\\n ${'tokenIndex'.padEnd(40)} ${bank.tokenIndex}` +\n      `\\n ${'bank'.padEnd(40)} ${bank.publicKey}` +\n      `\\n ${'vault'.padEnd(40)} ${bank.vault}` +\n      `\\n ${'oracle'.padEnd(40)} ${bank.oracle}` +\n      `\\n ${'mint'.padEnd(40)} ${bank.mint}` +\n      `\\n ${'price'.padEnd(40)} ${bank.price?.toNumber()}` +\n      `\\n ${'uiPrice'.padEnd(40)} ${bank.uiPrice}` +\n      `\\n ${'error'.padEnd(40)} ${error}` +\n      `\\n ${'collectedFeesNative'.padEnd(40)} ${bank.collectedFeesNative}` +\n      `\\n ${'dust'.padEnd(40)} ${bank.dust}` +\n      `\\n ${'vault balance'.padEnd(40)} ${toUiDecimals(\n        vault,\n        bank.mintDecimals,\n      )}, ${vault} native` +\n      `\\n ${'deposits'.padEnd(40)} ${bank.indexedDeposits.mul(\n        bank.depositIndex,\n      )}` +\n      `\\n ${'deposits (sum over all mango accounts)'.padEnd(40)} ${\n        (bank as any).indexedDepositsByMangoAccounts\n      }` +\n      `\\n ${'borrows'.padEnd(40)} ${bank.indexedBorrows.mul(\n        bank.borrowIndex,\n      )}` +\n      `\\n ${'borrows (sum over all mango accounts)'.padEnd(40)} ${\n        (bank as any).indexedBorrowsByMangoAccounts\n      }` +\n      `\\n ${'avgUtilization since last rate update'.padEnd(40)} ${(\n        100 * bank.avgUtilization.toNumber()\n      ).toFixed(1)}%` +\n      `\\n ${'rate parameters'.padEnd(40)} ${(\n        100 * bank.rate0.toNumber()\n      ).toFixed()}% @ ${(100 * bank.util0.toNumber()).toFixed()}% util, ${(\n        100 * bank.rate1.toNumber()\n      ).toFixed()}% @${(100 * bank.util1.toNumber()).toFixed()}% util, ${(\n        100 * bank.maxRate.toNumber()\n      ).toFixed()}% @ 100% util` +\n      `\\n ${'depositRate'.padEnd(40)} ${(\n        100 * bank.getDepositRate().toNumber()\n      ).toFixed(2)}%` +\n      `\\n ${'borrowRate'.padEnd(40)} ${(\n        100 * bank.getBorrowRate().toNumber()\n      ).toFixed(2)}%` +\n      `\\n ${'last index update'.padEnd(40)} ${new Date(\n        1000 * bank.indexLastUpdated.toNumber(),\n      )}` +\n      `\\n ${'last rates update'.padEnd(40)} ${new Date(\n        1000 * bank.bankRateLastUpdated.toNumber(),\n      )}` +\n      `\\n ${'net borrows in window'.padEnd(\n        40,\n      )} ${bank.netBorrowsInWindow.toNumber()} / ${bank.netBorrowLimitPerWindowQuote.toNumber()}`;\n\n    console.log(`${res}`);\n  }\n\n  process.exit();\n}\n\ntry {\n  main();\n} catch (error) {\n  console.log(error);\n}\n"]}