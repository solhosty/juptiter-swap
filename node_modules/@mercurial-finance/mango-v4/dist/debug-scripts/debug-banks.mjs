import {
  MangoClient
} from "../chunk-HVUWVEE5.mjs";
import "../chunk-PDNGNLHE.mjs";
import "../chunk-TSHDMTGJ.mjs";
import "../chunk-P2PWY3QH.mjs";
import "../chunk-TCNCMUFM.mjs";
import "../chunk-BYB3CFSH.mjs";
import "../chunk-36PUIGQD.mjs";
import {
  MANGO_V4_ID
} from "../chunk-5SDTDLZO.mjs";
import {
  toUiDecimals
} from "../chunk-O3IXUKHU.mjs";
import {
  I80F48,
  ZERO_I80F48
} from "../chunk-62VGMIX5.mjs";
import "../chunk-34DSBDDD.mjs";
import "../chunk-FP7S2XO3.mjs";
import "../chunk-Z2RB6KEX.mjs";
import "../chunk-5VRACIDE.mjs";

// ts/client/src/debug-scripts/debug-banks.ts
import { AnchorProvider, Wallet } from "@project-serum/anchor";
import { coder } from "@project-serum/anchor/dist/cjs/spl/token";
import { Connection, Keypair } from "@solana/web3.js";
import * as dotenv from "dotenv";
import fs from "fs";
dotenv.config();
var CLUSTER_URL = process.env.CLUSTER_URL_OVERRIDE || process.env.MB_CLUSTER_URL;
var PAYER_KEYPAIR = process.env.PAYER_KEYPAIR_OVERRIDE || process.env.MB_PAYER_KEYPAIR;
var GROUP_NUM = Number(process.env.GROUP_NUM || 0);
var CLUSTER = process.env.CLUSTER_OVERRIDE || "mainnet-beta";
async function main() {
  const options = AnchorProvider.defaultOptions();
  const connection = new Connection(CLUSTER_URL, options);
  const admin = Keypair.fromSecretKey(
    Buffer.from(JSON.parse(fs.readFileSync(PAYER_KEYPAIR, "utf-8")))
  );
  const adminWallet = new Wallet(admin);
  const adminProvider = new AnchorProvider(connection, adminWallet, options);
  const client = MangoClient.connect(
    adminProvider,
    CLUSTER,
    MANGO_V4_ID[CLUSTER],
    { idsSource: "get-program-accounts" }
  );
  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);
  console.log(`Group ${group.publicKey.toBase58()}`);
  const banks = Array.from(group.banksMapByMint.values()).flat();
  const banksMapUsingTokenIndex = new Map(
    banks.map((bank) => {
      bank.indexedDepositsByMangoAccounts = ZERO_I80F48();
      bank.indexedBorrowsByMangoAccounts = ZERO_I80F48();
      return [bank.tokenIndex, bank];
    })
  );
  const mangoAccounts = await client.getAllMangoAccounts(group);
  mangoAccounts.map(
    (mangoAccount) => mangoAccount.tokensActive().forEach((token) => {
      const bank = banksMapUsingTokenIndex.get(token.tokenIndex);
      if (token.indexedPosition.isPos()) {
        bank.indexedDepositsByMangoAccounts = bank.indexedDepositsByMangoAccounts.add(
          token.indexedPosition.mul(
            banksMapUsingTokenIndex.get(token.tokenIndex).depositIndex
          )
        );
      }
      if (token.indexedPosition.isNeg()) {
        bank.indexedBorrowsByMangoAccounts = bank.indexedBorrowsByMangoAccounts.add(
          token.indexedPosition.abs().mul(banksMapUsingTokenIndex.get(token.tokenIndex).borrowIndex)
        );
      }
    })
  );
  for (const bank of await Array.from(banksMapUsingTokenIndex.values()).sort(
    (a, b) => a.tokenIndex - b.tokenIndex
  )) {
    const vault = I80F48.fromNumber(
      coder().accounts.decode(
        "token",
        (await client.program.provider.connection.getAccountInfo(bank.vault)).data
      ).amount.toNumber()
    );
    const error = vault.sub(
      bank.indexedDepositsByMangoAccounts.sub(bank.indexedBorrowsByMangoAccounts).add(bank.collectedFeesNative).add(bank.dust)
    );
    let res = `${bank.name}`;
    res = res + `
 ${"tokenIndex".padEnd(40)} ${bank.tokenIndex}
 ${"bank".padEnd(40)} ${bank.publicKey}
 ${"vault".padEnd(40)} ${bank.vault}
 ${"oracle".padEnd(40)} ${bank.oracle}
 ${"mint".padEnd(40)} ${bank.mint}
 ${"price".padEnd(40)} ${bank.price?.toNumber()}
 ${"uiPrice".padEnd(40)} ${bank.uiPrice}
 ${"error".padEnd(40)} ${error}
 ${"collectedFeesNative".padEnd(40)} ${bank.collectedFeesNative}
 ${"dust".padEnd(40)} ${bank.dust}
 ${"vault balance".padEnd(40)} ${toUiDecimals(
      vault,
      bank.mintDecimals
    )}, ${vault} native
 ${"deposits".padEnd(40)} ${bank.indexedDeposits.mul(
      bank.depositIndex
    )}
 ${"deposits (sum over all mango accounts)".padEnd(40)} ${bank.indexedDepositsByMangoAccounts}
 ${"borrows".padEnd(40)} ${bank.indexedBorrows.mul(
      bank.borrowIndex
    )}
 ${"borrows (sum over all mango accounts)".padEnd(40)} ${bank.indexedBorrowsByMangoAccounts}
 ${"avgUtilization since last rate update".padEnd(40)} ${(100 * bank.avgUtilization.toNumber()).toFixed(1)}%
 ${"rate parameters".padEnd(40)} ${(100 * bank.rate0.toNumber()).toFixed()}% @ ${(100 * bank.util0.toNumber()).toFixed()}% util, ${(100 * bank.rate1.toNumber()).toFixed()}% @${(100 * bank.util1.toNumber()).toFixed()}% util, ${(100 * bank.maxRate.toNumber()).toFixed()}% @ 100% util
 ${"depositRate".padEnd(40)} ${(100 * bank.getDepositRate().toNumber()).toFixed(2)}%
 ${"borrowRate".padEnd(40)} ${(100 * bank.getBorrowRate().toNumber()).toFixed(2)}%
 ${"last index update".padEnd(40)} ${new Date(
      1e3 * bank.indexLastUpdated.toNumber()
    )}
 ${"last rates update".padEnd(40)} ${new Date(
      1e3 * bank.bankRateLastUpdated.toNumber()
    )}
 ${"net borrows in window".padEnd(
      40
    )} ${bank.netBorrowsInWindow.toNumber()} / ${bank.netBorrowLimitPerWindowQuote.toNumber()}`;
    console.log(`${res}`);
  }
  process.exit();
}
try {
  main();
} catch (error) {
  console.log(error);
}
//# sourceMappingURL=debug-banks.mjs.map