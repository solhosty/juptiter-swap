import {
  OPENBOOK_PROGRAM_ID
} from "./chunk-5SDTDLZO.mjs";
import {
  MAX_I80F48,
  ONE_I80F48,
  ZERO_I80F48
} from "./chunk-62VGMIX5.mjs";

// ts/client/src/accounts/serum3.ts
import { utf8 } from "@project-serum/anchor/dist/cjs/utils/bytes";
import { PublicKey } from "@solana/web3.js";
var Serum3Market = class {
  constructor(publicKey, group, baseTokenIndex, quoteTokenIndex, name, serumProgram, serumMarketExternal, marketIndex, registrationTime, reduceOnly) {
    this.publicKey = publicKey;
    this.group = group;
    this.baseTokenIndex = baseTokenIndex;
    this.quoteTokenIndex = quoteTokenIndex;
    this.serumProgram = serumProgram;
    this.serumMarketExternal = serumMarketExternal;
    this.marketIndex = marketIndex;
    this.registrationTime = registrationTime;
    this.reduceOnly = reduceOnly;
    this.name = utf8.decode(new Uint8Array(name)).split("\0")[0];
  }
  static from(publicKey, obj) {
    return new Serum3Market(
      publicKey,
      obj.group,
      obj.baseTokenIndex,
      obj.quoteTokenIndex,
      obj.name,
      obj.serumProgram,
      obj.serumMarketExternal,
      obj.marketIndex,
      obj.registrationTime,
      obj.reduceOnly == 1
    );
  }
  async findOoPda(programId, mangoAccount) {
    const [openOrderPublicKey] = await PublicKey.findProgramAddress(
      [
        Buffer.from("Serum3OO"),
        mangoAccount.toBuffer(),
        this.publicKey.toBuffer()
      ],
      programId
    );
    return openOrderPublicKey;
  }
  getFeeRates(taker = true) {
    const ratesBps = this.name === "USDT/USDC" ? { maker: -0.5, taker: 1 } : { maker: -2, taker: 4 };
    return taker ? ratesBps.maker * 1e-4 : ratesBps.taker * 1e-4;
  }
  /**
   *
   * @param group
   * @returns maximum leverage one can bid on this market, this is only for display purposes,
   *  also see getMaxQuoteForSerum3BidUi and getMaxBaseForSerum3AskUi
   */
  maxBidLeverage(group) {
    const baseBank = group.getFirstBankByTokenIndex(this.baseTokenIndex);
    const quoteBank = group.getFirstBankByTokenIndex(this.quoteTokenIndex);
    if (quoteBank.initLiabWeight.sub(baseBank.initAssetWeight).lte(ZERO_I80F48())) {
      return MAX_I80F48().toNumber();
    }
    return ONE_I80F48().div(quoteBank.initLiabWeight.sub(baseBank.initAssetWeight)).toNumber();
  }
  /**
   *
   * @param group
   * @returns maximum leverage one can ask on this market, this is only for display purposes,
   *  also see getMaxQuoteForSerum3BidUi and getMaxBaseForSerum3AskUi
   */
  maxAskLeverage(group) {
    const baseBank = group.getFirstBankByTokenIndex(this.baseTokenIndex);
    const quoteBank = group.getFirstBankByTokenIndex(this.quoteTokenIndex);
    if (baseBank.initLiabWeight.sub(quoteBank.initAssetWeight).lte(ZERO_I80F48())) {
      return MAX_I80F48().toNumber();
    }
    return ONE_I80F48().div(baseBank.initLiabWeight.sub(quoteBank.initAssetWeight)).toNumber();
  }
  async loadBids(client, group) {
    const serum3MarketExternal = group.getSerum3ExternalMarket(
      this.serumMarketExternal
    );
    return await serum3MarketExternal.loadBids(
      client.program.provider.connection
    );
  }
  async loadAsks(client, group) {
    const serum3MarketExternal = group.getSerum3ExternalMarket(
      this.serumMarketExternal
    );
    return await serum3MarketExternal.loadAsks(
      client.program.provider.connection
    );
  }
  async logOb(client, group) {
    let res = ``;
    res += `  ${this.name} OrderBook`;
    let orders = await this?.loadAsks(client, group);
    for (const order of orders.items(true)) {
      res += `
  ${order.price.toString().padStart(10)}, ${order.size.toString().padStart(10)}`;
    }
    res += `
  --------------------------`;
    orders = await this?.loadBids(client, group);
    for (const order of orders.items(true)) {
      res += `
  ${order.price.toString().padStart(10)}, ${order.size.toString().padStart(10)}`;
    }
    return res;
  }
};
var Serum3SelfTradeBehavior = class {
};
Serum3SelfTradeBehavior.decrementTake = { decrementTake: {} };
Serum3SelfTradeBehavior.cancelProvide = { cancelProvide: {} };
Serum3SelfTradeBehavior.abortTransaction = { abortTransaction: {} };
var Serum3OrderType = class {
};
Serum3OrderType.limit = { limit: {} };
Serum3OrderType.immediateOrCancel = { immediateOrCancel: {} };
Serum3OrderType.postOnly = { postOnly: {} };
var Serum3Side = class {
};
Serum3Side.bid = { bid: {} };
Serum3Side.ask = { ask: {} };
async function generateSerum3MarketExternalVaultSignerAddress(cluster, serum3Market, serum3MarketExternal) {
  return await PublicKey.createProgramAddress(
    [
      serum3Market.serumMarketExternal.toBuffer(),
      serum3MarketExternal.decoded.vaultSignerNonce.toArrayLike(
        Buffer,
        "le",
        8
      )
    ],
    OPENBOOK_PROGRAM_ID[cluster]
  );
}

export {
  Serum3Market,
  Serum3SelfTradeBehavior,
  Serum3OrderType,
  Serum3Side,
  generateSerum3MarketExternalVaultSignerAddress
};
//# sourceMappingURL=chunk-TCNCMUFM.mjs.map