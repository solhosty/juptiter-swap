{"version":3,"sources":["../ts/client/src/scripts/mm/sequence-enforcer-util.ts"],"names":[],"mappings":";AAAA,SAAS,UAAU;AACnB;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,kBAAkB;AAEpB,IAAM,wBAAwB;AAAA,EACnC,QAAQ,IAAI,UAAU,8CAA8C;AAAA,EACpE,SAAS,IAAI,UAAU,8CAA8C;AAAA,EACrE,gBAAgB,IAAI,UAAU,8CAA8C;AAC9E;AAEO,SAAS,kCACd,SACA,SACA,MACA,KACA,SACwB;AACxB,QAAM,OAAO;AAAA,IACX,EAAE,UAAU,OAAO,YAAY,MAAM,QAAQ,QAAQ;AAAA,IACrD,EAAE,UAAU,MAAM,YAAY,MAAM,QAAQ,QAAQ;AAAA,IACpD,EAAE,UAAU,OAAO,YAAY,OAAO,QAAQ,cAAc,UAAU;AAAA,EACxE;AAEA,QAAM,UAAU,WAAW,QAAQ,EAChC,OAAO,mBAAmB,EAC1B,OAAO,EACP,MAAM,GAAG,CAAC;AAEb,QAAM,WAAW,IAAI,GAAG,IAAI,EAAE,SAAS,MAAM,CAAC;AAC9C,QAAM,SAAS,IAAI,GAAG,IAAI,MAAM,EAAE,SAAS,MAAM,CAAC;AAClD,QAAM,aAAa,OAAO,KAAK,GAAG;AAElC,QAAM,OAAO,OAAO,OAAO,CAAC,SAAS,UAAU,QAAQ,UAAU,CAAC;AAElE,SAAO,IAAI,uBAAuB;AAAA,IAChC;AAAA,IACA;AAAA,IACA,WAAW,sBAAsB,OAAO;AAAA,EAC1C,CAAC;AACH;AAEO,SAAS,gCACd,iBACA,SACA,QACA,SACwB;AACxB,QAAM,OAAO;AAAA,IACX,EAAE,UAAU,OAAO,YAAY,MAAM,QAAQ,gBAAgB;AAAA,IAC7D,EAAE,UAAU,MAAM,YAAY,OAAO,QAAQ,QAAQ;AAAA,EACvD;AACA,QAAM,UAAU,WAAW,QAAQ,EAChC,OAAO,sCAAsC,EAC7C,OAAO,EACP,MAAM,GAAG,CAAC;AAEb,QAAM,eAAe,IAAI,GAAG,MAAM,EAAE,SAAS,MAAM,CAAC;AACpD,QAAM,OAAO,OAAO,OAAO,CAAC,SAAS,YAAY,CAAC;AAClD,SAAO,IAAI,uBAAuB;AAAA,IAChC;AAAA,IACA;AAAA,IACA,WAAW,sBAAsB,OAAO;AAAA,EAC1C,CAAC;AACH","sourcesContent":["import { BN } from '@project-serum/anchor';\nimport {\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { createHash } from 'crypto';\n\nexport const seqEnforcerProgramIds = {\n  devnet: new PublicKey('FBngRHN4s5cmHagqy3Zd6xcK3zPJBeX5DixtHFbBhyCn'),\n  testnet: new PublicKey('FThcgpaJM8WiEbK5rw3i31Ptb8Hm4rQ27TrhfzeR1uUy'),\n  'mainnet-beta': new PublicKey('GDDMwNyyx8uB6zrqwBFHjLLG3TBYk2F8Az4yrQC5RzMp'),\n};\n\nexport function makeInitSequenceEnforcerAccountIx(\n  account: PublicKey,\n  ownerPk: PublicKey,\n  bump: number,\n  sym: string,\n  cluster: string,\n): TransactionInstruction {\n  const keys = [\n    { isSigner: false, isWritable: true, pubkey: account },\n    { isSigner: true, isWritable: true, pubkey: ownerPk },\n    { isSigner: false, isWritable: false, pubkey: SystemProgram.programId },\n  ];\n\n  const variant = createHash('sha256')\n    .update('global:initialize')\n    .digest()\n    .slice(0, 8);\n\n  const bumpData = new BN(bump).toBuffer('le', 1);\n  const strLen = new BN(sym.length).toBuffer('le', 4);\n  const symEncoded = Buffer.from(sym);\n\n  const data = Buffer.concat([variant, bumpData, strLen, symEncoded]);\n\n  return new TransactionInstruction({\n    keys,\n    data,\n    programId: seqEnforcerProgramIds[cluster],\n  });\n}\n\nexport function makeCheckAndSetSequenceNumberIx(\n  sequenceAccount: PublicKey,\n  ownerPk: PublicKey,\n  seqNum: number,\n  cluster,\n): TransactionInstruction {\n  const keys = [\n    { isSigner: false, isWritable: true, pubkey: sequenceAccount },\n    { isSigner: true, isWritable: false, pubkey: ownerPk },\n  ];\n  const variant = createHash('sha256')\n    .update('global:check_and_set_sequence_number')\n    .digest()\n    .slice(0, 8);\n\n  const seqNumBuffer = new BN(seqNum).toBuffer('le', 8);\n  const data = Buffer.concat([variant, seqNumBuffer]);\n  return new TransactionInstruction({\n    keys,\n    data,\n    programId: seqEnforcerProgramIds[cluster],\n  });\n}\n"]}