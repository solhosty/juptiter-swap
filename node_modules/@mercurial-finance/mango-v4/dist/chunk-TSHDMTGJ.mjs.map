{"version":3,"sources":["../ts/client/src/accounts/group.ts"],"sourcesContent":["import { BorshAccountsCoder } from '@project-serum/anchor';\nimport { coder } from '@project-serum/anchor/dist/cjs/spl/token';\nimport { Market, Orderbook } from '@project-serum/serum';\nimport { parsePriceData } from '@pythnetwork/client';\nimport {\n  AccountInfo,\n  AddressLookupTableAccount,\n  PublicKey,\n} from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { cloneDeep, merge } from 'lodash';\nimport { MangoClient } from '../client';\nimport { OPENBOOK_PROGRAM_ID } from '../constants';\nimport { Id } from '../ids';\nimport { I80F48, ONE_I80F48 } from '../numbers/I80F48';\nimport { toNative, toNativeI80F48, toUiDecimals } from '../utils';\nimport { Bank, MintInfo, TokenIndex } from './bank';\nimport {\n  isPythOracle,\n  isSwitchboardOracle,\n  parseSwitchboardOracle,\n} from './oracle';\nimport { BookSide, PerpMarket, PerpMarketIndex } from './perp';\nimport { MarketIndex, Serum3Market } from './serum3';\n\nexport class Group {\n  static from(\n    publicKey: PublicKey,\n    obj: {\n      creator: PublicKey;\n      groupNum: number;\n      admin: PublicKey;\n      fastListingAdmin: PublicKey;\n      securityAdmin: PublicKey;\n      insuranceMint: PublicKey;\n      insuranceVault: PublicKey;\n      testing: number;\n      version: number;\n      ixGate: BN;\n      addressLookupTables: PublicKey[];\n    },\n  ): Group {\n    return new Group(\n      publicKey,\n      obj.creator,\n      obj.groupNum,\n      obj.admin,\n      obj.fastListingAdmin,\n      obj.securityAdmin,\n      obj.insuranceMint,\n      obj.insuranceVault,\n      obj.testing,\n      obj.version,\n      obj.ixGate,\n      obj.addressLookupTables,\n      [], // addressLookupTablesList\n      new Map(), // banksMapByName\n      new Map(), // banksMapByMint\n      new Map(), // banksMapByTokenIndex\n      new Map(), // serum3MarketsMapByExternal\n      new Map(), // serum3MarketsMapByMarketIndex\n      new Map(), // serum3MarketExternalsMap\n      new Map(), // perpMarketsMapByOracle\n      new Map(), // perpMarketsMapByMarketIndex\n      new Map(), // perpMarketsMapByName\n      new Map(), // mintInfosMapByTokenIndex\n      new Map(), // mintInfosMapByMint\n      new Map(), // vaultAmountsMap\n    );\n  }\n\n  constructor(\n    public publicKey: PublicKey,\n    public creator: PublicKey,\n    public groupNum: number,\n    public admin: PublicKey,\n    public fastListingAdmin: PublicKey,\n    public securityAdmin: PublicKey,\n    public insuranceMint: PublicKey,\n    public insuranceVault: PublicKey,\n    public testing: number,\n    public version: number,\n    public ixGate: BN,\n    public addressLookupTables: PublicKey[],\n    public addressLookupTablesList: AddressLookupTableAccount[],\n    public banksMapByName: Map<string, Bank[]>,\n    public banksMapByMint: Map<string, Bank[]>,\n    public banksMapByTokenIndex: Map<TokenIndex, Bank[]>,\n    public serum3MarketsMapByExternal: Map<string, Serum3Market>,\n    public serum3MarketsMapByMarketIndex: Map<MarketIndex, Serum3Market>,\n    public serum3ExternalMarketsMap: Map<string, Market>,\n    public perpMarketsMapByOracle: Map<string, PerpMarket>,\n    public perpMarketsMapByMarketIndex: Map<PerpMarketIndex, PerpMarket>,\n    public perpMarketsMapByName: Map<string, PerpMarket>,\n    public mintInfosMapByTokenIndex: Map<TokenIndex, MintInfo>,\n    public mintInfosMapByMint: Map<string, MintInfo>,\n    public vaultAmountsMap: Map<string, BN>,\n  ) {}\n\n  public async reloadAll(client: MangoClient): Promise<void> {\n    const ids: Id | undefined = await client.getIds(this.publicKey);\n\n    // console.time('group.reload');\n    await Promise.all([\n      this.reloadAlts(client),\n      this.reloadBanks(client, ids).then(() =>\n        Promise.all([\n          this.reloadBankOraclePrices(client),\n          this.reloadVaults(client),\n          this.reloadPerpMarkets(client, ids).then(() =>\n            this.reloadPerpMarketOraclePrices(client),\n          ),\n        ]),\n      ),\n      this.reloadMintInfos(client, ids),\n      this.reloadSerum3Markets(client, ids).then(() =>\n        this.reloadSerum3ExternalMarkets(client),\n      ),\n    ]);\n    // console.timeEnd('group.reload');\n  }\n\n  public async reloadAlts(client: MangoClient): Promise<void> {\n    const alts = await Promise.all(\n      this.addressLookupTables\n        .filter((alt) => !alt.equals(PublicKey.default))\n        .map((alt) =>\n          client.program.provider.connection.getAddressLookupTable(alt),\n        ),\n    );\n    this.addressLookupTablesList = alts.map((res, i) => {\n      if (!res || !res.value) {\n        throw new Error(`Undefined ALT ${this.addressLookupTables[i]}!`);\n      }\n      return res.value;\n    });\n  }\n\n  public async reloadBanks(client: MangoClient, ids?: Id): Promise<void> {\n    let banks: Bank[];\n\n    if (ids && ids.getBanks().length) {\n      banks = (\n        await client.program.account.bank.fetchMultiple(ids.getBanks())\n      ).map((account, index) =>\n        Bank.from(ids.getBanks()[index], account as any),\n      );\n    } else {\n      banks = await client.getBanksForGroup(this);\n    }\n\n    const oldbanksMapByTokenIndex = cloneDeep(this.banksMapByTokenIndex);\n    this.banksMapByName = new Map();\n    this.banksMapByMint = new Map();\n    this.banksMapByTokenIndex = new Map();\n    for (const bank of banks) {\n      // ensure that freshly fetched banks have valid price until we fetch oracles again\n      const oldBanks = oldbanksMapByTokenIndex.get(bank.tokenIndex);\n      if (oldBanks && oldBanks.length > 0) {\n        merge(bank, oldBanks[0]);\n      }\n\n      const mintId = bank.mint.toString();\n      if (this.banksMapByMint.has(mintId)) {\n        this.banksMapByMint.get(mintId)?.push(bank);\n        this.banksMapByName.get(bank.name)?.push(bank);\n        this.banksMapByTokenIndex.get(bank.tokenIndex)?.push(bank);\n      } else {\n        this.banksMapByMint.set(mintId, [bank]);\n        this.banksMapByName.set(bank.name, [bank]);\n        this.banksMapByTokenIndex.set(bank.tokenIndex, [bank]);\n      }\n    }\n  }\n\n  public async reloadMintInfos(client: MangoClient, ids?: Id): Promise<void> {\n    let mintInfos: MintInfo[];\n    if (ids && ids.getMintInfos().length) {\n      mintInfos = (\n        await client.program.account.mintInfo.fetchMultiple(ids.getMintInfos())\n      ).map((account, index) =>\n        MintInfo.from(ids.getMintInfos()[index], account as any),\n      );\n    } else {\n      mintInfos = await client.getMintInfosForGroup(this);\n    }\n\n    this.mintInfosMapByTokenIndex = new Map(\n      mintInfos.map((mintInfo) => {\n        return [mintInfo.tokenIndex, mintInfo];\n      }),\n    );\n\n    this.mintInfosMapByMint = new Map(\n      mintInfos.map((mintInfo) => {\n        return [mintInfo.mint.toString(), mintInfo];\n      }),\n    );\n  }\n\n  public async reloadSerum3Markets(\n    client: MangoClient,\n    ids?: Id,\n  ): Promise<void> {\n    let serum3Markets: Serum3Market[];\n    if (ids && ids.getSerum3Markets().length) {\n      serum3Markets = (\n        await client.program.account.serum3Market.fetchMultiple(\n          ids.getSerum3Markets(),\n        )\n      ).map((account, index) =>\n        Serum3Market.from(ids.getSerum3Markets()[index], account as any),\n      );\n    } else {\n      serum3Markets = await client.serum3GetMarkets(this);\n    }\n\n    this.serum3MarketsMapByExternal = new Map(\n      serum3Markets.map((serum3Market) => [\n        serum3Market.serumMarketExternal.toBase58(),\n        serum3Market,\n      ]),\n    );\n    this.serum3MarketsMapByMarketIndex = new Map(\n      serum3Markets.map((serum3Market) => [\n        serum3Market.marketIndex,\n        serum3Market,\n      ]),\n    );\n  }\n\n  public async reloadSerum3ExternalMarkets(client: MangoClient): Promise<void> {\n    const externalMarkets = await Promise.all(\n      Array.from(this.serum3MarketsMapByExternal.values()).map((serum3Market) =>\n        Market.load(\n          client.program.provider.connection,\n          serum3Market.serumMarketExternal,\n          { commitment: client.program.provider.connection.commitment },\n          OPENBOOK_PROGRAM_ID[client.cluster],\n        ),\n      ),\n    );\n\n    this.serum3ExternalMarketsMap = new Map(\n      Array.from(this.serum3MarketsMapByExternal.values()).map(\n        (serum3Market, index) => [\n          serum3Market.serumMarketExternal.toBase58(),\n          externalMarkets[index],\n        ],\n      ),\n    );\n  }\n\n  public async reloadPerpMarkets(client: MangoClient, ids?: Id): Promise<void> {\n    let perpMarkets: PerpMarket[];\n    if (ids && ids.getPerpMarkets().length) {\n      perpMarkets = (\n        await client.program.account.perpMarket.fetchMultiple(\n          ids.getPerpMarkets(),\n        )\n      ).map((account, index) =>\n        PerpMarket.from(ids.getPerpMarkets()[index], account as any),\n      );\n    } else {\n      perpMarkets = await client.perpGetMarkets(this);\n    }\n\n    // ensure that freshly fetched perp markets have valid price until we fetch oracles again\n    const oldPerpMarketByMarketIndex = cloneDeep(\n      this.perpMarketsMapByMarketIndex,\n    );\n    for (const perpMarket of perpMarkets) {\n      const oldPerpMarket = oldPerpMarketByMarketIndex.get(\n        perpMarket.perpMarketIndex,\n      );\n      if (oldPerpMarket) {\n        merge(perpMarket, oldPerpMarket);\n      }\n    }\n\n    this.perpMarketsMapByName = new Map(\n      perpMarkets.map((perpMarket) => [perpMarket.name, perpMarket]),\n    );\n    this.perpMarketsMapByOracle = new Map(\n      perpMarkets.map((perpMarket) => [\n        perpMarket.oracle.toBase58(),\n        perpMarket,\n      ]),\n    );\n    this.perpMarketsMapByMarketIndex = new Map(\n      perpMarkets.map((perpMarket) => [perpMarket.perpMarketIndex, perpMarket]),\n    );\n  }\n\n  public async reloadBankOraclePrices(client: MangoClient): Promise<void> {\n    const banks: Bank[][] = Array.from(\n      this.banksMapByMint,\n      ([, value]) => value,\n    );\n    const oracles = banks.map((b) => b[0].oracle);\n    const ais =\n      await client.program.provider.connection.getMultipleAccountsInfo(oracles);\n\n    const coder = new BorshAccountsCoder(client.program.idl);\n    for (const [index, ai] of ais.entries()) {\n      for (const bank of banks[index]) {\n        if (bank.name === 'USDC') {\n          bank._price = ONE_I80F48();\n          bank._uiPrice = 1;\n        } else {\n          if (!ai)\n            throw new Error(\n              `Undefined accountInfo object in reloadBankOraclePrices for ${bank.oracle}!`,\n            );\n          const { price, uiPrice, lastUpdatedSlot } =\n            await this.decodePriceFromOracleAi(\n              coder,\n              bank.oracle,\n              ai,\n              this.getMintDecimals(bank.mint),\n              client,\n            );\n          bank._price = price;\n          bank._uiPrice = uiPrice;\n          bank._oracleLastUpdatedSlot = lastUpdatedSlot;\n        }\n      }\n    }\n  }\n\n  public async reloadPerpMarketOraclePrices(\n    client: MangoClient,\n  ): Promise<void> {\n    const perpMarkets: PerpMarket[] = Array.from(\n      this.perpMarketsMapByName.values(),\n    );\n    const oracles = perpMarkets.map((b) => b.oracle);\n    const ais =\n      await client.program.provider.connection.getMultipleAccountsInfo(oracles);\n\n    const coder = new BorshAccountsCoder(client.program.idl);\n    await Promise.all(\n      Array.from(ais.entries()).map(async ([i, ai]) => {\n        const perpMarket = perpMarkets[i];\n        if (!ai)\n          throw new Error(\n            `Undefined ai object in reloadPerpMarketOraclePrices for ${perpMarket.oracle}!`,\n          );\n\n        const { price, uiPrice, lastUpdatedSlot } =\n          await this.decodePriceFromOracleAi(\n            coder,\n            perpMarket.oracle,\n            ai,\n            perpMarket.baseDecimals,\n            client,\n          );\n        perpMarket._price = price;\n        perpMarket._uiPrice = uiPrice;\n        perpMarket._oracleLastUpdatedSlot = lastUpdatedSlot;\n      }),\n    );\n  }\n\n  private async decodePriceFromOracleAi(\n    coder: BorshAccountsCoder<string>,\n    oracle: PublicKey,\n    ai: AccountInfo<Buffer>,\n    baseDecimals: number,\n    client: MangoClient,\n  ): Promise<{ price: I80F48; uiPrice: number; lastUpdatedSlot: number }> {\n    let price, uiPrice, lastUpdatedSlot;\n    if (\n      !BorshAccountsCoder.accountDiscriminator('stubOracle').compare(\n        ai.data.slice(0, 8),\n      )\n    ) {\n      const stubOracle = coder.decode('stubOracle', ai.data);\n      price = new I80F48(stubOracle.price.val);\n      uiPrice = this.toUiPrice(price, baseDecimals);\n      lastUpdatedSlot = stubOracle.lastUpdated.val;\n    } else if (isPythOracle(ai)) {\n      const priceData = parsePriceData(ai.data);\n      uiPrice = priceData.previousPrice;\n      price = this.toNativePrice(uiPrice, baseDecimals);\n      lastUpdatedSlot = parseInt(priceData.lastSlot.toString());\n    } else if (isSwitchboardOracle(ai)) {\n      const priceData = await parseSwitchboardOracle(\n        ai,\n        client.program.provider.connection,\n      );\n      uiPrice = priceData.price;\n      price = this.toNativePrice(uiPrice, baseDecimals);\n      lastUpdatedSlot = priceData.lastUpdatedSlot;\n    } else {\n      throw new Error(\n        `Unknown oracle provider (parsing not implemented) for oracle ${oracle}, with owner ${ai.owner}!`,\n      );\n    }\n    return { price, uiPrice, lastUpdatedSlot };\n  }\n\n  public async reloadVaults(client: MangoClient): Promise<void> {\n    const vaultPks = Array.from(this.banksMapByMint.values())\n      .flat()\n      .map((bank) => bank.vault);\n    const vaultAccounts =\n      await client.program.provider.connection.getMultipleAccountsInfo(\n        vaultPks,\n      );\n\n    this.vaultAmountsMap = new Map(\n      vaultAccounts.map((vaultAi, i) => {\n        if (!vaultAi) {\n          throw new Error(`Undefined vaultAi for ${vaultPks[i]}`!);\n        }\n        const vaultAmount = coder().accounts.decode(\n          'token',\n          vaultAi.data,\n        ).amount;\n        return [vaultPks[i].toBase58(), vaultAmount];\n      }),\n    );\n  }\n\n  public getMintDecimals(mintPk: PublicKey): number {\n    const bank = this.getFirstBankByMint(mintPk);\n    return bank.mintDecimals;\n  }\n\n  public getMintDecimalsByTokenIndex(tokenIndex: TokenIndex): number {\n    const bank = this.getFirstBankByTokenIndex(tokenIndex);\n    return bank.mintDecimals;\n  }\n\n  public getInsuranceMintDecimals(): number {\n    return this.getMintDecimals(this.insuranceMint);\n  }\n\n  public getFirstBankByMint(mintPk: PublicKey): Bank {\n    const banks = this.banksMapByMint.get(mintPk.toString());\n    if (!banks) throw new Error(`No bank found for mint ${mintPk}!`);\n    return banks[0];\n  }\n\n  public getFirstBankByTokenIndex(tokenIndex: TokenIndex): Bank {\n    const banks = this.banksMapByTokenIndex.get(tokenIndex);\n    if (!banks) throw new Error(`No bank found for tokenIndex ${tokenIndex}!`);\n    return banks[0];\n  }\n\n  /**\n   *\n   * @param mintPk\n   * @returns sum of ui balances of vaults for all banks for a token\n   */\n  public getTokenVaultBalanceByMintUi(mintPk: PublicKey): number {\n    const banks = this.banksMapByMint.get(mintPk.toBase58());\n    if (!banks) {\n      throw new Error(`No bank found for mint ${mintPk}!`);\n    }\n    const totalAmount = new BN(0);\n    for (const bank of banks) {\n      const amount = this.vaultAmountsMap.get(bank.vault.toBase58());\n      if (!amount) {\n        throw new Error(\n          `Vault balance not found for bank ${bank.name} ${bank.bankNum}!`,\n        );\n      }\n      totalAmount.iadd(amount);\n    }\n\n    return toUiDecimals(totalAmount, this.getMintDecimals(mintPk));\n  }\n\n  public getSerum3MarketByMarketIndex(marketIndex: MarketIndex): Serum3Market {\n    const serum3Market = this.serum3MarketsMapByMarketIndex.get(marketIndex);\n    if (!serum3Market) {\n      throw new Error(`No serum3Market found for marketIndex ${marketIndex}!`);\n    }\n    return serum3Market;\n  }\n\n  public getSerum3MarketByName(name: string): Serum3Market {\n    const serum3Market = Array.from(\n      this.serum3MarketsMapByExternal.values(),\n    ).find((serum3Market) => serum3Market.name === name);\n    if (!serum3Market) {\n      throw new Error(`No serum3Market found by name ${name}!`);\n    }\n    return serum3Market;\n  }\n\n  public getSerum3MarketByExternalMarket(\n    externalMarketPk: PublicKey,\n  ): Serum3Market {\n    const serum3Market = Array.from(\n      this.serum3MarketsMapByExternal.values(),\n    ).find((serum3Market) =>\n      serum3Market.serumMarketExternal.equals(externalMarketPk),\n    );\n    if (!serum3Market) {\n      throw new Error(\n        `No serum3Market found for external serum3 market ${externalMarketPk.toString()}!`,\n      );\n    }\n    return serum3Market;\n  }\n\n  public getSerum3ExternalMarket(externalMarketPk: PublicKey): Market {\n    const market = this.serum3ExternalMarketsMap.get(\n      externalMarketPk.toBase58(),\n    );\n    if (!market) {\n      throw new Error(\n        `No external market found for pk ${externalMarketPk.toString()}!`,\n      );\n    }\n    return market;\n  }\n\n  public async loadSerum3BidsForMarket(\n    client: MangoClient,\n    externalMarketPk: PublicKey,\n  ): Promise<Orderbook> {\n    const serum3Market = this.getSerum3MarketByExternalMarket(externalMarketPk);\n    return await serum3Market.loadBids(client, this);\n  }\n\n  public async loadSerum3AsksForMarket(\n    client: MangoClient,\n    externalMarketPk: PublicKey,\n  ): Promise<Orderbook> {\n    const serum3Market = this.getSerum3MarketByExternalMarket(externalMarketPk);\n    return await serum3Market.loadAsks(client, this);\n  }\n\n  public findPerpMarket(marketIndex: PerpMarketIndex): PerpMarket {\n    const perpMarket = Array.from(this.perpMarketsMapByName.values()).find(\n      (perpMarket) => perpMarket.perpMarketIndex === marketIndex,\n    );\n    if (!perpMarket) {\n      throw new Error(\n        `No perpMarket found for perpMarketIndex ${marketIndex}!`,\n      );\n    }\n    return perpMarket;\n  }\n\n  public getPerpMarketByOracle(oracle: PublicKey): PerpMarket {\n    const perpMarket = this.perpMarketsMapByOracle.get(oracle.toBase58());\n    if (!perpMarket) {\n      throw new Error(`No PerpMarket found for oracle ${oracle}!`);\n    }\n    return perpMarket;\n  }\n\n  public getPerpMarketByMarketIndex(marketIndex: PerpMarketIndex): PerpMarket {\n    const perpMarket = this.perpMarketsMapByMarketIndex.get(marketIndex);\n    if (!perpMarket) {\n      throw new Error(`No PerpMarket found with marketIndex ${marketIndex}!`);\n    }\n    return perpMarket;\n  }\n\n  public getPerpMarketByName(perpMarketName: string): PerpMarket {\n    const perpMarket = Array.from(\n      this.perpMarketsMapByMarketIndex.values(),\n    ).find((perpMarket) => perpMarket.name === perpMarketName);\n    if (!perpMarket) {\n      throw new Error(`No PerpMarket found by name ${perpMarketName}!`);\n    }\n    return perpMarket;\n  }\n\n  public async loadPerpBidsForMarket(\n    client: MangoClient,\n    perpMarketIndex: PerpMarketIndex,\n  ): Promise<BookSide> {\n    const perpMarket = this.getPerpMarketByMarketIndex(perpMarketIndex);\n    return await perpMarket.loadBids(client);\n  }\n\n  public async loadPerpAsksForMarket(\n    client: MangoClient,\n    group: Group,\n    perpMarketIndex: PerpMarketIndex,\n  ): Promise<BookSide> {\n    const perpMarket = this.getPerpMarketByMarketIndex(perpMarketIndex);\n    return await perpMarket.loadAsks(client);\n  }\n\n  public consoleLogBanks(): void {\n    for (const mintBanks of this.banksMapByMint.values()) {\n      for (const bank of mintBanks) {\n        console.log(bank.toString());\n      }\n    }\n  }\n\n  public toUiPrice(price: I80F48 | number, baseDecimals: number): number {\n    return toUiDecimals(price, this.getInsuranceMintDecimals() - baseDecimals);\n  }\n\n  public toNativePrice(uiPrice: number, baseDecimals: number): I80F48 {\n    return toNativeI80F48(\n      uiPrice,\n      // note: our oracles are quoted in USD and our insurance mint is USD\n      // please update when these assumptions change\n      this.getInsuranceMintDecimals() - baseDecimals,\n    );\n  }\n\n  public toNativeDecimals(uiAmount: number, mintPk: PublicKey): BN {\n    const decimals = this.getMintDecimals(mintPk);\n    return toNative(uiAmount, decimals);\n  }\n\n  toString(): string {\n    let res = 'Group\\n';\n    res = res + ' pk: ' + this.publicKey.toString();\n\n    res =\n      res +\n      '\\n mintInfos:' +\n      Array.from(this.mintInfosMapByTokenIndex.entries())\n        .map(\n          (mintInfoTuple) =>\n            '  \\n' + mintInfoTuple[0] + ') ' + mintInfoTuple[1].toString(),\n        )\n        .join(', ');\n\n    const banks: Bank[] = [];\n    for (const tokenBanks of this.banksMapByMint.values()) {\n      for (const bank of tokenBanks) {\n        banks.push(bank);\n      }\n    }\n\n    res =\n      res +\n      '\\n banks:' +\n      Array.from(banks)\n        .map((bank) => '  \\n' + bank.name + ') ' + bank.toString())\n        .join(', ');\n\n    return res;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,0BAA0B;AACnC,SAAS,aAAa;AACtB,SAAS,cAAyB;AAClC,SAAS,sBAAsB;AAC/B;AAAA,EAGE;AAAA,OACK;AACP,OAAO,QAAQ;AACf,SAAS,WAAW,aAAa;AAe1B,IAAM,QAAN,MAAY;AAAA,EA8CjB,YACS,WACA,SACA,UACA,OACA,kBACA,eACA,eACA,gBACA,SACA,SACA,QACA,qBACA,yBACA,gBACA,gBACA,sBACA,4BACA,+BACA,0BACA,wBACA,6BACA,sBACA,0BACA,oBACA,iBACP;AAzBO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,EACN;AAAA,EAvEH,OAAO,KACL,WACA,KAaO;AACP,WAAO,IAAI;AAAA,MACT;AAAA,MACA,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,CAAC;AAAA;AAAA,MACD,oBAAI,IAAI;AAAA;AAAA,MACR,oBAAI,IAAI;AAAA;AAAA,MACR,oBAAI,IAAI;AAAA;AAAA,MACR,oBAAI,IAAI;AAAA;AAAA,MACR,oBAAI,IAAI;AAAA;AAAA,MACR,oBAAI,IAAI;AAAA;AAAA,MACR,oBAAI,IAAI;AAAA;AAAA,MACR,oBAAI,IAAI;AAAA;AAAA,MACR,oBAAI,IAAI;AAAA;AAAA,MACR,oBAAI,IAAI;AAAA;AAAA,MACR,oBAAI,IAAI;AAAA;AAAA,MACR,oBAAI,IAAI;AAAA;AAAA,IACV;AAAA,EACF;AAAA,EA8BA,MAAa,UAAU,QAAoC;AACzD,UAAM,MAAsB,MAAM,OAAO,OAAO,KAAK,SAAS;AAG9D,UAAM,QAAQ,IAAI;AAAA,MAChB,KAAK,WAAW,MAAM;AAAA,MACtB,KAAK,YAAY,QAAQ,GAAG,EAAE;AAAA,QAAK,MACjC,QAAQ,IAAI;AAAA,UACV,KAAK,uBAAuB,MAAM;AAAA,UAClC,KAAK,aAAa,MAAM;AAAA,UACxB,KAAK,kBAAkB,QAAQ,GAAG,EAAE;AAAA,YAAK,MACvC,KAAK,6BAA6B,MAAM;AAAA,UAC1C;AAAA,QACF,CAAC;AAAA,MACH;AAAA,MACA,KAAK,gBAAgB,QAAQ,GAAG;AAAA,MAChC,KAAK,oBAAoB,QAAQ,GAAG,EAAE;AAAA,QAAK,MACzC,KAAK,4BAA4B,MAAM;AAAA,MACzC;AAAA,IACF,CAAC;AAAA,EAEH;AAAA,EAEA,MAAa,WAAW,QAAoC;AAC1D,UAAM,OAAO,MAAM,QAAQ;AAAA,MACzB,KAAK,oBACF,OAAO,CAAC,QAAQ,CAAC,IAAI,OAAO,UAAU,OAAO,CAAC,EAC9C;AAAA,QAAI,CAAC,QACJ,OAAO,QAAQ,SAAS,WAAW,sBAAsB,GAAG;AAAA,MAC9D;AAAA,IACJ;AACA,SAAK,0BAA0B,KAAK,IAAI,CAAC,KAAK,MAAM;AAClD,UAAI,CAAC,OAAO,CAAC,IAAI,OAAO;AACtB,cAAM,IAAI,MAAM,iBAAiB,KAAK,oBAAoB,CAAC,IAAI;AAAA,MACjE;AACA,aAAO,IAAI;AAAA,IACb,CAAC;AAAA,EACH;AAAA,EAEA,MAAa,YAAY,QAAqB,KAAyB;AACrE,QAAI;AAEJ,QAAI,OAAO,IAAI,SAAS,EAAE,QAAQ;AAChC,eACE,MAAM,OAAO,QAAQ,QAAQ,KAAK,cAAc,IAAI,SAAS,CAAC,GAC9D;AAAA,QAAI,CAAC,SAAS,UACd,KAAK,KAAK,IAAI,SAAS,EAAE,KAAK,GAAG,OAAc;AAAA,MACjD;AAAA,IACF,OAAO;AACL,cAAQ,MAAM,OAAO,iBAAiB,IAAI;AAAA,IAC5C;AAEA,UAAM,0BAA0B,UAAU,KAAK,oBAAoB;AACnE,SAAK,iBAAiB,oBAAI,IAAI;AAC9B,SAAK,iBAAiB,oBAAI,IAAI;AAC9B,SAAK,uBAAuB,oBAAI,IAAI;AACpC,eAAW,QAAQ,OAAO;AAExB,YAAM,WAAW,wBAAwB,IAAI,KAAK,UAAU;AAC5D,UAAI,YAAY,SAAS,SAAS,GAAG;AACnC,cAAM,MAAM,SAAS,CAAC,CAAC;AAAA,MACzB;AAEA,YAAM,SAAS,KAAK,KAAK,SAAS;AAClC,UAAI,KAAK,eAAe,IAAI,MAAM,GAAG;AACnC,aAAK,eAAe,IAAI,MAAM,GAAG,KAAK,IAAI;AAC1C,aAAK,eAAe,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI;AAC7C,aAAK,qBAAqB,IAAI,KAAK,UAAU,GAAG,KAAK,IAAI;AAAA,MAC3D,OAAO;AACL,aAAK,eAAe,IAAI,QAAQ,CAAC,IAAI,CAAC;AACtC,aAAK,eAAe,IAAI,KAAK,MAAM,CAAC,IAAI,CAAC;AACzC,aAAK,qBAAqB,IAAI,KAAK,YAAY,CAAC,IAAI,CAAC;AAAA,MACvD;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAa,gBAAgB,QAAqB,KAAyB;AACzE,QAAI;AACJ,QAAI,OAAO,IAAI,aAAa,EAAE,QAAQ;AACpC,mBACE,MAAM,OAAO,QAAQ,QAAQ,SAAS,cAAc,IAAI,aAAa,CAAC,GACtE;AAAA,QAAI,CAAC,SAAS,UACd,SAAS,KAAK,IAAI,aAAa,EAAE,KAAK,GAAG,OAAc;AAAA,MACzD;AAAA,IACF,OAAO;AACL,kBAAY,MAAM,OAAO,qBAAqB,IAAI;AAAA,IACpD;AAEA,SAAK,2BAA2B,IAAI;AAAA,MAClC,UAAU,IAAI,CAAC,aAAa;AAC1B,eAAO,CAAC,SAAS,YAAY,QAAQ;AAAA,MACvC,CAAC;AAAA,IACH;AAEA,SAAK,qBAAqB,IAAI;AAAA,MAC5B,UAAU,IAAI,CAAC,aAAa;AAC1B,eAAO,CAAC,SAAS,KAAK,SAAS,GAAG,QAAQ;AAAA,MAC5C,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,MAAa,oBACX,QACA,KACe;AACf,QAAI;AACJ,QAAI,OAAO,IAAI,iBAAiB,EAAE,QAAQ;AACxC,uBACE,MAAM,OAAO,QAAQ,QAAQ,aAAa;AAAA,QACxC,IAAI,iBAAiB;AAAA,MACvB,GACA;AAAA,QAAI,CAAC,SAAS,UACd,aAAa,KAAK,IAAI,iBAAiB,EAAE,KAAK,GAAG,OAAc;AAAA,MACjE;AAAA,IACF,OAAO;AACL,sBAAgB,MAAM,OAAO,iBAAiB,IAAI;AAAA,IACpD;AAEA,SAAK,6BAA6B,IAAI;AAAA,MACpC,cAAc,IAAI,CAAC,iBAAiB;AAAA,QAClC,aAAa,oBAAoB,SAAS;AAAA,QAC1C;AAAA,MACF,CAAC;AAAA,IACH;AACA,SAAK,gCAAgC,IAAI;AAAA,MACvC,cAAc,IAAI,CAAC,iBAAiB;AAAA,QAClC,aAAa;AAAA,QACb;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,MAAa,4BAA4B,QAAoC;AAC3E,UAAM,kBAAkB,MAAM,QAAQ;AAAA,MACpC,MAAM,KAAK,KAAK,2BAA2B,OAAO,CAAC,EAAE;AAAA,QAAI,CAAC,iBACxD,OAAO;AAAA,UACL,OAAO,QAAQ,SAAS;AAAA,UACxB,aAAa;AAAA,UACb,EAAE,YAAY,OAAO,QAAQ,SAAS,WAAW,WAAW;AAAA,UAC5D,oBAAoB,OAAO,OAAO;AAAA,QACpC;AAAA,MACF;AAAA,IACF;AAEA,SAAK,2BAA2B,IAAI;AAAA,MAClC,MAAM,KAAK,KAAK,2BAA2B,OAAO,CAAC,EAAE;AAAA,QACnD,CAAC,cAAc,UAAU;AAAA,UACvB,aAAa,oBAAoB,SAAS;AAAA,UAC1C,gBAAgB,KAAK;AAAA,QACvB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAa,kBAAkB,QAAqB,KAAyB;AAC3E,QAAI;AACJ,QAAI,OAAO,IAAI,eAAe,EAAE,QAAQ;AACtC,qBACE,MAAM,OAAO,QAAQ,QAAQ,WAAW;AAAA,QACtC,IAAI,eAAe;AAAA,MACrB,GACA;AAAA,QAAI,CAAC,SAAS,UACd,WAAW,KAAK,IAAI,eAAe,EAAE,KAAK,GAAG,OAAc;AAAA,MAC7D;AAAA,IACF,OAAO;AACL,oBAAc,MAAM,OAAO,eAAe,IAAI;AAAA,IAChD;AAGA,UAAM,6BAA6B;AAAA,MACjC,KAAK;AAAA,IACP;AACA,eAAW,cAAc,aAAa;AACpC,YAAM,gBAAgB,2BAA2B;AAAA,QAC/C,WAAW;AAAA,MACb;AACA,UAAI,eAAe;AACjB,cAAM,YAAY,aAAa;AAAA,MACjC;AAAA,IACF;AAEA,SAAK,uBAAuB,IAAI;AAAA,MAC9B,YAAY,IAAI,CAAC,eAAe,CAAC,WAAW,MAAM,UAAU,CAAC;AAAA,IAC/D;AACA,SAAK,yBAAyB,IAAI;AAAA,MAChC,YAAY,IAAI,CAAC,eAAe;AAAA,QAC9B,WAAW,OAAO,SAAS;AAAA,QAC3B;AAAA,MACF,CAAC;AAAA,IACH;AACA,SAAK,8BAA8B,IAAI;AAAA,MACrC,YAAY,IAAI,CAAC,eAAe,CAAC,WAAW,iBAAiB,UAAU,CAAC;AAAA,IAC1E;AAAA,EACF;AAAA,EAEA,MAAa,uBAAuB,QAAoC;AACtE,UAAM,QAAkB,MAAM;AAAA,MAC5B,KAAK;AAAA,MACL,CAAC,CAAC,EAAE,KAAK,MAAM;AAAA,IACjB;AACA,UAAM,UAAU,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,MAAM;AAC5C,UAAM,MACJ,MAAM,OAAO,QAAQ,SAAS,WAAW,wBAAwB,OAAO;AAE1E,UAAMA,SAAQ,IAAI,mBAAmB,OAAO,QAAQ,GAAG;AACvD,eAAW,CAAC,OAAO,EAAE,KAAK,IAAI,QAAQ,GAAG;AACvC,iBAAW,QAAQ,MAAM,KAAK,GAAG;AAC/B,YAAI,KAAK,SAAS,QAAQ;AACxB,eAAK,SAAS,WAAW;AACzB,eAAK,WAAW;AAAA,QAClB,OAAO;AACL,cAAI,CAAC;AACH,kBAAM,IAAI;AAAA,cACR,8DAA8D,KAAK;AAAA,YACrE;AACF,gBAAM,EAAE,OAAO,SAAS,gBAAgB,IACtC,MAAM,KAAK;AAAA,YACTA;AAAA,YACA,KAAK;AAAA,YACL;AAAA,YACA,KAAK,gBAAgB,KAAK,IAAI;AAAA,YAC9B;AAAA,UACF;AACF,eAAK,SAAS;AACd,eAAK,WAAW;AAChB,eAAK,yBAAyB;AAAA,QAChC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAa,6BACX,QACe;AACf,UAAM,cAA4B,MAAM;AAAA,MACtC,KAAK,qBAAqB,OAAO;AAAA,IACnC;AACA,UAAM,UAAU,YAAY,IAAI,CAAC,MAAM,EAAE,MAAM;AAC/C,UAAM,MACJ,MAAM,OAAO,QAAQ,SAAS,WAAW,wBAAwB,OAAO;AAE1E,UAAMA,SAAQ,IAAI,mBAAmB,OAAO,QAAQ,GAAG;AACvD,UAAM,QAAQ;AAAA,MACZ,MAAM,KAAK,IAAI,QAAQ,CAAC,EAAE,IAAI,OAAO,CAAC,GAAG,EAAE,MAAM;AAC/C,cAAM,aAAa,YAAY,CAAC;AAChC,YAAI,CAAC;AACH,gBAAM,IAAI;AAAA,YACR,2DAA2D,WAAW;AAAA,UACxE;AAEF,cAAM,EAAE,OAAO,SAAS,gBAAgB,IACtC,MAAM,KAAK;AAAA,UACTA;AAAA,UACA,WAAW;AAAA,UACX;AAAA,UACA,WAAW;AAAA,UACX;AAAA,QACF;AACF,mBAAW,SAAS;AACpB,mBAAW,WAAW;AACtB,mBAAW,yBAAyB;AAAA,MACtC,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,MAAc,wBACZA,QACA,QACA,IACA,cACA,QACsE;AACtE,QAAI,OAAO,SAAS;AACpB,QACE,CAAC,mBAAmB,qBAAqB,YAAY,EAAE;AAAA,MACrD,GAAG,KAAK,MAAM,GAAG,CAAC;AAAA,IACpB,GACA;AACA,YAAM,aAAaA,OAAM,OAAO,cAAc,GAAG,IAAI;AACrD,cAAQ,IAAI,OAAO,WAAW,MAAM,GAAG;AACvC,gBAAU,KAAK,UAAU,OAAO,YAAY;AAC5C,wBAAkB,WAAW,YAAY;AAAA,IAC3C,WAAW,aAAa,EAAE,GAAG;AAC3B,YAAM,YAAY,eAAe,GAAG,IAAI;AACxC,gBAAU,UAAU;AACpB,cAAQ,KAAK,cAAc,SAAS,YAAY;AAChD,wBAAkB,SAAS,UAAU,SAAS,SAAS,CAAC;AAAA,IAC1D,WAAW,oBAAoB,EAAE,GAAG;AAClC,YAAM,YAAY,MAAM;AAAA,QACtB;AAAA,QACA,OAAO,QAAQ,SAAS;AAAA,MAC1B;AACA,gBAAU,UAAU;AACpB,cAAQ,KAAK,cAAc,SAAS,YAAY;AAChD,wBAAkB,UAAU;AAAA,IAC9B,OAAO;AACL,YAAM,IAAI;AAAA,QACR,gEAAgE,sBAAsB,GAAG;AAAA,MAC3F;AAAA,IACF;AACA,WAAO,EAAE,OAAO,SAAS,gBAAgB;AAAA,EAC3C;AAAA,EAEA,MAAa,aAAa,QAAoC;AAC5D,UAAM,WAAW,MAAM,KAAK,KAAK,eAAe,OAAO,CAAC,EACrD,KAAK,EACL,IAAI,CAAC,SAAS,KAAK,KAAK;AAC3B,UAAM,gBACJ,MAAM,OAAO,QAAQ,SAAS,WAAW;AAAA,MACvC;AAAA,IACF;AAEF,SAAK,kBAAkB,IAAI;AAAA,MACzB,cAAc,IAAI,CAAC,SAAS,MAAM;AAChC,YAAI,CAAC,SAAS;AACZ,gBAAM,IAAI,MAAM,yBAAyB,SAAS,CAAC,GAAI;AAAA,QACzD;AACA,cAAM,cAAc,MAAM,EAAE,SAAS;AAAA,UACnC;AAAA,UACA,QAAQ;AAAA,QACV,EAAE;AACF,eAAO,CAAC,SAAS,CAAC,EAAE,SAAS,GAAG,WAAW;AAAA,MAC7C,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEO,gBAAgB,QAA2B;AAChD,UAAM,OAAO,KAAK,mBAAmB,MAAM;AAC3C,WAAO,KAAK;AAAA,EACd;AAAA,EAEO,4BAA4B,YAAgC;AACjE,UAAM,OAAO,KAAK,yBAAyB,UAAU;AACrD,WAAO,KAAK;AAAA,EACd;AAAA,EAEO,2BAAmC;AACxC,WAAO,KAAK,gBAAgB,KAAK,aAAa;AAAA,EAChD;AAAA,EAEO,mBAAmB,QAAyB;AACjD,UAAM,QAAQ,KAAK,eAAe,IAAI,OAAO,SAAS,CAAC;AACvD,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,0BAA0B,SAAS;AAC/D,WAAO,MAAM,CAAC;AAAA,EAChB;AAAA,EAEO,yBAAyB,YAA8B;AAC5D,UAAM,QAAQ,KAAK,qBAAqB,IAAI,UAAU;AACtD,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,gCAAgC,aAAa;AACzE,WAAO,MAAM,CAAC;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,6BAA6B,QAA2B;AAC7D,UAAM,QAAQ,KAAK,eAAe,IAAI,OAAO,SAAS,CAAC;AACvD,QAAI,CAAC,OAAO;AACV,YAAM,IAAI,MAAM,0BAA0B,SAAS;AAAA,IACrD;AACA,UAAM,cAAc,IAAI,GAAG,CAAC;AAC5B,eAAW,QAAQ,OAAO;AACxB,YAAM,SAAS,KAAK,gBAAgB,IAAI,KAAK,MAAM,SAAS,CAAC;AAC7D,UAAI,CAAC,QAAQ;AACX,cAAM,IAAI;AAAA,UACR,oCAAoC,KAAK,QAAQ,KAAK;AAAA,QACxD;AAAA,MACF;AACA,kBAAY,KAAK,MAAM;AAAA,IACzB;AAEA,WAAO,aAAa,aAAa,KAAK,gBAAgB,MAAM,CAAC;AAAA,EAC/D;AAAA,EAEO,6BAA6B,aAAwC;AAC1E,UAAM,eAAe,KAAK,8BAA8B,IAAI,WAAW;AACvE,QAAI,CAAC,cAAc;AACjB,YAAM,IAAI,MAAM,yCAAyC,cAAc;AAAA,IACzE;AACA,WAAO;AAAA,EACT;AAAA,EAEO,sBAAsB,MAA4B;AACvD,UAAM,eAAe,MAAM;AAAA,MACzB,KAAK,2BAA2B,OAAO;AAAA,IACzC,EAAE,KAAK,CAACC,kBAAiBA,cAAa,SAAS,IAAI;AACnD,QAAI,CAAC,cAAc;AACjB,YAAM,IAAI,MAAM,iCAAiC,OAAO;AAAA,IAC1D;AACA,WAAO;AAAA,EACT;AAAA,EAEO,gCACL,kBACc;AACd,UAAM,eAAe,MAAM;AAAA,MACzB,KAAK,2BAA2B,OAAO;AAAA,IACzC,EAAE;AAAA,MAAK,CAACA,kBACNA,cAAa,oBAAoB,OAAO,gBAAgB;AAAA,IAC1D;AACA,QAAI,CAAC,cAAc;AACjB,YAAM,IAAI;AAAA,QACR,oDAAoD,iBAAiB,SAAS;AAAA,MAChF;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAEO,wBAAwB,kBAAqC;AAClE,UAAM,SAAS,KAAK,yBAAyB;AAAA,MAC3C,iBAAiB,SAAS;AAAA,IAC5B;AACA,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI;AAAA,QACR,mCAAmC,iBAAiB,SAAS;AAAA,MAC/D;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAa,wBACX,QACA,kBACoB;AACpB,UAAM,eAAe,KAAK,gCAAgC,gBAAgB;AAC1E,WAAO,MAAM,aAAa,SAAS,QAAQ,IAAI;AAAA,EACjD;AAAA,EAEA,MAAa,wBACX,QACA,kBACoB;AACpB,UAAM,eAAe,KAAK,gCAAgC,gBAAgB;AAC1E,WAAO,MAAM,aAAa,SAAS,QAAQ,IAAI;AAAA,EACjD;AAAA,EAEO,eAAe,aAA0C;AAC9D,UAAM,aAAa,MAAM,KAAK,KAAK,qBAAqB,OAAO,CAAC,EAAE;AAAA,MAChE,CAACC,gBAAeA,YAAW,oBAAoB;AAAA,IACjD;AACA,QAAI,CAAC,YAAY;AACf,YAAM,IAAI;AAAA,QACR,2CAA2C;AAAA,MAC7C;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAEO,sBAAsB,QAA+B;AAC1D,UAAM,aAAa,KAAK,uBAAuB,IAAI,OAAO,SAAS,CAAC;AACpE,QAAI,CAAC,YAAY;AACf,YAAM,IAAI,MAAM,kCAAkC,SAAS;AAAA,IAC7D;AACA,WAAO;AAAA,EACT;AAAA,EAEO,2BAA2B,aAA0C;AAC1E,UAAM,aAAa,KAAK,4BAA4B,IAAI,WAAW;AACnE,QAAI,CAAC,YAAY;AACf,YAAM,IAAI,MAAM,wCAAwC,cAAc;AAAA,IACxE;AACA,WAAO;AAAA,EACT;AAAA,EAEO,oBAAoB,gBAAoC;AAC7D,UAAM,aAAa,MAAM;AAAA,MACvB,KAAK,4BAA4B,OAAO;AAAA,IAC1C,EAAE,KAAK,CAACA,gBAAeA,YAAW,SAAS,cAAc;AACzD,QAAI,CAAC,YAAY;AACf,YAAM,IAAI,MAAM,+BAA+B,iBAAiB;AAAA,IAClE;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAa,sBACX,QACA,iBACmB;AACnB,UAAM,aAAa,KAAK,2BAA2B,eAAe;AAClE,WAAO,MAAM,WAAW,SAAS,MAAM;AAAA,EACzC;AAAA,EAEA,MAAa,sBACX,QACA,OACA,iBACmB;AACnB,UAAM,aAAa,KAAK,2BAA2B,eAAe;AAClE,WAAO,MAAM,WAAW,SAAS,MAAM;AAAA,EACzC;AAAA,EAEO,kBAAwB;AAC7B,eAAW,aAAa,KAAK,eAAe,OAAO,GAAG;AACpD,iBAAW,QAAQ,WAAW;AAC5B,gBAAQ,IAAI,KAAK,SAAS,CAAC;AAAA,MAC7B;AAAA,IACF;AAAA,EACF;AAAA,EAEO,UAAU,OAAwB,cAA8B;AACrE,WAAO,aAAa,OAAO,KAAK,yBAAyB,IAAI,YAAY;AAAA,EAC3E;AAAA,EAEO,cAAc,SAAiB,cAA8B;AAClE,WAAO;AAAA,MACL;AAAA;AAAA;AAAA,MAGA,KAAK,yBAAyB,IAAI;AAAA,IACpC;AAAA,EACF;AAAA,EAEO,iBAAiB,UAAkB,QAAuB;AAC/D,UAAM,WAAW,KAAK,gBAAgB,MAAM;AAC5C,WAAO,SAAS,UAAU,QAAQ;AAAA,EACpC;AAAA,EAEA,WAAmB;AACjB,QAAI,MAAM;AACV,UAAM,MAAM,UAAU,KAAK,UAAU,SAAS;AAE9C,UACE,MACA,kBACA,MAAM,KAAK,KAAK,yBAAyB,QAAQ,CAAC,EAC/C;AAAA,MACC,CAAC,kBACC,SAAS,cAAc,CAAC,IAAI,OAAO,cAAc,CAAC,EAAE,SAAS;AAAA,IACjE,EACC,KAAK,IAAI;AAEd,UAAM,QAAgB,CAAC;AACvB,eAAW,cAAc,KAAK,eAAe,OAAO,GAAG;AACrD,iBAAW,QAAQ,YAAY;AAC7B,cAAM,KAAK,IAAI;AAAA,MACjB;AAAA,IACF;AAEA,UACE,MACA,cACA,MAAM,KAAK,KAAK,EACb,IAAI,CAAC,SAAS,SAAS,KAAK,OAAO,OAAO,KAAK,SAAS,CAAC,EACzD,KAAK,IAAI;AAEd,WAAO;AAAA,EACT;AACF;","names":["coder","serum3Market","perpMarket"]}