"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }// ts/client/src/ids.ts
var _web3js = require('@solana/web3.js');
var _crossfetch = require('cross-fetch'); var _crossfetch2 = _interopRequireDefault(_crossfetch);

// ts/client/ids.json
var ids_default = {
  groups: [
    {
      cluster: "mainnet-beta",
      name: "mainnet-beta.clarkeni",
      publicKey: "DLdcpC6AsAJ9xeKMR3WhHrN5sM5o7GVVXQhQ5vwisTtz",
      serum3ProgramId: "9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin",
      mangoProgramId: "4MangoMjqJ2firMokCjjGgoK8d4MXcrgL7XJaL3w6fVg",
      banks: [
        {
          name: "SOL",
          publicKey: "8Z8ypSDDbC2UWqapP4AqDGbTbxYgh5AKtv1682UYc74o",
          mint: "So11111111111111111111111111111111111111112",
          tokenIndex: 5,
          bankNum: 0,
          active: true
        },
        {
          name: "USDT",
          publicKey: "Bid15jgtr5Ppftj7BZdEJbiWFN3R1U3i2PUELA2ZDU1N",
          mint: "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB",
          tokenIndex: 1,
          bankNum: 0,
          active: true
        },
        {
          name: "USDC",
          publicKey: "MZSA6xDJFieoMbydmjWv7FkPCcipmtDC2bxE1qYGvaY",
          mint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
          tokenIndex: 0,
          bankNum: 0,
          active: true
        },
        {
          name: "BTC",
          publicKey: "JfS9mG5Sonm6eyhQis2DdFSkfFmtoP8kW5UAaXcEWa4",
          mint: "9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E",
          tokenIndex: 2,
          bankNum: 0,
          active: true
        },
        {
          name: "soETH",
          publicKey: "549bGbirHQSQ5mnFQNT5zBUs8XMFyK9hNAWRWcpCJzBn",
          mint: "2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk",
          tokenIndex: 4,
          bankNum: 0,
          active: true
        },
        {
          name: "ETH",
          publicKey: "2emCTQgGDubaZEdstGXbf9cL4sTgCiSBvWjwk925F4Bd",
          mint: "7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs",
          tokenIndex: 3,
          bankNum: 0,
          active: true
        },
        {
          name: "MSOL",
          publicKey: "2uL6J4aUqpDerWoXejAZQ585SVYLjhBhgQvpBEHeLybb",
          mint: "mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So",
          tokenIndex: 6,
          bankNum: 0,
          active: true
        }
      ],
      stubOracles: [
        {
          name: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
          publicKey: "F1JkVYh6ouopvmgWgaR9p4DyBTeGweHPumE4PzrvK5ti"
        }
      ],
      mintInfos: [
        {
          name: "SOL",
          publicKey: "TvWkqqRPT7gRtbAecnYuSgAA11gcQPKJ9eggqt6bM8Q",
          mint: "So11111111111111111111111111111111111111112",
          tokenIndex: 5
        },
        {
          name: "USDT",
          publicKey: "9HGCxDaCfV7L8megn7aSXbQ39DR4BdT2qmvLxVNYgh69",
          mint: "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB",
          tokenIndex: 1
        },
        {
          name: "USDC",
          publicKey: "9mbfSj6EWVYShL5ozA7hYFghdjKXtx4GXwUygogqK8ZR",
          mint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
          tokenIndex: 0
        },
        {
          name: "BTC",
          publicKey: "2rzUjP3ZHR6ZepqwLQ561HzEe2n5Sh1M67AqmzydzzcD",
          mint: "9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E",
          tokenIndex: 2
        },
        {
          name: "soETH",
          publicKey: "BYuxStPHhVfNXXdL1sCAfiYmCzFcpoTtbaBhYqYGaE4D",
          mint: "2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk",
          tokenIndex: 4
        },
        {
          name: "ETH",
          publicKey: "8J9NCLCAwHWk5pzYTSmCZPvmkTJik8M4yXtrgeFHqPha",
          mint: "7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs",
          tokenIndex: 3
        },
        {
          name: "MSOL",
          publicKey: "DRnvY2SVHuj8YiyyxVHPJu8ZtaXzsgcqxz3Tzf8az3Zx",
          mint: "mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So",
          tokenIndex: 6
        }
      ],
      serum3Markets: [],
      perpMarkets: []
    }
  ]
};

// ts/client/src/ids.ts
var Id = class {
  constructor(cluster, name, publicKey, serum3ProgramId, mangoProgramId, banks, stubOracles, mintInfos, serum3Markets, perpMarkets) {
    this.cluster = cluster;
    this.name = name;
    this.publicKey = publicKey;
    this.serum3ProgramId = serum3ProgramId;
    this.mangoProgramId = mangoProgramId;
    this.banks = banks;
    this.stubOracles = stubOracles;
    this.mintInfos = mintInfos;
    this.serum3Markets = serum3Markets;
    this.perpMarkets = perpMarkets;
  }
  getBanks() {
    return Array.from(
      this.banks.filter((perpMarket) => perpMarket.active).map((bank) => new (0, _web3js.PublicKey)(bank.publicKey))
    );
  }
  getStubOracles() {
    return Array.from(
      this.stubOracles.map((stubOracle) => new (0, _web3js.PublicKey)(stubOracle.publicKey))
    );
  }
  getMintInfos() {
    return Array.from(
      this.mintInfos.map((mintInfo) => new (0, _web3js.PublicKey)(mintInfo.publicKey))
    );
  }
  getSerum3Markets() {
    return Array.from(
      this.serum3Markets.filter((perpMarket) => perpMarket.active).map((serum3Market) => new (0, _web3js.PublicKey)(serum3Market.publicKey))
    );
  }
  getPerpMarkets() {
    return Array.from(
      this.perpMarkets.filter((perpMarket) => perpMarket.active).map((perpMarket) => new (0, _web3js.PublicKey)(perpMarket.publicKey))
    );
  }
  static fromIdsByName(name) {
    const groupConfig = ids_default.groups.find((id) => id["name"] === name);
    if (!groupConfig)
      throw new Error(`No group config ${name} found in Ids!`);
    return new Id(
      groupConfig.cluster,
      groupConfig.name,
      groupConfig.publicKey,
      groupConfig.serum3ProgramId,
      groupConfig.mangoProgramId,
      groupConfig["banks"],
      groupConfig["stubOracles"],
      groupConfig["mintInfos"],
      groupConfig["serum3Markets"],
      groupConfig["perpMarkets"]
    );
  }
  static fromIdsByPk(groupPk) {
    const groupConfig = ids_default.groups.find(
      (id) => id["publicKey"] === groupPk.toString()
    );
    if (!groupConfig)
      throw new Error(`No group config ${groupPk.toString()} found in Ids!`);
    return new Id(
      groupConfig.cluster,
      groupConfig.name,
      groupConfig.publicKey,
      groupConfig.serum3ProgramId,
      groupConfig.mangoProgramId,
      groupConfig["banks"],
      groupConfig["stubOracles"],
      groupConfig["mintInfos"],
      groupConfig["serum3Markets"],
      groupConfig["perpMarkets"]
    );
  }
  static async fromApi(groupPk) {
    const groupMetadataApiUrl = "https://mango-transaction-log.herokuapp.com/v4/group-metadata";
    const response = await _crossfetch2.default.call(void 0, groupMetadataApiUrl);
    const jsonData = await response.json();
    const groupConfig = jsonData.groups.find(
      (group) => group.publicKey === groupPk.toString()
    );
    return new Id(
      groupConfig.cluster,
      groupConfig.name,
      groupConfig.publicKey,
      groupConfig.serum3ProgramId,
      groupConfig.mangoProgramId,
      groupConfig.tokens.flatMap(
        (t) => t.banks.map((b) => ({
          name: t.symbol,
          mint: t.mint,
          tokenIndex: t.tokenIndex,
          bankNum: b.bankNum,
          publicKey: b.publicKey
        }))
      ),
      groupConfig.stubOracles.map((s) => ({
        mint: s.mint,
        publicKey: s.publicKey
      })),
      groupConfig.tokens.map((t) => ({
        name: t.symbol,
        mint: t.mint,
        tokenIndex: t.tokenIndex,
        publicKey: t.mintInfo
      })),
      groupConfig.serum3Markets.map((s) => ({
        name: s.name,
        publicKey: s.publicKey,
        marketExternal: s.marketExternal
      })),
      groupConfig.perpMarkets.map((p) => ({
        name: p.name,
        publicKey: p.publicKey
      }))
    );
  }
};



exports.Id = Id;
//# sourceMappingURL=chunk-TBVE5N24.js.map