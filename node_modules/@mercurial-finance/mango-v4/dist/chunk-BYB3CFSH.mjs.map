{"version":3,"sources":["../ts/client/src/accounts/oracle.ts"],"sourcesContent":["import { Magic as PythMagic } from '@pythnetwork/client';\nimport { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport SwitchboardProgram from '@switchboard-xyz/sbv2-lite';\nimport BN from 'bn.js';\nimport { I80F48, I80F48Dto } from '../numbers/I80F48';\n\nconst SBV1_DEVNET_PID = new PublicKey(\n  '7azgmy1pFXHikv36q1zZASvFq5vFa39TT9NweVugKKTU',\n);\nconst SBV1_MAINNET_PID = new PublicKey(\n  'DtmE9D2CSB4L5D6A15mraeEjrGMm6auWVzgaD8hK2tZM',\n);\nlet sbv2DevnetProgram;\nlet sbv2MainnetProgram;\n\nexport class StubOracle {\n  public price: I80F48;\n  public lastUpdated: BN;\n\n  static from(\n    publicKey: PublicKey,\n    obj: {\n      group: PublicKey;\n      mint: PublicKey;\n      price: I80F48Dto;\n      lastUpdated: BN;\n    },\n  ): StubOracle {\n    return new StubOracle(\n      publicKey,\n      obj.group,\n      obj.mint,\n      obj.price,\n      obj.lastUpdated,\n    );\n  }\n\n  constructor(\n    public publicKey: PublicKey,\n    public group: PublicKey,\n    public mint: PublicKey,\n    price: I80F48Dto,\n    lastUpdated: BN,\n  ) {\n    this.price = I80F48.from(price);\n    this.lastUpdated = lastUpdated;\n  }\n}\n\n// https://gist.github.com/microwavedcola1/b741a11e6ee273a859f3ef00b35ac1f0\nexport function parseSwitchboardOracleV1(accountInfo: AccountInfo<Buffer>): {\n  price: number;\n  lastUpdatedSlot: number;\n} {\n  const price = accountInfo.data.readDoubleLE(1 + 32 + 4 + 4);\n  const lastUpdatedSlot = parseInt(\n    accountInfo.data.readBigUInt64LE(1 + 32 + 4 + 4 + 8).toString(),\n  );\n  return { price, lastUpdatedSlot };\n}\n\nexport function parseSwitchboardOracleV2(\n  program: SwitchboardProgram,\n  accountInfo: AccountInfo<Buffer>,\n): { price: number; lastUpdatedSlot: number } {\n  const price = program.decodeLatestAggregatorValue(accountInfo)!.toNumber();\n  const lastUpdatedSlot = program\n    .decodeAggregator(accountInfo)\n    .latestConfirmedRound!.roundOpenSlot!.toNumber();\n\n  if (!price || !lastUpdatedSlot)\n    throw new Error('Unable to parse Switchboard Oracle V2');\n  return { price, lastUpdatedSlot };\n}\n\n/**\n *\n * @param accountInfo\n * @returns ui price\n */\nexport async function parseSwitchboardOracle(\n  accountInfo: AccountInfo<Buffer>,\n  connection: Connection,\n): Promise<{ price: number; lastUpdatedSlot: number }> {\n  if (accountInfo.owner.equals(SwitchboardProgram.devnetPid)) {\n    if (!sbv2DevnetProgram) {\n      sbv2DevnetProgram = await SwitchboardProgram.loadDevnet(connection);\n    }\n    return parseSwitchboardOracleV2(sbv2DevnetProgram, accountInfo);\n  }\n\n  if (accountInfo.owner.equals(SwitchboardProgram.mainnetPid)) {\n    if (!sbv2MainnetProgram) {\n      sbv2MainnetProgram = await SwitchboardProgram.loadMainnet(connection);\n    }\n    return parseSwitchboardOracleV2(sbv2MainnetProgram, accountInfo);\n  }\n\n  if (\n    accountInfo.owner.equals(SBV1_DEVNET_PID) ||\n    accountInfo.owner.equals(SBV1_MAINNET_PID)\n  ) {\n    return parseSwitchboardOracleV1(accountInfo);\n  }\n\n  throw new Error(`Should not be reached!`);\n}\n\nexport function isSwitchboardOracle(accountInfo: AccountInfo<Buffer>): boolean {\n  if (\n    accountInfo.owner.equals(SBV1_DEVNET_PID) ||\n    accountInfo.owner.equals(SBV1_MAINNET_PID) ||\n    accountInfo.owner.equals(SwitchboardProgram.devnetPid) ||\n    accountInfo.owner.equals(SwitchboardProgram.mainnetPid)\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport function isPythOracle(accountInfo: AccountInfo<Buffer>): boolean {\n  return accountInfo.data.readUInt32LE(0) === PythMagic;\n}\n"],"mappings":";;;;;AAAA,SAAS,SAAS,iBAAiB;AACnC,SAAkC,iBAAiB;AACnD,OAAO,wBAAwB;AAI/B,IAAM,kBAAkB,IAAI;AAAA,EAC1B;AACF;AACA,IAAM,mBAAmB,IAAI;AAAA,EAC3B;AACF;AACA,IAAI;AACJ,IAAI;AAEG,IAAM,aAAN,MAAiB;AAAA,EAsBtB,YACS,WACA,OACA,MACP,OACA,aACA;AALO;AACA;AACA;AAIP,SAAK,QAAQ,OAAO,KAAK,KAAK;AAC9B,SAAK,cAAc;AAAA,EACrB;AAAA,EA3BA,OAAO,KACL,WACA,KAMY;AACZ,WAAO,IAAI;AAAA,MACT;AAAA,MACA,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,IACN;AAAA,EACF;AAYF;AAGO,SAAS,yBAAyB,aAGvC;AACA,QAAM,QAAQ,YAAY,KAAK,aAAa,IAAI,KAAK,IAAI,CAAC;AAC1D,QAAM,kBAAkB;AAAA,IACtB,YAAY,KAAK,gBAAgB,IAAI,KAAK,IAAI,IAAI,CAAC,EAAE,SAAS;AAAA,EAChE;AACA,SAAO,EAAE,OAAO,gBAAgB;AAClC;AAEO,SAAS,yBACd,SACA,aAC4C;AAC5C,QAAM,QAAQ,QAAQ,4BAA4B,WAAW,EAAG,SAAS;AACzE,QAAM,kBAAkB,QACrB,iBAAiB,WAAW,EAC5B,qBAAsB,cAAe,SAAS;AAEjD,MAAI,CAAC,SAAS,CAAC;AACb,UAAM,IAAI,MAAM,uCAAuC;AACzD,SAAO,EAAE,OAAO,gBAAgB;AAClC;AAOA,eAAsB,uBACpB,aACA,YACqD;AACrD,MAAI,YAAY,MAAM,OAAO,mBAAmB,SAAS,GAAG;AAC1D,QAAI,CAAC,mBAAmB;AACtB,0BAAoB,MAAM,mBAAmB,WAAW,UAAU;AAAA,IACpE;AACA,WAAO,yBAAyB,mBAAmB,WAAW;AAAA,EAChE;AAEA,MAAI,YAAY,MAAM,OAAO,mBAAmB,UAAU,GAAG;AAC3D,QAAI,CAAC,oBAAoB;AACvB,2BAAqB,MAAM,mBAAmB,YAAY,UAAU;AAAA,IACtE;AACA,WAAO,yBAAyB,oBAAoB,WAAW;AAAA,EACjE;AAEA,MACE,YAAY,MAAM,OAAO,eAAe,KACxC,YAAY,MAAM,OAAO,gBAAgB,GACzC;AACA,WAAO,yBAAyB,WAAW;AAAA,EAC7C;AAEA,QAAM,IAAI,MAAM,wBAAwB;AAC1C;AAEO,SAAS,oBAAoB,aAA2C;AAC7E,MACE,YAAY,MAAM,OAAO,eAAe,KACxC,YAAY,MAAM,OAAO,gBAAgB,KACzC,YAAY,MAAM,OAAO,mBAAmB,SAAS,KACrD,YAAY,MAAM,OAAO,mBAAmB,UAAU,GACtD;AACA,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAEO,SAAS,aAAa,aAA2C;AACtE,SAAO,YAAY,KAAK,aAAa,CAAC,MAAM;AAC9C;","names":[]}