{"version":3,"sources":["../ts/client/src/utils/rpc.ts"],"sourcesContent":["import { AnchorProvider } from '@project-serum/anchor';\nimport NodeWallet from '@project-serum/anchor/dist/cjs/nodewallet';\nimport {\n  AddressLookupTableAccount,\n  ComputeBudgetProgram,\n  MessageV0,\n  Signer,\n  TransactionInstruction,\n  VersionedTransaction,\n} from '@solana/web3.js';\n\nexport async function sendTransaction(\n  provider: AnchorProvider,\n  ixs: TransactionInstruction[],\n  alts: AddressLookupTableAccount[],\n  opts: any = {},\n): Promise<string> {\n  const connection = provider.connection;\n  const latestBlockhash = await connection.getLatestBlockhash(\n    opts.preflightCommitment ??\n      provider.opts.preflightCommitment ??\n      'finalized',\n  );\n\n  const payer = (provider as AnchorProvider).wallet;\n\n  if (opts.prioritizationFee) {\n    ixs = [createComputeBudgetIx(opts.prioritizationFee), ...ixs];\n  }\n\n  const message = MessageV0.compile({\n    payerKey: (provider as AnchorProvider).wallet.publicKey,\n    instructions: ixs,\n    recentBlockhash: latestBlockhash.blockhash,\n    addressLookupTableAccounts: alts,\n  });\n  let vtx = new VersionedTransaction(message);\n  if (opts?.additionalSigners?.length) {\n    vtx.sign([...opts?.additionalSigners]);\n  }\n\n  if (\n    typeof payer.signTransaction === 'function' &&\n    !(payer instanceof NodeWallet)\n  ) {\n    vtx = (await payer.signTransaction(\n      vtx as any,\n    )) as unknown as VersionedTransaction;\n  } else {\n    // Maybe this path is only correct for NodeWallet?\n    vtx.sign([(payer as any).payer as Signer]);\n  }\n\n  const signature = await connection.sendRawTransaction(vtx.serialize(), {\n    skipPreflight: true, // mergedOpts.skipPreflight,\n  });\n\n  // const signature = await connection.sendTransactionss(\n  //   vtx as any as VersionedTransaction,\n  //   {\n  //     skipPreflight: true,\n  //   },\n  // );\n\n  if (opts.postSendTxCallback) {\n    try {\n      opts.postSendTxCallback({ txid: signature });\n    } catch (e) {\n      console.warn(`postSendTxCallback error ${e}`);\n    }\n  }\n\n  const txConfirmationCommitment = opts.txConfirmationCommitment ?? 'processed';\n  let status: any;\n  if (\n    latestBlockhash.blockhash != null &&\n    latestBlockhash.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          signature: signature,\n          blockhash: latestBlockhash.blockhash,\n          lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,\n        },\n        txConfirmationCommitment,\n      )\n    ).value;\n  } else {\n    status = (\n      await connection.confirmTransaction(signature, txConfirmationCommitment)\n    ).value;\n  }\n\n  if (status.err) {\n    console.warn('Tx status: ', status);\n    throw new MangoError({\n      txid: signature,\n      message: `${JSON.stringify(status)}`,\n    });\n  }\n\n  return signature;\n}\n\nexport const createComputeBudgetIx = (\n  microLamports: number,\n): TransactionInstruction => {\n  const computeBudgetIx = ComputeBudgetProgram.setComputeUnitPrice({\n    microLamports,\n  });\n  return computeBudgetIx;\n};\n\nclass MangoError extends Error {\n  message: string;\n  txid: string;\n\n  constructor({ txid, message }) {\n    super();\n    this.message = message;\n    this.txid = txid;\n  }\n}\n"],"mappings":";AACA,OAAO,gBAAgB;AACvB;AAAA,EAEE;AAAA,EACA;AAAA,EAGA;AAAA,OACK;AAEP,eAAsB,gBACpB,UACA,KACA,MACA,OAAY,CAAC,GACI;AACjB,QAAM,aAAa,SAAS;AAC5B,QAAM,kBAAkB,MAAM,WAAW;AAAA,IACvC,KAAK,uBACH,SAAS,KAAK,uBACd;AAAA,EACJ;AAEA,QAAM,QAAS,SAA4B;AAE3C,MAAI,KAAK,mBAAmB;AAC1B,UAAM,CAAC,sBAAsB,KAAK,iBAAiB,GAAG,GAAG,GAAG;AAAA,EAC9D;AAEA,QAAM,UAAU,UAAU,QAAQ;AAAA,IAChC,UAAW,SAA4B,OAAO;AAAA,IAC9C,cAAc;AAAA,IACd,iBAAiB,gBAAgB;AAAA,IACjC,4BAA4B;AAAA,EAC9B,CAAC;AACD,MAAI,MAAM,IAAI,qBAAqB,OAAO;AAC1C,MAAI,MAAM,mBAAmB,QAAQ;AACnC,QAAI,KAAK,CAAC,GAAG,MAAM,iBAAiB,CAAC;AAAA,EACvC;AAEA,MACE,OAAO,MAAM,oBAAoB,cACjC,EAAE,iBAAiB,aACnB;AACA,UAAO,MAAM,MAAM;AAAA,MACjB;AAAA,IACF;AAAA,EACF,OAAO;AAEL,QAAI,KAAK,CAAE,MAAc,KAAe,CAAC;AAAA,EAC3C;AAEA,QAAM,YAAY,MAAM,WAAW,mBAAmB,IAAI,UAAU,GAAG;AAAA,IACrE,eAAe;AAAA;AAAA,EACjB,CAAC;AASD,MAAI,KAAK,oBAAoB;AAC3B,QAAI;AACF,WAAK,mBAAmB,EAAE,MAAM,UAAU,CAAC;AAAA,IAC7C,SAAS,GAAP;AACA,cAAQ,KAAK,4BAA4B,GAAG;AAAA,IAC9C;AAAA,EACF;AAEA,QAAM,2BAA2B,KAAK,4BAA4B;AAClE,MAAI;AACJ,MACE,gBAAgB,aAAa,QAC7B,gBAAgB,wBAAwB,MACxC;AACA,cACE,MAAM,WAAW;AAAA,MACf;AAAA,QACE;AAAA,QACA,WAAW,gBAAgB;AAAA,QAC3B,sBAAsB,gBAAgB;AAAA,MACxC;AAAA,MACA;AAAA,IACF,GACA;AAAA,EACJ,OAAO;AACL,cACE,MAAM,WAAW,mBAAmB,WAAW,wBAAwB,GACvE;AAAA,EACJ;AAEA,MAAI,OAAO,KAAK;AACd,YAAQ,KAAK,eAAe,MAAM;AAClC,UAAM,IAAI,WAAW;AAAA,MACnB,MAAM;AAAA,MACN,SAAS,GAAG,KAAK,UAAU,MAAM;AAAA,IACnC,CAAC;AAAA,EACH;AAEA,SAAO;AACT;AAEO,IAAM,wBAAwB,CACnC,kBAC2B;AAC3B,QAAM,kBAAkB,qBAAqB,oBAAoB;AAAA,IAC/D;AAAA,EACF,CAAC;AACD,SAAO;AACT;AAEA,IAAM,aAAN,cAAyB,MAAM;AAAA,EAI7B,YAAY,EAAE,MAAM,QAAQ,GAAG;AAC7B,UAAM;AACN,SAAK,UAAU;AACf,SAAK,OAAO;AAAA,EACd;AACF;","names":[]}