"use strict"; function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _chunkHFEILVW4js = require('../chunk-HFEILVW4.js');
require('../chunk-A355EMTI.js');
require('../chunk-74ANAXXV.js');
require('../chunk-C3X3GVS5.js');
require('../chunk-UGHO4YHY.js');
require('../chunk-3ZYUOGD4.js');
require('../chunk-ZYSI4CYO.js');


var _chunkS6N5Y2X2js = require('../chunk-S6N5Y2X2.js');
require('../chunk-772SHZWX.js');
require('../chunk-S3PQ6OXS.js');
require('../chunk-WKB2GIFW.js');
require('../chunk-TBVE5N24.js');
require('../chunk-Y7A4QF6J.js');
require('../chunk-JC4IRQUL.js');

// ts/client/src/scripts/mb-liqtest-settle-and-close-all.ts
var _anchor = require('@project-serum/anchor');
var _web3js = require('@solana/web3.js');
var _fs = require('fs'); var _fs2 = _interopRequireDefault(_fs);
var GROUP_NUM = Number(process.env.GROUP_NUM || 200);
var CLUSTER_URL = process.env.CLUSTER_URL;
var MANGO_MAINNET_PAYER_KEYPAIR = process.env.MANGO_MAINNET_PAYER_KEYPAIR || "";
async function main() {
  const options = _anchor.AnchorProvider.defaultOptions();
  options.commitment = "processed";
  options.preflightCommitment = "finalized";
  const connection = new (0, _web3js.Connection)(CLUSTER_URL, options);
  const admin = _web3js.Keypair.fromSecretKey(
    Buffer.from(
      JSON.parse(_fs2.default.readFileSync(MANGO_MAINNET_PAYER_KEYPAIR, "utf-8"))
    )
  );
  const userWallet = new (0, _anchor.Wallet)(admin);
  const userProvider = new (0, _anchor.AnchorProvider)(connection, userWallet, options);
  const client = await _chunkHFEILVW4js.MangoClient.connect(
    userProvider,
    "mainnet-beta",
    _chunkS6N5Y2X2js.MANGO_V4_ID["mainnet-beta"],
    {
      idsSource: "get-program-accounts",
      prioritizationFee: 100,
      txConfirmationCommitment: "confirmed"
    }
  );
  console.log(`User ${userWallet.publicKey.toBase58()}`);
  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);
  console.log(group.toString());
  let accounts = await client.getMangoAccountsForOwner(group, admin.publicKey);
  for (let account of accounts) {
    for (let serumOrders of account.serum3Active()) {
      const serumMarket = group.getSerum3MarketByMarketIndex(
        serumOrders.marketIndex
      );
      const serumExternal = serumMarket.serumMarketExternal;
      console.log(
        `closing serum orders on: ${account} for market ${serumMarket.name}`
      );
      await client.serum3CancelAllOrders(group, account, serumExternal, 10);
      await client.serum3SettleFunds(group, account, serumExternal);
      await client.serum3CloseOpenOrders(group, account, serumExternal);
    }
    for (let perpPosition of account.perpActive()) {
      const perpMarket = group.findPerpMarket(perpPosition.marketIndex);
      console.log(
        `closing perp orders on: ${account} for market ${perpMarket.name}`
      );
      await client.perpCancelAllOrders(
        group,
        account,
        perpMarket.perpMarketIndex,
        10
      );
    }
  }
  accounts = await client.getMangoAccountsForOwner(group, admin.publicKey);
  for (let account of accounts) {
    try {
      console.log(`closing account: ${account}`);
      await client.closeMangoAccount(group, account, true);
    } catch (error) {
      console.log(`failed to close ${account.publicKey}: ${error}`);
    }
  }
  process.exit();
}
main();
//# sourceMappingURL=mb-liqtest-settle-and-close-all.js.map