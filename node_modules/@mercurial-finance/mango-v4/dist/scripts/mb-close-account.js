"use strict"; function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }

var _chunkHFEILVW4js = require('../chunk-HFEILVW4.js');
require('../chunk-A355EMTI.js');
require('../chunk-74ANAXXV.js');
require('../chunk-C3X3GVS5.js');


var _chunkUGHO4YHYjs = require('../chunk-UGHO4YHY.js');
require('../chunk-3ZYUOGD4.js');
require('../chunk-ZYSI4CYO.js');


var _chunkS6N5Y2X2js = require('../chunk-S6N5Y2X2.js');
require('../chunk-772SHZWX.js');
require('../chunk-S3PQ6OXS.js');
require('../chunk-WKB2GIFW.js');
require('../chunk-TBVE5N24.js');
require('../chunk-Y7A4QF6J.js');
require('../chunk-JC4IRQUL.js');

// ts/client/src/scripts/mb-close-account.ts
var _anchor = require('@project-serum/anchor');
var _web3js = require('@solana/web3.js');
var _fs = require('fs'); var _fs2 = _interopRequireDefault(_fs);
async function closeUserAccount(userKeypairFile) {
  const options = _anchor.AnchorProvider.defaultOptions();
  const connection = new (0, _web3js.Connection)(process.env.MB_CLUSTER_URL, options);
  const user = _web3js.Keypair.fromSecretKey(
    Buffer.from(JSON.parse(_fs2.default.readFileSync(userKeypairFile, "utf-8")))
  );
  const userWallet = new (0, _anchor.Wallet)(user);
  const userProvider = new (0, _anchor.AnchorProvider)(connection, userWallet, options);
  const client = await _chunkHFEILVW4js.MangoClient.connect(
    userProvider,
    "mainnet-beta",
    _chunkS6N5Y2X2js.MANGO_V4_ID["mainnet-beta"]
  );
  console.log(`User ${userWallet.publicKey.toBase58()}`);
  const admin = _web3js.Keypair.fromSecretKey(
    Buffer.from(
      JSON.parse(_fs2.default.readFileSync(process.env.MB_PAYER_KEYPAIR, "utf-8"))
    )
  );
  console.log(`Admin ${admin.publicKey.toBase58()}`);
  const group = await client.getGroupForCreator(admin.publicKey, 2);
  console.log(`Found group ${group.publicKey.toBase58()}`);
  const mangoAccount = (await client.getMangoAccountsForOwner(group, user.publicKey))[0];
  console.log(`...found mangoAccount ${mangoAccount.publicKey}`);
  console.log(mangoAccount.toString(group));
  try {
    for (const serum3Account of mangoAccount.serum3Active()) {
      let orders = await mangoAccount.loadSerum3OpenOrdersForMarket(
        client,
        group,
        _optionalChain([group, 'access', _ => _.serum3MarketsMapByMarketIndex, 'access', _2 => _2.get, 'call', _3 => _3(serum3Account.marketIndex), 'optionalAccess', _4 => _4.serumMarketExternal])
      );
      for (const order of orders) {
        console.log(
          ` - Order orderId ${order.orderId}, ${order.side}, ${order.price}, ${order.size}`
        );
        console.log(` - Cancelling order with ${order.orderId}`);
        await client.serum3CancelOrder(
          group,
          mangoAccount,
          _optionalChain([group, 'access', _5 => _5.serum3MarketsMapByMarketIndex, 'access', _6 => _6.get, 'call', _7 => _7(serum3Account.marketIndex), 'optionalAccess', _8 => _8.serumMarketExternal]),
          order.side === "buy" ? _chunkUGHO4YHYjs.Serum3Side.bid : _chunkUGHO4YHYjs.Serum3Side.ask,
          order.orderId
        );
      }
      await client.serum3SettleFunds(
        group,
        mangoAccount,
        _optionalChain([group, 'access', _9 => _9.serum3MarketsMapByMarketIndex, 'access', _10 => _10.get, 'call', _11 => _11(serum3Account.marketIndex), 'optionalAccess', _12 => _12.serumMarketExternal])
      );
      await client.serum3CloseOpenOrders(
        group,
        mangoAccount,
        _optionalChain([group, 'access', _13 => _13.serum3MarketsMapByMarketIndex, 'access', _14 => _14.get, 'call', _15 => _15(serum3Account.marketIndex), 'optionalAccess', _16 => _16.serumMarketExternal])
      );
    }
    await mangoAccount.reload(client);
    for (const token of mangoAccount.tokensActive()) {
      const native = token.balance(
        group.getFirstBankByTokenIndex(token.tokenIndex)
      );
      console.log(
        `token native ${native} ${group.getFirstBankByTokenIndex(token.tokenIndex).name}`
      );
      if (native.toNumber() < 1) {
        continue;
      }
      await client.tokenWithdrawNative(
        group,
        mangoAccount,
        group.getFirstBankByTokenIndex(token.tokenIndex).mint,
        new (0, _anchor.BN)(
          token.balance(group.getFirstBankByTokenIndex(token.tokenIndex)).toNumber()
        ),
        false
      );
    }
  } catch (error) {
    console.log(error);
  }
  await mangoAccount.reload(client);
  console.log(`...mangoAccount ${mangoAccount.publicKey}`);
  console.log(mangoAccount.toString());
  console.log(`Close mango account...`);
  const res = await client.closeMangoAccount(group, mangoAccount);
  process.exit();
}
async function main() {
  await closeUserAccount(process.env.MB_USER2_KEYPAIR);
}
main();
//# sourceMappingURL=mb-close-account.js.map