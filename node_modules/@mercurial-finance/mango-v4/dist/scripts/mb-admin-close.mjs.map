{"version":3,"sources":["../../ts/client/src/scripts/mb-admin-close.ts"],"sourcesContent":["import { AnchorProvider, Wallet } from '@project-serum/anchor';\nimport { Connection, Keypair } from '@solana/web3.js';\nimport fs from 'fs';\nimport { MangoClient } from '../client';\nimport { MANGO_V4_ID } from '../constants';\n\n//\n// example script to close accounts - banks, markets, group etc. which require admin to be the signer\n//\n\n// Use to close only a specific group by number. Use \"all\" to close all groups.\nconst GROUP_NUM = process.env.GROUP_NUM;\n\nasync function main() {\n  const options = AnchorProvider.defaultOptions();\n  const connection = new Connection(process.env.MB_CLUSTER_URL!, options);\n\n  const admin = Keypair.fromSecretKey(\n    Buffer.from(\n      JSON.parse(fs.readFileSync(process.env.MB_PAYER_KEYPAIR!, 'utf-8')),\n    ),\n  );\n  const adminWallet = new Wallet(admin);\n  console.log(`Admin ${adminWallet.publicKey.toBase58()}`);\n  const adminProvider = new AnchorProvider(connection, adminWallet, options);\n  const client = await MangoClient.connect(\n    adminProvider,\n    'mainnet-beta',\n    MANGO_V4_ID['mainnet-beta'],\n    {\n      idsSource: 'get-program-accounts',\n      prioritizationFee: 5,\n    },\n  );\n\n  const groups = await (async () => {\n    if (GROUP_NUM === 'all') {\n      return await client.getGroupsForCreator(admin.publicKey);\n    } else {\n      return [\n        await client.getGroupForCreator(admin.publicKey, Number(GROUP_NUM)),\n      ];\n    }\n  })();\n  for (const group of groups) {\n    console.log(`Group ${group.publicKey}`);\n\n    let sig;\n\n    // deregister all serum markets\n    for (const market of group.serum3MarketsMapByExternal.values()) {\n      sig = await client.serum3deregisterMarket(\n        group,\n        market.serumMarketExternal,\n      );\n      console.log(\n        `Deregistered serum market ${market.name}, sig https://explorer.solana.com/tx/${sig}`,\n      );\n    }\n\n    // close all perp markets\n    for (const market of group.perpMarketsMapByMarketIndex.values()) {\n      sig = await client.perpCloseMarket(group, market.perpMarketIndex);\n      console.log(\n        `Closed perp market ${market.name}, sig https://explorer.solana.com/tx/${sig}`,\n      );\n    }\n\n    // close all banks\n    for (const banks of group.banksMapByMint.values()) {\n      sig = await client.tokenDeregister(group, banks[0].mint);\n      console.log(\n        `Removed token ${banks[0].name}, sig https://explorer.solana.com/tx/${sig}`,\n      );\n    }\n\n    // close stub oracles\n    const stubOracles = await client.getStubOracle(group);\n    for (const stubOracle of stubOracles) {\n      sig = await client.stubOracleClose(group, stubOracle.publicKey);\n      console.log(\n        `Closed stub oracle ${stubOracle.publicKey}, sig https://explorer.solana.com/tx/${sig}`,\n      );\n    }\n\n    // finally, close the group\n    sig = await client.groupClose(group);\n    console.log(`Closed group, sig https://explorer.solana.com/tx/${sig}`);\n  }\n\n  process.exit();\n}\n\nmain();\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,SAAS,gBAAgB,cAAc;AACvC,SAAS,YAAY,eAAe;AACpC,OAAO,QAAQ;AASf,IAAM,YAAY,QAAQ,IAAI;AAE9B,eAAe,OAAO;AACpB,QAAM,UAAU,eAAe,eAAe;AAC9C,QAAM,aAAa,IAAI,WAAW,QAAQ,IAAI,gBAAiB,OAAO;AAEtE,QAAM,QAAQ,QAAQ;AAAA,IACpB,OAAO;AAAA,MACL,KAAK,MAAM,GAAG,aAAa,QAAQ,IAAI,kBAAmB,OAAO,CAAC;AAAA,IACpE;AAAA,EACF;AACA,QAAM,cAAc,IAAI,OAAO,KAAK;AACpC,UAAQ,IAAI,SAAS,YAAY,UAAU,SAAS,GAAG;AACvD,QAAM,gBAAgB,IAAI,eAAe,YAAY,aAAa,OAAO;AACzE,QAAM,SAAS,MAAM,YAAY;AAAA,IAC/B;AAAA,IACA;AAAA,IACA,YAAY,cAAc;AAAA,IAC1B;AAAA,MACE,WAAW;AAAA,MACX,mBAAmB;AAAA,IACrB;AAAA,EACF;AAEA,QAAM,SAAS,OAAO,YAAY;AAChC,QAAI,cAAc,OAAO;AACvB,aAAO,MAAM,OAAO,oBAAoB,MAAM,SAAS;AAAA,IACzD,OAAO;AACL,aAAO;AAAA,QACL,MAAM,OAAO,mBAAmB,MAAM,WAAW,OAAO,SAAS,CAAC;AAAA,MACpE;AAAA,IACF;AAAA,EACF,GAAG;AACH,aAAW,SAAS,QAAQ;AAC1B,YAAQ,IAAI,SAAS,MAAM,WAAW;AAEtC,QAAI;AAGJ,eAAW,UAAU,MAAM,2BAA2B,OAAO,GAAG;AAC9D,YAAM,MAAM,OAAO;AAAA,QACjB;AAAA,QACA,OAAO;AAAA,MACT;AACA,cAAQ;AAAA,QACN,6BAA6B,OAAO,4CAA4C;AAAA,MAClF;AAAA,IACF;AAGA,eAAW,UAAU,MAAM,4BAA4B,OAAO,GAAG;AAC/D,YAAM,MAAM,OAAO,gBAAgB,OAAO,OAAO,eAAe;AAChE,cAAQ;AAAA,QACN,sBAAsB,OAAO,4CAA4C;AAAA,MAC3E;AAAA,IACF;AAGA,eAAW,SAAS,MAAM,eAAe,OAAO,GAAG;AACjD,YAAM,MAAM,OAAO,gBAAgB,OAAO,MAAM,CAAC,EAAE,IAAI;AACvD,cAAQ;AAAA,QACN,iBAAiB,MAAM,CAAC,EAAE,4CAA4C;AAAA,MACxE;AAAA,IACF;AAGA,UAAM,cAAc,MAAM,OAAO,cAAc,KAAK;AACpD,eAAW,cAAc,aAAa;AACpC,YAAM,MAAM,OAAO,gBAAgB,OAAO,WAAW,SAAS;AAC9D,cAAQ;AAAA,QACN,sBAAsB,WAAW,iDAAiD;AAAA,MACpF;AAAA,IACF;AAGA,UAAM,MAAM,OAAO,WAAW,KAAK;AACnC,YAAQ,IAAI,oDAAoD,KAAK;AAAA,EACvE;AAEA,UAAQ,KAAK;AACf;AAEA,KAAK;","names":[]}