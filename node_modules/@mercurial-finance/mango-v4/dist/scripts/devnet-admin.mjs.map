{"version":3,"sources":["../../ts/client/src/scripts/devnet-admin.ts"],"sourcesContent":["import { AnchorProvider, Wallet } from '@project-serum/anchor';\nimport {\n  AddressLookupTableProgram,\n  Connection,\n  Keypair,\n  PublicKey,\n} from '@solana/web3.js';\nimport fs from 'fs';\nimport { PerpMarketIndex } from '../accounts/perp';\nimport { MangoClient } from '../client';\nimport { MANGO_V4_ID } from '../constants';\nimport { buildVersionedTx } from '../utils';\n\n//\n// An example for admins based on high level api i.e. the client\n// Depoys a new mango group to devnet, registers 4 tokens, and 1 serum3 spot market\n//\n// process.env.ADMIN_KEYPAIR - group admin keypair path\n// to create a new admin keypair:\n// * solana-keygen new --outfile ~/.config/solana/admin.json\n// * solana airdrop 1  -k ~/.config/solana/admin.json\n//\n\n// https://github.com/blockworks-foundation/mango-client-v3/blob/main/src/serum.json#L70\nconst DEVNET_SERUM3_MARKETS = new Map([\n  ['SOL/USDC', '82iPEvGiTceyxYpeLK3DhSwga3R5m4Yfyoydd13CukQ9'],\n]);\nconst DEVNET_MINTS = new Map([\n  ['USDC', '8FRFC6MoGGkMFQwngccyu69VnYbzykGeez7ignHVAFSN'], // use devnet usdc\n  ['SOL', 'So11111111111111111111111111111111111111112'],\n  ['MNGO', 'Bb9bsTQa1bGEtQ5KagGkvSHyuLqDWumFUcRqFusFNJWC'],\n]);\nconst DEVNET_ORACLES = new Map([\n  ['SOL', 'J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix'],\n  ['MNGO', '8k7F9Xb36oFJsjpCKpsXvg4cgBRoZtwNTc3EzG5Ttd2o'],\n  ['BTC', 'HovQMDrbAgAYPCmHVSrezcSmkMtXSSUsLDFANExrZh2J'],\n  ['ETH', 'EdVCmQ9FSPcVe5YySXDPCRmc8aDQLKJ9xvYBMZPie1Vw'],\n]);\n\n// TODO: should these constants be baked right into client.ts or even program?\nconst MIN_VAULT_TO_DEPOSITS_RATIO = 0.2;\nconst NET_BORROWS_WINDOW_SIZE_TS = 24 * 60 * 60;\nconst NET_BORROWS_LIMIT_NATIVE = 1 * Math.pow(10, 7) * Math.pow(10, 6);\n\nconst GROUP_NUM = Number(process.env.GROUP_NUM || 0);\n\nasync function main() {\n  let sig;\n\n  const options = AnchorProvider.defaultOptions();\n  const connection = new Connection(\n    'https://mango.devnet.rpcpool.com',\n    options,\n  );\n\n  const admin = Keypair.fromSecretKey(\n    Buffer.from(\n      JSON.parse(fs.readFileSync(process.env.ADMIN_KEYPAIR!, 'utf-8')),\n    ),\n  );\n  const adminWallet = new Wallet(admin);\n  console.log(`Admin ${adminWallet.publicKey.toBase58()}`);\n  const adminProvider = new AnchorProvider(connection, adminWallet, options);\n  const client = await MangoClient.connect(\n    adminProvider,\n    'devnet',\n    MANGO_V4_ID['devnet'],\n    {\n      idsSource: 'get-program-accounts',\n    },\n  );\n\n  // group\n  console.log(`Creating Group...`);\n  const insuranceMint = new PublicKey(DEVNET_MINTS.get('USDC')!);\n  try {\n    await client.groupCreate(GROUP_NUM, true, 0, insuranceMint);\n  } catch (error) {\n    console.log(error);\n  }\n  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);\n  console.log(`...registered group ${group.publicKey}`);\n\n  const defaultOracleConfig = {\n    confFilter: 0.1,\n    maxStalenessSlots: null,\n  };\n  const defaultInterestRate = {\n    adjustmentFactor: 0.004,\n    util0: 0.7,\n    rate0: 0.1,\n    util1: 0.85,\n    rate1: 0.2,\n    maxRate: 2.0,\n  };\n\n  // stub usdc oracle + register token 0\n  console.log(`Registering USDC...`);\n  const usdcDevnetMint = new PublicKey(DEVNET_MINTS.get('USDC')!);\n  try {\n    sig = await client.stubOracleCreate(group, usdcDevnetMint, 1.0);\n    const usdcDevnetOracle = (\n      await client.getStubOracle(group, usdcDevnetMint)\n    )[0];\n    console.log(\n      `...registered stub oracle ${usdcDevnetOracle}, https://explorer.solana.com/tx/${sig}?cluster=devnet`,\n    );\n\n    sig = await client.tokenRegister(\n      group,\n      usdcDevnetMint,\n      usdcDevnetOracle.publicKey,\n      defaultOracleConfig,\n      0, // tokenIndex\n      'USDC',\n      defaultInterestRate,\n      0.005,\n      0.0005,\n      1,\n      1,\n      1,\n      1,\n      0,\n      MIN_VAULT_TO_DEPOSITS_RATIO,\n      NET_BORROWS_WINDOW_SIZE_TS,\n      NET_BORROWS_LIMIT_NATIVE,\n    );\n    await group.reloadAll(client);\n    const bank = group.getFirstBankByMint(usdcDevnetMint);\n    console.log(\n      `...registered token bank ${bank.publicKey}, https://explorer.solana.com/tx/${sig}?cluster=devnet`,\n    );\n    await group.reloadAll(client);\n  } catch (error) {}\n\n  // register token 1\n  console.log(`Registering SOL...`);\n  const solDevnetMint = new PublicKey(DEVNET_MINTS.get('SOL')!);\n  const solDevnetOracle = new PublicKey(DEVNET_ORACLES.get('SOL')!);\n  try {\n    sig = await client.tokenRegister(\n      group,\n      solDevnetMint,\n      solDevnetOracle,\n      defaultOracleConfig,\n      1, // tokenIndex\n      'SOL',\n      defaultInterestRate,\n      0.005,\n      0.0005,\n      0.9,\n      0.8,\n      1.1,\n      1.2,\n      0.05,\n      MIN_VAULT_TO_DEPOSITS_RATIO,\n      NET_BORROWS_WINDOW_SIZE_TS,\n      NET_BORROWS_LIMIT_NATIVE,\n    );\n    await group.reloadAll(client);\n    const bank = group.getFirstBankByMint(solDevnetMint);\n    console.log(\n      `...registered token bank ${bank.publicKey}, https://explorer.solana.com/tx/${sig}?cluster=devnet`,\n    );\n  } catch (error) {\n    console.log(error);\n  }\n\n  console.log(\n    `Editing group, setting existing admin as fastListingAdmin to be able to add MNGO truslessly...`,\n  );\n  sig = await client.groupEdit(\n    group,\n    group.admin,\n    group.admin,\n    undefined,\n    undefined,\n  );\n  console.log(\n    `...edited group, https://explorer.solana.com/tx/${sig}?cluster=devnet`,\n  );\n  console.log(`Registering MNGO...`);\n  const mngoDevnetMint = new PublicKey(DEVNET_MINTS.get('MNGO')!);\n  const mngoDevnetOracle = new PublicKey(DEVNET_ORACLES.get('MNGO')!);\n  try {\n    sig = await client.tokenRegisterTrustless(\n      group,\n      mngoDevnetMint,\n      mngoDevnetOracle,\n      2,\n      'MNGO',\n    );\n    await group.reloadAll(client);\n    const bank = group.getFirstBankByMint(mngoDevnetMint);\n    console.log(\n      `...registered token bank ${bank.publicKey}, https://explorer.solana.com/tx/${sig}?cluster=devnet`,\n    );\n  } catch (error) {\n    console.log(error);\n  }\n\n  // DEBUGGING\n  // log tokens/banks\n  // group.consoleLogBanks();\n\n  // // register serum market\n  // const serumMarketExternalPk = new PublicKey(\n  //   DEVNET_SERUM3_MARKETS.get('SOL/USDC')!,\n  // );\n  // try {\n  //   sig = await client.serum3RegisterMarket(\n  //     group,\n  //     serumMarketExternalPk,\n  //     group.getFirstBankByMint(solDevnetMint),\n  //     group.getFirstBankByMint(usdcDevnetMint),\n  //     0,\n  //     'SOL/USDC',\n  //   );\n  //   await group.reloadAll(client);\n  //   const serum3Market = group.getSerum3MarketByExternalMarket(\n  //     serumMarketExternalPk,\n  //   );\n  //   console.log(\n  //     `...registered serum market ${serum3Market.publicKey}, https://explorer.solana.com/tx/${sig}?cluster=devnet`,\n  //   );\n  // } catch (error) {\n  //   console.log(error);\n  // }\n\n  // register perp market\n  console.log(`Registering perp market...`);\n  try {\n    sig = await client.perpCreateMarket(\n      group,\n      new PublicKey(DEVNET_ORACLES.get('BTC')!),\n      0,\n      'BTC-PERP',\n      defaultOracleConfig,\n      6,\n      10,\n      100,\n      0.975,\n      0.95,\n      1.025,\n      1.05,\n      0.95,\n      0.9,\n      0.012,\n      0.0002,\n      0.0,\n      0,\n      0.05,\n      0.05,\n      100,\n      true,\n      1000,\n      1000000,\n      0.05,\n      0,\n      1.0,\n      2 * 60 * 60,\n      0.025,\n    );\n    await group.reloadAll(client);\n    const perpMarket = group.getPerpMarketByMarketIndex(0 as PerpMarketIndex);\n    console.log(\n      `...registered perp market ${perpMarket.publicKey}, https://explorer.solana.com/tx/${sig}?cluster=devnet`,\n    );\n  } catch (error) {\n    console.log(error);\n  }\n  const perpMarkets = await client.perpGetMarkets(group);\n  console.log(`...created perp market ${perpMarkets[0].publicKey}`);\n\n  if (group.addressLookupTables[0].equals(PublicKey.default)) {\n    try {\n      console.log(`ALT...`);\n      const createIx = AddressLookupTableProgram.createLookupTable({\n        authority: admin.publicKey,\n        payer: admin.publicKey,\n        recentSlot: await connection.getSlot('finalized'),\n      });\n      const createTx = await buildVersionedTx(\n        client.program.provider as AnchorProvider,\n        [createIx[0]],\n      );\n      sig = await connection.sendTransaction(createTx);\n      console.log(\n        `...created ALT ${createIx[1]} https://explorer.solana.com/tx/${sig}?cluster=devnet`,\n      );\n\n      sig = await client.altSet(\n        group,\n        new PublicKey('EmN5RjHUFsoag7tZ2AyBL2N8JrhV7nLMKgNbpCfzC81D'),\n        0,\n      );\n      console.log(\n        `...set at index 0 for group https://explorer.solana.com/tx/${sig}?cluster=devnet`,\n      );\n\n      const extendIx = AddressLookupTableProgram.extendLookupTable({\n        lookupTable: createIx[1],\n        payer: admin.publicKey,\n        authority: admin.publicKey,\n        addresses: Array.from(group.banksMapByMint.values())\n          .flat()\n          .map((bank) => [bank.publicKey, bank.oracle])\n          .flat(),\n      });\n      const extendTx = await buildVersionedTx(\n        client.program.provider as AnchorProvider,\n        [extendIx],\n      );\n      sig = await client.program.provider.connection.sendTransaction(extendTx);\n      console.log(\n        `...extended ALT with pks, https://explorer.solana.com/tx/${sig}?cluster=devnet`,\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  try {\n  } catch (error) {\n    console.log(error);\n  }\n\n  process.exit();\n}\n\nmain();\n"],"mappings":"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","names":[]}