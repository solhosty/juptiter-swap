{"version":3,"sources":["../../ts/client/src/scripts/devnet-user-close-account.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnchorProvider, BN, Wallet } from '@project-serum/anchor';\nimport { Connection, Keypair } from '@solana/web3.js';\nimport fs from 'fs';\nimport { Serum3Side } from '../accounts/serum3';\nimport { MangoClient } from '../client';\nimport { MANGO_V4_ID } from '../constants';\n\n//\n// script which shows how to close a mango account cleanly i.e. close all active positions, withdraw all tokens, etc.\n//\n\nconst GROUP_NUM = Number(process.env.GROUP_NUM || 0);\n\n// note: either use finalized or expect closing certain things to fail and having to runs scrript multiple times\nasync function main() {\n  const options = AnchorProvider.defaultOptions();\n\n  // note: see note above\n  // options.commitment = 'finalized';\n\n  const connection = new Connection(\n    'https://mango.devnet.rpcpool.com',\n    options,\n  );\n\n  // user\n  const user = Keypair.fromSecretKey(\n    Buffer.from(\n      JSON.parse(fs.readFileSync(process.env.USER_KEYPAIR!, 'utf-8')),\n    ),\n  );\n  const userWallet = new Wallet(user);\n  const userProvider = new AnchorProvider(connection, userWallet, options);\n  const client = await MangoClient.connect(\n    userProvider,\n    'devnet',\n    MANGO_V4_ID['devnet'],\n    {\n      idsSource: 'get-program-accounts',\n    },\n  );\n  console.log(`User ${userWallet.publicKey.toBase58()}`);\n\n  try {\n    // fetch group\n    const admin = Keypair.fromSecretKey(\n      Buffer.from(\n        JSON.parse(fs.readFileSync(process.env.ADMIN_KEYPAIR!, 'utf-8')),\n      ),\n    );\n    const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);\n    console.log(`Found group ${group.publicKey.toBase58()}`);\n\n    // fetch account\n    const mangoAccount = (\n      await client.getMangoAccountsForOwner(group, user.publicKey)\n    )[0];\n    console.log(`...found mangoAccount ${mangoAccount.publicKey}`);\n    console.log(mangoAccount.toString());\n\n    // close mango account serum3 positions, closing might require cancelling orders and settling\n    for (const serum3Account of mangoAccount.serum3Active()) {\n      let orders = await mangoAccount.loadSerum3OpenOrdersForMarket(\n        client,\n        group,\n        group.serum3MarketsMapByMarketIndex.get(serum3Account.marketIndex)\n          ?.serumMarketExternal!,\n      );\n      for (const order of orders) {\n        console.log(\n          ` - Order orderId ${order.orderId}, ${order.side}, ${order.price}, ${order.size}`,\n        );\n        console.log(` - Cancelling order with ${order.orderId}`);\n        await client.serum3CancelOrder(\n          group,\n          mangoAccount,\n          group.serum3MarketsMapByMarketIndex.get(serum3Account.marketIndex)\n            ?.serumMarketExternal!,\n          order.side === 'buy' ? Serum3Side.bid : Serum3Side.ask,\n          order.orderId,\n        );\n      }\n      await client.serum3SettleFunds(\n        group,\n        mangoAccount,\n        group.serum3MarketsMapByMarketIndex.get(serum3Account.marketIndex)\n          ?.serumMarketExternal!,\n      );\n      await client.serum3CloseOpenOrders(\n        group,\n        mangoAccount,\n        group.serum3MarketsMapByMarketIndex.get(serum3Account.marketIndex)\n          ?.serumMarketExternal!,\n      );\n    }\n\n    // we closed a serum account, this changes the health accounts we are passing in for future ixs\n    await mangoAccount.reload(client);\n\n    // withdraw all tokens\n    for (const token of mangoAccount.tokensActive()) {\n      let native = token.balance(\n        group.getFirstBankByTokenIndex(token.tokenIndex),\n      );\n\n      // to avoid rounding issues\n      if (native.toNumber() < 1) {\n        continue;\n      }\n      let nativeFlooredNumber = Math.floor(native.toNumber());\n      console.log(\n        `withdrawing token ${\n          group.getFirstBankByTokenIndex(token.tokenIndex).name\n        } native amount ${nativeFlooredNumber} `,\n      );\n\n      await client.tokenWithdrawNative(\n        group,\n        mangoAccount,\n        group.getFirstBankByTokenIndex(token.tokenIndex).mint,\n        new BN(\n          nativeFlooredNumber - 1,\n        ) /* see comment in token_withdraw in program */,\n        false,\n      );\n    }\n\n    // reload and print current positions\n    await mangoAccount.reload(client);\n    console.log(`...mangoAccount ${mangoAccount.publicKey}`);\n    console.log(mangoAccount.toString());\n\n    // close account\n    console.log(`Close mango account...`);\n    const res = await client.closeMangoAccount(group, mangoAccount);\n  } catch (error) {\n    console.log(error);\n  }\n\n  process.exit();\n}\n\nmain();\n"]}