"use strict"; function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }require('../chunk-2JPHS3AJ.js');


var _chunkHFEILVW4js = require('../chunk-HFEILVW4.js');
require('../chunk-A355EMTI.js');
require('../chunk-74ANAXXV.js');


var _chunkC3X3GVS5js = require('../chunk-C3X3GVS5.js');
require('../chunk-UGHO4YHY.js');
require('../chunk-3ZYUOGD4.js');
require('../chunk-ZYSI4CYO.js');


var _chunkS6N5Y2X2js = require('../chunk-S6N5Y2X2.js');


var _chunk772SHZWXjs = require('../chunk-772SHZWX.js');
require('../chunk-S3PQ6OXS.js');
require('../chunk-WKB2GIFW.js');
require('../chunk-TBVE5N24.js');
require('../chunk-Y7A4QF6J.js');
require('../chunk-JC4IRQUL.js');

// ts/client/src/scripts/mb-user.ts
var _anchor = require('@project-serum/anchor');
var _web3js = require('@solana/web3.js');
var _fs = require('fs'); var _fs2 = _interopRequireDefault(_fs);
async function main() {
  const options = _anchor.AnchorProvider.defaultOptions();
  const connection = new (0, _web3js.Connection)(process.env.MB_CLUSTER_URL, options);
  const user = _web3js.Keypair.fromSecretKey(
    Buffer.from(
      JSON.parse(_fs2.default.readFileSync(process.env.MB_PAYER_KEYPAIR, "utf-8"))
    )
  );
  const userWallet = new (0, _anchor.Wallet)(user);
  const userProvider = new (0, _anchor.AnchorProvider)(connection, userWallet, options);
  const client = await _chunkHFEILVW4js.MangoClient.connect(
    userProvider,
    "mainnet-beta",
    _chunkS6N5Y2X2js.MANGO_V4_ID["mainnet-beta"]
  );
  console.log(`User ${userWallet.publicKey.toBase58()}`);
  const admin = _web3js.Keypair.fromSecretKey(
    Buffer.from(
      JSON.parse(_fs2.default.readFileSync(process.env.MB_PAYER_KEYPAIR, "utf-8"))
    )
  );
  console.log(`Admin ${admin.publicKey.toBase58()}`);
  const group = await client.getGroupForCreator(admin.publicKey, 2);
  console.log(`${group.toString()}`);
  console.log(`Creating mangoaccount...`);
  const mangoAccount = await client.getOrCreateMangoAccount(group);
  console.log(`...created/found mangoAccount ${mangoAccount.publicKey}`);
  console.log(mangoAccount.toString(group));
  if (true) {
    console.log(`...depositing 0.0001 USDC`);
    await client.tokenDeposit(
      group,
      mangoAccount,
      group.banksMapByName.get("USDC")[0].mint,
      10
    );
    await mangoAccount.reload(client);
    console.log(`...depositing 0.001 SOL`);
    await client.tokenDeposit(
      group,
      mangoAccount,
      group.banksMapByName.get("SOL")[0].mint,
      1
    );
    await mangoAccount.reload(client);
  }
  await mangoAccount.reload(client);
  console.log(
    "mangoAccount.getEquity() " + _chunk772SHZWXjs.toUiDecimalsForQuote.call(void 0, mangoAccount.getEquity(group).toNumber())
  );
  console.log(
    "mangoAccount.getHealth(HealthType.init) " + _chunk772SHZWXjs.toUiDecimalsForQuote.call(void 0, 
      mangoAccount.getHealth(group, _chunkC3X3GVS5js.HealthType.init).toNumber()
    )
  );
  console.log(
    "mangoAccount.getHealthRatio(HealthType.init) " + mangoAccount.getHealthRatio(group, _chunkC3X3GVS5js.HealthType.init).toNumber()
  );
  console.log(
    "mangoAccount.getCollateralValue() " + _chunk772SHZWXjs.toUiDecimalsForQuote.call(void 0, mangoAccount.getCollateralValue(group).toNumber())
  );
  console.log(
    "mangoAccount.getAssetsVal() " + _chunk772SHZWXjs.toUiDecimalsForQuote.call(void 0, 
      mangoAccount.getAssetsValue(group, _chunkC3X3GVS5js.HealthType.init).toNumber()
    )
  );
  console.log(
    "mangoAccount.getLiabsVal() " + _chunk772SHZWXjs.toUiDecimalsForQuote.call(void 0, 
      mangoAccount.getLiabsValue(group, _chunkC3X3GVS5js.HealthType.init).toNumber()
    )
  );
  console.log(
    "mangoAccount.getMaxWithdrawWithBorrowForToken(group, 'SOL') " + _chunk772SHZWXjs.toUiDecimalsForQuote.call(void 0, 
      (await mangoAccount.getMaxWithdrawWithBorrowForToken(
        group,
        group.banksMapByName.get("SOL")[0].mint
      )).toNumber()
    )
  );
  console.log(
    "mangoAccount.getMaxSourceForTokenSwap(group, 'USDC', 'BTC') " + await mangoAccount.getMaxSourceUiForTokenSwap(
      group,
      group.banksMapByName.get("USDC")[0].mint,
      group.banksMapByName.get("BTC")[0].mint,
      0.94
    )
  );
  console.log(
    "mangoAccount.simHealthWithTokenPositionChanges " + _chunk772SHZWXjs.toUiDecimalsForQuote.call(void 0, 
      mangoAccount.simHealthRatioWithTokenPositionUiChanges(group, [
        {
          mintPk: group.banksMapByName.get("USDC")[0].mint,
          uiTokenAmount: -2e4 * Math.pow(10, group.banksMapByName.get("BTC")[0].mintDecimals)
        },
        {
          mintPk: group.banksMapByName.get("BTC")[0].mint,
          uiTokenAmount: 1 * Math.pow(10, group.banksMapByName.get("BTC")[0].mintDecimals)
        }
      ])
    )
  );
  process.exit();
}
main();
//# sourceMappingURL=mb-user.js.map