{"version":3,"sources":["../../ts/client/src/scripts/devnet-user-2.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnchorProvider, Wallet } from '@project-serum/anchor';\nimport { Connection, Keypair, PublicKey } from '@solana/web3.js';\nimport fs from 'fs';\nimport { MangoClient } from '../client';\nimport { MANGO_V4_ID } from '../constants';\n\n//\n// An example for users based on high level api i.e. the client\n// Create\n// process.env.USER_KEYPAIR - mango account owner keypair path\n// process.env.ADMIN_KEYPAIR - group admin keypair path (useful for automatically finding the group)\n//\n// This script deposits some tokens, places some serum orders, cancels them, places some perp orders\n//\n\nconst DEVNET_MINTS = new Map([\n  ['USDC', '8FRFC6MoGGkMFQwngccyu69VnYbzykGeez7ignHVAFSN'], // use devnet usdc\n  ['BTC', '3UNBZ6o52WTWwjac2kPUb4FyodhU1vFkRJheu1Sh2TvU'],\n  ['SOL', 'So11111111111111111111111111111111111111112'],\n  ['ORCA', 'orcarKHSqC5CDDsGbho8GKvwExejWHxTqGzXgcewB9L'],\n  ['MNGO', 'Bb9bsTQa1bGEtQ5KagGkvSHyuLqDWumFUcRqFusFNJWC'],\n  ['ETH', 'Cu84KB3tDL6SbFgToHMLYVDJJXdJjenNzSKikeAvzmkA'],\n  ['SRM', 'AvtB6w9xboLwA145E221vhof5TddhqsChYcx7Fy3xVMH'],\n]);\nconst DEVNET_ORACLES = new Map([\n  ['BTC', 'HovQMDrbAgAYPCmHVSrezcSmkMtXSSUsLDFANExrZh2J'],\n  ['SOL', 'J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix'],\n  ['ORCA', 'A1WttWF7X3Rg6ZRpB2YQUFHCRh1kiXV8sKKLV3S9neJV'],\n  ['MNGO', '8k7F9Xb36oFJsjpCKpsXvg4cgBRoZtwNTc3EzG5Ttd2o'],\n  ['ETH', 'EdVCmQ9FSPcVe5YySXDPCRmc8aDQLKJ9xvYBMZPie1Vw'],\n  ['SRM', '992moaMQKs32GKZ9dxi8keyM2bUmbrwBZpK4p2K6X5Vs'],\n]);\nexport const DEVNET_SERUM3_MARKETS = new Map([\n  ['BTC/USDC', new PublicKey('DW83EpHFywBxCHmyARxwj3nzxJd7MUdSeznmrdzZKNZB')],\n  ['SOL/USDC', new PublicKey('5xWpt56U1NCuHoAEtpLeUrQcxDkEpNfScjfLFaRzLPgR')],\n]);\n\nconst GROUP_NUM = Number(process.env.GROUP_NUM || 0);\n\nasync function main() {\n  const options = AnchorProvider.defaultOptions();\n  const connection = new Connection(\n    'https://mango.devnet.rpcpool.com',\n    options,\n  );\n\n  const user = Keypair.fromSecretKey(\n    Buffer.from(\n      JSON.parse(fs.readFileSync(process.env.USER2_KEYPAIR!, 'utf-8')),\n    ),\n  );\n  const userWallet = new Wallet(user);\n  const userProvider = new AnchorProvider(connection, userWallet, options);\n  const client = await MangoClient.connect(\n    userProvider,\n    'devnet',\n    MANGO_V4_ID['devnet'],\n    {\n      idsSource: 'get-program-accounts',\n    },\n  );\n  console.log(`User ${userWallet.publicKey.toBase58()}`);\n\n  // fetch group\n  const admin = Keypair.fromSecretKey(\n    Buffer.from(\n      JSON.parse(fs.readFileSync(process.env.ADMIN_KEYPAIR!, 'utf-8')),\n    ),\n  );\n  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);\n\n  // create + fetch account\n  console.log(`Creating mangoaccount...`);\n  const mangoAccount = await client.getOrCreateMangoAccount(group);\n  console.log(`...created/found mangoAccount ${mangoAccount.publicKey}`);\n\n  if (true) {\n    // deposit and withdraw\n\n    try {\n      console.log(`...depositing`);\n      await client.tokenDeposit(\n        group,\n        mangoAccount,\n        new PublicKey(DEVNET_MINTS.get('USDC')!),\n        1000,\n      );\n      await mangoAccount.reload(client);\n\n      await client.tokenDeposit(\n        group,\n        mangoAccount,\n        new PublicKey(DEVNET_MINTS.get('MNGO')!),\n        100,\n      );\n      await mangoAccount.reload(client);\n\n      await client.tokenDeposit(\n        group,\n        mangoAccount,\n        new PublicKey(DEVNET_MINTS.get('ETH')!),\n        500,\n      );\n      await mangoAccount.reload(client);\n\n      await client.tokenDeposit(\n        group,\n        mangoAccount,\n        new PublicKey(DEVNET_MINTS.get('SRM')!),\n        500,\n      );\n      await mangoAccount.reload(client);\n\n      await client.tokenDeposit(\n        group,\n        mangoAccount,\n        new PublicKey(DEVNET_MINTS.get('BTC')!),\n        1,\n      );\n      await mangoAccount.reload(client);\n\n      console.log(mangoAccount.toString(group));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // expand account\n  if (\n    mangoAccount.tokens.length < 16 ||\n    mangoAccount.serum3.length < 8 ||\n    mangoAccount.perps.length < 8 ||\n    mangoAccount.perpOpenOrders.length < 8\n  ) {\n    console.log(\n      `...expanding mango account to max 16 token positions, 8 serum3, 8 perp position and 8 perp oo slots, previous (tokens ${mangoAccount.tokens.length}, serum3 ${mangoAccount.serum3.length}, perps ${mangoAccount.perps.length}, perps oo ${mangoAccount.perpOpenOrders.length})`,\n    );\n    let sig = await client.expandMangoAccount(group, mangoAccount, 16, 8, 8, 8);\n    console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);\n    await mangoAccount.reload(client);\n  }\n\n  process.exit();\n}\n\nmain();\n"]}