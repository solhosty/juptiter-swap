import {
  Builder
} from "../chunk-BSHZPPVO.mjs";
import {
  MangoClient
} from "../chunk-HVUWVEE5.mjs";
import "../chunk-PDNGNLHE.mjs";
import "../chunk-TSHDMTGJ.mjs";
import "../chunk-P2PWY3QH.mjs";
import {
  Serum3OrderType,
  Serum3SelfTradeBehavior,
  Serum3Side
} from "../chunk-TCNCMUFM.mjs";
import "../chunk-BYB3CFSH.mjs";
import {
  PerpOrderSide,
  PerpOrderType
} from "../chunk-36PUIGQD.mjs";
import {
  MANGO_V4_ID
} from "../chunk-5SDTDLZO.mjs";
import "../chunk-O3IXUKHU.mjs";
import "../chunk-62VGMIX5.mjs";
import {
  NullPerpEditParams,
  NullTokenEditParams
} from "../chunk-34DSBDDD.mjs";
import "../chunk-FP7S2XO3.mjs";
import "../chunk-Z2RB6KEX.mjs";
import "../chunk-5VRACIDE.mjs";

// ts/client/src/scripts/mb-liqtest-make-candidates.ts
import { AnchorProvider, BN, Wallet } from "@project-serum/anchor";
import { Connection, Keypair, PublicKey } from "@solana/web3.js";
import fs from "fs";
var GROUP_NUM = Number(process.env.GROUP_NUM || 200);
var PRICES = {
  ETH: 1200,
  SOL: 0.015,
  USDC: 1,
  MNGO: 0.02
};
var TOKEN_SCENARIOS = [
  [
    "LIQTEST, FUNDING",
    [
      ["USDC", 5e6],
      ["ETH", 1e5],
      ["SOL", 15e7]
    ],
    []
  ],
  ["LIQTEST, LIQOR", [["USDC", 1e6]], []],
  ["LIQTEST, A: USDC, L: SOL", [["USDC", 1e3 * PRICES.SOL]], [["SOL", 920]]],
  ["LIQTEST, A: SOL, L: USDC", [["SOL", 1e3]], [["USDC", 990 * PRICES.SOL]]],
  [
    "LIQTEST, A: ETH, L: SOL",
    [["ETH", 20]],
    [["SOL", 18 * PRICES.ETH / PRICES.SOL]]
  ]
];
async function main() {
  const options = AnchorProvider.defaultOptions();
  options.commitment = "processed";
  options.preflightCommitment = "finalized";
  const connection = new Connection(process.env.CLUSTER_URL, options);
  const admin = Keypair.fromSecretKey(
    Buffer.from(
      JSON.parse(
        fs.readFileSync(process.env.MANGO_MAINNET_PAYER_KEYPAIR, "utf-8")
      )
    )
  );
  const userWallet = new Wallet(admin);
  const userProvider = new AnchorProvider(connection, userWallet, options);
  const client = await MangoClient.connect(
    userProvider,
    "mainnet-beta",
    MANGO_V4_ID["mainnet-beta"],
    {
      idsSource: "get-program-accounts",
      prioritizationFee: 100,
      txConfirmationCommitment: "confirmed"
    }
  );
  console.log(`User ${userWallet.publicKey.toBase58()}`);
  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);
  console.log(group.toString());
  const MAINNET_MINTS = /* @__PURE__ */ new Map([
    ["USDC", group.banksMapByName.get("USDC")[0].mint],
    ["ETH", group.banksMapByName.get("ETH")[0].mint],
    ["SOL", group.banksMapByName.get("SOL")[0].mint]
  ]);
  const accounts = await client.getMangoAccountsForOwner(
    group,
    admin.publicKey
  );
  let maxAccountNum = Math.max(0, ...accounts.map((a) => a.accountNum));
  async function createMangoAccount(name) {
    const accountNum = maxAccountNum + 1;
    maxAccountNum = maxAccountNum + 1;
    await client.createMangoAccount(group, accountNum, name, 4, 4, 4, 4);
    return await client.getMangoAccountForOwner(
      group,
      admin.publicKey,
      accountNum
    );
  }
  async function setBankPrice(bank, price) {
    await client.stubOracleSet(group, bank.oracle, price);
    await client.tokenEdit(
      group,
      bank.mint,
      Builder(NullTokenEditParams).resetStablePrice(true).build()
    );
  }
  async function setPerpPrice(perpMarket, price) {
    await client.stubOracleSet(group, perpMarket.oracle, price);
    await client.perpEditMarket(
      group,
      perpMarket.perpMarketIndex,
      Builder(NullPerpEditParams).resetStablePrice(true).build()
    );
  }
  for (const scenario of TOKEN_SCENARIOS) {
    const [name, assets, liabs] = scenario;
    console.log(`Creating mangoaccount...`);
    let mangoAccount = await createMangoAccount(name);
    console.log(
      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`
    );
    for (let [assetName, assetAmount] of assets) {
      const assetMint = new PublicKey(MAINNET_MINTS.get(assetName));
      await client.tokenDepositNative(
        group,
        mangoAccount,
        assetMint,
        new BN(assetAmount)
      );
      await mangoAccount.reload(client);
    }
    for (let [liabName, liabAmount] of liabs) {
      const liabMint = new PublicKey(MAINNET_MINTS.get(liabName));
      const bank = group.banksMapByName.get(liabName)[0];
      try {
        await setBankPrice(bank, PRICES[liabName] / 2);
        await client.tokenWithdrawNative(
          group,
          mangoAccount,
          liabMint,
          new BN(liabAmount),
          true
        );
      } finally {
        await setBankPrice(bank, PRICES[liabName]);
      }
    }
  }
  const accounts2 = await client.getMangoAccountsForOwner(
    group,
    admin.publicKey
  );
  const fundingAccount = accounts2.find(
    (account) => account.name == "LIQTEST, FUNDING"
  );
  if (!fundingAccount) {
    throw new Error("could not find funding account");
  }
  {
    const name = "LIQTEST, serum orders";
    console.log(`Creating mangoaccount...`);
    let mangoAccount = await createMangoAccount(name);
    console.log(
      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`
    );
    const market = group.getSerum3MarketByName("SOL/USDC");
    const sellMint = new PublicKey(MAINNET_MINTS.get("USDC"));
    const buyMint = new PublicKey(MAINNET_MINTS.get("SOL"));
    await client.tokenDepositNative(
      group,
      mangoAccount,
      sellMint,
      new BN(1e5)
    );
    await mangoAccount.reload(client);
    await client.tokenEdit(
      group,
      buyMint,
      Builder(NullTokenEditParams).oracle(group.getFirstBankByMint(buyMint).oracle).maintAssetWeight(1).initAssetWeight(1).build()
    );
    try {
      await client.serum3PlaceOrder(
        group,
        mangoAccount,
        market.serumMarketExternal,
        Serum3Side.bid,
        1,
        12 * 0.1,
        Serum3SelfTradeBehavior.abortTransaction,
        Serum3OrderType.limit,
        0,
        5
      );
    } finally {
      await client.tokenEdit(
        group,
        buyMint,
        Builder(NullTokenEditParams).oracle(group.getFirstBankByMint(buyMint).oracle).maintAssetWeight(0.9).initAssetWeight(0.8).build()
      );
    }
  }
  {
    const name = "LIQTEST, perp orders";
    console.log(`Creating mangoaccount...`);
    let mangoAccount = await createMangoAccount(name);
    console.log(
      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`
    );
    const collateralMint = new PublicKey(MAINNET_MINTS.get("SOL"));
    const collateralBank = group.banksMapByName.get("SOL")[0];
    await client.tokenDepositNative(
      group,
      mangoAccount,
      collateralMint,
      new BN(3e5)
    );
    await mangoAccount.reload(client);
    await setBankPrice(collateralBank, PRICES["SOL"] * 4);
    try {
      await client.perpPlaceOrder(
        group,
        mangoAccount,
        group.perpMarketsMapByName.get("MNGO-PERP")?.perpMarketIndex,
        PerpOrderSide.bid,
        1e-3,
        // ui price that won't get hit
        3,
        // ui base quantity, 30 base lots, 3.0 MNGO, $0.06
        0.06,
        // ui quote quantity
        4200,
        PerpOrderType.limit,
        false,
        0,
        5
      );
    } finally {
      await setBankPrice(collateralBank, PRICES["SOL"]);
    }
  }
  {
    const name = "LIQTEST, perp base pos";
    console.log(`Creating mangoaccount...`);
    let mangoAccount = await createMangoAccount(name);
    console.log(
      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`
    );
    const collateralMint = new PublicKey(MAINNET_MINTS.get("SOL"));
    const collateralBank = group.banksMapByName.get("SOL")[0];
    await client.tokenDepositNative(
      group,
      mangoAccount,
      collateralMint,
      new BN(3e5)
    );
    await mangoAccount.reload(client);
    await setBankPrice(collateralBank, PRICES["SOL"] * 10);
    try {
      await client.perpPlaceOrder(
        group,
        fundingAccount,
        group.perpMarketsMapByName.get("MNGO-PERP")?.perpMarketIndex,
        PerpOrderSide.ask,
        0.03,
        1.1,
        // ui base quantity, 11 base lots, $0.022 value, gain $0.033
        0.033,
        // ui quote quantity
        4200,
        PerpOrderType.limit,
        false,
        0,
        5
      );
      await client.perpPlaceOrder(
        group,
        mangoAccount,
        group.perpMarketsMapByName.get("MNGO-PERP")?.perpMarketIndex,
        PerpOrderSide.bid,
        0.03,
        1.1,
        // ui base quantity, 11 base lots, $0.022 value, cost $0.033
        0.033,
        // ui quote quantity
        4200,
        PerpOrderType.market,
        false,
        0,
        5
      );
      await client.perpConsumeAllEvents(
        group,
        group.perpMarketsMapByName.get("MNGO-PERP")?.perpMarketIndex
      );
    } finally {
      await setBankPrice(collateralBank, PRICES["SOL"]);
    }
  }
  {
    const name = "LIQTEST, perp positive pnl";
    console.log(`Creating mangoaccount...`);
    let mangoAccount = await createMangoAccount(name);
    console.log(
      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`
    );
    const perpMarket = group.perpMarketsMapByName.get("MNGO-PERP");
    const perpIndex = perpMarket.perpMarketIndex;
    const liabMint = new PublicKey(MAINNET_MINTS.get("USDC"));
    const collateralMint = new PublicKey(MAINNET_MINTS.get("SOL"));
    const collateralBank = group.banksMapByName.get("SOL")[0];
    await client.tokenDepositNative(
      group,
      mangoAccount,
      collateralMint,
      new BN(3e5)
    );
    await mangoAccount.reload(client);
    try {
      await setBankPrice(collateralBank, PRICES["SOL"] * 10);
      await client.tokenWithdrawNative(
        group,
        mangoAccount,
        liabMint,
        new BN(-5e3),
        true
      );
      await mangoAccount.reload(client);
      await setPerpPrice(perpMarket, PRICES["MNGO"] / 2);
      await client.perpPlaceOrder(
        group,
        fundingAccount,
        perpIndex,
        PerpOrderSide.ask,
        0.01,
        1.1,
        // ui base quantity, 11 base lots, $0.011
        0.011,
        // ui quote quantity
        4200,
        PerpOrderType.limit,
        false,
        0,
        5
      );
      await client.perpPlaceOrder(
        group,
        mangoAccount,
        perpIndex,
        PerpOrderSide.bid,
        0.01,
        1.1,
        // ui base quantity, 11 base lots, $0.011
        0.011,
        // ui quote quantity
        4200,
        PerpOrderType.market,
        false,
        0,
        5
      );
      await client.perpConsumeAllEvents(group, perpIndex);
      await setPerpPrice(perpMarket, PRICES["MNGO"]);
      await client.perpPlaceOrder(
        group,
        fundingAccount,
        perpIndex,
        PerpOrderSide.bid,
        0.02,
        1.1,
        // ui base quantity, 11 base lots, $0.022
        0.022,
        // ui quote quantity
        4201,
        PerpOrderType.limit,
        false,
        0,
        5
      );
      await client.perpPlaceOrder(
        group,
        mangoAccount,
        perpIndex,
        PerpOrderSide.ask,
        0.02,
        1.1,
        // ui base quantity, 11 base lots, $0.022
        0.022,
        // ui quote quantity
        4201,
        PerpOrderType.market,
        false,
        0,
        5
      );
      await client.perpConsumeAllEvents(group, perpIndex);
    } finally {
      await setPerpPrice(perpMarket, PRICES["MNGO"]);
      await setBankPrice(collateralBank, PRICES["SOL"]);
    }
  }
  {
    const name = "LIQTEST, perp negative pnl";
    console.log(`Creating mangoaccount...`);
    let mangoAccount = await createMangoAccount(name);
    console.log(
      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`
    );
    const perpMarket = group.perpMarketsMapByName.get("MNGO-PERP");
    const perpIndex = perpMarket.perpMarketIndex;
    const liabMint = new PublicKey(MAINNET_MINTS.get("USDC"));
    const collateralMint = new PublicKey(MAINNET_MINTS.get("SOL"));
    const collateralBank = group.banksMapByName.get("SOL")[0];
    await client.tokenDepositNative(
      group,
      mangoAccount,
      collateralMint,
      new BN(3e5)
    );
    await mangoAccount.reload(client);
    try {
      await setBankPrice(collateralBank, PRICES["SOL"] * 10);
      await setPerpPrice(perpMarket, PRICES["MNGO"] / 2);
      await client.perpPlaceOrder(
        group,
        fundingAccount,
        perpIndex,
        PerpOrderSide.bid,
        0.01,
        1.1,
        // ui base quantity, 11 base lots, $0.011
        0.011,
        // ui quote quantity
        4200,
        PerpOrderType.limit,
        false,
        0,
        5
      );
      await client.perpPlaceOrder(
        group,
        mangoAccount,
        perpIndex,
        PerpOrderSide.ask,
        0.01,
        1.1,
        // ui base quantity, 11 base lots, $0.011
        0.011,
        // ui quote quantity
        4200,
        PerpOrderType.market,
        false,
        0,
        5
      );
      await client.perpConsumeAllEvents(group, perpIndex);
      await setPerpPrice(perpMarket, PRICES["MNGO"]);
      await client.perpPlaceOrder(
        group,
        fundingAccount,
        perpIndex,
        PerpOrderSide.ask,
        0.02,
        1.1,
        // ui base quantity, 11 base lots, $0.022
        0.022,
        // ui quote quantity
        4201,
        PerpOrderType.limit,
        false,
        0,
        5
      );
      await client.perpPlaceOrder(
        group,
        mangoAccount,
        perpIndex,
        PerpOrderSide.bid,
        0.02,
        1.1,
        // ui base quantity, 11 base lots, $0.022
        0.022,
        // ui quote quantity
        4201,
        PerpOrderType.market,
        false,
        0,
        5
      );
      await client.perpConsumeAllEvents(group, perpIndex);
    } finally {
      await setPerpPrice(perpMarket, PRICES["MNGO"]);
      await setBankPrice(collateralBank, PRICES["SOL"]);
    }
  }
  process.exit();
}
main();
//# sourceMappingURL=mb-liqtest-make-candidates.mjs.map