"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _chunkHFEILVW4js = require('../chunk-HFEILVW4.js');
require('../chunk-A355EMTI.js');
require('../chunk-74ANAXXV.js');
require('../chunk-C3X3GVS5.js');
require('../chunk-UGHO4YHY.js');
require('../chunk-3ZYUOGD4.js');
require('../chunk-ZYSI4CYO.js');


var _chunkS6N5Y2X2js = require('../chunk-S6N5Y2X2.js');
require('../chunk-772SHZWX.js');
require('../chunk-S3PQ6OXS.js');
require('../chunk-WKB2GIFW.js');
require('../chunk-TBVE5N24.js');
require('../chunk-Y7A4QF6J.js');
require('../chunk-JC4IRQUL.js');

// ts/client/src/scripts/devnet-user-2.ts
var _anchor = require('@project-serum/anchor');
var _web3js = require('@solana/web3.js');
var _fs = require('fs'); var _fs2 = _interopRequireDefault(_fs);
var DEVNET_MINTS = /* @__PURE__ */ new Map([
  ["USDC", "8FRFC6MoGGkMFQwngccyu69VnYbzykGeez7ignHVAFSN"],
  // use devnet usdc
  ["BTC", "3UNBZ6o52WTWwjac2kPUb4FyodhU1vFkRJheu1Sh2TvU"],
  ["SOL", "So11111111111111111111111111111111111111112"],
  ["ORCA", "orcarKHSqC5CDDsGbho8GKvwExejWHxTqGzXgcewB9L"],
  ["MNGO", "Bb9bsTQa1bGEtQ5KagGkvSHyuLqDWumFUcRqFusFNJWC"],
  ["ETH", "Cu84KB3tDL6SbFgToHMLYVDJJXdJjenNzSKikeAvzmkA"],
  ["SRM", "AvtB6w9xboLwA145E221vhof5TddhqsChYcx7Fy3xVMH"]
]);
var DEVNET_SERUM3_MARKETS = /* @__PURE__ */ new Map([
  ["BTC/USDC", new (0, _web3js.PublicKey)("DW83EpHFywBxCHmyARxwj3nzxJd7MUdSeznmrdzZKNZB")],
  ["SOL/USDC", new (0, _web3js.PublicKey)("5xWpt56U1NCuHoAEtpLeUrQcxDkEpNfScjfLFaRzLPgR")]
]);
var GROUP_NUM = Number(process.env.GROUP_NUM || 0);
async function main() {
  const options = _anchor.AnchorProvider.defaultOptions();
  const connection = new (0, _web3js.Connection)(
    "https://mango.devnet.rpcpool.com",
    options
  );
  const user = _web3js.Keypair.fromSecretKey(
    Buffer.from(
      JSON.parse(_fs2.default.readFileSync(process.env.USER2_KEYPAIR, "utf-8"))
    )
  );
  const userWallet = new (0, _anchor.Wallet)(user);
  const userProvider = new (0, _anchor.AnchorProvider)(connection, userWallet, options);
  const client = await _chunkHFEILVW4js.MangoClient.connect(
    userProvider,
    "devnet",
    _chunkS6N5Y2X2js.MANGO_V4_ID["devnet"],
    {
      idsSource: "get-program-accounts"
    }
  );
  console.log(`User ${userWallet.publicKey.toBase58()}`);
  const admin = _web3js.Keypair.fromSecretKey(
    Buffer.from(
      JSON.parse(_fs2.default.readFileSync(process.env.ADMIN_KEYPAIR, "utf-8"))
    )
  );
  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);
  console.log(`Creating mangoaccount...`);
  const mangoAccount = await client.getOrCreateMangoAccount(group);
  console.log(`...created/found mangoAccount ${mangoAccount.publicKey}`);
  if (true) {
    try {
      console.log(`...depositing`);
      await client.tokenDeposit(
        group,
        mangoAccount,
        new (0, _web3js.PublicKey)(DEVNET_MINTS.get("USDC")),
        1e3
      );
      await mangoAccount.reload(client);
      await client.tokenDeposit(
        group,
        mangoAccount,
        new (0, _web3js.PublicKey)(DEVNET_MINTS.get("MNGO")),
        100
      );
      await mangoAccount.reload(client);
      await client.tokenDeposit(
        group,
        mangoAccount,
        new (0, _web3js.PublicKey)(DEVNET_MINTS.get("ETH")),
        500
      );
      await mangoAccount.reload(client);
      await client.tokenDeposit(
        group,
        mangoAccount,
        new (0, _web3js.PublicKey)(DEVNET_MINTS.get("SRM")),
        500
      );
      await mangoAccount.reload(client);
      await client.tokenDeposit(
        group,
        mangoAccount,
        new (0, _web3js.PublicKey)(DEVNET_MINTS.get("BTC")),
        1
      );
      await mangoAccount.reload(client);
      console.log(mangoAccount.toString(group));
    } catch (error) {
      console.log(error);
    }
  }
  if (mangoAccount.tokens.length < 16 || mangoAccount.serum3.length < 8 || mangoAccount.perps.length < 8 || mangoAccount.perpOpenOrders.length < 8) {
    console.log(
      `...expanding mango account to max 16 token positions, 8 serum3, 8 perp position and 8 perp oo slots, previous (tokens ${mangoAccount.tokens.length}, serum3 ${mangoAccount.serum3.length}, perps ${mangoAccount.perps.length}, perps oo ${mangoAccount.perpOpenOrders.length})`
    );
    let sig = await client.expandMangoAccount(group, mangoAccount, 16, 8, 8, 8);
    console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);
    await mangoAccount.reload(client);
  }
  process.exit();
}
main();


exports.DEVNET_SERUM3_MARKETS = DEVNET_SERUM3_MARKETS;
//# sourceMappingURL=devnet-user-2.js.map