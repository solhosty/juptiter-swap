"use strict"; function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _chunkHFEILVW4js = require('../chunk-HFEILVW4.js');
require('../chunk-A355EMTI.js');
require('../chunk-74ANAXXV.js');
require('../chunk-C3X3GVS5.js');
require('../chunk-UGHO4YHY.js');
require('../chunk-3ZYUOGD4.js');
require('../chunk-ZYSI4CYO.js');


var _chunkS6N5Y2X2js = require('../chunk-S6N5Y2X2.js');


var _chunk772SHZWXjs = require('../chunk-772SHZWX.js');
require('../chunk-S3PQ6OXS.js');
require('../chunk-WKB2GIFW.js');
require('../chunk-TBVE5N24.js');
require('../chunk-Y7A4QF6J.js');
require('../chunk-JC4IRQUL.js');

// ts/client/src/scripts/devnet-admin.ts
var _anchor = require('@project-serum/anchor');





var _web3js = require('@solana/web3.js');
var _fs = require('fs'); var _fs2 = _interopRequireDefault(_fs);
var DEVNET_MINTS = /* @__PURE__ */ new Map([
  ["USDC", "8FRFC6MoGGkMFQwngccyu69VnYbzykGeez7ignHVAFSN"],
  // use devnet usdc
  ["SOL", "So11111111111111111111111111111111111111112"],
  ["MNGO", "Bb9bsTQa1bGEtQ5KagGkvSHyuLqDWumFUcRqFusFNJWC"]
]);
var DEVNET_ORACLES = /* @__PURE__ */ new Map([
  ["SOL", "J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix"],
  ["MNGO", "8k7F9Xb36oFJsjpCKpsXvg4cgBRoZtwNTc3EzG5Ttd2o"],
  ["BTC", "HovQMDrbAgAYPCmHVSrezcSmkMtXSSUsLDFANExrZh2J"],
  ["ETH", "EdVCmQ9FSPcVe5YySXDPCRmc8aDQLKJ9xvYBMZPie1Vw"]
]);
var MIN_VAULT_TO_DEPOSITS_RATIO = 0.2;
var NET_BORROWS_WINDOW_SIZE_TS = 24 * 60 * 60;
var NET_BORROWS_LIMIT_NATIVE = 1 * Math.pow(10, 7) * Math.pow(10, 6);
var GROUP_NUM = Number(process.env.GROUP_NUM || 0);
async function main() {
  let sig;
  const options = _anchor.AnchorProvider.defaultOptions();
  const connection = new (0, _web3js.Connection)(
    "https://mango.devnet.rpcpool.com",
    options
  );
  const admin = _web3js.Keypair.fromSecretKey(
    Buffer.from(
      JSON.parse(_fs2.default.readFileSync(process.env.ADMIN_KEYPAIR, "utf-8"))
    )
  );
  const adminWallet = new (0, _anchor.Wallet)(admin);
  console.log(`Admin ${adminWallet.publicKey.toBase58()}`);
  const adminProvider = new (0, _anchor.AnchorProvider)(connection, adminWallet, options);
  const client = await _chunkHFEILVW4js.MangoClient.connect(
    adminProvider,
    "devnet",
    _chunkS6N5Y2X2js.MANGO_V4_ID["devnet"],
    {
      idsSource: "get-program-accounts"
    }
  );
  console.log(`Creating Group...`);
  const insuranceMint = new (0, _web3js.PublicKey)(DEVNET_MINTS.get("USDC"));
  try {
    await client.groupCreate(GROUP_NUM, true, 0, insuranceMint);
  } catch (error) {
    console.log(error);
  }
  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);
  console.log(`...registered group ${group.publicKey}`);
  const defaultOracleConfig = {
    confFilter: 0.1,
    maxStalenessSlots: null
  };
  const defaultInterestRate = {
    adjustmentFactor: 4e-3,
    util0: 0.7,
    rate0: 0.1,
    util1: 0.85,
    rate1: 0.2,
    maxRate: 2
  };
  console.log(`Registering USDC...`);
  const usdcDevnetMint = new (0, _web3js.PublicKey)(DEVNET_MINTS.get("USDC"));
  try {
    sig = await client.stubOracleCreate(group, usdcDevnetMint, 1);
    const usdcDevnetOracle = (await client.getStubOracle(group, usdcDevnetMint))[0];
    console.log(
      `...registered stub oracle ${usdcDevnetOracle}, https://explorer.solana.com/tx/${sig}?cluster=devnet`
    );
    sig = await client.tokenRegister(
      group,
      usdcDevnetMint,
      usdcDevnetOracle.publicKey,
      defaultOracleConfig,
      0,
      // tokenIndex
      "USDC",
      defaultInterestRate,
      5e-3,
      5e-4,
      1,
      1,
      1,
      1,
      0,
      MIN_VAULT_TO_DEPOSITS_RATIO,
      NET_BORROWS_WINDOW_SIZE_TS,
      NET_BORROWS_LIMIT_NATIVE
    );
    await group.reloadAll(client);
    const bank = group.getFirstBankByMint(usdcDevnetMint);
    console.log(
      `...registered token bank ${bank.publicKey}, https://explorer.solana.com/tx/${sig}?cluster=devnet`
    );
    await group.reloadAll(client);
  } catch (error) {
  }
  console.log(`Registering SOL...`);
  const solDevnetMint = new (0, _web3js.PublicKey)(DEVNET_MINTS.get("SOL"));
  const solDevnetOracle = new (0, _web3js.PublicKey)(DEVNET_ORACLES.get("SOL"));
  try {
    sig = await client.tokenRegister(
      group,
      solDevnetMint,
      solDevnetOracle,
      defaultOracleConfig,
      1,
      // tokenIndex
      "SOL",
      defaultInterestRate,
      5e-3,
      5e-4,
      0.9,
      0.8,
      1.1,
      1.2,
      0.05,
      MIN_VAULT_TO_DEPOSITS_RATIO,
      NET_BORROWS_WINDOW_SIZE_TS,
      NET_BORROWS_LIMIT_NATIVE
    );
    await group.reloadAll(client);
    const bank = group.getFirstBankByMint(solDevnetMint);
    console.log(
      `...registered token bank ${bank.publicKey}, https://explorer.solana.com/tx/${sig}?cluster=devnet`
    );
  } catch (error) {
    console.log(error);
  }
  console.log(
    `Editing group, setting existing admin as fastListingAdmin to be able to add MNGO truslessly...`
  );
  sig = await client.groupEdit(
    group,
    group.admin,
    group.admin,
    void 0,
    void 0
  );
  console.log(
    `...edited group, https://explorer.solana.com/tx/${sig}?cluster=devnet`
  );
  console.log(`Registering MNGO...`);
  const mngoDevnetMint = new (0, _web3js.PublicKey)(DEVNET_MINTS.get("MNGO"));
  const mngoDevnetOracle = new (0, _web3js.PublicKey)(DEVNET_ORACLES.get("MNGO"));
  try {
    sig = await client.tokenRegisterTrustless(
      group,
      mngoDevnetMint,
      mngoDevnetOracle,
      2,
      "MNGO"
    );
    await group.reloadAll(client);
    const bank = group.getFirstBankByMint(mngoDevnetMint);
    console.log(
      `...registered token bank ${bank.publicKey}, https://explorer.solana.com/tx/${sig}?cluster=devnet`
    );
  } catch (error) {
    console.log(error);
  }
  console.log(`Registering perp market...`);
  try {
    sig = await client.perpCreateMarket(
      group,
      new (0, _web3js.PublicKey)(DEVNET_ORACLES.get("BTC")),
      0,
      "BTC-PERP",
      defaultOracleConfig,
      6,
      10,
      100,
      0.975,
      0.95,
      1.025,
      1.05,
      0.95,
      0.9,
      0.012,
      2e-4,
      0,
      0,
      0.05,
      0.05,
      100,
      true,
      1e3,
      1e6,
      0.05,
      0,
      1,
      2 * 60 * 60,
      0.025
    );
    await group.reloadAll(client);
    const perpMarket = group.getPerpMarketByMarketIndex(0);
    console.log(
      `...registered perp market ${perpMarket.publicKey}, https://explorer.solana.com/tx/${sig}?cluster=devnet`
    );
  } catch (error) {
    console.log(error);
  }
  const perpMarkets = await client.perpGetMarkets(group);
  console.log(`...created perp market ${perpMarkets[0].publicKey}`);
  if (group.addressLookupTables[0].equals(_web3js.PublicKey.default)) {
    try {
      console.log(`ALT...`);
      const createIx = _web3js.AddressLookupTableProgram.createLookupTable({
        authority: admin.publicKey,
        payer: admin.publicKey,
        recentSlot: await connection.getSlot("finalized")
      });
      const createTx = await _chunk772SHZWXjs.buildVersionedTx.call(void 0, 
        client.program.provider,
        [createIx[0]]
      );
      sig = await connection.sendTransaction(createTx);
      console.log(
        `...created ALT ${createIx[1]} https://explorer.solana.com/tx/${sig}?cluster=devnet`
      );
      sig = await client.altSet(
        group,
        new (0, _web3js.PublicKey)("EmN5RjHUFsoag7tZ2AyBL2N8JrhV7nLMKgNbpCfzC81D"),
        0
      );
      console.log(
        `...set at index 0 for group https://explorer.solana.com/tx/${sig}?cluster=devnet`
      );
      const extendIx = _web3js.AddressLookupTableProgram.extendLookupTable({
        lookupTable: createIx[1],
        payer: admin.publicKey,
        authority: admin.publicKey,
        addresses: Array.from(group.banksMapByMint.values()).flat().map((bank) => [bank.publicKey, bank.oracle]).flat()
      });
      const extendTx = await _chunk772SHZWXjs.buildVersionedTx.call(void 0, 
        client.program.provider,
        [extendIx]
      );
      sig = await client.program.provider.connection.sendTransaction(extendTx);
      console.log(
        `...extended ALT with pks, https://explorer.solana.com/tx/${sig}?cluster=devnet`
      );
    } catch (error) {
      console.log(error);
    }
  }
  try {
  } catch (error) {
    console.log(error);
  }
  process.exit();
}
main();
//# sourceMappingURL=devnet-admin.js.map