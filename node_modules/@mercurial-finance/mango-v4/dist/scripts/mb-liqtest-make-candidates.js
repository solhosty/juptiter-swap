"use strict"; function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }

var _chunkF4G3XGNFjs = require('../chunk-F4G3XGNF.js');


var _chunkHFEILVW4js = require('../chunk-HFEILVW4.js');
require('../chunk-A355EMTI.js');
require('../chunk-74ANAXXV.js');
require('../chunk-C3X3GVS5.js');




var _chunkUGHO4YHYjs = require('../chunk-UGHO4YHY.js');
require('../chunk-3ZYUOGD4.js');



var _chunkZYSI4CYOjs = require('../chunk-ZYSI4CYO.js');


var _chunkS6N5Y2X2js = require('../chunk-S6N5Y2X2.js');
require('../chunk-772SHZWX.js');
require('../chunk-S3PQ6OXS.js');



var _chunkWKB2GIFWjs = require('../chunk-WKB2GIFW.js');
require('../chunk-TBVE5N24.js');
require('../chunk-Y7A4QF6J.js');
require('../chunk-JC4IRQUL.js');

// ts/client/src/scripts/mb-liqtest-make-candidates.ts
var _anchor = require('@project-serum/anchor');
var _web3js = require('@solana/web3.js');
var _fs = require('fs'); var _fs2 = _interopRequireDefault(_fs);
var GROUP_NUM = Number(process.env.GROUP_NUM || 200);
var PRICES = {
  ETH: 1200,
  SOL: 0.015,
  USDC: 1,
  MNGO: 0.02
};
var TOKEN_SCENARIOS = [
  [
    "LIQTEST, FUNDING",
    [
      ["USDC", 5e6],
      ["ETH", 1e5],
      ["SOL", 15e7]
    ],
    []
  ],
  ["LIQTEST, LIQOR", [["USDC", 1e6]], []],
  ["LIQTEST, A: USDC, L: SOL", [["USDC", 1e3 * PRICES.SOL]], [["SOL", 920]]],
  ["LIQTEST, A: SOL, L: USDC", [["SOL", 1e3]], [["USDC", 990 * PRICES.SOL]]],
  [
    "LIQTEST, A: ETH, L: SOL",
    [["ETH", 20]],
    [["SOL", 18 * PRICES.ETH / PRICES.SOL]]
  ]
];
async function main() {
  const options = _anchor.AnchorProvider.defaultOptions();
  options.commitment = "processed";
  options.preflightCommitment = "finalized";
  const connection = new (0, _web3js.Connection)(process.env.CLUSTER_URL, options);
  const admin = _web3js.Keypair.fromSecretKey(
    Buffer.from(
      JSON.parse(
        _fs2.default.readFileSync(process.env.MANGO_MAINNET_PAYER_KEYPAIR, "utf-8")
      )
    )
  );
  const userWallet = new (0, _anchor.Wallet)(admin);
  const userProvider = new (0, _anchor.AnchorProvider)(connection, userWallet, options);
  const client = await _chunkHFEILVW4js.MangoClient.connect(
    userProvider,
    "mainnet-beta",
    _chunkS6N5Y2X2js.MANGO_V4_ID["mainnet-beta"],
    {
      idsSource: "get-program-accounts",
      prioritizationFee: 100,
      txConfirmationCommitment: "confirmed"
    }
  );
  console.log(`User ${userWallet.publicKey.toBase58()}`);
  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);
  console.log(group.toString());
  const MAINNET_MINTS = /* @__PURE__ */ new Map([
    ["USDC", group.banksMapByName.get("USDC")[0].mint],
    ["ETH", group.banksMapByName.get("ETH")[0].mint],
    ["SOL", group.banksMapByName.get("SOL")[0].mint]
  ]);
  const accounts = await client.getMangoAccountsForOwner(
    group,
    admin.publicKey
  );
  let maxAccountNum = Math.max(0, ...accounts.map((a) => a.accountNum));
  async function createMangoAccount(name) {
    const accountNum = maxAccountNum + 1;
    maxAccountNum = maxAccountNum + 1;
    await client.createMangoAccount(group, accountNum, name, 4, 4, 4, 4);
    return await client.getMangoAccountForOwner(
      group,
      admin.publicKey,
      accountNum
    );
  }
  async function setBankPrice(bank, price) {
    await client.stubOracleSet(group, bank.oracle, price);
    await client.tokenEdit(
      group,
      bank.mint,
      _chunkF4G3XGNFjs.Builder.call(void 0, _chunkWKB2GIFWjs.NullTokenEditParams).resetStablePrice(true).build()
    );
  }
  async function setPerpPrice(perpMarket, price) {
    await client.stubOracleSet(group, perpMarket.oracle, price);
    await client.perpEditMarket(
      group,
      perpMarket.perpMarketIndex,
      _chunkF4G3XGNFjs.Builder.call(void 0, _chunkWKB2GIFWjs.NullPerpEditParams).resetStablePrice(true).build()
    );
  }
  for (const scenario of TOKEN_SCENARIOS) {
    const [name, assets, liabs] = scenario;
    console.log(`Creating mangoaccount...`);
    let mangoAccount = await createMangoAccount(name);
    console.log(
      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`
    );
    for (let [assetName, assetAmount] of assets) {
      const assetMint = new (0, _web3js.PublicKey)(MAINNET_MINTS.get(assetName));
      await client.tokenDepositNative(
        group,
        mangoAccount,
        assetMint,
        new (0, _anchor.BN)(assetAmount)
      );
      await mangoAccount.reload(client);
    }
    for (let [liabName, liabAmount] of liabs) {
      const liabMint = new (0, _web3js.PublicKey)(MAINNET_MINTS.get(liabName));
      const bank = group.banksMapByName.get(liabName)[0];
      try {
        await setBankPrice(bank, PRICES[liabName] / 2);
        await client.tokenWithdrawNative(
          group,
          mangoAccount,
          liabMint,
          new (0, _anchor.BN)(liabAmount),
          true
        );
      } finally {
        await setBankPrice(bank, PRICES[liabName]);
      }
    }
  }
  const accounts2 = await client.getMangoAccountsForOwner(
    group,
    admin.publicKey
  );
  const fundingAccount = accounts2.find(
    (account) => account.name == "LIQTEST, FUNDING"
  );
  if (!fundingAccount) {
    throw new Error("could not find funding account");
  }
  {
    const name = "LIQTEST, serum orders";
    console.log(`Creating mangoaccount...`);
    let mangoAccount = await createMangoAccount(name);
    console.log(
      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`
    );
    const market = group.getSerum3MarketByName("SOL/USDC");
    const sellMint = new (0, _web3js.PublicKey)(MAINNET_MINTS.get("USDC"));
    const buyMint = new (0, _web3js.PublicKey)(MAINNET_MINTS.get("SOL"));
    await client.tokenDepositNative(
      group,
      mangoAccount,
      sellMint,
      new (0, _anchor.BN)(1e5)
    );
    await mangoAccount.reload(client);
    await client.tokenEdit(
      group,
      buyMint,
      _chunkF4G3XGNFjs.Builder.call(void 0, _chunkWKB2GIFWjs.NullTokenEditParams).oracle(group.getFirstBankByMint(buyMint).oracle).maintAssetWeight(1).initAssetWeight(1).build()
    );
    try {
      await client.serum3PlaceOrder(
        group,
        mangoAccount,
        market.serumMarketExternal,
        _chunkUGHO4YHYjs.Serum3Side.bid,
        1,
        12 * 0.1,
        _chunkUGHO4YHYjs.Serum3SelfTradeBehavior.abortTransaction,
        _chunkUGHO4YHYjs.Serum3OrderType.limit,
        0,
        5
      );
    } finally {
      await client.tokenEdit(
        group,
        buyMint,
        _chunkF4G3XGNFjs.Builder.call(void 0, _chunkWKB2GIFWjs.NullTokenEditParams).oracle(group.getFirstBankByMint(buyMint).oracle).maintAssetWeight(0.9).initAssetWeight(0.8).build()
      );
    }
  }
  {
    const name = "LIQTEST, perp orders";
    console.log(`Creating mangoaccount...`);
    let mangoAccount = await createMangoAccount(name);
    console.log(
      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`
    );
    const collateralMint = new (0, _web3js.PublicKey)(MAINNET_MINTS.get("SOL"));
    const collateralBank = group.banksMapByName.get("SOL")[0];
    await client.tokenDepositNative(
      group,
      mangoAccount,
      collateralMint,
      new (0, _anchor.BN)(3e5)
    );
    await mangoAccount.reload(client);
    await setBankPrice(collateralBank, PRICES["SOL"] * 4);
    try {
      await client.perpPlaceOrder(
        group,
        mangoAccount,
        _optionalChain([group, 'access', _ => _.perpMarketsMapByName, 'access', _2 => _2.get, 'call', _3 => _3("MNGO-PERP"), 'optionalAccess', _4 => _4.perpMarketIndex]),
        _chunkZYSI4CYOjs.PerpOrderSide.bid,
        1e-3,
        // ui price that won't get hit
        3,
        // ui base quantity, 30 base lots, 3.0 MNGO, $0.06
        0.06,
        // ui quote quantity
        4200,
        _chunkZYSI4CYOjs.PerpOrderType.limit,
        false,
        0,
        5
      );
    } finally {
      await setBankPrice(collateralBank, PRICES["SOL"]);
    }
  }
  {
    const name = "LIQTEST, perp base pos";
    console.log(`Creating mangoaccount...`);
    let mangoAccount = await createMangoAccount(name);
    console.log(
      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`
    );
    const collateralMint = new (0, _web3js.PublicKey)(MAINNET_MINTS.get("SOL"));
    const collateralBank = group.banksMapByName.get("SOL")[0];
    await client.tokenDepositNative(
      group,
      mangoAccount,
      collateralMint,
      new (0, _anchor.BN)(3e5)
    );
    await mangoAccount.reload(client);
    await setBankPrice(collateralBank, PRICES["SOL"] * 10);
    try {
      await client.perpPlaceOrder(
        group,
        fundingAccount,
        _optionalChain([group, 'access', _5 => _5.perpMarketsMapByName, 'access', _6 => _6.get, 'call', _7 => _7("MNGO-PERP"), 'optionalAccess', _8 => _8.perpMarketIndex]),
        _chunkZYSI4CYOjs.PerpOrderSide.ask,
        0.03,
        1.1,
        // ui base quantity, 11 base lots, $0.022 value, gain $0.033
        0.033,
        // ui quote quantity
        4200,
        _chunkZYSI4CYOjs.PerpOrderType.limit,
        false,
        0,
        5
      );
      await client.perpPlaceOrder(
        group,
        mangoAccount,
        _optionalChain([group, 'access', _9 => _9.perpMarketsMapByName, 'access', _10 => _10.get, 'call', _11 => _11("MNGO-PERP"), 'optionalAccess', _12 => _12.perpMarketIndex]),
        _chunkZYSI4CYOjs.PerpOrderSide.bid,
        0.03,
        1.1,
        // ui base quantity, 11 base lots, $0.022 value, cost $0.033
        0.033,
        // ui quote quantity
        4200,
        _chunkZYSI4CYOjs.PerpOrderType.market,
        false,
        0,
        5
      );
      await client.perpConsumeAllEvents(
        group,
        _optionalChain([group, 'access', _13 => _13.perpMarketsMapByName, 'access', _14 => _14.get, 'call', _15 => _15("MNGO-PERP"), 'optionalAccess', _16 => _16.perpMarketIndex])
      );
    } finally {
      await setBankPrice(collateralBank, PRICES["SOL"]);
    }
  }
  {
    const name = "LIQTEST, perp positive pnl";
    console.log(`Creating mangoaccount...`);
    let mangoAccount = await createMangoAccount(name);
    console.log(
      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`
    );
    const perpMarket = group.perpMarketsMapByName.get("MNGO-PERP");
    const perpIndex = perpMarket.perpMarketIndex;
    const liabMint = new (0, _web3js.PublicKey)(MAINNET_MINTS.get("USDC"));
    const collateralMint = new (0, _web3js.PublicKey)(MAINNET_MINTS.get("SOL"));
    const collateralBank = group.banksMapByName.get("SOL")[0];
    await client.tokenDepositNative(
      group,
      mangoAccount,
      collateralMint,
      new (0, _anchor.BN)(3e5)
    );
    await mangoAccount.reload(client);
    try {
      await setBankPrice(collateralBank, PRICES["SOL"] * 10);
      await client.tokenWithdrawNative(
        group,
        mangoAccount,
        liabMint,
        new (0, _anchor.BN)(-5e3),
        true
      );
      await mangoAccount.reload(client);
      await setPerpPrice(perpMarket, PRICES["MNGO"] / 2);
      await client.perpPlaceOrder(
        group,
        fundingAccount,
        perpIndex,
        _chunkZYSI4CYOjs.PerpOrderSide.ask,
        0.01,
        1.1,
        // ui base quantity, 11 base lots, $0.011
        0.011,
        // ui quote quantity
        4200,
        _chunkZYSI4CYOjs.PerpOrderType.limit,
        false,
        0,
        5
      );
      await client.perpPlaceOrder(
        group,
        mangoAccount,
        perpIndex,
        _chunkZYSI4CYOjs.PerpOrderSide.bid,
        0.01,
        1.1,
        // ui base quantity, 11 base lots, $0.011
        0.011,
        // ui quote quantity
        4200,
        _chunkZYSI4CYOjs.PerpOrderType.market,
        false,
        0,
        5
      );
      await client.perpConsumeAllEvents(group, perpIndex);
      await setPerpPrice(perpMarket, PRICES["MNGO"]);
      await client.perpPlaceOrder(
        group,
        fundingAccount,
        perpIndex,
        _chunkZYSI4CYOjs.PerpOrderSide.bid,
        0.02,
        1.1,
        // ui base quantity, 11 base lots, $0.022
        0.022,
        // ui quote quantity
        4201,
        _chunkZYSI4CYOjs.PerpOrderType.limit,
        false,
        0,
        5
      );
      await client.perpPlaceOrder(
        group,
        mangoAccount,
        perpIndex,
        _chunkZYSI4CYOjs.PerpOrderSide.ask,
        0.02,
        1.1,
        // ui base quantity, 11 base lots, $0.022
        0.022,
        // ui quote quantity
        4201,
        _chunkZYSI4CYOjs.PerpOrderType.market,
        false,
        0,
        5
      );
      await client.perpConsumeAllEvents(group, perpIndex);
    } finally {
      await setPerpPrice(perpMarket, PRICES["MNGO"]);
      await setBankPrice(collateralBank, PRICES["SOL"]);
    }
  }
  {
    const name = "LIQTEST, perp negative pnl";
    console.log(`Creating mangoaccount...`);
    let mangoAccount = await createMangoAccount(name);
    console.log(
      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`
    );
    const perpMarket = group.perpMarketsMapByName.get("MNGO-PERP");
    const perpIndex = perpMarket.perpMarketIndex;
    const liabMint = new (0, _web3js.PublicKey)(MAINNET_MINTS.get("USDC"));
    const collateralMint = new (0, _web3js.PublicKey)(MAINNET_MINTS.get("SOL"));
    const collateralBank = group.banksMapByName.get("SOL")[0];
    await client.tokenDepositNative(
      group,
      mangoAccount,
      collateralMint,
      new (0, _anchor.BN)(3e5)
    );
    await mangoAccount.reload(client);
    try {
      await setBankPrice(collateralBank, PRICES["SOL"] * 10);
      await setPerpPrice(perpMarket, PRICES["MNGO"] / 2);
      await client.perpPlaceOrder(
        group,
        fundingAccount,
        perpIndex,
        _chunkZYSI4CYOjs.PerpOrderSide.bid,
        0.01,
        1.1,
        // ui base quantity, 11 base lots, $0.011
        0.011,
        // ui quote quantity
        4200,
        _chunkZYSI4CYOjs.PerpOrderType.limit,
        false,
        0,
        5
      );
      await client.perpPlaceOrder(
        group,
        mangoAccount,
        perpIndex,
        _chunkZYSI4CYOjs.PerpOrderSide.ask,
        0.01,
        1.1,
        // ui base quantity, 11 base lots, $0.011
        0.011,
        // ui quote quantity
        4200,
        _chunkZYSI4CYOjs.PerpOrderType.market,
        false,
        0,
        5
      );
      await client.perpConsumeAllEvents(group, perpIndex);
      await setPerpPrice(perpMarket, PRICES["MNGO"]);
      await client.perpPlaceOrder(
        group,
        fundingAccount,
        perpIndex,
        _chunkZYSI4CYOjs.PerpOrderSide.ask,
        0.02,
        1.1,
        // ui base quantity, 11 base lots, $0.022
        0.022,
        // ui quote quantity
        4201,
        _chunkZYSI4CYOjs.PerpOrderType.limit,
        false,
        0,
        5
      );
      await client.perpPlaceOrder(
        group,
        mangoAccount,
        perpIndex,
        _chunkZYSI4CYOjs.PerpOrderSide.bid,
        0.02,
        1.1,
        // ui base quantity, 11 base lots, $0.022
        0.022,
        // ui quote quantity
        4201,
        _chunkZYSI4CYOjs.PerpOrderType.market,
        false,
        0,
        5
      );
      await client.perpConsumeAllEvents(group, perpIndex);
    } finally {
      await setPerpPrice(perpMarket, PRICES["MNGO"]);
      await setBankPrice(collateralBank, PRICES["SOL"]);
    }
  }
  process.exit();
}
main();
//# sourceMappingURL=mb-liqtest-make-candidates.js.map