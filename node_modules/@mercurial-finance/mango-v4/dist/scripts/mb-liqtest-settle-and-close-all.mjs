import {
  MangoClient
} from "../chunk-HVUWVEE5.mjs";
import "../chunk-PDNGNLHE.mjs";
import "../chunk-TSHDMTGJ.mjs";
import "../chunk-P2PWY3QH.mjs";
import "../chunk-TCNCMUFM.mjs";
import "../chunk-BYB3CFSH.mjs";
import "../chunk-36PUIGQD.mjs";
import {
  MANGO_V4_ID
} from "../chunk-5SDTDLZO.mjs";
import "../chunk-O3IXUKHU.mjs";
import "../chunk-62VGMIX5.mjs";
import "../chunk-34DSBDDD.mjs";
import "../chunk-FP7S2XO3.mjs";
import "../chunk-Z2RB6KEX.mjs";
import "../chunk-5VRACIDE.mjs";

// ts/client/src/scripts/mb-liqtest-settle-and-close-all.ts
import { AnchorProvider, Wallet } from "@project-serum/anchor";
import { Connection, Keypair } from "@solana/web3.js";
import fs from "fs";
var GROUP_NUM = Number(process.env.GROUP_NUM || 200);
var CLUSTER_URL = process.env.CLUSTER_URL;
var MANGO_MAINNET_PAYER_KEYPAIR = process.env.MANGO_MAINNET_PAYER_KEYPAIR || "";
async function main() {
  const options = AnchorProvider.defaultOptions();
  options.commitment = "processed";
  options.preflightCommitment = "finalized";
  const connection = new Connection(CLUSTER_URL, options);
  const admin = Keypair.fromSecretKey(
    Buffer.from(
      JSON.parse(fs.readFileSync(MANGO_MAINNET_PAYER_KEYPAIR, "utf-8"))
    )
  );
  const userWallet = new Wallet(admin);
  const userProvider = new AnchorProvider(connection, userWallet, options);
  const client = await MangoClient.connect(
    userProvider,
    "mainnet-beta",
    MANGO_V4_ID["mainnet-beta"],
    {
      idsSource: "get-program-accounts",
      prioritizationFee: 100,
      txConfirmationCommitment: "confirmed"
    }
  );
  console.log(`User ${userWallet.publicKey.toBase58()}`);
  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);
  console.log(group.toString());
  let accounts = await client.getMangoAccountsForOwner(group, admin.publicKey);
  for (let account of accounts) {
    for (let serumOrders of account.serum3Active()) {
      const serumMarket = group.getSerum3MarketByMarketIndex(
        serumOrders.marketIndex
      );
      const serumExternal = serumMarket.serumMarketExternal;
      console.log(
        `closing serum orders on: ${account} for market ${serumMarket.name}`
      );
      await client.serum3CancelAllOrders(group, account, serumExternal, 10);
      await client.serum3SettleFunds(group, account, serumExternal);
      await client.serum3CloseOpenOrders(group, account, serumExternal);
    }
    for (let perpPosition of account.perpActive()) {
      const perpMarket = group.findPerpMarket(perpPosition.marketIndex);
      console.log(
        `closing perp orders on: ${account} for market ${perpMarket.name}`
      );
      await client.perpCancelAllOrders(
        group,
        account,
        perpMarket.perpMarketIndex,
        10
      );
    }
  }
  accounts = await client.getMangoAccountsForOwner(group, admin.publicKey);
  for (let account of accounts) {
    try {
      console.log(`closing account: ${account}`);
      await client.closeMangoAccount(group, account, true);
    } catch (error) {
      console.log(`failed to close ${account.publicKey}: ${error}`);
    }
  }
  process.exit();
}
main();
//# sourceMappingURL=mb-liqtest-settle-and-close-all.mjs.map