{"version":3,"sources":["../../ts/client/src/scripts/devnet-user.ts"],"names":["sig"],"mappings":"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","sourcesContent":["import { AnchorProvider, BN, Wallet } from '@project-serum/anchor';\nimport { Connection, Keypair, PublicKey } from '@solana/web3.js';\nimport { expect } from 'chai';\nimport fs from 'fs';\nimport { Group } from '../accounts/group';\nimport { HealthType } from '../accounts/mangoAccount';\nimport { PerpOrderSide, PerpOrderType } from '../accounts/perp';\nimport { MangoClient } from '../client';\nimport { MANGO_V4_ID } from '../constants';\nimport { toUiDecimalsForQuote } from '../utils';\n\n//\n// An example for users based on high level api i.e. the client\n// Create\n// process.env.USER_KEYPAIR - mango account owner keypair path\n// process.env.ADMIN_KEYPAIR - group admin keypair path (useful for automatically finding the group)\n//\n// This script deposits some tokens, places some serum orders, cancels them, places some perp orders\n//\n\nconst DEVNET_MINTS = new Map([\n  ['USDC', '8FRFC6MoGGkMFQwngccyu69VnYbzykGeez7ignHVAFSN'], // use devnet usdc\n  ['BTC', '3UNBZ6o52WTWwjac2kPUb4FyodhU1vFkRJheu1Sh2TvU'],\n  ['SOL', 'So11111111111111111111111111111111111111112'],\n  ['ORCA', 'orcarKHSqC5CDDsGbho8GKvwExejWHxTqGzXgcewB9L'],\n  ['MNGO', 'Bb9bsTQa1bGEtQ5KagGkvSHyuLqDWumFUcRqFusFNJWC'],\n]);\nexport const DEVNET_SERUM3_MARKETS = new Map([\n  ['BTC/USDC', new PublicKey('DW83EpHFywBxCHmyARxwj3nzxJd7MUdSeznmrdzZKNZB')],\n  ['SOL/USDC', new PublicKey('5xWpt56U1NCuHoAEtpLeUrQcxDkEpNfScjfLFaRzLPgR')],\n]);\n\nconst GROUP_NUM = Number(process.env.GROUP_NUM || 0);\n\nasync function main() {\n  const options = AnchorProvider.defaultOptions();\n  const connection = new Connection(\n    'https://mango.devnet.rpcpool.com',\n    options,\n  );\n\n  const user = Keypair.fromSecretKey(\n    Buffer.from(\n      JSON.parse(fs.readFileSync(process.env.USER_KEYPAIR!, 'utf-8')),\n    ),\n  );\n  const userWallet = new Wallet(user);\n  const userProvider = new AnchorProvider(connection, userWallet, options);\n  const client = await MangoClient.connect(\n    userProvider,\n    'devnet',\n    MANGO_V4_ID['devnet'],\n    {\n      idsSource: 'get-program-accounts',\n    },\n  );\n  console.log(`User ${userWallet.publicKey.toBase58()}`);\n\n  // fetch group\n  const admin = Keypair.fromSecretKey(\n    Buffer.from(\n      JSON.parse(fs.readFileSync(process.env.ADMIN_KEYPAIR!, 'utf-8')),\n    ),\n  );\n  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);\n\n  // create + fetch account\n  console.log(`Creating mangoaccount...`);\n  let mangoAccount = (await client.getOrCreateMangoAccount(group))!;\n  await mangoAccount.reload(client);\n  if (!mangoAccount) {\n    throw new Error(`MangoAccount not found for user ${user.publicKey}`);\n  }\n  console.log(`...created/found mangoAccount ${mangoAccount.publicKey}`);\n\n  // set delegate, and change name\n  if (true) {\n    console.log(`...changing mango account name, and setting a delegate`);\n    const newName = 'my_changed_name';\n    const randomKey = new PublicKey(\n      '4ZkS7ZZkxfsC3GtvvsHP3DFcUeByU9zzZELS4r8HCELo',\n    );\n\n    await client.editMangoAccount(group, mangoAccount, newName, randomKey);\n    await mangoAccount.reload(client);\n    expect(mangoAccount.name).deep.equals(newName);\n    expect(mangoAccount.delegate).deep.equals(randomKey);\n\n    const oldName = 'my_mango_account';\n    console.log(`...resetting mango account name, and re-setting a delegate`);\n    await client.editMangoAccount(\n      group,\n      mangoAccount,\n      oldName,\n      PublicKey.default,\n    );\n    await mangoAccount.reload(client);\n    expect(mangoAccount.name).deep.equals(oldName);\n    expect(mangoAccount.delegate).deep.equals(PublicKey.default);\n  }\n\n  // expand account\n  if (\n    mangoAccount.tokens.length < 16 ||\n    mangoAccount.serum3.length < 8 ||\n    mangoAccount.perps.length < 8 ||\n    mangoAccount.perpOpenOrders.length < 8\n  ) {\n    console.log(\n      `...expanding mango account to max 16 token positions, 8 serum3, 8 perp position and 8 perp oo slots, previous (tokens ${mangoAccount.tokens.length}, serum3 ${mangoAccount.serum3.length}, perps ${mangoAccount.perps.length}, perps oo ${mangoAccount.perpOpenOrders.length})`,\n    );\n    let sig = await client.expandMangoAccount(group, mangoAccount, 16, 8, 8, 8);\n    console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);\n    await mangoAccount.reload(client);\n    expect(mangoAccount.tokens.length).equals(16);\n    expect(mangoAccount.serum3.length).equals(8);\n    expect(mangoAccount.perps.length).equals(8);\n    expect(mangoAccount.perpOpenOrders.length).equals(8);\n  }\n\n  // deposit and withdraw\n  if (true) {\n    console.log(`...depositing 50 USDC, 1 SOL, 1 MNGO`);\n\n    // deposit USDC\n    let oldBalance = mangoAccount.getTokenBalance(\n      group.getFirstBankByMint(new PublicKey(DEVNET_MINTS.get('USDC')!)),\n    );\n    await client.tokenDeposit(\n      group,\n      mangoAccount,\n      new PublicKey(DEVNET_MINTS.get('USDC')!),\n      50,\n    );\n    await mangoAccount.reload(client);\n    let newBalance = mangoAccount.getTokenBalance(\n      group.getFirstBankByMint(new PublicKey(DEVNET_MINTS.get('USDC')!)),\n    );\n    expect(toUiDecimalsForQuote(newBalance.sub(oldBalance)).toString()).equals(\n      '50',\n    );\n\n    // deposit SOL\n    await client.tokenDeposit(\n      group,\n      mangoAccount,\n      new PublicKey(DEVNET_MINTS.get('SOL')!),\n      1,\n    );\n    await mangoAccount.reload(client);\n\n    // deposit MNGO\n    await client.tokenDeposit(\n      group,\n      mangoAccount,\n      new PublicKey(DEVNET_MINTS.get('MNGO')!),\n      1,\n    );\n    await mangoAccount.reload(client);\n\n    // withdraw USDC\n    console.log(`...withdrawing 1 USDC`);\n    oldBalance = mangoAccount.getTokenBalance(\n      group.getFirstBankByMint(new PublicKey(DEVNET_MINTS.get('USDC')!)),\n    );\n    await client.tokenWithdraw(\n      group,\n      mangoAccount,\n      new PublicKey(DEVNET_MINTS.get('USDC')!),\n      1,\n      true,\n    );\n    await mangoAccount.reload(client);\n    newBalance = mangoAccount.getTokenBalance(\n      group.getFirstBankByMint(new PublicKey(DEVNET_MINTS.get('USDC')!)),\n    );\n    expect(toUiDecimalsForQuote(oldBalance.sub(newBalance)).toString()).equals(\n      '1',\n    );\n\n    console.log(`...depositing 0.0005 BTC`);\n    await client.tokenDeposit(\n      group,\n      mangoAccount,\n      new PublicKey(DEVNET_MINTS.get('BTC')!),\n      0.0005,\n    );\n    await mangoAccount.reload(client);\n  }\n\n  // Note: Disable for now until we have openbook devnet markets\n  // if (true) {\n  //   // serum3\n  //   const asks = await group.loadSerum3AsksForMarket(\n  //     client,\n  //     DEVNET_SERUM3_MARKETS.get('BTC/USDC')!,\n  //   );\n  //   const lowestAsk = Array.from(asks!)[0];\n  //   const bids = await group.loadSerum3BidsForMarket(\n  //     client,\n  //     DEVNET_SERUM3_MARKETS.get('BTC/USDC')!,\n  //   );\n  //   const highestBid = Array.from(bids!)![0];\n\n  //   console.log(`...cancelling all existing serum3 orders`);\n  //   if (\n  //     Array.from(mangoAccount.serum3OosMapByMarketIndex.values()).length > 0\n  //   ) {\n  //     await client.serum3CancelAllOrders(\n  //       group,\n  //       mangoAccount,\n  //       DEVNET_SERUM3_MARKETS.get('BTC/USDC')!,\n  //       10,\n  //     );\n  //   }\n\n  //   let price = 20;\n  //   let qty = 0.0001;\n  //   console.log(\n  //     `...placing serum3 bid which would not be settled since its relatively low then midprice at ${price} for ${qty}`,\n  //   );\n  //   await client.serum3PlaceOrder(\n  //     group,\n  //     mangoAccount,\n  //     DEVNET_SERUM3_MARKETS.get('BTC/USDC')!,\n  //     Serum3Side.bid,\n  //     price,\n  //     qty,\n  //     Serum3SelfTradeBehavior.decrementTake,\n  //     Serum3OrderType.limit,\n  //     Date.now(),\n  //     10,\n  //   );\n  //   await mangoAccount.reload(client);\n  //   let orders = await mangoAccount.loadSerum3OpenOrdersForMarket(\n  //     client,\n  //     group,\n  //     DEVNET_SERUM3_MARKETS.get('BTC/USDC')!,\n  //   );\n  //   expect(orders[0].price).equals(20);\n  //   expect(orders[0].size).equals(qty);\n\n  //   price = lowestAsk.price + lowestAsk.price / 2;\n  //   qty = 0.0001;\n  //   console.log(\n  //     `...placing serum3 bid way above midprice at ${price} for ${qty}`,\n  //   );\n  //   await client.serum3PlaceOrder(\n  //     group,\n  //     mangoAccount,\n  //     DEVNET_SERUM3_MARKETS.get('BTC/USDC')!,\n  //     Serum3Side.bid,\n  //     price,\n  //     qty,\n  //     Serum3SelfTradeBehavior.decrementTake,\n  //     Serum3OrderType.limit,\n  //     Date.now(),\n  //     10,\n  //   );\n  //   await mangoAccount.reload(client);\n\n  //   price = highestBid.price - highestBid.price / 2;\n  //   qty = 0.0001;\n  //   console.log(\n  //     `...placing serum3 ask way below midprice at ${price} for ${qty}`,\n  //   );\n  //   await client.serum3PlaceOrder(\n  //     group,\n  //     mangoAccount,\n  //     DEVNET_SERUM3_MARKETS.get('BTC/USDC')!,\n  //     Serum3Side.ask,\n  //     price,\n  //     qty,\n  //     Serum3SelfTradeBehavior.decrementTake,\n  //     Serum3OrderType.limit,\n  //     Date.now(),\n  //     10,\n  //   );\n\n  //   console.log(`...current own orders on OB`);\n  //   orders = await mangoAccount.loadSerum3OpenOrdersForMarket(\n  //     client,\n  //     group,\n  //     DEVNET_SERUM3_MARKETS.get('BTC/USDC')!,\n  //   );\n  //   for (const order of orders) {\n  //     console.log(\n  //       `  - order orderId ${order.orderId}, ${order.side}, ${order.price}, ${order.size}`,\n  //     );\n  //     console.log(`  - cancelling order with ${order.orderId}`);\n  //     await client.serum3CancelOrder(\n  //       group,\n  //       mangoAccount,\n  //       DEVNET_SERUM3_MARKETS.get('BTC/USDC')!,\n  //       order.side === 'buy' ? Serum3Side.bid : Serum3Side.ask,\n  //       order.orderId,\n  //     );\n  //   }\n\n  //   console.log(`...current own orders on OB`);\n  //   orders = await mangoAccount.loadSerum3OpenOrdersForMarket(\n  //     client,\n  //     group,\n  //     DEVNET_SERUM3_MARKETS.get('BTC/USDC')!,\n  //   );\n  //   for (const order of orders) {\n  //     console.log(order);\n  //   }\n\n  //   console.log(`...settling funds`);\n  //   await client.serum3SettleFunds(\n  //     group,\n  //     mangoAccount,\n  //     DEVNET_SERUM3_MARKETS.get('BTC/USDC')!,\n  //   );\n  // }\n\n  if (true) {\n    await mangoAccount.reload(client);\n    console.log(\n      '...mangoAccount.getEquity() ' +\n        toUiDecimalsForQuote(mangoAccount.getEquity(group)!.toNumber()),\n    );\n    console.log(\n      '...mangoAccount.getCollateralValue() ' +\n        toUiDecimalsForQuote(\n          mangoAccount.getCollateralValue(group)!.toNumber(),\n        ),\n    );\n    console.log(\n      '...mangoAccount.getAssetsVal() ' +\n        toUiDecimalsForQuote(\n          mangoAccount.getAssetsValue(group, HealthType.init)!.toNumber(),\n        ),\n    );\n    console.log(\n      '...mangoAccount.getLiabsVal() ' +\n        toUiDecimalsForQuote(\n          mangoAccount.getLiabsValue(group, HealthType.init)!.toNumber(),\n        ),\n    );\n    console.log(\n      '...mangoAccount.getMaxWithdrawWithBorrowForToken(group, \"SOL\") ' +\n        toUiDecimalsForQuote(\n          mangoAccount\n            .getMaxWithdrawWithBorrowForToken(\n              group,\n              new PublicKey(DEVNET_MINTS.get('SOL')!),\n            )!\n            .toNumber(),\n        ),\n    );\n  }\n\n  if (true) {\n    function getMaxSourceForTokenSwapWrapper(src, tgt) {\n      console.log(\n        `getMaxSourceForTokenSwap ${src.padEnd(4)} ${tgt.padEnd(4)} ` +\n          mangoAccount.getMaxSourceUiForTokenSwap(\n            group,\n            group.banksMapByName.get(src)![0].mint,\n            group.banksMapByName.get(tgt)![0].mint,\n            1,\n          )!,\n      );\n    }\n    for (const srcToken of Array.from(group.banksMapByName.keys())) {\n      for (const tgtToken of Array.from(group.banksMapByName.keys())) {\n        getMaxSourceForTokenSwapWrapper(srcToken, tgtToken);\n      }\n    }\n\n    const maxQuoteForSerum3BidUi = mangoAccount.getMaxQuoteForSerum3BidUi(\n      group,\n      DEVNET_SERUM3_MARKETS.get('BTC/USDC')!,\n    );\n    console.log(\n      \"...mangoAccount.getMaxQuoteForSerum3BidUi(group, 'BTC/USDC') \" +\n        maxQuoteForSerum3BidUi,\n    );\n\n    const maxBaseForSerum3AskUi = mangoAccount.getMaxBaseForSerum3AskUi(\n      group,\n      DEVNET_SERUM3_MARKETS.get('BTC/USDC')!,\n    );\n    console.log(\n      \"...mangoAccount.getMaxBaseForSerum3AskUi(group, 'BTC/USDC') \" +\n        maxBaseForSerum3AskUi,\n    );\n\n    console.log(\n      `simHealthRatioWithSerum3BidUiChanges ${mangoAccount.simHealthRatioWithSerum3BidUiChanges(\n        group,\n        785,\n        DEVNET_SERUM3_MARKETS.get('BTC/USDC')!,\n      )}`,\n    );\n    console.log(\n      `simHealthRatioWithSerum3AskUiChanges ${mangoAccount.simHealthRatioWithSerum3AskUiChanges(\n        group,\n        0.033,\n        DEVNET_SERUM3_MARKETS.get('BTC/USDC')!,\n      )}`,\n    );\n  }\n\n  // perps\n  if (true) {\n    let sig;\n    let perpMarket = group.getPerpMarketByName('BTC-PERP');\n    const orders = await mangoAccount.loadPerpOpenOrdersForMarket(\n      client,\n      group,\n      perpMarket.perpMarketIndex,\n    );\n    for (const order of orders) {\n      console.log(\n        `Current order - ${order.uiPrice} ${order.uiSize} ${order.side}`,\n      );\n    }\n    console.log(`...cancelling all perp orders`);\n    sig = await client.perpCancelAllOrders(\n      group,\n      mangoAccount,\n      perpMarket.perpMarketIndex,\n      10,\n    );\n    console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);\n\n    // oracle pegged\n    try {\n      const clientId = Math.floor(Math.random() * 99999);\n      const price = group.banksMapByName.get('BTC')![0].uiPrice!;\n      console.log(\n        `...placing perp pegged bid ${clientId} at oracle price ${perpMarket.uiPrice}`,\n      );\n      const sig = await client.perpPlaceOrderPegged(\n        group,\n        mangoAccount,\n        perpMarket.perpMarketIndex,\n        PerpOrderSide.bid,\n        -5,\n        perpMarket.uiPrice + 5,\n        0.01,\n        price * 0.011,\n        clientId,\n        PerpOrderType.limit,\n        false,\n        0,\n        1,\n      );\n      console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);\n    } catch (error) {\n      console.log(error);\n    }\n    try {\n      const clientId = Math.floor(Math.random() * 99999);\n      const price = group.banksMapByName.get('BTC')![0].uiPrice!;\n      console.log(\n        `...placing perp pegged bid ${clientId} at oracle price ${perpMarket.uiPrice}`,\n      );\n      const sig = await client.perpPlaceOrderPegged(\n        group,\n        mangoAccount,\n        perpMarket.perpMarketIndex,\n        PerpOrderSide.ask,\n        5,\n        perpMarket.uiPrice - 5,\n        0.01,\n        price * 0.011,\n        clientId,\n        PerpOrderType.limit,\n        false,\n        0,\n        1,\n      );\n      console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);\n    } catch (error) {\n      console.log(error);\n    }\n\n    await logBidsAndAsks(client, group);\n\n    sig = await client.perpCancelAllOrders(\n      group,\n      mangoAccount,\n      perpMarket.perpMarketIndex,\n      10,\n    );\n    console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);\n\n    // scenario 1\n    // bid max perp\n    try {\n      const clientId = Math.floor(Math.random() * 99999);\n      await mangoAccount.reload(client);\n      await group.reloadAll(client);\n      const price =\n        group.banksMapByName.get('BTC')![0].uiPrice! -\n        Math.floor(Math.random() * 100);\n      const quoteQty = mangoAccount.getMaxQuoteForPerpBidUi(\n        group,\n        perpMarket.perpMarketIndex,\n      );\n      const baseQty = quoteQty / price;\n      console.log(\n        ` simHealthRatioWithPerpBidUiChanges - ${mangoAccount.simHealthRatioWithPerpBidUiChanges(\n          group,\n          perpMarket.perpMarketIndex,\n          baseQty,\n        )}`,\n      );\n      console.log(\n        `...placing max qty perp bid  clientId ${clientId} at price ${price}, base ${baseQty}, quote ${quoteQty}`,\n      );\n      const sig = await client.perpPlaceOrder(\n        group,\n        mangoAccount,\n        perpMarket.perpMarketIndex,\n        PerpOrderSide.bid,\n        price,\n        baseQty,\n        quoteQty,\n        clientId,\n        PerpOrderType.limit,\n        false,\n        0, //Date.now() + 200,\n        1,\n      );\n      console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);\n    } catch (error) {\n      console.log(error);\n    }\n    console.log(`...cancelling all perp orders`);\n    sig = await client.perpCancelAllOrders(\n      group,\n      mangoAccount,\n      perpMarket.perpMarketIndex,\n      10,\n    );\n    console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);\n\n    // bid max perp + some\n    try {\n      const clientId = Math.floor(Math.random() * 99999);\n      const price =\n        group.banksMapByName.get('BTC')![0].uiPrice! -\n        Math.floor(Math.random() * 100);\n      const quoteQty =\n        mangoAccount.getMaxQuoteForPerpBidUi(\n          group,\n          perpMarket.perpMarketIndex,\n        ) * 1.02;\n\n      const baseQty = quoteQty / price;\n      console.log(\n        `...placing max qty * 1.02 perp bid clientId ${clientId} at price ${price}, base ${baseQty}, quote ${quoteQty}`,\n      );\n      const sig = await client.perpPlaceOrder(\n        group,\n        mangoAccount,\n        perpMarket.perpMarketIndex,\n        PerpOrderSide.bid,\n        price,\n        baseQty,\n        quoteQty,\n        clientId,\n        PerpOrderType.limit,\n        false,\n        0, //Date.now() + 200,\n        1,\n      );\n      console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);\n    } catch (error) {\n      console.log(error);\n      console.log('Errored out as expected');\n    }\n\n    // bid max ask\n    try {\n      const clientId = Math.floor(Math.random() * 99999);\n      const price =\n        group.banksMapByName.get('BTC')![0].uiPrice! +\n        Math.floor(Math.random() * 100);\n      const baseQty = mangoAccount.getMaxBaseForPerpAskUi(\n        group,\n        perpMarket.perpMarketIndex,\n      );\n      console.log(\n        ` simHealthRatioWithPerpAskUiChanges - ${mangoAccount.simHealthRatioWithPerpAskUiChanges(\n          group,\n          perpMarket.perpMarketIndex,\n          baseQty,\n        )}`,\n      );\n      const quoteQty = baseQty * price;\n      console.log(\n        `...placing max qty perp ask clientId ${clientId} at price ${price}, base ${baseQty}, quote ${quoteQty}`,\n      );\n      const sig = await client.perpPlaceOrder(\n        group,\n        mangoAccount,\n        perpMarket.perpMarketIndex,\n        PerpOrderSide.ask,\n        price,\n        baseQty,\n        quoteQty,\n        clientId,\n        PerpOrderType.limit,\n        false,\n        0, //Date.now() + 200,\n        1,\n      );\n      console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);\n    } catch (error) {\n      console.log(error);\n    }\n\n    // bid max ask + some\n    try {\n      const clientId = Math.floor(Math.random() * 99999);\n      const price =\n        group.banksMapByName.get('BTC')![0].uiPrice! +\n        Math.floor(Math.random() * 100);\n      const baseQty =\n        mangoAccount.getMaxBaseForPerpAskUi(group, perpMarket.perpMarketIndex) *\n        1.02;\n      const quoteQty = baseQty * price;\n      console.log(\n        `...placing max qty perp ask * 1.02 clientId ${clientId} at price ${price}, base ${baseQty}, quote ${quoteQty}`,\n      );\n      const sig = await client.perpPlaceOrder(\n        group,\n        mangoAccount,\n        perpMarket.perpMarketIndex,\n        PerpOrderSide.ask,\n        price,\n        baseQty,\n        quoteQty,\n        clientId,\n        PerpOrderType.limit,\n        false,\n        0, //Date.now() + 200,\n        1,\n      );\n      console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);\n    } catch (error) {\n      console.log(error);\n      console.log('Errored out as expected');\n    }\n\n    console.log(`...cancelling all perp orders`);\n    sig = await client.perpCancelAllOrders(\n      group,\n      mangoAccount,\n      perpMarket.perpMarketIndex,\n      10,\n    );\n    console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);\n\n    // scenario 2\n    // make + take orders\n    try {\n      const clientId = Math.floor(Math.random() * 99999);\n      const price = group.banksMapByName.get('BTC')![0].uiPrice!;\n      console.log(`...placing perp bid ${clientId} at ${price}`);\n      const sig = await client.perpPlaceOrder(\n        group,\n        mangoAccount,\n        perpMarket.perpMarketIndex,\n        PerpOrderSide.bid,\n        price,\n        0.01,\n        price * 0.01,\n        clientId,\n        PerpOrderType.limit,\n        false,\n        0, //Date.now() + 200,\n        1,\n      );\n      console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);\n    } catch (error) {\n      console.log(error);\n    }\n    try {\n      const clientId = Math.floor(Math.random() * 99999);\n      const price = group.banksMapByName.get('BTC')![0].uiPrice!;\n      console.log(`...placing perp ask ${clientId} at ${price}`);\n      const sig = await client.perpPlaceOrder(\n        group,\n        mangoAccount,\n        perpMarket.perpMarketIndex,\n        PerpOrderSide.ask,\n        price,\n        0.01,\n        price * 0.011,\n        clientId,\n        PerpOrderType.limit,\n        false,\n        0, //Date.now() + 200,\n        1,\n      );\n      console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);\n    } catch (error) {\n      console.log(error);\n    }\n    // // should be able to cancel them : know bug\n    // console.log(`...cancelling all perp orders`);\n    // sig = await client.perpCancelAllOrders(group, mangoAccount, perpMarket.perpMarketIndex, 10);\n    // console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);\n\n    await perpMarket?.loadEventQueue(client)!;\n    const fr = perpMarket?.getCurrentFundingRate(\n      await perpMarket.loadBids(client),\n      await perpMarket.loadAsks(client),\n    );\n    console.log(`current funding rate per hour is ${fr}`);\n\n    const eq = await perpMarket?.loadEventQueue(client)!;\n    console.log(\n      `raw events - ${JSON.stringify(eq.eventsSince(new BN(0)), null, 2)}`,\n    );\n\n    // sleep so that keeper can catch up\n    await new Promise((r) => setTimeout(r, 2000));\n\n    // make+take orders should have cancelled each other, and if keeper has already cranked, then should not appear in position or we see a small quotePositionNative\n    await group.reloadAll(client);\n    await mangoAccount.reload(client);\n    console.log(`${mangoAccount.toString(group)}`);\n  }\n\n  process.exit();\n}\n\nasync function logBidsAndAsks(client: MangoClient, group: Group) {\n  await group.reloadAll(client);\n  const perpMarket = group.getPerpMarketByName('BTC-PERP');\n  const res = [\n    (await perpMarket?.loadBids(client)).items(),\n    (await perpMarket?.loadAsks(client)!).items(),\n  ];\n  console.log(`bids ${JSON.stringify(Array.from(res[0]), null, 2)}`);\n  console.log(`asks ${JSON.stringify(Array.from(res[1]), null, 2)}`);\n  return res;\n}\n\nmain();\n"]}