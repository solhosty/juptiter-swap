"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _chunkHFEILVW4js = require('../chunk-HFEILVW4.js');
require('../chunk-A355EMTI.js');
require('../chunk-74ANAXXV.js');
require('../chunk-C3X3GVS5.js');
require('../chunk-UGHO4YHY.js');
require('../chunk-3ZYUOGD4.js');
require('../chunk-ZYSI4CYO.js');


var _chunkS6N5Y2X2js = require('../chunk-S6N5Y2X2.js');
require('../chunk-772SHZWX.js');
require('../chunk-S3PQ6OXS.js');
require('../chunk-WKB2GIFW.js');
require('../chunk-TBVE5N24.js');
require('../chunk-Y7A4QF6J.js');
require('../chunk-JC4IRQUL.js');

// ts/client/src/scripts/devnet-admin-close.ts
var _anchor = require('@project-serum/anchor');
var _web3js = require('@solana/web3.js');
var _fs = require('fs'); var _fs2 = _interopRequireDefault(_fs);
var GROUP_NUM = Number(process.env.GROUP_NUM || 0);
var DEVNET_MINTS = /* @__PURE__ */ new Map([
  ["USDC", "8FRFC6MoGGkMFQwngccyu69VnYbzykGeez7ignHVAFSN"]
  // use devnet usdc
]);
async function main() {
  const options = _anchor.AnchorProvider.defaultOptions();
  const connection = new (0, _web3js.Connection)(
    "https://mango.devnet.rpcpool.com",
    options
  );
  const admin = _web3js.Keypair.fromSecretKey(
    Buffer.from(
      JSON.parse(_fs2.default.readFileSync(process.env.ADMIN_KEYPAIR, "utf-8"))
    )
  );
  const adminWallet = new (0, _anchor.Wallet)(admin);
  console.log(`Admin ${adminWallet.publicKey.toBase58()}`);
  const adminProvider = new (0, _anchor.AnchorProvider)(connection, adminWallet, options);
  const client = await _chunkHFEILVW4js.MangoClient.connect(
    adminProvider,
    "devnet",
    _chunkS6N5Y2X2js.MANGO_V4_ID["devnet"],
    {
      idsSource: "get-program-accounts"
    }
  );
  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);
  console.log(`Group ${group.publicKey}`);
  let sig;
  const usdcDevnetMint = new (0, _web3js.PublicKey)(DEVNET_MINTS.get("USDC"));
  const usdcDevnetOracle = (await client.getStubOracle(group, usdcDevnetMint))[0];
  sig = await client.stubOracleClose(group, usdcDevnetOracle.publicKey);
  console.log(
    `Closed USDC stub oracle, sig https://explorer.solana.com/tx/${sig}?cluster=devnet`
  );
  group.consoleLogBanks();
  for (const market of group.serum3MarketsMapByExternal.values()) {
    sig = await client.serum3deregisterMarket(
      group,
      market.serumMarketExternal
    );
    console.log(
      `Deregistered serum market ${market.name}, sig https://explorer.solana.com/tx/${sig}?cluster=devnet`
    );
  }
  for (const market of group.perpMarketsMapByMarketIndex.values()) {
    sig = await client.perpCloseMarket(group, market.perpMarketIndex);
    console.log(
      `Closed perp market ${market.name}, sig https://explorer.solana.com/tx/${sig}?cluster=devnet`
    );
  }
  sig = await client.groupClose(group);
  console.log(
    `Closed group, sig https://explorer.solana.com/tx/${sig}?cluster=devnet`
  );
  process.exit();
}
main();


exports.DEVNET_MINTS = DEVNET_MINTS;
//# sourceMappingURL=devnet-admin-close.js.map