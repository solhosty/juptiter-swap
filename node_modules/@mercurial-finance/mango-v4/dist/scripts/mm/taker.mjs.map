{"version":3,"sources":["../../../ts/client/src/scripts/mm/taker.ts"],"sourcesContent":["import { AnchorProvider, Wallet } from '@project-serum/anchor';\nimport { Cluster, Connection, Keypair, PublicKey } from '@solana/web3.js';\nimport fs from 'fs';\nimport { Group } from '../../accounts/group';\nimport { MangoAccount } from '../../accounts/mangoAccount';\nimport { PerpMarket, PerpOrderSide, PerpOrderType } from '../../accounts/perp';\nimport { MangoClient } from '../../client';\nimport { MANGO_V4_ID } from '../../constants';\nimport { ZERO_I80F48 } from '../../numbers/I80F48';\nimport { toNativeI80F48, toUiDecimalsForQuote } from '../../utils';\n\n// For easy switching between mainnet and devnet, default is mainnet\nconst CLUSTER: Cluster =\n  (process.env.CLUSTER_OVERRIDE as Cluster) || 'mainnet-beta';\nconst CLUSTER_URL =\n  process.env.CLUSTER_URL_OVERRIDE || process.env.MB_CLUSTER_URL;\nconst USER_KEYPAIR =\n  process.env.USER_KEYPAIR_OVERRIDE || process.env.MB_PAYER_KEYPAIR;\nconst MANGO_ACCOUNT_PK = process.env.MANGO_ACCOUNT_PK || '';\n\nasync function settlePnl(\n  mangoAccount: MangoAccount,\n  perpMarket: PerpMarket,\n  client: MangoClient,\n  group: Group,\n) {\n  if (!mangoAccount.perpPositionExistsForMarket(perpMarket)) {\n    return;\n  }\n\n  const pp = mangoAccount\n    .perpActive()\n    .find((pp) => pp.marketIndex === perpMarket.perpMarketIndex)!;\n  const pnl = pp.getUnsettledPnl(perpMarket);\n\n  console.log(\n    `Avg entry price - ${pp.getAverageEntryPriceUi(\n      perpMarket,\n    )}, Breakeven price - ${pp.getBreakEvenPriceUi(perpMarket)}`,\n  );\n\n  let profitableAccount, unprofitableAccount;\n\n  if (pnl.abs().gt(toNativeI80F48(1, 6))) {\n    console.log(`- Settling pnl ${toUiDecimalsForQuote(pnl)} ...`);\n  } else {\n    console.log(\n      `- Skipping Settling pnl ${toUiDecimalsForQuote(pnl)}, too small`,\n    );\n    return;\n  }\n\n  if (pnl.gt(ZERO_I80F48())) {\n    console.log(`- Settling profit pnl...`);\n    profitableAccount = mangoAccount;\n    const candidates = await perpMarket.getSettlePnlCandidates(\n      client,\n      group,\n      'negative',\n    );\n    if (candidates.length === 0) {\n      return;\n    }\n    unprofitableAccount = candidates[0].account;\n    const sig = await client.perpSettlePnl(\n      group,\n      profitableAccount,\n      unprofitableAccount,\n      mangoAccount,\n      perpMarket.perpMarketIndex,\n    );\n    console.log(\n      `- Settled pnl, sig https://explorer.solana.com/tx/${sig}?cluster=${\n        CLUSTER == 'devnet' ? 'devnet' : ''\n      }`,\n    );\n  } else if (pnl.lt(ZERO_I80F48())) {\n    unprofitableAccount = mangoAccount;\n    const candidates = await perpMarket.getSettlePnlCandidates(\n      client,\n      group,\n      'positive',\n    );\n    if (candidates.length === 0) {\n      return;\n    }\n    profitableAccount = candidates[0].account;\n    console.log(`- Settling loss pnl...`);\n    let sig = await client.perpSettlePnl(\n      group,\n      profitableAccount,\n      unprofitableAccount,\n      mangoAccount,\n      perpMarket.perpMarketIndex,\n    );\n    console.log(\n      `- Settled pnl, sig https://explorer.solana.com/tx/${sig}?cluster=${\n        CLUSTER == 'devnet' ? 'devnet' : ''\n      }`,\n    );\n  }\n}\n\nasync function takeOrder(\n  client: MangoClient,\n  group: Group,\n  mangoAccount: MangoAccount,\n  perpMarket: PerpMarket,\n  side: PerpOrderSide,\n) {\n  await mangoAccount.reload(client);\n\n  const size = Math.random() * 0.001;\n  const price =\n    side === PerpOrderSide.bid\n      ? perpMarket.uiPrice * 1.01\n      : perpMarket.uiPrice * 0.99;\n  console.log(\n    `- ${perpMarket.name} taking with a ${\n      side === PerpOrderSide.bid ? 'bid' : 'ask'\n    } at  price ${price.toFixed(4)} and size ${size.toFixed(6)}`,\n  );\n\n  const oldPosition = mangoAccount.getPerpPosition(perpMarket.perpMarketIndex);\n  if (oldPosition) {\n    console.log(\n      `-- before base: ${perpMarket.baseLotsToUi(\n        oldPosition.basePositionLots,\n      )}, quote: ${toUiDecimalsForQuote(oldPosition.quotePositionNative)}`,\n    );\n  }\n\n  await client.perpPlaceOrder(\n    group,\n    mangoAccount,\n    perpMarket.perpMarketIndex,\n    side,\n    price,\n    size,\n    undefined,\n    Date.now(),\n    PerpOrderType.market,\n    false,\n    0,\n    10,\n  );\n\n  // Sleep to see change, alternatively we could reload account with processed commitmment\n  await new Promise((r) => setTimeout(r, 5000));\n  await mangoAccount.reload(client);\n  const newPosition = mangoAccount.getPerpPosition(perpMarket.perpMarketIndex);\n  if (newPosition) {\n    console.log(\n      `-- after base: ${perpMarket.baseLotsToUi(\n        newPosition.basePositionLots,\n      )}, quote: ${toUiDecimalsForQuote(newPosition.quotePositionNative)}`,\n    );\n  }\n}\n\nasync function main() {\n  const options = AnchorProvider.defaultOptions();\n  const connection = new Connection(CLUSTER_URL!, options);\n\n  const user = Keypair.fromSecretKey(\n    Buffer.from(JSON.parse(fs.readFileSync(USER_KEYPAIR!, 'utf-8'))),\n  );\n  const userWallet = new Wallet(user);\n  const userProvider = new AnchorProvider(connection, userWallet, options);\n  const client = await MangoClient.connect(\n    userProvider,\n    CLUSTER,\n    MANGO_V4_ID[CLUSTER],\n    {\n      idsSource: 'get-program-accounts',\n    },\n  );\n\n  // Load mango account\n  let mangoAccount = await client.getMangoAccount(\n    new PublicKey(MANGO_ACCOUNT_PK),\n  );\n  await mangoAccount.reload(client);\n\n  // Load group\n  const group = await client.getGroup(mangoAccount.group);\n  await group.reloadAll(client);\n\n  // Take on OB\n  const perpMarket = group.getPerpMarketByName('BTC-PERP');\n  while (true) {\n    await group.reloadAll(client);\n\n    // Settle pnl\n    await settlePnl(mangoAccount, perpMarket, client, group);\n\n    await takeOrder(client, group, mangoAccount, perpMarket, PerpOrderSide.bid);\n    await takeOrder(client, group, mangoAccount, perpMarket, PerpOrderSide.ask);\n  }\n}\n\nmain();\n"],"mappings":"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","names":["pp"]}