"use strict"; function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _chunkHFEILVW4js = require('../../chunk-HFEILVW4.js');
require('../../chunk-A355EMTI.js');
require('../../chunk-74ANAXXV.js');
require('../../chunk-C3X3GVS5.js');
require('../../chunk-UGHO4YHY.js');
require('../../chunk-3ZYUOGD4.js');



var _chunkZYSI4CYOjs = require('../../chunk-ZYSI4CYO.js');


var _chunkS6N5Y2X2js = require('../../chunk-S6N5Y2X2.js');



var _chunk772SHZWXjs = require('../../chunk-772SHZWX.js');


var _chunkS3PQ6OXSjs = require('../../chunk-S3PQ6OXS.js');
require('../../chunk-WKB2GIFW.js');
require('../../chunk-TBVE5N24.js');
require('../../chunk-Y7A4QF6J.js');
require('../../chunk-JC4IRQUL.js');

// ts/client/src/scripts/mm/taker.ts
var _anchor = require('@project-serum/anchor');
var _web3js = require('@solana/web3.js');
var _fs = require('fs'); var _fs2 = _interopRequireDefault(_fs);
var CLUSTER = process.env.CLUSTER_OVERRIDE || "mainnet-beta";
var CLUSTER_URL = process.env.CLUSTER_URL_OVERRIDE || process.env.MB_CLUSTER_URL;
var USER_KEYPAIR = process.env.USER_KEYPAIR_OVERRIDE || process.env.MB_PAYER_KEYPAIR;
var MANGO_ACCOUNT_PK = process.env.MANGO_ACCOUNT_PK || "";
async function settlePnl(mangoAccount, perpMarket, client, group) {
  if (!mangoAccount.perpPositionExistsForMarket(perpMarket)) {
    return;
  }
  const pp = mangoAccount.perpActive().find((pp2) => pp2.marketIndex === perpMarket.perpMarketIndex);
  const pnl = pp.getUnsettledPnl(perpMarket);
  console.log(
    `Avg entry price - ${pp.getAverageEntryPriceUi(
      perpMarket
    )}, Breakeven price - ${pp.getBreakEvenPriceUi(perpMarket)}`
  );
  let profitableAccount, unprofitableAccount;
  if (pnl.abs().gt(_chunk772SHZWXjs.toNativeI80F48.call(void 0, 1, 6))) {
    console.log(`- Settling pnl ${_chunk772SHZWXjs.toUiDecimalsForQuote.call(void 0, pnl)} ...`);
  } else {
    console.log(
      `- Skipping Settling pnl ${_chunk772SHZWXjs.toUiDecimalsForQuote.call(void 0, pnl)}, too small`
    );
    return;
  }
  if (pnl.gt(_chunkS3PQ6OXSjs.ZERO_I80F48.call(void 0, ))) {
    console.log(`- Settling profit pnl...`);
    profitableAccount = mangoAccount;
    const candidates = await perpMarket.getSettlePnlCandidates(
      client,
      group,
      "negative"
    );
    if (candidates.length === 0) {
      return;
    }
    unprofitableAccount = candidates[0].account;
    const sig = await client.perpSettlePnl(
      group,
      profitableAccount,
      unprofitableAccount,
      mangoAccount,
      perpMarket.perpMarketIndex
    );
    console.log(
      `- Settled pnl, sig https://explorer.solana.com/tx/${sig}?cluster=${CLUSTER == "devnet" ? "devnet" : ""}`
    );
  } else if (pnl.lt(_chunkS3PQ6OXSjs.ZERO_I80F48.call(void 0, ))) {
    unprofitableAccount = mangoAccount;
    const candidates = await perpMarket.getSettlePnlCandidates(
      client,
      group,
      "positive"
    );
    if (candidates.length === 0) {
      return;
    }
    profitableAccount = candidates[0].account;
    console.log(`- Settling loss pnl...`);
    let sig = await client.perpSettlePnl(
      group,
      profitableAccount,
      unprofitableAccount,
      mangoAccount,
      perpMarket.perpMarketIndex
    );
    console.log(
      `- Settled pnl, sig https://explorer.solana.com/tx/${sig}?cluster=${CLUSTER == "devnet" ? "devnet" : ""}`
    );
  }
}
async function takeOrder(client, group, mangoAccount, perpMarket, side) {
  await mangoAccount.reload(client);
  const size = Math.random() * 1e-3;
  const price = side === _chunkZYSI4CYOjs.PerpOrderSide.bid ? perpMarket.uiPrice * 1.01 : perpMarket.uiPrice * 0.99;
  console.log(
    `- ${perpMarket.name} taking with a ${side === _chunkZYSI4CYOjs.PerpOrderSide.bid ? "bid" : "ask"} at  price ${price.toFixed(4)} and size ${size.toFixed(6)}`
  );
  const oldPosition = mangoAccount.getPerpPosition(perpMarket.perpMarketIndex);
  if (oldPosition) {
    console.log(
      `-- before base: ${perpMarket.baseLotsToUi(
        oldPosition.basePositionLots
      )}, quote: ${_chunk772SHZWXjs.toUiDecimalsForQuote.call(void 0, oldPosition.quotePositionNative)}`
    );
  }
  await client.perpPlaceOrder(
    group,
    mangoAccount,
    perpMarket.perpMarketIndex,
    side,
    price,
    size,
    void 0,
    Date.now(),
    _chunkZYSI4CYOjs.PerpOrderType.market,
    false,
    0,
    10
  );
  await new Promise((r) => setTimeout(r, 5e3));
  await mangoAccount.reload(client);
  const newPosition = mangoAccount.getPerpPosition(perpMarket.perpMarketIndex);
  if (newPosition) {
    console.log(
      `-- after base: ${perpMarket.baseLotsToUi(
        newPosition.basePositionLots
      )}, quote: ${_chunk772SHZWXjs.toUiDecimalsForQuote.call(void 0, newPosition.quotePositionNative)}`
    );
  }
}
async function main() {
  const options = _anchor.AnchorProvider.defaultOptions();
  const connection = new (0, _web3js.Connection)(CLUSTER_URL, options);
  const user = _web3js.Keypair.fromSecretKey(
    Buffer.from(JSON.parse(_fs2.default.readFileSync(USER_KEYPAIR, "utf-8")))
  );
  const userWallet = new (0, _anchor.Wallet)(user);
  const userProvider = new (0, _anchor.AnchorProvider)(connection, userWallet, options);
  const client = await _chunkHFEILVW4js.MangoClient.connect(
    userProvider,
    CLUSTER,
    _chunkS6N5Y2X2js.MANGO_V4_ID[CLUSTER],
    {
      idsSource: "get-program-accounts"
    }
  );
  let mangoAccount = await client.getMangoAccount(
    new (0, _web3js.PublicKey)(MANGO_ACCOUNT_PK)
  );
  await mangoAccount.reload(client);
  const group = await client.getGroup(mangoAccount.group);
  await group.reloadAll(client);
  const perpMarket = group.getPerpMarketByName("BTC-PERP");
  while (true) {
    await group.reloadAll(client);
    await settlePnl(mangoAccount, perpMarket, client, group);
    await takeOrder(client, group, mangoAccount, perpMarket, _chunkZYSI4CYOjs.PerpOrderSide.bid);
    await takeOrder(client, group, mangoAccount, perpMarket, _chunkZYSI4CYOjs.PerpOrderSide.ask);
  }
}
main();
//# sourceMappingURL=taker.js.map