{"version":3,"sources":["../../../ts/client/src/scripts/mm/market-maker.ts"],"sourcesContent":["import { AnchorProvider, BN, Wallet } from '@project-serum/anchor';\nimport {\n  Cluster,\n  Connection,\n  Keypair,\n  PublicKey,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport Binance from 'binance-api-node';\nimport fs from 'fs';\nimport { Kraken } from 'node-kraken-api';\nimport path from 'path';\nimport { Group } from '../../accounts/group';\nimport { HealthType, MangoAccount } from '../../accounts/mangoAccount';\nimport {\n  BookSide,\n  PerpMarket,\n  PerpMarketIndex,\n  PerpOrderSide,\n  PerpOrderType,\n} from '../../accounts/perp';\nimport { MangoClient } from '../../client';\nimport { MANGO_V4_ID } from '../../constants';\nimport { toUiDecimalsForQuote } from '../../utils';\nimport { sendTransaction } from '../../utils/rpc';\nimport * as defaultParams from './params/default.json';\nimport {\n  makeCheckAndSetSequenceNumberIx,\n  makeInitSequenceEnforcerAccountIx,\n  seqEnforcerProgramIds,\n} from './sequence-enforcer-util';\n\nconsole.log(defaultParams);\n\n// Future\n// * use async nodejs logging\n// * merge gMa calls\n// * take out spammers\n// * batch ixs across various markets\n// * only refresh part of the group which market maker is interested in\n\n// Env vars\nconst CLUSTER: Cluster =\n  (process.env.CLUSTER_OVERRIDE as Cluster) || 'mainnet-beta';\nconst CLUSTER_URL =\n  process.env.CLUSTER_URL_OVERRIDE || process.env.MB_CLUSTER_URL;\nconst USER_KEYPAIR =\n  process.env.USER_KEYPAIR_OVERRIDE || process.env.MB_PAYER_KEYPAIR;\nconst MANGO_ACCOUNT_PK = process.env.MANGO_ACCOUNT_PK || '';\n\n// Load configuration\nconst paramsFileName = process.env.PARAMS || 'default.json';\nconst params = JSON.parse(\n  fs.readFileSync(\n    path.resolve(__dirname, `./params/${paramsFileName}`),\n    'utf-8',\n  ),\n);\n\nconst control = { isRunning: true, interval: params.interval };\n\n// State which is passed around\ntype State = {\n  mangoAccount: MangoAccount;\n  lastMangoAccountUpdate: number;\n  marketContexts: Map<PerpMarketIndex, MarketContext>;\n};\ntype MarketContext = {\n  params: any;\n  perpMarket: PerpMarket;\n  bids: BookSide;\n  asks: BookSide;\n  lastBookUpdate: number;\n\n  krakenBid: number | undefined;\n  krakenAsk: number | undefined;\n\n  // binanceBid: number | undefined;\n  // binanceAsk: number | undefined;\n\n  sequenceAccount: PublicKey;\n  sequenceAccountBump: number;\n\n  sentBidPrice: number;\n  sentAskPrice: number;\n  lastOrderUpdate: number;\n};\n\nconst binanceClient = Binance();\nconst krakenClient = new Kraken();\n\nfunction getPerpMarketAssetsToTradeOn(group: Group) {\n  const allMangoGroupPerpMarketAssets = Array.from(\n    group.perpMarketsMapByName.keys(),\n  ).map((marketName) => marketName.replace('-PERP', ''));\n  return Object.keys(params.assets).filter((asset) =>\n    allMangoGroupPerpMarketAssets.includes(asset),\n  );\n}\n\n// Refresh group, mango account and perp markets\nasync function refreshState(\n  client: MangoClient,\n  group: Group,\n  mangoAccount: MangoAccount,\n  marketContexts: Map<PerpMarketIndex, MarketContext>,\n): Promise<State> {\n  const ts = Date.now() / 1000;\n\n  const result = await Promise.all([\n    group.reloadAll(client),\n    mangoAccount.reload(client),\n    ...Array.from(marketContexts.values()).map(\n      (mc) =>\n        krakenClient.depth({\n          pair: mc.params.krakenCode,\n        }),\n      // binanceClient.book({\n      //   symbol: mc.perpMarket.name.replace('-PERP', 'USDT'),\n      // }),\n    ),\n  ]);\n\n  Array.from(marketContexts.values()).map(async (mc, i) => {\n    const perpMarket = mc.perpMarket;\n    mc.perpMarket = group.getPerpMarketByMarketIndex(\n      perpMarket.perpMarketIndex,\n    );\n    mc.bids = await perpMarket.loadBids(client, true);\n    mc.asks = await perpMarket.loadAsks(client, true);\n    mc.lastBookUpdate = ts;\n\n    mc.krakenAsk = parseFloat(\n      (result[i + 2] as any)[mc.params.krakenCode].asks[0][0],\n    );\n    mc.krakenBid = parseFloat(\n      (result[i + 2] as any)[mc.params.krakenCode].bids[0][0],\n    );\n  });\n\n  return {\n    mangoAccount,\n    lastMangoAccountUpdate: ts,\n    marketContexts,\n  };\n}\n\n// Initialiaze sequence enforcer accounts\nasync function initSequenceEnforcerAccounts(\n  client: MangoClient,\n  marketContexts: MarketContext[],\n) {\n  const seqAccIxs = marketContexts.map((mc) =>\n    makeInitSequenceEnforcerAccountIx(\n      mc.sequenceAccount,\n      (client.program.provider as AnchorProvider).wallet.publicKey,\n      mc.sequenceAccountBump,\n      mc.perpMarket.name,\n      CLUSTER,\n    ),\n  );\n  while (true) {\n    try {\n      const sig = await sendTransaction(\n        client.program.provider as AnchorProvider,\n        seqAccIxs,\n        [],\n      );\n      console.log(\n        `Sequence enforcer accounts created, sig https://explorer.solana.com/tx/${sig}?cluster=${\n          CLUSTER == 'devnet' ? 'devnet' : ''\n        }`,\n      );\n    } catch (e) {\n      console.log('Failed to initialize sequence enforcer accounts!');\n      console.log(e);\n      continue;\n    }\n    break;\n  }\n}\n\nasync function cancelAllOrdersForAMarket(\n  client: MangoClient,\n  group: Group,\n  mangoAccount: MangoAccount,\n  perpMarket: PerpMarket,\n) {\n  for (const i of Array(100).keys()) {\n    await sendTransaction(\n      client.program.provider as AnchorProvider,\n      [\n        await client.perpCancelAllOrdersIx(\n          group,\n          mangoAccount,\n          perpMarket.perpMarketIndex,\n          10,\n        ),\n      ],\n      [],\n    );\n    await mangoAccount.reload(client);\n    if (\n      (\n        await mangoAccount.loadPerpOpenOrdersForMarket(\n          client,\n          group,\n          perpMarket.perpMarketIndex,\n        )\n      ).length === 0\n    ) {\n      break;\n    }\n  }\n}\n\n// Cancel all orders on exit\nasync function onExit(\n  client: MangoClient,\n  group: Group,\n  mangoAccount: MangoAccount,\n  marketContexts: MarketContext[],\n) {\n  for (const mc of marketContexts) {\n    cancelAllOrdersForAMarket(client, group, mangoAccount, mc.perpMarket);\n  }\n}\n\n// Main driver for the market maker\nasync function fullMarketMaker() {\n  // Load client\n  const options = AnchorProvider.defaultOptions();\n  const connection = new Connection(CLUSTER_URL!, options);\n  const user = Keypair.fromSecretKey(\n    Buffer.from(\n      JSON.parse(\n        process.env.KEYPAIR || fs.readFileSync(USER_KEYPAIR!, 'utf-8'),\n      ),\n    ),\n  );\n  const userWallet = new Wallet(user);\n  const userProvider = new AnchorProvider(connection, userWallet, options);\n  const client = await MangoClient.connect(\n    userProvider,\n    CLUSTER,\n    MANGO_V4_ID[CLUSTER],\n    {\n      idsSource: 'get-program-accounts',\n    },\n  );\n\n  // Load mango account\n  let mangoAccount = await client.getMangoAccount(\n    new PublicKey(MANGO_ACCOUNT_PK),\n  );\n  console.log(\n    `MangoAccount ${mangoAccount.publicKey} for user ${user.publicKey} ${\n      mangoAccount.isDelegate(client) ? 'via delegate ' + user.publicKey : ''\n    }`,\n  );\n  await mangoAccount.reload(client);\n\n  // Load group\n  const group = await client.getGroup(mangoAccount.group);\n  await group.reloadAll(client);\n\n  // Cancel all existing orders\n  for (const perpMarket of Array.from(\n    group.perpMarketsMapByMarketIndex.values(),\n  )) {\n    await client.perpCancelAllOrders(\n      group,\n      mangoAccount,\n      perpMarket.perpMarketIndex,\n      10,\n    );\n  }\n\n  // Build and maintain an aggregate context object per market\n  const marketContexts: Map<PerpMarketIndex, MarketContext> = new Map();\n  for (const perpMarketAsset of getPerpMarketAssetsToTradeOn(group)) {\n    const perpMarket = group.getPerpMarketByName(perpMarketAsset + '-PERP');\n    const [sequenceAccount, sequenceAccountBump] =\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from(perpMarket.name, 'utf-8'),\n          (\n            client.program.provider as AnchorProvider\n          ).wallet.publicKey.toBytes(),\n        ],\n        seqEnforcerProgramIds[CLUSTER],\n      );\n    marketContexts.set(perpMarket.perpMarketIndex, {\n      params: params.assets[perpMarketAsset].perp,\n      perpMarket: perpMarket,\n      bids: await perpMarket.loadBids(client),\n      asks: await perpMarket.loadAsks(client),\n      lastBookUpdate: 0,\n\n      sequenceAccount,\n      sequenceAccountBump,\n\n      sentBidPrice: 0,\n      sentAskPrice: 0,\n      lastOrderUpdate: 0,\n\n      krakenBid: undefined,\n      krakenAsk: undefined,\n    });\n  }\n\n  // Init sequence enforcer accounts\n  await initSequenceEnforcerAccounts(\n    client,\n    Array.from(marketContexts.values()),\n  );\n\n  // Load state first time\n  console.log(`Loading state first time`);\n  let state = await refreshState(client, group, mangoAccount, marketContexts);\n\n  // Add handler for e.g. CTRL+C\n  process.on('SIGINT', function () {\n    console.log('Caught keyboard interrupt. Canceling orders');\n    control.isRunning = false;\n    onExit(client, group, mangoAccount, Array.from(marketContexts.values()));\n  });\n\n  // Loop indefinitely\n  while (control.isRunning) {\n    try {\n      console.log(`\\nRefreshing state`);\n      refreshState(client, group, mangoAccount, marketContexts).then(\n        (result) => (state = result),\n      );\n\n      mangoAccount = state.mangoAccount;\n\n      // Calculate pf level values\n      let pfQuoteValue: number | undefined = 0;\n      for (const mc of Array.from(marketContexts.values())) {\n        const pos = mangoAccount.perpPositionExistsForMarket(mc.perpMarket)\n          ? mangoAccount.getPerpPositionUi(group, mc.perpMarket.perpMarketIndex)\n          : 0;\n        const mid = (mc.krakenBid! + mc.krakenAsk!) / 2;\n        if (mid) {\n          pfQuoteValue += pos * mid;\n        } else {\n          pfQuoteValue = undefined;\n          console.log(\n            `Breaking pfQuoteValue computation, since mid is undefined for ${mc.perpMarket.name}!`,\n          );\n          break;\n        }\n      }\n\n      // Don't proceed if we don't have pfQuoteValue yet\n      if (pfQuoteValue === undefined) {\n        console.log(\n          `Continuing control loop, since pfQuoteValue is undefined!`,\n        );\n        continue;\n      }\n\n      // Update all orders on all markets\n      for (const mc of Array.from(marketContexts.values())) {\n        const ixs = await makeMarketUpdateInstructions(\n          client,\n          group,\n          mangoAccount,\n          mc,\n          pfQuoteValue,\n        );\n        if (ixs.length === 0) {\n          continue;\n        }\n\n        const sig = await sendTransaction(\n          client.program.provider as AnchorProvider,\n          ixs,\n          group.addressLookupTablesList,\n        );\n        console.log(\n          `Orders for market updated, sig https://explorer.solana.com/tx/${sig}?cluster=${\n            CLUSTER == 'devnet' ? 'devnet' : ''\n          }`,\n        );\n      }\n    } catch (e) {\n      console.log(e);\n    } finally {\n      console.log(\n        `${new Date().toUTCString()} sleeping for ${control.interval / 1000}s`,\n      );\n      await new Promise((r) => setTimeout(r, control.interval));\n    }\n  }\n}\n\nasync function makeMarketUpdateInstructions(\n  client: MangoClient,\n  group: Group,\n  mangoAccount: MangoAccount,\n  mc: MarketContext,\n  pfQuoteValue: number,\n): Promise<TransactionInstruction[]> {\n  const perpMarketIndex = mc.perpMarket.perpMarketIndex;\n  const perpMarket = mc.perpMarket;\n\n  const aggBid = mc.krakenBid;\n  const aggAsk = mc.krakenAsk;\n  if (aggBid === undefined || aggAsk === undefined) {\n    console.log(`No Aggregate Book for ${mc.perpMarket.name}!`);\n    return [];\n  }\n\n  const leanCoeff = mc.params.leanCoeff;\n\n  const fairValue = (aggBid + aggAsk) / 2;\n  const aggSpread = (aggAsk - aggBid) / fairValue;\n\n  const requoteThresh = mc.params.requoteThresh;\n  const equity = toUiDecimalsForQuote(mangoAccount.getEquity(group));\n  const sizePerc = mc.params.sizePerc;\n  const quoteSize = equity * sizePerc;\n  const size = quoteSize / fairValue;\n\n  // console.log(`equity ${equity}`);\n  // console.log(`sizePerc ${sizePerc}`);\n  // console.log(`fairValue ${fairValue}`);\n  // console.log(`size ${size}`);\n\n  const basePos = mangoAccount.perpPositionExistsForMarket(mc.perpMarket)\n    ? mangoAccount.getPerpPositionUi(group, perpMarketIndex, true)\n    : 0;\n  const unsettledPnl = mangoAccount.perpPositionExistsForMarket(mc.perpMarket)\n    ? mangoAccount\n        .getPerpPosition(perpMarketIndex)!\n        .getUnsettledPnlUi(perpMarket)\n    : 0;\n  const lean = (-leanCoeff * basePos) / size;\n  const pfQuoteLeanCoeff = params.pfQuoteLeanCoeff || 0.001; // How much to move if pf pos is equal to equity\n  const pfQuoteLean = (pfQuoteValue / equity) * -pfQuoteLeanCoeff;\n  const charge = (mc.params.charge || 0.0012) + aggSpread / 2;\n  const bias = mc.params.bias;\n\n  const fairValueInLots = perpMarket.uiPriceToLots(fairValue);\n\n  const nativeBidSize = perpMarket.uiBaseToLots(size);\n  const nativeAskSize = perpMarket.uiBaseToLots(size);\n\n  const bids = mc.bids;\n  const asks = mc.asks;\n  const bestBid = bids.best();\n  const bestAsk = asks.best();\n\n  let moveOrders = false;\n\n  // Start building the transaction\n  const instructions: TransactionInstruction[] = [\n    makeCheckAndSetSequenceNumberIx(\n      mc.sequenceAccount,\n      (client.program.provider as AnchorProvider).wallet.publicKey,\n      Date.now(),\n      CLUSTER,\n    ),\n  ];\n\n  instructions.push(\n    await client.healthRegionBeginIx(group, mangoAccount, [], [perpMarket]),\n  );\n\n  const expiryTimestamp =\n    params.tif !== undefined ? Date.now() / 1000 + params.tif : 0;\n\n  // TODO: oracle pegged runs out of free perp open order slots on mango account\n  if (params.oraclePegged) {\n    const uiOPegBidOffset = fairValue * (-charge + lean + bias + pfQuoteLean);\n    const uiOPegAskOffset = fairValue * (charge + lean + bias + pfQuoteLean);\n\n    const modelBidOPegOffset = perpMarket.uiPriceToLots(uiOPegBidOffset);\n    const modelAskOPegOffset = perpMarket.uiPriceToLots(uiOPegAskOffset);\n\n    const bookAdjBidOPegOffset = bestAsk?.priceLots\n      .sub(new BN(1))\n      .lt(fairValueInLots.add(modelBidOPegOffset))\n      ? fairValueInLots.sub(bestAsk.priceLots.sub(new BN(1)))\n      : modelBidOPegOffset;\n    const bookAdjAskOPegOffset = bestBid?.priceLots\n      .add(new BN(1))\n      .gt(fairValueInLots.add(modelAskOPegOffset))\n      ? bestBid.priceLots.sub(new BN(1)).sub(fairValueInLots)\n      : modelAskOPegOffset;\n\n    const openOrders = await mangoAccount.loadPerpOpenOrdersForMarket(\n      client,\n      group,\n      perpMarketIndex,\n    );\n\n    moveOrders = openOrders.length < 2;\n\n    const placeBidOPegIx = await client.perpPlaceOrderPeggedIx(\n      group,\n      mangoAccount,\n      perpMarketIndex,\n      PerpOrderSide.bid,\n      perpMarket.priceLotsToUi(bookAdjBidOPegOffset),\n      perpMarket.priceLotsToUi(\n        fairValueInLots.mul(new BN(101)).div(new BN(100)),\n      ),\n      perpMarket.baseLotsToUi(nativeBidSize),\n      undefined,\n      Date.now(),\n      PerpOrderType.limit,\n      false,\n      expiryTimestamp,\n      20,\n    );\n\n    const placeAskOPegIx = await client.perpPlaceOrderPeggedIx(\n      group,\n      mangoAccount,\n      perpMarketIndex,\n      PerpOrderSide.ask,\n      perpMarket.priceLotsToUi(bookAdjAskOPegOffset),\n      perpMarket.priceLotsToUi(\n        fairValueInLots.mul(new BN(98)).div(new BN(100)),\n      ),\n      perpMarket.baseLotsToUi(nativeAskSize),\n      undefined,\n      Date.now(),\n      PerpOrderType.limit,\n      false,\n      expiryTimestamp,\n      20,\n    );\n\n    const posAsTradeSizes = basePos / size;\n\n    // console.log(\n    //   `basePos ${basePos}, posAsTradeSizes ${posAsTradeSizes}, size ${size}`,\n    // );\n\n    if (posAsTradeSizes < 15) {\n      instructions.push(placeBidOPegIx);\n    }\n    if (posAsTradeSizes > -15) {\n      instructions.push(placeAskOPegIx);\n    }\n\n    const approxOPegBidPrice = perpMarket.priceLotsToUi(\n      fairValueInLots.add(bookAdjBidOPegOffset),\n    );\n    const approxOPegAskPrice = perpMarket.priceLotsToUi(\n      fairValueInLots.add(bookAdjAskOPegOffset),\n    );\n\n    if (posAsTradeSizes < 15 || posAsTradeSizes > -15) {\n      console.log(\n        `Requoting for market ${mc.perpMarket.name} sentBid: ${\n          mc.sentBidPrice\n        } newBid: ${approxOPegBidPrice} sentAsk: ${\n          mc.sentAskPrice\n        } newAsk: ${approxOPegAskPrice} pfLean: ${(pfQuoteLean * 10000).toFixed(\n          1,\n        )} aggBid: ${aggBid} addAsk: ${aggAsk}`,\n      );\n      mc.sentBidPrice = approxOPegAskPrice;\n      mc.sentAskPrice = approxOPegAskPrice;\n      mc.lastOrderUpdate = Date.now() / 1000;\n    }\n  } else {\n    const uiBidPrice = fairValue * (1 - charge + lean + bias + pfQuoteLean);\n    const uiAskPrice = fairValue * (1 + charge + lean + bias + pfQuoteLean);\n\n    const modelBidPrice = perpMarket.uiPriceToLots(uiBidPrice);\n    const modelAskPrice = perpMarket.uiPriceToLots(uiAskPrice);\n\n    const bookAdjBid =\n      bestAsk !== undefined\n        ? BN.min(bestAsk.priceLots.sub(new BN(1)), modelBidPrice)\n        : modelBidPrice;\n    const bookAdjAsk =\n      bestBid !== undefined\n        ? BN.max(bestBid.priceLots.add(new BN(1)), modelAskPrice)\n        : modelAskPrice;\n\n    if (mc.lastBookUpdate >= mc.lastOrderUpdate + 2) {\n      // If mango book was updated recently, then MangoAccount was also updated\n      const openOrders = await mangoAccount.loadPerpOpenOrdersForMarket(\n        client,\n        group,\n        perpMarketIndex,\n      );\n      moveOrders = openOrders.length < 2 || openOrders.length > 2;\n      for (const o of openOrders) {\n        const refPrice = o.side === 'buy' ? bookAdjBid : bookAdjAsk;\n        moveOrders =\n          moveOrders ||\n          Math.abs(o.priceLots.toNumber() / refPrice.toNumber() - 1) >\n            requoteThresh;\n      }\n    } else {\n      // If order was updated before MangoAccount, then assume that sent order already executed\n      moveOrders =\n        moveOrders ||\n        Math.abs(mc.sentBidPrice / bookAdjBid.toNumber() - 1) > requoteThresh ||\n        Math.abs(mc.sentAskPrice / bookAdjAsk.toNumber() - 1) > requoteThresh;\n    }\n\n    if (moveOrders) {\n      // Cancel all, requote\n      const cancelAllIx = await client.perpCancelAllOrdersIx(\n        group,\n        mangoAccount,\n        perpMarketIndex,\n        10,\n      );\n\n      const placeBidIx = await client.perpPlaceOrderIx(\n        group,\n        mangoAccount,\n        perpMarketIndex,\n        PerpOrderSide.bid,\n        perpMarket.priceLotsToUi(bookAdjBid),\n        perpMarket.baseLotsToUi(nativeBidSize),\n        undefined,\n        Date.now(),\n        PerpOrderType.postOnlySlide,\n        false,\n        expiryTimestamp,\n        20,\n      );\n\n      const placeAskIx = await client.perpPlaceOrderIx(\n        group,\n        mangoAccount,\n        perpMarketIndex,\n        PerpOrderSide.ask,\n        perpMarket.priceLotsToUi(bookAdjAsk),\n        perpMarket.baseLotsToUi(nativeAskSize),\n        undefined,\n        Date.now(),\n        PerpOrderType.postOnlySlide,\n        false,\n        expiryTimestamp,\n        20,\n      );\n\n      // console.log(\n      //   `basePos ${basePos}, posAsTradeSizes ${posAsTradeSizes}, size ${size}`,\n      // );\n\n      const posAsTradeSizes = basePos / size;\n\n      instructions.push(cancelAllIx);\n      if (posAsTradeSizes < 15) {\n        instructions.push(placeBidIx);\n      }\n      if (posAsTradeSizes > -15) {\n        instructions.push(placeAskIx);\n      }\n\n      console.log(\n        `\\nRequoting for market ${mc.perpMarket.name} sentBid: ${\n          mc.sentBidPrice\n        } newBid: ${bookAdjBid} sentAsk: ${\n          mc.sentAskPrice\n        } newAsk: ${bookAdjAsk} pfLean: ${(pfQuoteLean * 10000).toFixed(\n          1,\n        )} aggBid: ${aggBid} addAsk: ${aggAsk}`,\n      );\n\n      console.log(\n        `Health ratio ${mangoAccount\n          .getHealthRatio(group, HealthType.maint)\n          .toFixed(3)}, maint health ${toUiDecimalsForQuote(\n          mangoAccount.getHealth(group, HealthType.maint),\n        ).toFixed(3)}, account equity ${equity.toFixed(\n          3,\n        )}, base position ${Math.abs(basePos).toFixed(3)} ${\n          basePos >= 0 ? 'LONG' : 'SHORT'\n        }, notional ${Math.abs(basePos * perpMarket.uiPrice).toFixed(\n          3,\n        )}, unsettled Pnl ${unsettledPnl.toFixed(3)}`,\n      );\n\n      mc.sentBidPrice = bookAdjBid.toNumber();\n      mc.sentAskPrice = bookAdjAsk.toNumber();\n      mc.lastOrderUpdate = Date.now() / 1000;\n    } else {\n      console.log(\n        `Not requoting for market ${mc.perpMarket.name}. No need to move orders`,\n      );\n    }\n  }\n\n  instructions.push(\n    await client.healthRegionEndIx(group, mangoAccount, [], [perpMarket]),\n  );\n\n  // If instruction is only the sequence enforcement and health region ixs, then just send empty\n  if (instructions.length === 3) {\n    return [];\n  } else {\n    return instructions;\n  }\n}\n\nfunction startMarketMaker() {\n  try {\n    if (control.isRunning) {\n      fullMarketMaker()\n        .catch((error) => console.log(error))\n        .finally(startMarketMaker);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nstartMarketMaker();\n"],"mappings":"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","names":[]}