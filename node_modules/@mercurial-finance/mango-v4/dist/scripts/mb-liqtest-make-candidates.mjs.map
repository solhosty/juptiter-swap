{"version":3,"sources":["../../ts/client/src/scripts/mb-liqtest-make-candidates.ts"],"sourcesContent":["import { AnchorProvider, BN, Wallet } from '@project-serum/anchor';\nimport { Connection, Keypair, PublicKey } from '@solana/web3.js';\nimport fs from 'fs';\nimport { Bank } from '../accounts/bank';\nimport { MangoAccount } from '../accounts/mangoAccount';\nimport { PerpMarket, PerpOrderSide, PerpOrderType } from '../accounts/perp';\nimport {\n  Serum3OrderType,\n  Serum3SelfTradeBehavior,\n  Serum3Side,\n} from '../accounts/serum3';\nimport { Builder } from '../builder';\nimport { MangoClient } from '../client';\nimport {\n  NullPerpEditParams,\n  NullTokenEditParams,\n} from '../clientIxParamBuilder';\nimport { MANGO_V4_ID } from '../constants';\n\n//\n// This script creates liquidation candidates\n//\n\nconst GROUP_NUM = Number(process.env.GROUP_NUM || 200);\n\n// native prices\nconst PRICES = {\n  ETH: 1200.0,\n  SOL: 0.015,\n  USDC: 1,\n  MNGO: 0.02,\n};\n\nconst TOKEN_SCENARIOS: [string, [string, number][], [string, number][]][] = [\n  [\n    'LIQTEST, FUNDING',\n    [\n      ['USDC', 5000000],\n      ['ETH', 100000],\n      ['SOL', 150000000],\n    ],\n    [],\n  ],\n  ['LIQTEST, LIQOR', [['USDC', 1000000]], []],\n  ['LIQTEST, A: USDC, L: SOL', [['USDC', 1000 * PRICES.SOL]], [['SOL', 920]]],\n  ['LIQTEST, A: SOL, L: USDC', [['SOL', 1000]], [['USDC', 990 * PRICES.SOL]]],\n  [\n    'LIQTEST, A: ETH, L: SOL',\n    [['ETH', 20]],\n    [['SOL', (18 * PRICES.ETH) / PRICES.SOL]],\n  ],\n];\n\nasync function main() {\n  const options = AnchorProvider.defaultOptions();\n  options.commitment = 'processed';\n  options.preflightCommitment = 'finalized';\n  const connection = new Connection(process.env.CLUSTER_URL!, options);\n\n  const admin = Keypair.fromSecretKey(\n    Buffer.from(\n      JSON.parse(\n        fs.readFileSync(process.env.MANGO_MAINNET_PAYER_KEYPAIR!, 'utf-8'),\n      ),\n    ),\n  );\n  const userWallet = new Wallet(admin);\n  const userProvider = new AnchorProvider(connection, userWallet, options);\n  const client = await MangoClient.connect(\n    userProvider,\n    'mainnet-beta',\n    MANGO_V4_ID['mainnet-beta'],\n    {\n      idsSource: 'get-program-accounts',\n      prioritizationFee: 100,\n      txConfirmationCommitment: 'confirmed',\n    },\n  );\n  console.log(`User ${userWallet.publicKey.toBase58()}`);\n\n  // fetch group\n  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);\n  console.log(group.toString());\n\n  const MAINNET_MINTS = new Map([\n    ['USDC', group.banksMapByName.get('USDC')![0].mint],\n    ['ETH', group.banksMapByName.get('ETH')![0].mint],\n    ['SOL', group.banksMapByName.get('SOL')![0].mint],\n  ]);\n\n  const accounts = await client.getMangoAccountsForOwner(\n    group,\n    admin.publicKey,\n  );\n  let maxAccountNum = Math.max(0, ...accounts.map((a) => a.accountNum));\n\n  async function createMangoAccount(name: string): Promise<MangoAccount> {\n    const accountNum = maxAccountNum + 1;\n    maxAccountNum = maxAccountNum + 1;\n    await client.createMangoAccount(group, accountNum, name, 4, 4, 4, 4);\n    return (await client.getMangoAccountForOwner(\n      group,\n      admin.publicKey,\n      accountNum,\n    ))!;\n  }\n\n  async function setBankPrice(bank: Bank, price: number): Promise<void> {\n    await client.stubOracleSet(group, bank.oracle, price);\n    // reset stable price\n    await client.tokenEdit(\n      group,\n      bank.mint,\n      Builder(NullTokenEditParams).resetStablePrice(true).build(),\n    );\n  }\n  async function setPerpPrice(\n    perpMarket: PerpMarket,\n    price: number,\n  ): Promise<void> {\n    await client.stubOracleSet(group, perpMarket.oracle, price);\n    // reset stable price\n    await client.perpEditMarket(\n      group,\n      perpMarket.perpMarketIndex,\n      Builder(NullPerpEditParams).resetStablePrice(true).build(),\n    );\n  }\n\n  for (const scenario of TOKEN_SCENARIOS) {\n    const [name, assets, liabs] = scenario;\n\n    // create account\n    console.log(`Creating mangoaccount...`);\n    let mangoAccount = await createMangoAccount(name);\n    console.log(\n      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`,\n    );\n\n    for (let [assetName, assetAmount] of assets) {\n      const assetMint = new PublicKey(MAINNET_MINTS.get(assetName)!);\n      await client.tokenDepositNative(\n        group,\n        mangoAccount,\n        assetMint,\n        new BN(assetAmount),\n      );\n      await mangoAccount.reload(client);\n    }\n\n    for (let [liabName, liabAmount] of liabs) {\n      const liabMint = new PublicKey(MAINNET_MINTS.get(liabName)!);\n\n      // temporarily drop the borrowed token value, so the borrow goes through\n      const bank = group.banksMapByName.get(liabName)![0];\n      try {\n        await setBankPrice(bank, PRICES[liabName] / 2);\n\n        await client.tokenWithdrawNative(\n          group,\n          mangoAccount,\n          liabMint,\n          new BN(liabAmount),\n          true,\n        );\n      } finally {\n        // restore the oracle\n        await setBankPrice(bank, PRICES[liabName]);\n      }\n    }\n  }\n\n  const accounts2 = await client.getMangoAccountsForOwner(\n    group,\n    admin.publicKey,\n  );\n  const fundingAccount = accounts2.find(\n    (account) => account.name == 'LIQTEST, FUNDING',\n  );\n  if (!fundingAccount) {\n    throw new Error('could not find funding account');\n  }\n\n  // Serum order scenario\n  {\n    const name = 'LIQTEST, serum orders';\n\n    console.log(`Creating mangoaccount...`);\n    let mangoAccount = await createMangoAccount(name);\n    console.log(\n      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`,\n    );\n\n    const market = group.getSerum3MarketByName('SOL/USDC')!;\n    const sellMint = new PublicKey(MAINNET_MINTS.get('USDC')!);\n    const buyMint = new PublicKey(MAINNET_MINTS.get('SOL')!);\n\n    await client.tokenDepositNative(\n      group,\n      mangoAccount,\n      sellMint,\n      new BN(100000),\n    );\n    await mangoAccount.reload(client);\n\n    // temporarily up the init asset weight of the bought token\n    await client.tokenEdit(\n      group,\n      buyMint,\n      Builder(NullTokenEditParams)\n        .oracle(group.getFirstBankByMint(buyMint).oracle)\n        .maintAssetWeight(1.0)\n        .initAssetWeight(1.0)\n        .build(),\n    );\n    try {\n      // At a price of $1/ui-SOL we can buy 0.1 ui-SOL for the 100k native-USDC we have.\n      // With maint weight of 0.9 we have 10x main-leverage. Buying 12x as much causes liquidation.\n      await client.serum3PlaceOrder(\n        group,\n        mangoAccount,\n        market.serumMarketExternal,\n        Serum3Side.bid,\n        1,\n        12 * 0.1,\n        Serum3SelfTradeBehavior.abortTransaction,\n        Serum3OrderType.limit,\n        0,\n        5,\n      );\n    } finally {\n      // restore the weights\n      await client.tokenEdit(\n        group,\n        buyMint,\n        Builder(NullTokenEditParams)\n          .oracle(group.getFirstBankByMint(buyMint).oracle)\n          .maintAssetWeight(0.9)\n          .initAssetWeight(0.8)\n          .build(),\n      );\n    }\n  }\n\n  // Perp orders bring health <0, liquidator force closes\n  {\n    const name = 'LIQTEST, perp orders';\n\n    console.log(`Creating mangoaccount...`);\n    let mangoAccount = await createMangoAccount(name);\n    console.log(\n      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`,\n    );\n\n    const collateralMint = new PublicKey(MAINNET_MINTS.get('SOL')!);\n    const collateralBank = group.banksMapByName.get('SOL')![0];\n\n    await client.tokenDepositNative(\n      group,\n      mangoAccount,\n      collateralMint,\n      new BN(300000),\n    ); // valued as 0.0003 SOL, $0.0045 maint collateral\n    await mangoAccount.reload(client);\n\n    await setBankPrice(collateralBank, PRICES['SOL'] * 4);\n\n    try {\n      // placing this order decreases maint health by (0.9 - 1)*$0.06 = $-0.006\n      await client.perpPlaceOrder(\n        group,\n        mangoAccount,\n        group.perpMarketsMapByName.get('MNGO-PERP')?.perpMarketIndex!,\n        PerpOrderSide.bid,\n        0.001, // ui price that won't get hit\n        3.0, // ui base quantity, 30 base lots, 3.0 MNGO, $0.06\n        0.06, // ui quote quantity\n        4200,\n        PerpOrderType.limit,\n        false,\n        0,\n        5,\n      );\n    } finally {\n      await setBankPrice(collateralBank, PRICES['SOL']);\n    }\n  }\n\n  // Perp base pos brings health<0, liquidator takes most of it\n  {\n    const name = 'LIQTEST, perp base pos';\n\n    console.log(`Creating mangoaccount...`);\n    let mangoAccount = await createMangoAccount(name);\n    console.log(\n      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`,\n    );\n\n    const collateralMint = new PublicKey(MAINNET_MINTS.get('SOL')!);\n    const collateralBank = group.banksMapByName.get('SOL')![0];\n\n    await client.tokenDepositNative(\n      group,\n      mangoAccount,\n      collateralMint,\n      new BN(300000),\n    ); // valued as 0.0003 SOL, $0.0045 maint collateral\n    await mangoAccount.reload(client);\n\n    await setBankPrice(collateralBank, PRICES['SOL'] * 10);\n\n    try {\n      await client.perpPlaceOrder(\n        group,\n        fundingAccount,\n        group.perpMarketsMapByName.get('MNGO-PERP')?.perpMarketIndex!,\n        PerpOrderSide.ask,\n        0.03,\n        1.1, // ui base quantity, 11 base lots, $0.022 value, gain $0.033\n        0.033, // ui quote quantity\n        4200,\n        PerpOrderType.limit,\n        false,\n        0,\n        5,\n      );\n\n      await client.perpPlaceOrder(\n        group,\n        mangoAccount,\n        group.perpMarketsMapByName.get('MNGO-PERP')?.perpMarketIndex!,\n        PerpOrderSide.bid,\n        0.03,\n        1.1, // ui base quantity, 11 base lots, $0.022 value, cost $0.033\n        0.033, // ui quote quantity\n        4200,\n        PerpOrderType.market,\n        false,\n        0,\n        5,\n      );\n\n      await client.perpConsumeAllEvents(\n        group,\n        group.perpMarketsMapByName.get('MNGO-PERP')?.perpMarketIndex!,\n      );\n    } finally {\n      await setBankPrice(collateralBank, PRICES['SOL']);\n    }\n  }\n\n  // borrows and positive perp pnl (but no position)\n  {\n    const name = 'LIQTEST, perp positive pnl';\n\n    console.log(`Creating mangoaccount...`);\n    let mangoAccount = await createMangoAccount(name);\n    console.log(\n      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`,\n    );\n\n    const perpMarket = group.perpMarketsMapByName.get('MNGO-PERP')!;\n    const perpIndex = perpMarket.perpMarketIndex;\n    const liabMint = new PublicKey(MAINNET_MINTS.get('USDC')!);\n    const collateralMint = new PublicKey(MAINNET_MINTS.get('SOL')!);\n    const collateralBank = group.banksMapByName.get('SOL')![0];\n\n    await client.tokenDepositNative(\n      group,\n      mangoAccount,\n      collateralMint,\n      new BN(300000),\n    ); // valued as $0.0045 maint collateral\n    await mangoAccount.reload(client);\n\n    try {\n      await setBankPrice(collateralBank, PRICES['SOL'] * 10);\n\n      // Spot-borrow more than the collateral is worth\n      await client.tokenWithdrawNative(\n        group,\n        mangoAccount,\n        liabMint,\n        new BN(-5000),\n        true,\n      );\n      await mangoAccount.reload(client);\n\n      // Execute two trades that leave the account with +$0.011 positive pnl\n      await setPerpPrice(perpMarket, PRICES['MNGO'] / 2);\n      await client.perpPlaceOrder(\n        group,\n        fundingAccount,\n        perpIndex,\n        PerpOrderSide.ask,\n        0.01,\n        1.1, // ui base quantity, 11 base lots, $0.011\n        0.011, // ui quote quantity\n        4200,\n        PerpOrderType.limit,\n        false,\n        0,\n        5,\n      );\n      await client.perpPlaceOrder(\n        group,\n        mangoAccount,\n        perpIndex,\n        PerpOrderSide.bid,\n        0.01,\n        1.1, // ui base quantity, 11 base lots, $0.011\n        0.011, // ui quote quantity\n        4200,\n        PerpOrderType.market,\n        false,\n        0,\n        5,\n      );\n      await client.perpConsumeAllEvents(group, perpIndex);\n\n      await setPerpPrice(perpMarket, PRICES['MNGO']);\n\n      await client.perpPlaceOrder(\n        group,\n        fundingAccount,\n        perpIndex,\n        PerpOrderSide.bid,\n        0.02,\n        1.1, // ui base quantity, 11 base lots, $0.022\n        0.022, // ui quote quantity\n        4201,\n        PerpOrderType.limit,\n        false,\n        0,\n        5,\n      );\n      await client.perpPlaceOrder(\n        group,\n        mangoAccount,\n        perpIndex,\n        PerpOrderSide.ask,\n        0.02,\n        1.1, // ui base quantity, 11 base lots, $0.022\n        0.022, // ui quote quantity\n        4201,\n        PerpOrderType.market,\n        false,\n        0,\n        5,\n      );\n      await client.perpConsumeAllEvents(group, perpIndex);\n    } finally {\n      await setPerpPrice(perpMarket, PRICES['MNGO']);\n      await setBankPrice(collateralBank, PRICES['SOL']);\n    }\n  }\n\n  // assets and negative perp pnl (but no position)\n  {\n    const name = 'LIQTEST, perp negative pnl';\n\n    console.log(`Creating mangoaccount...`);\n    let mangoAccount = await createMangoAccount(name);\n    console.log(\n      `...created mangoAccount ${mangoAccount.publicKey} for ${name}`,\n    );\n\n    const perpMarket = group.perpMarketsMapByName.get('MNGO-PERP')!;\n    const perpIndex = perpMarket.perpMarketIndex;\n    const liabMint = new PublicKey(MAINNET_MINTS.get('USDC')!);\n    const collateralMint = new PublicKey(MAINNET_MINTS.get('SOL')!);\n    const collateralBank = group.banksMapByName.get('SOL')![0];\n\n    await client.tokenDepositNative(\n      group,\n      mangoAccount,\n      collateralMint,\n      new BN(300000),\n    ); // valued as $0.0045 maint collateral\n    await mangoAccount.reload(client);\n\n    try {\n      await setBankPrice(collateralBank, PRICES['SOL'] * 10);\n\n      // Execute two trades that leave the account with -$0.011 negative pnl\n      await setPerpPrice(perpMarket, PRICES['MNGO'] / 2);\n      await client.perpPlaceOrder(\n        group,\n        fundingAccount,\n        perpIndex,\n        PerpOrderSide.bid,\n        0.01,\n        1.1, // ui base quantity, 11 base lots, $0.011\n        0.011, // ui quote quantity\n        4200,\n        PerpOrderType.limit,\n        false,\n        0,\n        5,\n      );\n      await client.perpPlaceOrder(\n        group,\n        mangoAccount,\n        perpIndex,\n        PerpOrderSide.ask,\n        0.01,\n        1.1, // ui base quantity, 11 base lots, $0.011\n        0.011, // ui quote quantity\n        4200,\n        PerpOrderType.market,\n        false,\n        0,\n        5,\n      );\n      await client.perpConsumeAllEvents(group, perpIndex);\n\n      await setPerpPrice(perpMarket, PRICES['MNGO']);\n\n      await client.perpPlaceOrder(\n        group,\n        fundingAccount,\n        perpIndex,\n        PerpOrderSide.ask,\n        0.02,\n        1.1, // ui base quantity, 11 base lots, $0.022\n        0.022, // ui quote quantity\n        4201,\n        PerpOrderType.limit,\n        false,\n        0,\n        5,\n      );\n      await client.perpPlaceOrder(\n        group,\n        mangoAccount,\n        perpIndex,\n        PerpOrderSide.bid,\n        0.02,\n        1.1, // ui base quantity, 11 base lots, $0.022\n        0.022, // ui quote quantity\n        4201,\n        PerpOrderType.market,\n        false,\n        0,\n        5,\n      );\n      await client.perpConsumeAllEvents(group, perpIndex);\n    } finally {\n      await setPerpPrice(perpMarket, PRICES['MNGO']);\n      await setBankPrice(collateralBank, PRICES['SOL']);\n    }\n  }\n\n  process.exit();\n}\n\nmain();\n"],"mappings":"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","names":[]}