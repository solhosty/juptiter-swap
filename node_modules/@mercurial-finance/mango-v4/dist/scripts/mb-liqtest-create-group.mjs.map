{"version":3,"sources":["../../ts/client/src/scripts/mb-liqtest-create-group.ts"],"sourcesContent":["import { AnchorProvider, Wallet } from '@project-serum/anchor';\nimport {\n  AddressLookupTableProgram,\n  Connection,\n  Keypair,\n  PublicKey,\n} from '@solana/web3.js';\nimport fs from 'fs';\nimport { MangoClient } from '../client';\nimport { MANGO_V4_ID } from '../constants';\nimport { sendTransaction } from '../utils/rpc';\n\n//\n// Script which depoys a new mango group, and registers 3 tokens\n// with stub oracles\n//\n\n// default to group 1, to not conflict with the normal group\nconst GROUP_NUM = Number(process.env.GROUP_NUM || 200);\n\nconst MAINNET_MINTS = new Map([\n  ['USDC', 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'],\n  ['ETH', '7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs'],\n  ['SOL', 'So11111111111111111111111111111111111111112'],\n  ['MNGO', 'MangoCzJ36AjZyKwVj3VnYU4GTonjfVEnJmvvWaxLac'],\n]);\n\nconst STUB_PRICES = new Map([\n  ['USDC', 1.0],\n  ['ETH', 1200.0], // eth and usdc both have 6 decimals\n  ['SOL', 0.015], // sol has 9 decimals, equivalent to $15 per SOL\n  ['MNGO', 0.02], // same price/decimals as SOL for convenience\n]);\n\n// External markets are matched with those in https://github.com/blockworks-foundation/mango-client-v3/blob/main/src/ids.json\n// and verified to have best liquidity for pair on https://openserum.io/\nconst MAINNET_SERUM3_MARKETS = new Map([\n  ['ETH/USDC', 'FZxi3yWkE5mMjyaZj6utmYL54QQYfMCKMcLaQZq4UwnA'],\n  ['SOL/USDC', '8BnEgHoWFysVcuFFX7QztDmzuH8r5ZFvyP3sYwn1XTh6'],\n]);\n\nconst MIN_VAULT_TO_DEPOSITS_RATIO = 0.2;\nconst NET_BORROWS_WINDOW_SIZE_TS = 24 * 60 * 60;\nconst NET_BORROWS_LIMIT_NATIVE = 1 * Math.pow(10, 7) * Math.pow(10, 6);\n\nasync function main() {\n  const options = AnchorProvider.defaultOptions();\n  options.commitment = 'processed';\n  options.preflightCommitment = 'finalized';\n  const connection = new Connection(process.env.CLUSTER_URL!, options);\n\n  const admin = Keypair.fromSecretKey(\n    Buffer.from(\n      JSON.parse(\n        fs.readFileSync(process.env.MANGO_MAINNET_PAYER_KEYPAIR!, 'utf-8'),\n      ),\n    ),\n  );\n  const adminWallet = new Wallet(admin);\n  console.log(`Admin ${adminWallet.publicKey.toBase58()}`);\n  const adminProvider = new AnchorProvider(connection, adminWallet, options);\n  const client = await MangoClient.connect(\n    adminProvider,\n    'mainnet-beta',\n    MANGO_V4_ID['mainnet-beta'],\n    {\n      idsSource: 'get-program-accounts',\n      prioritizationFee: 100,\n      txConfirmationCommitment: 'confirmed',\n    },\n  );\n\n  // group\n  console.log(`Creating Group...`);\n  try {\n    const insuranceMint = new PublicKey(MAINNET_MINTS.get('USDC')!);\n    await client.groupCreate(GROUP_NUM, true, 0, insuranceMint);\n  } catch (error) {\n    console.log(error);\n  }\n  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);\n  console.log(`...registered group ${group.publicKey}`);\n\n  // stub oracles\n  let oracles = new Map();\n  for (let [name, mint] of MAINNET_MINTS) {\n    console.log(`Creating stub oracle for ${name}...`);\n    const mintPk = new PublicKey(mint);\n    try {\n      const price = STUB_PRICES.get(name)!;\n      await client.stubOracleCreate(group, mintPk, price);\n    } catch (error) {\n      console.log(error);\n    }\n    const oracle = (await client.getStubOracle(group, mintPk))[0];\n    console.log(`...created stub oracle ${oracle.publicKey}`);\n    oracles.set(name, oracle.publicKey);\n  }\n\n  const defaultOracleConfig = {\n    confFilter: 0.1,\n    maxStalenessSlots: null,\n  };\n  const defaultInterestRate = {\n    adjustmentFactor: 0.01,\n    util0: 0.4,\n    rate0: 0.07,\n    util1: 0.8,\n    rate1: 0.9,\n    maxRate: 1.5,\n  };\n\n  // register token 0\n  console.log(`Registering USDC...`);\n  const usdcMainnetMint = new PublicKey(MAINNET_MINTS.get('USDC')!);\n  const usdcMainnetOracle = oracles.get('USDC');\n  try {\n    await client.tokenRegister(\n      group,\n      usdcMainnetMint,\n      usdcMainnetOracle,\n      defaultOracleConfig,\n      0,\n      'USDC',\n      defaultInterestRate,\n      0.0,\n      0.0001,\n      1,\n      1,\n      1,\n      1,\n      0,\n      MIN_VAULT_TO_DEPOSITS_RATIO,\n      NET_BORROWS_WINDOW_SIZE_TS,\n      NET_BORROWS_LIMIT_NATIVE,\n    );\n    await group.reloadAll(client);\n  } catch (error) {\n    console.log(error);\n  }\n\n  // register token 1\n  console.log(`Registering ETH...`);\n  const ethMainnetMint = new PublicKey(MAINNET_MINTS.get('ETH')!);\n  const ethMainnetOracle = oracles.get('ETH');\n  try {\n    await client.tokenRegister(\n      group,\n      ethMainnetMint,\n      ethMainnetOracle,\n      defaultOracleConfig,\n      1,\n      'ETH',\n      defaultInterestRate,\n      0.0,\n      0.0001,\n      0.9,\n      0.8,\n      1.1,\n      1.2,\n      0.05,\n      MIN_VAULT_TO_DEPOSITS_RATIO,\n      NET_BORROWS_WINDOW_SIZE_TS,\n      NET_BORROWS_LIMIT_NATIVE,\n    );\n    await group.reloadAll(client);\n  } catch (error) {\n    console.log(error);\n  }\n\n  // register token 2\n  console.log(`Registering SOL...`);\n  const solMainnetMint = new PublicKey(MAINNET_MINTS.get('SOL')!);\n  const solMainnetOracle = oracles.get('SOL');\n  try {\n    await client.tokenRegister(\n      group,\n      solMainnetMint,\n      solMainnetOracle,\n      defaultOracleConfig,\n      2, // tokenIndex\n      'SOL',\n      defaultInterestRate,\n      0.0,\n      0.0001,\n      0.9,\n      0.8,\n      1.1,\n      1.2,\n      0.05,\n      MIN_VAULT_TO_DEPOSITS_RATIO,\n      NET_BORROWS_WINDOW_SIZE_TS,\n      NET_BORROWS_LIMIT_NATIVE,\n    );\n    await group.reloadAll(client);\n  } catch (error) {\n    console.log(error);\n  }\n\n  // log tokens/banks\n  for (const bank of await group.banksMapByMint.values()) {\n    console.log(`${bank.toString()}`);\n  }\n\n  console.log('Registering SOL/USDC serum market...');\n  try {\n    await client.serum3RegisterMarket(\n      group,\n      new PublicKey(MAINNET_SERUM3_MARKETS.get('SOL/USDC')!),\n      group.getFirstBankByMint(new PublicKey(MAINNET_MINTS.get('SOL')!)),\n      group.getFirstBankByMint(new PublicKey(MAINNET_MINTS.get('USDC')!)),\n      1,\n      'SOL/USDC',\n    );\n  } catch (error) {\n    console.log(error);\n  }\n\n  console.log('Registering MNGO-PERP market...');\n  const mngoMainnetOracle = oracles.get('MNGO');\n  try {\n    await client.perpCreateMarket(\n      group,\n      mngoMainnetOracle,\n      0,\n      'MNGO-PERP',\n      defaultOracleConfig,\n      6,\n      10,\n      100000, // base lots\n      0.9,\n      0.8,\n      1.1,\n      1.2,\n      0.0,\n      0.0,\n      0.05,\n      -0.001,\n      0.002,\n      0,\n      -0.1,\n      0.1,\n      10,\n      false,\n      0,\n      0,\n      0,\n      0,\n      -1.0,\n      2 * 60 * 60,\n      0.025,\n    );\n  } catch (error) {\n    console.log(error);\n  }\n\n  await createAndPopulateAlt(client, admin);\n\n  process.exit();\n}\n\nmain();\n\nasync function createAndPopulateAlt(client: MangoClient, admin: Keypair) {\n  let group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);\n\n  const connection = client.program.provider.connection;\n\n  // Create ALT, and set to group at index 0\n  if (group.addressLookupTables[0].equals(PublicKey.default)) {\n    try {\n      console.log(`ALT: Creating`);\n      const createIx = AddressLookupTableProgram.createLookupTable({\n        authority: admin.publicKey,\n        payer: admin.publicKey,\n        recentSlot: await connection.getSlot('finalized'),\n      });\n      let sig = await client.sendAndConfirmTransaction([createIx[0]]);\n      console.log(\n        `...created ALT ${createIx[1]} https://explorer.solana.com/tx/${sig}`,\n      );\n\n      console.log(`ALT: set at index 0 for group...`);\n      sig = await client.altSet(group, createIx[1], 0);\n      console.log(`...https://explorer.solana.com/tx/${sig}`);\n\n      group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Extend using mango v4 relevant pub keys\n  try {\n    let bankAddresses = Array.from(group.banksMapByMint.values())\n      .flat()\n      .map((bank) => [bank.publicKey, bank.oracle, bank.vault])\n      .flat()\n      .concat(\n        Array.from(group.banksMapByMint.values())\n          .flat()\n          .map((mintInfo) => mintInfo.publicKey),\n      );\n\n    let serum3MarketAddresses = Array.from(\n      group.serum3MarketsMapByExternal.values(),\n    )\n      .flat()\n      .map((serum3Market) => serum3Market.publicKey);\n\n    let serum3ExternalMarketAddresses = Array.from(\n      group.serum3ExternalMarketsMap.values(),\n    )\n      .flat()\n      .map((serum3ExternalMarket) => [\n        serum3ExternalMarket.publicKey,\n        serum3ExternalMarket.bidsAddress,\n        serum3ExternalMarket.asksAddress,\n      ])\n      .flat();\n\n    let perpMarketAddresses = Array.from(\n      group.perpMarketsMapByMarketIndex.values(),\n    )\n      .flat()\n      .map((perpMarket) => [\n        perpMarket.publicKey,\n        perpMarket.oracle,\n        perpMarket.bids,\n        perpMarket.asks,\n        perpMarket.eventQueue,\n      ])\n      .flat();\n\n    async function extendTable(addresses: PublicKey[]) {\n      await group.reloadAll(client);\n      const alt =\n        await client.program.provider.connection.getAddressLookupTable(\n          group.addressLookupTables[0],\n        );\n\n      addresses = addresses.filter(\n        (newAddress) =>\n          alt.value?.state.addresses &&\n          alt.value?.state.addresses.findIndex((addressInALt) =>\n            addressInALt.equals(newAddress),\n          ) === -1,\n      );\n      if (addresses.length === 0) {\n        return;\n      }\n      const extendIx = AddressLookupTableProgram.extendLookupTable({\n        lookupTable: group.addressLookupTables[0],\n        payer: admin.publicKey,\n        authority: admin.publicKey,\n        addresses,\n      });\n      const sig = await client.sendAndConfirmTransaction([extendIx]);\n      console.log(`https://explorer.solana.com/tx/${sig}`);\n    }\n\n    console.log(`ALT: extending using mango v4 relevant public keys`);\n    await extendTable(bankAddresses);\n    await extendTable(serum3MarketAddresses);\n    await extendTable(serum3ExternalMarketAddresses);\n    await extendTable(perpMarketAddresses);\n  } catch (error) {\n    console.log(error);\n  }\n}\n"],"mappings":"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","names":[]}