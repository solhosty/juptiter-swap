import {
  MangoClient
} from "../chunk-HVUWVEE5.mjs";
import "../chunk-PDNGNLHE.mjs";
import "../chunk-TSHDMTGJ.mjs";
import "../chunk-P2PWY3QH.mjs";
import "../chunk-TCNCMUFM.mjs";
import "../chunk-BYB3CFSH.mjs";
import "../chunk-36PUIGQD.mjs";
import {
  MANGO_V4_ID
} from "../chunk-5SDTDLZO.mjs";
import "../chunk-O3IXUKHU.mjs";
import "../chunk-62VGMIX5.mjs";
import "../chunk-34DSBDDD.mjs";
import "../chunk-FP7S2XO3.mjs";
import "../chunk-Z2RB6KEX.mjs";
import "../chunk-5VRACIDE.mjs";

// ts/client/src/scripts/devnet-admin-close.ts
import { AnchorProvider, Wallet } from "@project-serum/anchor";
import { Connection, Keypair, PublicKey } from "@solana/web3.js";
import fs from "fs";
var GROUP_NUM = Number(process.env.GROUP_NUM || 0);
var DEVNET_MINTS = /* @__PURE__ */ new Map([
  ["USDC", "8FRFC6MoGGkMFQwngccyu69VnYbzykGeez7ignHVAFSN"]
  // use devnet usdc
]);
async function main() {
  const options = AnchorProvider.defaultOptions();
  const connection = new Connection(
    "https://mango.devnet.rpcpool.com",
    options
  );
  const admin = Keypair.fromSecretKey(
    Buffer.from(
      JSON.parse(fs.readFileSync(process.env.ADMIN_KEYPAIR, "utf-8"))
    )
  );
  const adminWallet = new Wallet(admin);
  console.log(`Admin ${adminWallet.publicKey.toBase58()}`);
  const adminProvider = new AnchorProvider(connection, adminWallet, options);
  const client = await MangoClient.connect(
    adminProvider,
    "devnet",
    MANGO_V4_ID["devnet"],
    {
      idsSource: "get-program-accounts"
    }
  );
  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);
  console.log(`Group ${group.publicKey}`);
  let sig;
  const usdcDevnetMint = new PublicKey(DEVNET_MINTS.get("USDC"));
  const usdcDevnetOracle = (await client.getStubOracle(group, usdcDevnetMint))[0];
  sig = await client.stubOracleClose(group, usdcDevnetOracle.publicKey);
  console.log(
    `Closed USDC stub oracle, sig https://explorer.solana.com/tx/${sig}?cluster=devnet`
  );
  group.consoleLogBanks();
  for (const market of group.serum3MarketsMapByExternal.values()) {
    sig = await client.serum3deregisterMarket(
      group,
      market.serumMarketExternal
    );
    console.log(
      `Deregistered serum market ${market.name}, sig https://explorer.solana.com/tx/${sig}?cluster=devnet`
    );
  }
  for (const market of group.perpMarketsMapByMarketIndex.values()) {
    sig = await client.perpCloseMarket(group, market.perpMarketIndex);
    console.log(
      `Closed perp market ${market.name}, sig https://explorer.solana.com/tx/${sig}?cluster=devnet`
    );
  }
  sig = await client.groupClose(group);
  console.log(
    `Closed group, sig https://explorer.solana.com/tx/${sig}?cluster=devnet`
  );
  process.exit();
}
main();
export {
  DEVNET_MINTS
};
//# sourceMappingURL=devnet-admin-close.mjs.map