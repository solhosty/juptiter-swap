import {
  MangoClient
} from "../chunk-HVUWVEE5.mjs";
import "../chunk-PDNGNLHE.mjs";
import "../chunk-TSHDMTGJ.mjs";
import {
  HealthType
} from "../chunk-P2PWY3QH.mjs";
import "../chunk-TCNCMUFM.mjs";
import "../chunk-BYB3CFSH.mjs";
import {
  PerpOrderSide,
  PerpOrderType
} from "../chunk-36PUIGQD.mjs";
import {
  MANGO_V4_ID
} from "../chunk-5SDTDLZO.mjs";
import {
  toUiDecimalsForQuote
} from "../chunk-O3IXUKHU.mjs";
import "../chunk-62VGMIX5.mjs";
import "../chunk-34DSBDDD.mjs";
import "../chunk-FP7S2XO3.mjs";
import "../chunk-Z2RB6KEX.mjs";
import "../chunk-5VRACIDE.mjs";

// ts/client/src/scripts/devnet-user.ts
import { AnchorProvider, BN, Wallet } from "@project-serum/anchor";
import { Connection, Keypair, PublicKey } from "@solana/web3.js";
import { expect } from "chai";
import fs from "fs";
var DEVNET_MINTS = /* @__PURE__ */ new Map([
  ["USDC", "8FRFC6MoGGkMFQwngccyu69VnYbzykGeez7ignHVAFSN"],
  // use devnet usdc
  ["BTC", "3UNBZ6o52WTWwjac2kPUb4FyodhU1vFkRJheu1Sh2TvU"],
  ["SOL", "So11111111111111111111111111111111111111112"],
  ["ORCA", "orcarKHSqC5CDDsGbho8GKvwExejWHxTqGzXgcewB9L"],
  ["MNGO", "Bb9bsTQa1bGEtQ5KagGkvSHyuLqDWumFUcRqFusFNJWC"]
]);
var DEVNET_SERUM3_MARKETS = /* @__PURE__ */ new Map([
  ["BTC/USDC", new PublicKey("DW83EpHFywBxCHmyARxwj3nzxJd7MUdSeznmrdzZKNZB")],
  ["SOL/USDC", new PublicKey("5xWpt56U1NCuHoAEtpLeUrQcxDkEpNfScjfLFaRzLPgR")]
]);
var GROUP_NUM = Number(process.env.GROUP_NUM || 0);
async function main() {
  const options = AnchorProvider.defaultOptions();
  const connection = new Connection(
    "https://mango.devnet.rpcpool.com",
    options
  );
  const user = Keypair.fromSecretKey(
    Buffer.from(
      JSON.parse(fs.readFileSync(process.env.USER_KEYPAIR, "utf-8"))
    )
  );
  const userWallet = new Wallet(user);
  const userProvider = new AnchorProvider(connection, userWallet, options);
  const client = await MangoClient.connect(
    userProvider,
    "devnet",
    MANGO_V4_ID["devnet"],
    {
      idsSource: "get-program-accounts"
    }
  );
  console.log(`User ${userWallet.publicKey.toBase58()}`);
  const admin = Keypair.fromSecretKey(
    Buffer.from(
      JSON.parse(fs.readFileSync(process.env.ADMIN_KEYPAIR, "utf-8"))
    )
  );
  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);
  console.log(`Creating mangoaccount...`);
  let mangoAccount = await client.getOrCreateMangoAccount(group);
  await mangoAccount.reload(client);
  if (!mangoAccount) {
    throw new Error(`MangoAccount not found for user ${user.publicKey}`);
  }
  console.log(`...created/found mangoAccount ${mangoAccount.publicKey}`);
  if (true) {
    console.log(`...changing mango account name, and setting a delegate`);
    const newName = "my_changed_name";
    const randomKey = new PublicKey(
      "4ZkS7ZZkxfsC3GtvvsHP3DFcUeByU9zzZELS4r8HCELo"
    );
    await client.editMangoAccount(group, mangoAccount, newName, randomKey);
    await mangoAccount.reload(client);
    expect(mangoAccount.name).deep.equals(newName);
    expect(mangoAccount.delegate).deep.equals(randomKey);
    const oldName = "my_mango_account";
    console.log(`...resetting mango account name, and re-setting a delegate`);
    await client.editMangoAccount(
      group,
      mangoAccount,
      oldName,
      PublicKey.default
    );
    await mangoAccount.reload(client);
    expect(mangoAccount.name).deep.equals(oldName);
    expect(mangoAccount.delegate).deep.equals(PublicKey.default);
  }
  if (mangoAccount.tokens.length < 16 || mangoAccount.serum3.length < 8 || mangoAccount.perps.length < 8 || mangoAccount.perpOpenOrders.length < 8) {
    console.log(
      `...expanding mango account to max 16 token positions, 8 serum3, 8 perp position and 8 perp oo slots, previous (tokens ${mangoAccount.tokens.length}, serum3 ${mangoAccount.serum3.length}, perps ${mangoAccount.perps.length}, perps oo ${mangoAccount.perpOpenOrders.length})`
    );
    let sig = await client.expandMangoAccount(group, mangoAccount, 16, 8, 8, 8);
    console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);
    await mangoAccount.reload(client);
    expect(mangoAccount.tokens.length).equals(16);
    expect(mangoAccount.serum3.length).equals(8);
    expect(mangoAccount.perps.length).equals(8);
    expect(mangoAccount.perpOpenOrders.length).equals(8);
  }
  if (true) {
    console.log(`...depositing 50 USDC, 1 SOL, 1 MNGO`);
    let oldBalance = mangoAccount.getTokenBalance(
      group.getFirstBankByMint(new PublicKey(DEVNET_MINTS.get("USDC")))
    );
    await client.tokenDeposit(
      group,
      mangoAccount,
      new PublicKey(DEVNET_MINTS.get("USDC")),
      50
    );
    await mangoAccount.reload(client);
    let newBalance = mangoAccount.getTokenBalance(
      group.getFirstBankByMint(new PublicKey(DEVNET_MINTS.get("USDC")))
    );
    expect(toUiDecimalsForQuote(newBalance.sub(oldBalance)).toString()).equals(
      "50"
    );
    await client.tokenDeposit(
      group,
      mangoAccount,
      new PublicKey(DEVNET_MINTS.get("SOL")),
      1
    );
    await mangoAccount.reload(client);
    await client.tokenDeposit(
      group,
      mangoAccount,
      new PublicKey(DEVNET_MINTS.get("MNGO")),
      1
    );
    await mangoAccount.reload(client);
    console.log(`...withdrawing 1 USDC`);
    oldBalance = mangoAccount.getTokenBalance(
      group.getFirstBankByMint(new PublicKey(DEVNET_MINTS.get("USDC")))
    );
    await client.tokenWithdraw(
      group,
      mangoAccount,
      new PublicKey(DEVNET_MINTS.get("USDC")),
      1,
      true
    );
    await mangoAccount.reload(client);
    newBalance = mangoAccount.getTokenBalance(
      group.getFirstBankByMint(new PublicKey(DEVNET_MINTS.get("USDC")))
    );
    expect(toUiDecimalsForQuote(oldBalance.sub(newBalance)).toString()).equals(
      "1"
    );
    console.log(`...depositing 0.0005 BTC`);
    await client.tokenDeposit(
      group,
      mangoAccount,
      new PublicKey(DEVNET_MINTS.get("BTC")),
      5e-4
    );
    await mangoAccount.reload(client);
  }
  if (true) {
    await mangoAccount.reload(client);
    console.log(
      "...mangoAccount.getEquity() " + toUiDecimalsForQuote(mangoAccount.getEquity(group).toNumber())
    );
    console.log(
      "...mangoAccount.getCollateralValue() " + toUiDecimalsForQuote(
        mangoAccount.getCollateralValue(group).toNumber()
      )
    );
    console.log(
      "...mangoAccount.getAssetsVal() " + toUiDecimalsForQuote(
        mangoAccount.getAssetsValue(group, HealthType.init).toNumber()
      )
    );
    console.log(
      "...mangoAccount.getLiabsVal() " + toUiDecimalsForQuote(
        mangoAccount.getLiabsValue(group, HealthType.init).toNumber()
      )
    );
    console.log(
      '...mangoAccount.getMaxWithdrawWithBorrowForToken(group, "SOL") ' + toUiDecimalsForQuote(
        mangoAccount.getMaxWithdrawWithBorrowForToken(
          group,
          new PublicKey(DEVNET_MINTS.get("SOL"))
        ).toNumber()
      )
    );
  }
  if (true) {
    let getMaxSourceForTokenSwapWrapper = function(src, tgt) {
      console.log(
        `getMaxSourceForTokenSwap ${src.padEnd(4)} ${tgt.padEnd(4)} ` + mangoAccount.getMaxSourceUiForTokenSwap(
          group,
          group.banksMapByName.get(src)[0].mint,
          group.banksMapByName.get(tgt)[0].mint,
          1
        )
      );
    };
    for (const srcToken of Array.from(group.banksMapByName.keys())) {
      for (const tgtToken of Array.from(group.banksMapByName.keys())) {
        getMaxSourceForTokenSwapWrapper(srcToken, tgtToken);
      }
    }
    const maxQuoteForSerum3BidUi = mangoAccount.getMaxQuoteForSerum3BidUi(
      group,
      DEVNET_SERUM3_MARKETS.get("BTC/USDC")
    );
    console.log(
      "...mangoAccount.getMaxQuoteForSerum3BidUi(group, 'BTC/USDC') " + maxQuoteForSerum3BidUi
    );
    const maxBaseForSerum3AskUi = mangoAccount.getMaxBaseForSerum3AskUi(
      group,
      DEVNET_SERUM3_MARKETS.get("BTC/USDC")
    );
    console.log(
      "...mangoAccount.getMaxBaseForSerum3AskUi(group, 'BTC/USDC') " + maxBaseForSerum3AskUi
    );
    console.log(
      `simHealthRatioWithSerum3BidUiChanges ${mangoAccount.simHealthRatioWithSerum3BidUiChanges(
        group,
        785,
        DEVNET_SERUM3_MARKETS.get("BTC/USDC")
      )}`
    );
    console.log(
      `simHealthRatioWithSerum3AskUiChanges ${mangoAccount.simHealthRatioWithSerum3AskUiChanges(
        group,
        0.033,
        DEVNET_SERUM3_MARKETS.get("BTC/USDC")
      )}`
    );
  }
  if (true) {
    let sig;
    let perpMarket = group.getPerpMarketByName("BTC-PERP");
    const orders = await mangoAccount.loadPerpOpenOrdersForMarket(
      client,
      group,
      perpMarket.perpMarketIndex
    );
    for (const order of orders) {
      console.log(
        `Current order - ${order.uiPrice} ${order.uiSize} ${order.side}`
      );
    }
    console.log(`...cancelling all perp orders`);
    sig = await client.perpCancelAllOrders(
      group,
      mangoAccount,
      perpMarket.perpMarketIndex,
      10
    );
    console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);
    try {
      const clientId = Math.floor(Math.random() * 99999);
      const price = group.banksMapByName.get("BTC")[0].uiPrice;
      console.log(
        `...placing perp pegged bid ${clientId} at oracle price ${perpMarket.uiPrice}`
      );
      const sig2 = await client.perpPlaceOrderPegged(
        group,
        mangoAccount,
        perpMarket.perpMarketIndex,
        PerpOrderSide.bid,
        -5,
        perpMarket.uiPrice + 5,
        0.01,
        price * 0.011,
        clientId,
        PerpOrderType.limit,
        false,
        0,
        1
      );
      console.log(`sig https://explorer.solana.com/tx/${sig2}?cluster=devnet`);
    } catch (error) {
      console.log(error);
    }
    try {
      const clientId = Math.floor(Math.random() * 99999);
      const price = group.banksMapByName.get("BTC")[0].uiPrice;
      console.log(
        `...placing perp pegged bid ${clientId} at oracle price ${perpMarket.uiPrice}`
      );
      const sig2 = await client.perpPlaceOrderPegged(
        group,
        mangoAccount,
        perpMarket.perpMarketIndex,
        PerpOrderSide.ask,
        5,
        perpMarket.uiPrice - 5,
        0.01,
        price * 0.011,
        clientId,
        PerpOrderType.limit,
        false,
        0,
        1
      );
      console.log(`sig https://explorer.solana.com/tx/${sig2}?cluster=devnet`);
    } catch (error) {
      console.log(error);
    }
    await logBidsAndAsks(client, group);
    sig = await client.perpCancelAllOrders(
      group,
      mangoAccount,
      perpMarket.perpMarketIndex,
      10
    );
    console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);
    try {
      const clientId = Math.floor(Math.random() * 99999);
      await mangoAccount.reload(client);
      await group.reloadAll(client);
      const price = group.banksMapByName.get("BTC")[0].uiPrice - Math.floor(Math.random() * 100);
      const quoteQty = mangoAccount.getMaxQuoteForPerpBidUi(
        group,
        perpMarket.perpMarketIndex
      );
      const baseQty = quoteQty / price;
      console.log(
        ` simHealthRatioWithPerpBidUiChanges - ${mangoAccount.simHealthRatioWithPerpBidUiChanges(
          group,
          perpMarket.perpMarketIndex,
          baseQty
        )}`
      );
      console.log(
        `...placing max qty perp bid  clientId ${clientId} at price ${price}, base ${baseQty}, quote ${quoteQty}`
      );
      const sig2 = await client.perpPlaceOrder(
        group,
        mangoAccount,
        perpMarket.perpMarketIndex,
        PerpOrderSide.bid,
        price,
        baseQty,
        quoteQty,
        clientId,
        PerpOrderType.limit,
        false,
        0,
        //Date.now() + 200,
        1
      );
      console.log(`sig https://explorer.solana.com/tx/${sig2}?cluster=devnet`);
    } catch (error) {
      console.log(error);
    }
    console.log(`...cancelling all perp orders`);
    sig = await client.perpCancelAllOrders(
      group,
      mangoAccount,
      perpMarket.perpMarketIndex,
      10
    );
    console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);
    try {
      const clientId = Math.floor(Math.random() * 99999);
      const price = group.banksMapByName.get("BTC")[0].uiPrice - Math.floor(Math.random() * 100);
      const quoteQty = mangoAccount.getMaxQuoteForPerpBidUi(
        group,
        perpMarket.perpMarketIndex
      ) * 1.02;
      const baseQty = quoteQty / price;
      console.log(
        `...placing max qty * 1.02 perp bid clientId ${clientId} at price ${price}, base ${baseQty}, quote ${quoteQty}`
      );
      const sig2 = await client.perpPlaceOrder(
        group,
        mangoAccount,
        perpMarket.perpMarketIndex,
        PerpOrderSide.bid,
        price,
        baseQty,
        quoteQty,
        clientId,
        PerpOrderType.limit,
        false,
        0,
        //Date.now() + 200,
        1
      );
      console.log(`sig https://explorer.solana.com/tx/${sig2}?cluster=devnet`);
    } catch (error) {
      console.log(error);
      console.log("Errored out as expected");
    }
    try {
      const clientId = Math.floor(Math.random() * 99999);
      const price = group.banksMapByName.get("BTC")[0].uiPrice + Math.floor(Math.random() * 100);
      const baseQty = mangoAccount.getMaxBaseForPerpAskUi(
        group,
        perpMarket.perpMarketIndex
      );
      console.log(
        ` simHealthRatioWithPerpAskUiChanges - ${mangoAccount.simHealthRatioWithPerpAskUiChanges(
          group,
          perpMarket.perpMarketIndex,
          baseQty
        )}`
      );
      const quoteQty = baseQty * price;
      console.log(
        `...placing max qty perp ask clientId ${clientId} at price ${price}, base ${baseQty}, quote ${quoteQty}`
      );
      const sig2 = await client.perpPlaceOrder(
        group,
        mangoAccount,
        perpMarket.perpMarketIndex,
        PerpOrderSide.ask,
        price,
        baseQty,
        quoteQty,
        clientId,
        PerpOrderType.limit,
        false,
        0,
        //Date.now() + 200,
        1
      );
      console.log(`sig https://explorer.solana.com/tx/${sig2}?cluster=devnet`);
    } catch (error) {
      console.log(error);
    }
    try {
      const clientId = Math.floor(Math.random() * 99999);
      const price = group.banksMapByName.get("BTC")[0].uiPrice + Math.floor(Math.random() * 100);
      const baseQty = mangoAccount.getMaxBaseForPerpAskUi(group, perpMarket.perpMarketIndex) * 1.02;
      const quoteQty = baseQty * price;
      console.log(
        `...placing max qty perp ask * 1.02 clientId ${clientId} at price ${price}, base ${baseQty}, quote ${quoteQty}`
      );
      const sig2 = await client.perpPlaceOrder(
        group,
        mangoAccount,
        perpMarket.perpMarketIndex,
        PerpOrderSide.ask,
        price,
        baseQty,
        quoteQty,
        clientId,
        PerpOrderType.limit,
        false,
        0,
        //Date.now() + 200,
        1
      );
      console.log(`sig https://explorer.solana.com/tx/${sig2}?cluster=devnet`);
    } catch (error) {
      console.log(error);
      console.log("Errored out as expected");
    }
    console.log(`...cancelling all perp orders`);
    sig = await client.perpCancelAllOrders(
      group,
      mangoAccount,
      perpMarket.perpMarketIndex,
      10
    );
    console.log(`sig https://explorer.solana.com/tx/${sig}?cluster=devnet`);
    try {
      const clientId = Math.floor(Math.random() * 99999);
      const price = group.banksMapByName.get("BTC")[0].uiPrice;
      console.log(`...placing perp bid ${clientId} at ${price}`);
      const sig2 = await client.perpPlaceOrder(
        group,
        mangoAccount,
        perpMarket.perpMarketIndex,
        PerpOrderSide.bid,
        price,
        0.01,
        price * 0.01,
        clientId,
        PerpOrderType.limit,
        false,
        0,
        //Date.now() + 200,
        1
      );
      console.log(`sig https://explorer.solana.com/tx/${sig2}?cluster=devnet`);
    } catch (error) {
      console.log(error);
    }
    try {
      const clientId = Math.floor(Math.random() * 99999);
      const price = group.banksMapByName.get("BTC")[0].uiPrice;
      console.log(`...placing perp ask ${clientId} at ${price}`);
      const sig2 = await client.perpPlaceOrder(
        group,
        mangoAccount,
        perpMarket.perpMarketIndex,
        PerpOrderSide.ask,
        price,
        0.01,
        price * 0.011,
        clientId,
        PerpOrderType.limit,
        false,
        0,
        //Date.now() + 200,
        1
      );
      console.log(`sig https://explorer.solana.com/tx/${sig2}?cluster=devnet`);
    } catch (error) {
      console.log(error);
    }
    await perpMarket?.loadEventQueue(client);
    const fr = perpMarket?.getCurrentFundingRate(
      await perpMarket.loadBids(client),
      await perpMarket.loadAsks(client)
    );
    console.log(`current funding rate per hour is ${fr}`);
    const eq = await perpMarket?.loadEventQueue(client);
    console.log(
      `raw events - ${JSON.stringify(eq.eventsSince(new BN(0)), null, 2)}`
    );
    await new Promise((r) => setTimeout(r, 2e3));
    await group.reloadAll(client);
    await mangoAccount.reload(client);
    console.log(`${mangoAccount.toString(group)}`);
  }
  process.exit();
}
async function logBidsAndAsks(client, group) {
  await group.reloadAll(client);
  const perpMarket = group.getPerpMarketByName("BTC-PERP");
  const res = [
    (await perpMarket?.loadBids(client)).items(),
    (await perpMarket?.loadAsks(client)).items()
  ];
  console.log(`bids ${JSON.stringify(Array.from(res[0]), null, 2)}`);
  console.log(`asks ${JSON.stringify(Array.from(res[1]), null, 2)}`);
  return res;
}
main();
export {
  DEVNET_SERUM3_MARKETS
};
//# sourceMappingURL=devnet-user.mjs.map