{"version":3,"sources":["../../ts/client/src/scripts/mb-close-account.ts"],"sourcesContent":["import { AnchorProvider, BN, Wallet } from '@project-serum/anchor';\nimport { Connection, Keypair } from '@solana/web3.js';\nimport fs from 'fs';\nimport { Serum3Side } from '../accounts/serum3';\nimport { MangoClient } from '../client';\nimport { MANGO_V4_ID } from '../constants';\n\n//\n// (untested?) script which closes a mango account cleanly, first closes all positions, withdraws all tokens and then closes it\n//\nasync function closeUserAccount(userKeypairFile: string) {\n  const options = AnchorProvider.defaultOptions();\n  const connection = new Connection(process.env.MB_CLUSTER_URL!, options);\n\n  // user\n  const user = Keypair.fromSecretKey(\n    Buffer.from(JSON.parse(fs.readFileSync(userKeypairFile, 'utf-8'))),\n  );\n  const userWallet = new Wallet(user);\n  const userProvider = new AnchorProvider(connection, userWallet, options);\n  const client = await MangoClient.connect(\n    userProvider,\n    'mainnet-beta',\n    MANGO_V4_ID['mainnet-beta'],\n  );\n  console.log(`User ${userWallet.publicKey.toBase58()}`);\n\n  // admin\n  const admin = Keypair.fromSecretKey(\n    Buffer.from(\n      JSON.parse(fs.readFileSync(process.env.MB_PAYER_KEYPAIR!, 'utf-8')),\n    ),\n  );\n  console.log(`Admin ${admin.publicKey.toBase58()}`);\n\n  // fetch group\n  const group = await client.getGroupForCreator(admin.publicKey, 2);\n  console.log(`Found group ${group.publicKey.toBase58()}`);\n\n  // account\n  const mangoAccount = (\n    await client.getMangoAccountsForOwner(group, user.publicKey)\n  )[0];\n  console.log(`...found mangoAccount ${mangoAccount.publicKey}`);\n  console.log(mangoAccount.toString(group));\n\n  try {\n    // cancel serum3 accounts, closing might require cancelling orders and settling\n    for (const serum3Account of mangoAccount.serum3Active()) {\n      let orders = await mangoAccount.loadSerum3OpenOrdersForMarket(\n        client,\n        group,\n        group.serum3MarketsMapByMarketIndex.get(serum3Account.marketIndex)\n          ?.serumMarketExternal!,\n      );\n      for (const order of orders) {\n        console.log(\n          ` - Order orderId ${order.orderId}, ${order.side}, ${order.price}, ${order.size}`,\n        );\n        console.log(` - Cancelling order with ${order.orderId}`);\n        await client.serum3CancelOrder(\n          group,\n          mangoAccount,\n          group.serum3MarketsMapByMarketIndex.get(serum3Account.marketIndex)\n            ?.serumMarketExternal!,\n          order.side === 'buy' ? Serum3Side.bid : Serum3Side.ask,\n          order.orderId,\n        );\n      }\n\n      await client.serum3SettleFunds(\n        group,\n        mangoAccount,\n        group.serum3MarketsMapByMarketIndex.get(serum3Account.marketIndex)\n          ?.serumMarketExternal!,\n      );\n      await client.serum3CloseOpenOrders(\n        group,\n        mangoAccount,\n        group.serum3MarketsMapByMarketIndex.get(serum3Account.marketIndex)\n          ?.serumMarketExternal!,\n      );\n    }\n\n    // we closed a serum account, this changes the health accounts we are passing in for future ixs\n    await mangoAccount.reload(client);\n\n    // withdraw all tokens\n    for (const token of mangoAccount.tokensActive()) {\n      const native = token.balance(\n        group.getFirstBankByTokenIndex(token.tokenIndex)!,\n      );\n      console.log(\n        `token native ${native} ${\n          group.getFirstBankByTokenIndex(token.tokenIndex)!.name\n        }`,\n      );\n      if (native.toNumber() < 1) {\n        continue;\n      }\n\n      await client.tokenWithdrawNative(\n        group,\n        mangoAccount,\n        group.getFirstBankByTokenIndex(token.tokenIndex)!.mint,\n        new BN(\n          token\n            .balance(group.getFirstBankByTokenIndex(token.tokenIndex)!)\n            .toNumber(),\n        ),\n        false,\n      );\n    }\n  } catch (error) {\n    console.log(error);\n  }\n\n  await mangoAccount.reload(client);\n  console.log(`...mangoAccount ${mangoAccount.publicKey}`);\n  console.log(mangoAccount.toString());\n\n  console.log(`Close mango account...`);\n  const res = await client.closeMangoAccount(group, mangoAccount);\n\n  process.exit();\n}\n\nasync function main() {\n  // await closeUserAccount(process.env.MB_USER_KEYPAIR!);\n  await closeUserAccount(process.env.MB_USER2_KEYPAIR!);\n}\n\nmain();\n"],"mappings":"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","names":[]}