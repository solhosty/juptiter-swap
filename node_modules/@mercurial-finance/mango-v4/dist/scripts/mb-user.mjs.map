{"version":3,"sources":["../../ts/client/src/scripts/mb-user.ts"],"sourcesContent":["import { AnchorProvider, Wallet } from '@project-serum/anchor';\nimport { Connection, Keypair } from '@solana/web3.js';\nimport fs from 'fs';\nimport { HealthType } from '../accounts/mangoAccount';\nimport { MangoClient, MANGO_V4_ID, toUiDecimalsForQuote } from '../index';\n\nasync function main() {\n  const options = AnchorProvider.defaultOptions();\n  const connection = new Connection(process.env.MB_CLUSTER_URL!, options);\n\n  const user = Keypair.fromSecretKey(\n    Buffer.from(\n      JSON.parse(fs.readFileSync(process.env.MB_PAYER_KEYPAIR!, 'utf-8')),\n    ),\n  );\n  const userWallet = new Wallet(user);\n  const userProvider = new AnchorProvider(connection, userWallet, options);\n  const client = await MangoClient.connect(\n    userProvider,\n    'mainnet-beta',\n    MANGO_V4_ID['mainnet-beta'],\n  );\n  console.log(`User ${userWallet.publicKey.toBase58()}`);\n\n  const admin = Keypair.fromSecretKey(\n    Buffer.from(\n      JSON.parse(fs.readFileSync(process.env.MB_PAYER_KEYPAIR!, 'utf-8')),\n    ),\n  );\n  console.log(`Admin ${admin.publicKey.toBase58()}`);\n\n  const group = await client.getGroupForCreator(admin.publicKey, 2);\n  console.log(`${group.toString()}`);\n\n  // create + fetch account\n  console.log(`Creating mangoaccount...`);\n  const mangoAccount = await client.getOrCreateMangoAccount(group);\n  console.log(`...created/found mangoAccount ${mangoAccount.publicKey}`);\n  console.log(mangoAccount.toString(group));\n\n  if (true) {\n    console.log(`...depositing 0.0001 USDC`);\n    await client.tokenDeposit(\n      group,\n      mangoAccount,\n      group.banksMapByName.get('USDC')![0].mint,\n      10,\n    );\n    await mangoAccount.reload(client);\n\n    console.log(`...depositing 0.001 SOL`);\n    await client.tokenDeposit(\n      group,\n      mangoAccount,\n      group.banksMapByName.get('SOL')![0].mint,\n      1,\n    );\n    await mangoAccount.reload(client);\n  }\n\n  await mangoAccount.reload(client);\n  console.log(\n    'mangoAccount.getEquity() ' +\n      toUiDecimalsForQuote(mangoAccount.getEquity(group).toNumber()),\n  );\n  console.log(\n    'mangoAccount.getHealth(HealthType.init) ' +\n      toUiDecimalsForQuote(\n        mangoAccount.getHealth(group, HealthType.init).toNumber(),\n      ),\n  );\n  console.log(\n    'mangoAccount.getHealthRatio(HealthType.init) ' +\n      mangoAccount.getHealthRatio(group, HealthType.init).toNumber(),\n  );\n  console.log(\n    'mangoAccount.getCollateralValue() ' +\n      toUiDecimalsForQuote(mangoAccount.getCollateralValue(group).toNumber()),\n  );\n  console.log(\n    'mangoAccount.getAssetsVal() ' +\n      toUiDecimalsForQuote(\n        mangoAccount.getAssetsValue(group, HealthType.init).toNumber(),\n      ),\n  );\n  console.log(\n    'mangoAccount.getLiabsVal() ' +\n      toUiDecimalsForQuote(\n        mangoAccount.getLiabsValue(group, HealthType.init).toNumber(),\n      ),\n  );\n\n  console.log(\n    \"mangoAccount.getMaxWithdrawWithBorrowForToken(group, 'SOL') \" +\n      toUiDecimalsForQuote(\n        (\n          await mangoAccount.getMaxWithdrawWithBorrowForToken(\n            group,\n            group.banksMapByName.get('SOL')![0].mint,\n          )\n        ).toNumber(),\n      ),\n  );\n\n  console.log(\n    \"mangoAccount.getMaxSourceForTokenSwap(group, 'USDC', 'BTC') \" +\n      (await mangoAccount.getMaxSourceUiForTokenSwap(\n        group,\n        group.banksMapByName.get('USDC')![0].mint,\n        group.banksMapByName.get('BTC')![0].mint,\n        0.94,\n      )),\n  );\n\n  console.log(\n    'mangoAccount.simHealthWithTokenPositionChanges ' +\n      toUiDecimalsForQuote(\n        mangoAccount.simHealthRatioWithTokenPositionUiChanges(group, [\n          {\n            mintPk: group.banksMapByName.get('USDC')![0].mint,\n            uiTokenAmount:\n              -20000 *\n              Math.pow(10, group.banksMapByName.get('BTC')![0].mintDecimals!),\n          },\n          {\n            mintPk: group.banksMapByName.get('BTC')![0].mint,\n            uiTokenAmount:\n              1 *\n              Math.pow(10, group.banksMapByName.get('BTC')![0].mintDecimals!),\n          },\n        ]),\n      ),\n  );\n\n  process.exit();\n}\n\nmain();\n"],"mappings":"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","names":[]}