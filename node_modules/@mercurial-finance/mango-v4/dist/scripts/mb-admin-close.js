"use strict"; function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _chunkHFEILVW4js = require('../chunk-HFEILVW4.js');
require('../chunk-A355EMTI.js');
require('../chunk-74ANAXXV.js');
require('../chunk-C3X3GVS5.js');
require('../chunk-UGHO4YHY.js');
require('../chunk-3ZYUOGD4.js');
require('../chunk-ZYSI4CYO.js');


var _chunkS6N5Y2X2js = require('../chunk-S6N5Y2X2.js');
require('../chunk-772SHZWX.js');
require('../chunk-S3PQ6OXS.js');
require('../chunk-WKB2GIFW.js');
require('../chunk-TBVE5N24.js');
require('../chunk-Y7A4QF6J.js');
require('../chunk-JC4IRQUL.js');

// ts/client/src/scripts/mb-admin-close.ts
var _anchor = require('@project-serum/anchor');
var _web3js = require('@solana/web3.js');
var _fs = require('fs'); var _fs2 = _interopRequireDefault(_fs);
var GROUP_NUM = process.env.GROUP_NUM;
async function main() {
  const options = _anchor.AnchorProvider.defaultOptions();
  const connection = new (0, _web3js.Connection)(process.env.MB_CLUSTER_URL, options);
  const admin = _web3js.Keypair.fromSecretKey(
    Buffer.from(
      JSON.parse(_fs2.default.readFileSync(process.env.MB_PAYER_KEYPAIR, "utf-8"))
    )
  );
  const adminWallet = new (0, _anchor.Wallet)(admin);
  console.log(`Admin ${adminWallet.publicKey.toBase58()}`);
  const adminProvider = new (0, _anchor.AnchorProvider)(connection, adminWallet, options);
  const client = await _chunkHFEILVW4js.MangoClient.connect(
    adminProvider,
    "mainnet-beta",
    _chunkS6N5Y2X2js.MANGO_V4_ID["mainnet-beta"],
    {
      idsSource: "get-program-accounts",
      prioritizationFee: 5
    }
  );
  const groups = await (async () => {
    if (GROUP_NUM === "all") {
      return await client.getGroupsForCreator(admin.publicKey);
    } else {
      return [
        await client.getGroupForCreator(admin.publicKey, Number(GROUP_NUM))
      ];
    }
  })();
  for (const group of groups) {
    console.log(`Group ${group.publicKey}`);
    let sig;
    for (const market of group.serum3MarketsMapByExternal.values()) {
      sig = await client.serum3deregisterMarket(
        group,
        market.serumMarketExternal
      );
      console.log(
        `Deregistered serum market ${market.name}, sig https://explorer.solana.com/tx/${sig}`
      );
    }
    for (const market of group.perpMarketsMapByMarketIndex.values()) {
      sig = await client.perpCloseMarket(group, market.perpMarketIndex);
      console.log(
        `Closed perp market ${market.name}, sig https://explorer.solana.com/tx/${sig}`
      );
    }
    for (const banks of group.banksMapByMint.values()) {
      sig = await client.tokenDeregister(group, banks[0].mint);
      console.log(
        `Removed token ${banks[0].name}, sig https://explorer.solana.com/tx/${sig}`
      );
    }
    const stubOracles = await client.getStubOracle(group);
    for (const stubOracle of stubOracles) {
      sig = await client.stubOracleClose(group, stubOracle.publicKey);
      console.log(
        `Closed stub oracle ${stubOracle.publicKey}, sig https://explorer.solana.com/tx/${sig}`
      );
    }
    sig = await client.groupClose(group);
    console.log(`Closed group, sig https://explorer.solana.com/tx/${sig}`);
  }
  process.exit();
}
main();
//# sourceMappingURL=mb-admin-close.js.map