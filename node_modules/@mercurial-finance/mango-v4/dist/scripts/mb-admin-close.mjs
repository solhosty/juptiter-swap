import {
  MangoClient
} from "../chunk-HVUWVEE5.mjs";
import "../chunk-PDNGNLHE.mjs";
import "../chunk-TSHDMTGJ.mjs";
import "../chunk-P2PWY3QH.mjs";
import "../chunk-TCNCMUFM.mjs";
import "../chunk-BYB3CFSH.mjs";
import "../chunk-36PUIGQD.mjs";
import {
  MANGO_V4_ID
} from "../chunk-5SDTDLZO.mjs";
import "../chunk-O3IXUKHU.mjs";
import "../chunk-62VGMIX5.mjs";
import "../chunk-34DSBDDD.mjs";
import "../chunk-FP7S2XO3.mjs";
import "../chunk-Z2RB6KEX.mjs";
import "../chunk-5VRACIDE.mjs";

// ts/client/src/scripts/mb-admin-close.ts
import { AnchorProvider, Wallet } from "@project-serum/anchor";
import { Connection, Keypair } from "@solana/web3.js";
import fs from "fs";
var GROUP_NUM = process.env.GROUP_NUM;
async function main() {
  const options = AnchorProvider.defaultOptions();
  const connection = new Connection(process.env.MB_CLUSTER_URL, options);
  const admin = Keypair.fromSecretKey(
    Buffer.from(
      JSON.parse(fs.readFileSync(process.env.MB_PAYER_KEYPAIR, "utf-8"))
    )
  );
  const adminWallet = new Wallet(admin);
  console.log(`Admin ${adminWallet.publicKey.toBase58()}`);
  const adminProvider = new AnchorProvider(connection, adminWallet, options);
  const client = await MangoClient.connect(
    adminProvider,
    "mainnet-beta",
    MANGO_V4_ID["mainnet-beta"],
    {
      idsSource: "get-program-accounts",
      prioritizationFee: 5
    }
  );
  const groups = await (async () => {
    if (GROUP_NUM === "all") {
      return await client.getGroupsForCreator(admin.publicKey);
    } else {
      return [
        await client.getGroupForCreator(admin.publicKey, Number(GROUP_NUM))
      ];
    }
  })();
  for (const group of groups) {
    console.log(`Group ${group.publicKey}`);
    let sig;
    for (const market of group.serum3MarketsMapByExternal.values()) {
      sig = await client.serum3deregisterMarket(
        group,
        market.serumMarketExternal
      );
      console.log(
        `Deregistered serum market ${market.name}, sig https://explorer.solana.com/tx/${sig}`
      );
    }
    for (const market of group.perpMarketsMapByMarketIndex.values()) {
      sig = await client.perpCloseMarket(group, market.perpMarketIndex);
      console.log(
        `Closed perp market ${market.name}, sig https://explorer.solana.com/tx/${sig}`
      );
    }
    for (const banks of group.banksMapByMint.values()) {
      sig = await client.tokenDeregister(group, banks[0].mint);
      console.log(
        `Removed token ${banks[0].name}, sig https://explorer.solana.com/tx/${sig}`
      );
    }
    const stubOracles = await client.getStubOracle(group);
    for (const stubOracle of stubOracles) {
      sig = await client.stubOracleClose(group, stubOracle.publicKey);
      console.log(
        `Closed stub oracle ${stubOracle.publicKey}, sig https://explorer.solana.com/tx/${sig}`
      );
    }
    sig = await client.groupClose(group);
    console.log(`Closed group, sig https://explorer.solana.com/tx/${sig}`);
  }
  process.exit();
}
main();
//# sourceMappingURL=mb-admin-close.mjs.map