{"version":3,"sources":["../../ts/client/src/scripts/mb-admin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAAS,gBAAgB,cAAc;AACvC;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,OAAO,QAAQ;AAiBf,IAAM,YAAY,OAAO,QAAQ,IAAI,aAAa,CAAC;AA8BnD,IAAM,EAAE,gBAAgB,kBAAkB,kBAAkB,IAAI,QAAQ;AAGxE,IAAM,6BAA6B,KAAK,KAAK;AAC7C,IAAM,oCAAoC,SAAS,KAAS,CAAC,EAAE,SAAS;AA6sBxE,eAAe,OAAO;AACpB,MAAI;AAAA,EAIJ,SAAS,OAAP;AACA,YAAQ,IAAI,KAAK;AAAA,EACnB;AACA,MAAI;AAAA,EAMJ,SAAS,OAAP;AACA,YAAQ,IAAI,KAAK;AAAA,EACnB;AACA,MAAI;AAAA,EAEJ,SAAS,OAAP;AACA,YAAQ,IAAI,KAAK;AAAA,EACnB;AAEA,MAAI;AAAA,EAGJ,SAAS,OAAP;AACA,YAAQ,IAAI,KAAK;AAAA,EACnB;AACA,MAAI;AAAA,EAGJ,SAAS,OAAP;AACA,YAAQ,IAAI,KAAK;AAAA,EACnB;AAEA,MAAI;AAAA,EAEJ,SAAS,OAAP;AAAA,EAAe;AACnB;AAEA,IAAI;AACF,OAAK;AACP,SAAS,OAAP;AACA,UAAQ,IAAI,KAAK;AACnB","sourcesContent":["import { AnchorProvider, Wallet } from '@project-serum/anchor';\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  NATIVE_MINT,\n  TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport {\n  AddressLookupTableProgram,\n  ComputeBudgetProgram,\n  Connection,\n  Keypair,\n  PublicKey,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SystemProgram,\n} from '@solana/web3.js';\nimport fs from 'fs';\nimport { TokenIndex } from '../accounts/bank';\nimport { Group } from '../accounts/group';\nimport {\n  Serum3OrderType,\n  Serum3SelfTradeBehavior,\n  Serum3Side,\n} from '../accounts/serum3';\nimport { Builder } from '../builder';\nimport { MangoClient } from '../client';\nimport {\n  NullPerpEditParams,\n  NullTokenEditParams,\n} from '../clientIxParamBuilder';\nimport { MANGO_V4_ID, OPENBOOK_PROGRAM_ID } from '../constants';\nimport { buildVersionedTx, toNative } from '../utils';\n\nconst GROUP_NUM = Number(process.env.GROUP_NUM || 0);\n\nconst MAINNET_MINTS = new Map([\n  ['USDC', 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'], // 0\n  ['USDT', 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB'], // 1\n  ['DAI', 'EjmyN6qEC1Tf1JxiG1ae7UTJhUxSwk1TCWNWqxWV4J6o'], // 2\n  ['ETH', '7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs'], // 3 Ether (Portal)\n  ['SOL', 'So11111111111111111111111111111111111111112'], // 4 Wrapped SOL\n  ['MSOL', 'mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So'], // 5\n  ['MNGO', 'MangoCzJ36AjZyKwVj3VnYU4GTonjfVEnJmvvWaxLac'], // 6\n  ['BONK', 'DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263'], // 7\n]);\nconst MAINNET_ORACLES = new Map([\n  // USDC - stub oracle\n  ['USDT', '3vxLXJqLqF3JG5TCbYycbKWRBbCJQLxQmBGCkyqEEefL'],\n  ['DAI', 'CtJ8EkqLmeYyGB8s4jevpeNsvmD4dxVR2krfsDLcvV8Y'],\n  ['ETH', 'JBu1AL4obBcCMqKBBxhpWCNUt136ijcuMZLFvTP7iWdB'],\n  ['SOL', 'H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG'],\n  ['MSOL', 'E4v1BBgoso9s64TQvmyownAVJbhbEPGyzA3qn4n46qj9'],\n  // ['MNGO', '79wm3jjcPr6RaNQ4DGvP5KxG1mNd3gEBsg6FsNVFezK4'], // pyth\n  ['MNGO', '5xUoyPG9PeowJvfai5jD985LiRvo58isaHrmmcBohi3Y'], // switchboard\n  ['BTC', 'GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU'],\n  ['BONK', '4SZ1qb4MtSUrZcoeaeQ3BDzVCyqxw3VwSFpPiMTmn4GE'],\n]);\n\n// External markets are matched with those in https://github.com/openbook-dex/openbook-ts/blob/master/packages/serum/src/markets.json\nconst MAINNET_SERUM3_MARKETS = new Map([\n  ['SOL/USDC', '8BnEgHoWFysVcuFFX7QztDmzuH8r5ZFvyP3sYwn1XTh6'],\n]);\n\nconst { MB_CLUSTER_URL, MB_PAYER_KEYPAIR, MB_PAYER3_KEYPAIR } = process.env;\n\nconst MIN_VAULT_TO_DEPOSITS_RATIO = 0.2;\nconst NET_BORROWS_WINDOW_SIZE_TS = 24 * 60 * 60;\nconst NET_BORROW_LIMIT_PER_WINDOW_QUOTE = toNative(1000000, 6).toNumber();\n\nconst defaultOracleConfig = {\n  confFilter: 0.1,\n  maxStalenessSlots: null,\n};\n// hoping that dynamic rate parameter adjustment would be enough to tune their rates to the markets needs\nconst defaultInterestRate = {\n  adjustmentFactor: 0.004, // rate parameters are chosen to be the same for all high asset weight tokens,\n  util0: 0.7,\n  rate0: 0.1,\n  util1: 0.85,\n  rate1: 0.2,\n  maxRate: 2.0,\n};\n\nasync function buildAdminClient(): Promise<[MangoClient, Keypair, Keypair]> {\n  const admin = Keypair.fromSecretKey(\n    Buffer.from(JSON.parse(fs.readFileSync(MB_PAYER3_KEYPAIR!, 'utf-8'))),\n  );\n\n  const options = AnchorProvider.defaultOptions();\n  const connection = new Connection(MB_CLUSTER_URL!, options);\n\n  const adminWallet = new Wallet(admin);\n  console.log(`Admin ${adminWallet.publicKey.toBase58()}`);\n  const adminProvider = new AnchorProvider(connection, adminWallet, options);\n\n  const client = await MangoClient.connect(\n    adminProvider,\n    'mainnet-beta',\n    MANGO_V4_ID['mainnet-beta'],\n    {\n      idsSource: 'get-program-accounts',\n    },\n  );\n\n  const creator = Keypair.fromSecretKey(\n    Buffer.from(JSON.parse(fs.readFileSync(MB_PAYER_KEYPAIR!, 'utf-8'))),\n  );\n\n  return [client, admin, creator];\n}\n\nasync function buildUserClient(\n  userKeypair: string,\n): Promise<[MangoClient, Group, Keypair]> {\n  const options = AnchorProvider.defaultOptions();\n  const connection = new Connection(MB_CLUSTER_URL!, options);\n\n  const user = Keypair.fromSecretKey(\n    Buffer.from(JSON.parse(fs.readFileSync(userKeypair, 'utf-8'))),\n  );\n  const userWallet = new Wallet(user);\n  const userProvider = new AnchorProvider(connection, userWallet, options);\n\n  const client = await MangoClient.connect(\n    userProvider,\n    'mainnet-beta',\n    MANGO_V4_ID['mainnet-beta'],\n  );\n\n  const creator = Keypair.fromSecretKey(\n    Buffer.from(JSON.parse(fs.readFileSync(MB_PAYER_KEYPAIR!, 'utf-8'))),\n  );\n  console.log(`Creator ${creator.publicKey.toBase58()}`);\n  const group = await client.getGroupForCreator(creator.publicKey, GROUP_NUM);\n  return [client, group, user];\n}\n\nasync function createGroup() {\n  const result = await buildAdminClient();\n  const client = result[0];\n  const admin = result[1];\n\n  console.log(`Creating Group...`);\n  const insuranceMint = new PublicKey(MAINNET_MINTS.get('USDC')!);\n  await client.groupCreate(GROUP_NUM, true, 2, insuranceMint);\n  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);\n  console.log(`...registered group ${group.publicKey}`);\n}\n\nasync function changeAdmin() {\n  const result = await buildAdminClient();\n  const client = result[0];\n  const admin = result[1];\n  const creator = result[2];\n\n  const group = await client.getGroupForCreator(creator.publicKey, GROUP_NUM);\n\n  console.log(`Changing admin...`);\n  await client.groupEdit(\n    group,\n    new PublicKey('DSiGNQaKhFCSZbg4HczqCtPAPb1xV51c9GfbfqcVKTB4'),\n    new PublicKey('DSiGNQaKhFCSZbg4HczqCtPAPb1xV51c9GfbfqcVKTB4'),\n    new PublicKey('DSiGNQaKhFCSZbg4HczqCtPAPb1xV51c9GfbfqcVKTB4'),\n  );\n}\n\nasync function setDepositLimit() {\n  const result = await buildAdminClient();\n  const client = result[0];\n  const admin = result[1];\n  const creator = result[2];\n\n  const group = await client.getGroupForCreator(creator.publicKey, GROUP_NUM);\n\n  console.log(`Setting a deposit limit...`);\n  await client.groupEdit(\n    group,\n    new PublicKey('DSiGNQaKhFCSZbg4HczqCtPAPb1xV51c9GfbfqcVKTB4'),\n    new PublicKey('DSiGNQaKhFCSZbg4HczqCtPAPb1xV51c9GfbfqcVKTB4'),\n    new PublicKey('DSiGNQaKhFCSZbg4HczqCtPAPb1xV51c9GfbfqcVKTB4'),\n    undefined,\n    undefined,\n    toNative(200, 6),\n  );\n}\n\nasync function registerTokens() {\n  const result = await buildAdminClient();\n  const client = result[0];\n  const admin = result[1];\n  const creator = result[2];\n\n  const group = await client.getGroupForCreator(creator.publicKey, GROUP_NUM);\n\n  console.log(`Creating USDC stub oracle...`);\n  const usdcMainnetMint = new PublicKey(MAINNET_MINTS.get('USDC')!);\n  await client.stubOracleCreate(group, usdcMainnetMint, 1.0);\n  const usdcMainnetOracle = (\n    await client.getStubOracle(group, usdcMainnetMint)\n  )[0];\n  console.log(`...created stub oracle ${usdcMainnetOracle.publicKey}`);\n\n  console.log(`Registering USDC...`);\n  await client.tokenRegister(\n    group,\n    usdcMainnetMint,\n    usdcMainnetOracle.publicKey,\n    defaultOracleConfig,\n    0,\n    'USDC',\n    defaultInterestRate,\n    0.005,\n    0.0005,\n    1,\n    1,\n    1,\n    1,\n    0,\n    MIN_VAULT_TO_DEPOSITS_RATIO,\n    NET_BORROWS_WINDOW_SIZE_TS,\n    NET_BORROW_LIMIT_PER_WINDOW_QUOTE,\n  );\n\n  console.log(`Registering USDT...`);\n  const usdtMainnetMint = new PublicKey(MAINNET_MINTS.get('USDT')!);\n  const usdtMainnetOracle = new PublicKey(MAINNET_ORACLES.get('USDT')!);\n  await client.tokenRegister(\n    group,\n    usdtMainnetMint,\n    usdtMainnetOracle,\n    defaultOracleConfig,\n    1,\n    'USDT',\n    defaultInterestRate,\n    0.005,\n    0.0005,\n    0.95,\n    0.9,\n    1.05,\n    1.1,\n    0.025,\n    MIN_VAULT_TO_DEPOSITS_RATIO,\n    NET_BORROWS_WINDOW_SIZE_TS,\n    NET_BORROW_LIMIT_PER_WINDOW_QUOTE,\n  );\n\n  console.log(`Registering DAI...`);\n  const daiMainnetMint = new PublicKey(MAINNET_MINTS.get('DAI')!);\n  const daiMainnetOracle = new PublicKey(MAINNET_ORACLES.get('DAI')!);\n  await client.tokenRegister(\n    group,\n    daiMainnetMint,\n    daiMainnetOracle,\n    defaultOracleConfig,\n    2,\n    'DAI',\n    defaultInterestRate,\n    0.005,\n    0.0005,\n    0.95,\n    0.9,\n    1.05,\n    1.1,\n    0.025,\n    MIN_VAULT_TO_DEPOSITS_RATIO,\n    NET_BORROWS_WINDOW_SIZE_TS,\n    NET_BORROW_LIMIT_PER_WINDOW_QUOTE,\n  );\n\n  console.log(`Registering ETH...`);\n  const ethMainnetMint = new PublicKey(MAINNET_MINTS.get('ETH')!);\n  const ethMainnetOracle = new PublicKey(MAINNET_ORACLES.get('ETH')!);\n  await client.tokenRegister(\n    group,\n    ethMainnetMint,\n    ethMainnetOracle,\n    defaultOracleConfig,\n    3,\n    'ETH',\n    defaultInterestRate,\n    0.005,\n    0.0005,\n    0.9,\n    0.8,\n    1.1,\n    1.2,\n    0.05,\n    MIN_VAULT_TO_DEPOSITS_RATIO,\n    NET_BORROWS_WINDOW_SIZE_TS,\n    NET_BORROW_LIMIT_PER_WINDOW_QUOTE,\n  );\n\n  console.log(`Registering SOL...`);\n  const solMainnetMint = new PublicKey(MAINNET_MINTS.get('SOL')!);\n  const solMainnetOracle = new PublicKey(MAINNET_ORACLES.get('SOL')!);\n  await client.tokenRegister(\n    group,\n    solMainnetMint,\n    solMainnetOracle,\n    defaultOracleConfig,\n    4,\n    'SOL',\n    defaultInterestRate,\n    0.005,\n    0.0005,\n    0.9,\n    0.8,\n    1.1,\n    1.2,\n    0.05,\n    MIN_VAULT_TO_DEPOSITS_RATIO,\n    NET_BORROWS_WINDOW_SIZE_TS,\n    NET_BORROW_LIMIT_PER_WINDOW_QUOTE,\n  );\n\n  console.log(`Registering MSOL...`);\n  const msolMainnetMint = new PublicKey(MAINNET_MINTS.get('MSOL')!);\n  const msolMainnetOracle = new PublicKey(MAINNET_ORACLES.get('MSOL')!);\n  await client.tokenRegister(\n    group,\n    msolMainnetMint,\n    msolMainnetOracle,\n    defaultOracleConfig,\n    5,\n    'MSOL',\n    defaultInterestRate,\n    0.005,\n    0.0005,\n    0.9,\n    0.8,\n    1.1,\n    1.2,\n    0.05,\n    MIN_VAULT_TO_DEPOSITS_RATIO,\n    NET_BORROWS_WINDOW_SIZE_TS,\n    NET_BORROW_LIMIT_PER_WINDOW_QUOTE,\n  );\n\n  console.log(`Registering MNGO...`);\n  await client.groupEdit(group, group.admin, group.admin);\n  const mngoMainnetMint = new PublicKey(MAINNET_MINTS.get('MNGO')!);\n  const mngoMainnetOracle = new PublicKey(MAINNET_ORACLES.get('MNGO')!);\n  await client.tokenRegisterTrustless(\n    group,\n    mngoMainnetMint,\n    mngoMainnetOracle,\n    6,\n    'MNGO',\n  );\n\n  console.log(`Registering BONK...`);\n  const bonkMainnetMint = new PublicKey(MAINNET_MINTS.get('BONK')!);\n  const bonkMainnetOracle = new PublicKey(MAINNET_ORACLES.get('BONK')!);\n  await client.tokenRegisterTrustless(\n    group,\n    bonkMainnetMint,\n    bonkMainnetOracle,\n    7,\n    'BONK',\n  );\n\n  // log tokens/banks\n  await group.reloadAll(client);\n  for (const bank of await Array.from(group.banksMapByMint.values())\n    .flat()\n    .sort((a, b) => a.tokenIndex - b.tokenIndex)) {\n    console.log(`${bank.toString()}`);\n  }\n}\n\nasync function registerSerum3Markets() {\n  const result = await buildAdminClient();\n  const client = result[0];\n  const admin = result[1];\n  const creator = result[2];\n\n  const group = await client.getGroupForCreator(creator.publicKey, GROUP_NUM);\n\n  // Register SOL serum market\n  await client.serum3RegisterMarket(\n    group,\n    new PublicKey(MAINNET_SERUM3_MARKETS.get('SOL/USDC')!),\n    group.getFirstBankByMint(new PublicKey(MAINNET_MINTS.get('SOL')!)),\n    group.getFirstBankByMint(new PublicKey(MAINNET_MINTS.get('USDC')!)),\n    0,\n    'SOL/USDC',\n  );\n}\n\nasync function createUser(userKeypair: string) {\n  const result = await buildUserClient(userKeypair);\n  const client = result[0];\n  const group = result[1];\n  const user = result[2];\n\n  console.log(`Creating MangoAccount...`);\n  const mangoAccount = await client.getOrCreateMangoAccount(group);\n  if (!mangoAccount) {\n    throw new Error(`MangoAccount not found for user ${user.publicKey}`);\n  }\n\n  console.log(`...created MangoAccount ${mangoAccount.publicKey.toBase58()}`);\n}\n\nasync function depositForUser(userKeypair: string) {\n  const result = await buildUserClient(userKeypair);\n  const client = result[0];\n  const group = result[1];\n  const user = result[2];\n\n  const mangoAccount = await client.getMangoAccountForOwner(\n    group,\n    user.publicKey,\n    0,\n  )!;\n\n  await client.tokenDeposit(\n    group,\n    mangoAccount!,\n    new PublicKey(MAINNET_MINTS.get('USDC')!),\n    10,\n  );\n  await mangoAccount!.reload(client);\n  console.log(`...deposited 10 USDC`);\n}\n\nasync function registerPerpMarkets() {\n  const result = await buildAdminClient();\n  const client = result[0];\n  const admin = result[1];\n  const creator = result[2];\n\n  const group = await client.getGroupForCreator(creator.publicKey, GROUP_NUM);\n\n  await client.perpCreateMarket(\n    group,\n    new PublicKey(MAINNET_ORACLES.get('BTC')!),\n    0,\n    'BTC-PERP',\n    defaultOracleConfig,\n    6,\n    10, // 0.1$ is the min tick\n    100, // if btc price is 20k, one base lot would be 2$\n    0.975,\n    0.95,\n    1.025,\n    1.05,\n    0.95,\n    0.9,\n    0.0125,\n    -0.0001,\n    0.0004,\n    5, // note: quote native\n    -0.05,\n    0.05,\n    100, // if btc is at 20k, this is 200$\n    true,\n    1000, // solana tx fee is currently 50 native quote at a sol price of 10$\n    1000000,\n    0.01, // less than liquidationFee\n    0,\n    1.0,\n    2 * 60 * 60,\n    0.025,\n  );\n\n  await client.perpCreateMarket(\n    group,\n    new PublicKey(MAINNET_ORACLES.get('MNGO')!),\n    1,\n    'MNGO-PERP-OLD',\n    defaultOracleConfig,\n    6,\n    100, // 0.0001$ is the min tick\n    1000000, // if mngo price is 1 cent, one base lot would be 1 cent\n    0.995,\n    0.99, // 100x leverage\n    1.005,\n    1.01,\n    0,\n    0,\n    0.0025,\n    -0.0001,\n    0.0004,\n    5,\n    -0.05,\n    0.05,\n    1000, // if mngo price 1 cent, this is 10$\n    false,\n    1000,\n    1000000,\n    0.001, // less than liquidationFee\n    0,\n    1.0,\n    2 * 60 * 60,\n    0.2, // 20% positive pnl liquidation fee?\n  );\n}\n\nasync function changeTokenOracle() {\n  const result = await buildAdminClient();\n  const client = result[0];\n  const admin = result[1];\n  const creator = result[2];\n\n  const group = await client.getGroupForCreator(creator.publicKey, GROUP_NUM);\n  const bank = group.getFirstBankByMint(\n    new PublicKey(MAINNET_MINTS.get('MNGO')!),\n  );\n  await client.tokenEdit(\n    group,\n    bank.mint,\n    Builder(NullTokenEditParams)\n      .oracle(new PublicKey(MAINNET_ORACLES.get('MNGO')!))\n      .build(),\n  );\n}\n\nasync function makeTokenReduceonly() {\n  const result = await buildAdminClient();\n  const client = result[0];\n  const admin = result[1];\n  const creator = result[2];\n\n  const group = await client.getGroupForCreator(creator.publicKey, GROUP_NUM);\n  const bank = group.getFirstBankByMint(\n    new PublicKey(MAINNET_MINTS.get('DAI')!),\n  );\n  await client.tokenEdit(\n    group,\n    bank.mint,\n    Builder(NullTokenEditParams).reduceOnly(true).build(),\n  );\n}\n\nasync function changeMaxStalenessSlots() {\n  const result = await buildAdminClient();\n  const client = result[0];\n  const admin = result[1];\n  const creator = result[2];\n\n  const group = await client.getGroupForCreator(creator.publicKey, GROUP_NUM);\n\n  for (const bank of Array.from(group.banksMapByTokenIndex.values()).flat()) {\n    await client.tokenEdit(\n      group,\n      bank.mint,\n      Builder(NullTokenEditParams)\n        .oracleConfig({\n          confFilter: 0.1,\n          maxStalenessSlots: 120,\n        })\n        .build(),\n    );\n  }\n\n  for (const perpMarket of Array.from(\n    group.perpMarketsMapByMarketIndex.values(),\n  )) {\n    await client.perpEditMarket(\n      group,\n      perpMarket.perpMarketIndex,\n      Builder(NullPerpEditParams)\n        .oracleConfig({\n          confFilter: 0.1,\n          maxStalenessSlots: 120,\n        })\n        .build(),\n    );\n  }\n}\n\nasync function changeStartQuote() {\n  const result = await buildAdminClient();\n  const client = result[0];\n  const admin = result[1];\n  const creator = result[2];\n\n  const group = await client.getGroupForCreator(creator.publicKey, GROUP_NUM);\n\n  await client.tokenEdit(\n    group,\n    group.getFirstBankByMint(new PublicKey(MAINNET_MINTS.get('USDT')!)).mint,\n    Builder(NullTokenEditParams)\n      .depositWeightScaleStartQuote(toNative(1000000, 6).toNumber())\n      .borrowWeightScaleStartQuote(toNative(1000000, 6).toNumber())\n      .build(),\n  );\n  await client.tokenEdit(\n    group,\n    group.getFirstBankByMint(new PublicKey(MAINNET_MINTS.get('ETH')!)).mint,\n    Builder(NullTokenEditParams)\n      .depositWeightScaleStartQuote(toNative(100000, 6).toNumber())\n      .borrowWeightScaleStartQuote(toNative(100000, 6).toNumber())\n      .build(),\n  );\n  await client.tokenEdit(\n    group,\n    group.getFirstBankByMint(new PublicKey(MAINNET_MINTS.get('SOL')!)).mint,\n    Builder(NullTokenEditParams)\n      .depositWeightScaleStartQuote(toNative(5000000, 6).toNumber())\n      .borrowWeightScaleStartQuote(toNative(5000000, 6).toNumber())\n      .build(),\n  );\n  await client.tokenEdit(\n    group,\n    group.getFirstBankByMint(new PublicKey(MAINNET_MINTS.get('MSOL')!)).mint,\n    Builder(NullTokenEditParams)\n      .depositWeightScaleStartQuote(toNative(1000000, 6).toNumber())\n      .borrowWeightScaleStartQuote(toNative(1000000, 6).toNumber())\n      .build(),\n  );\n  await client.tokenEdit(\n    group,\n    group.getFirstBankByMint(new PublicKey(MAINNET_MINTS.get('MNGO')!)).mint,\n    Builder(NullTokenEditParams)\n      .depositWeightScaleStartQuote(toNative(5000, 6).toNumber())\n      .borrowWeightScaleStartQuote(toNative(5000, 6).toNumber())\n      .build(),\n  );\n  await client.tokenEdit(\n    group,\n    group.getFirstBankByMint(new PublicKey(MAINNET_MINTS.get('BONK')!)).mint,\n    Builder(NullTokenEditParams)\n      .depositWeightScaleStartQuote(toNative(100000, 6).toNumber())\n      .borrowWeightScaleStartQuote(toNative(100000, 6).toNumber())\n      .build(),\n  );\n}\n\nasync function makePerpMarketReduceOnly() {\n  const result = await buildAdminClient();\n  const client = result[0];\n  const admin = result[1];\n  const creator = result[2];\n\n  const group = await client.getGroupForCreator(creator.publicKey, GROUP_NUM);\n  const perpMarket = group.getPerpMarketByName('MNGO-PERP-OLD');\n  await client.perpEditMarket(\n    group,\n    perpMarket.perpMarketIndex,\n    Builder(NullPerpEditParams).reduceOnly(true).build(),\n  );\n}\n\nasync function createAndPopulateAlt() {\n  const result = await buildAdminClient();\n  const client = result[0];\n  const admin = result[1];\n\n  const creator = Keypair.fromSecretKey(\n    Buffer.from(JSON.parse(fs.readFileSync(MB_PAYER_KEYPAIR!, 'utf-8'))),\n  );\n  console.log(`Creator ${creator.publicKey.toBase58()}`);\n  const group = await client.getGroupForCreator(creator.publicKey, GROUP_NUM);\n\n  const connection = client.program.provider.connection;\n\n  // Create ALT, and set to group at index 0\n  if (group.addressLookupTables[0].equals(PublicKey.default)) {\n    try {\n      console.log(`ALT: Creating`);\n      const createIx = AddressLookupTableProgram.createLookupTable({\n        authority: admin.publicKey,\n        payer: admin.publicKey,\n        recentSlot: await connection.getSlot('finalized'),\n      });\n      const createTx = await buildVersionedTx(\n        client.program.provider as AnchorProvider,\n        [createIx[0]],\n      );\n      let sig = await connection.sendTransaction(createTx);\n      console.log(\n        `...created ALT ${createIx[1]} https://explorer.solana.com/tx/${sig}`,\n      );\n\n      console.log(`ALT: set at index 0 for group...`);\n      sig = await client.altSet(group, createIx[1], 0);\n      console.log(`...https://explorer.solana.com/tx/${sig}`);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Extend using mango v4 relevant pub keys\n  try {\n    let bankAddresses = Array.from(group.banksMapByMint.values())\n      .flat()\n      .map((bank) => [bank.publicKey, bank.oracle, bank.vault])\n      .flat()\n      .concat(\n        Array.from(group.banksMapByMint.values())\n          .flat()\n          .map((mintInfo) => mintInfo.publicKey),\n      );\n\n    let serum3MarketAddresses = Array.from(\n      group.serum3MarketsMapByExternal.values(),\n    )\n      .flat()\n      .map((serum3Market) => serum3Market.publicKey);\n\n    let serum3ExternalMarketAddresses = Array.from(\n      group.serum3ExternalMarketsMap.values(),\n    )\n      .flat()\n      .map((serum3ExternalMarket) => [\n        serum3ExternalMarket.publicKey,\n        serum3ExternalMarket.bidsAddress,\n        serum3ExternalMarket.asksAddress,\n      ])\n      .flat();\n\n    let perpMarketAddresses = Array.from(\n      group.perpMarketsMapByMarketIndex.values(),\n    )\n      .flat()\n      .map((perpMarket) => [\n        perpMarket.publicKey,\n        perpMarket.oracle,\n        perpMarket.bids,\n        perpMarket.asks,\n        perpMarket.eventQueue,\n      ])\n      .flat();\n\n    async function extendTable(addresses: PublicKey[]) {\n      await group.reloadAll(client);\n      const alt =\n        await client.program.provider.connection.getAddressLookupTable(\n          group.addressLookupTables[0],\n        );\n\n      addresses = addresses.filter(\n        (newAddress) =>\n          alt.value?.state.addresses &&\n          alt.value?.state.addresses.findIndex((addressInALt) =>\n            addressInALt.equals(newAddress),\n          ) === -1,\n      );\n      if (addresses.length === 0) {\n        return;\n      }\n      const extendIx = AddressLookupTableProgram.extendLookupTable({\n        lookupTable: group.addressLookupTables[0],\n        payer: admin.publicKey,\n        authority: admin.publicKey,\n        addresses,\n      });\n      const extendTx = await buildVersionedTx(\n        client.program.provider as AnchorProvider,\n        [extendIx],\n      );\n      let sig = await client.program.provider.connection.sendTransaction(\n        extendTx,\n      );\n      console.log(`https://explorer.solana.com/tx/${sig}`);\n    }\n\n    console.log(`ALT: extending using mango v4 relevant public keys`);\n\n    await extendTable(bankAddresses);\n    await extendTable([OPENBOOK_PROGRAM_ID['mainnet-beta']]);\n    await extendTable(serum3MarketAddresses);\n    await extendTable(serum3ExternalMarketAddresses);\n\n    // TODO: dont extend for perps atm\n    // await extendTable(perpMarketAddresses);\n\n    // Well known addressess\n    await extendTable([\n      SystemProgram.programId,\n      SYSVAR_RENT_PUBKEY,\n      TOKEN_PROGRAM_ID,\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      NATIVE_MINT,\n      SYSVAR_INSTRUCTIONS_PUBKEY,\n      ComputeBudgetProgram.programId,\n    ]);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function main() {\n  try {\n    // await createGroup();\n    // await changeAdmin();\n    // await setDepositLimit();\n  } catch (error) {\n    console.log(error);\n  }\n  try {\n    // await registerTokens();\n    // await changeTokenOracle();\n    // await makeTokenReduceonly();\n    // await changeMaxStalenessSlots();\n    // await changeStartQuote();\n  } catch (error) {\n    console.log(error);\n  }\n  try {\n    // await registerSerum3Markets();\n  } catch (error) {\n    console.log(error);\n  }\n\n  try {\n    // await registerPerpMarkets();\n    // await makePerpMarketReduceOnly();\n  } catch (error) {\n    console.log(error);\n  }\n  try {\n    // await createUser(MB_USER_KEYPAIR!);\n    // depositForUser(MB_USER_KEYPAIR!);\n  } catch (error) {\n    console.log(error);\n  }\n\n  try {\n    // createAndPopulateAlt();\n  } catch (error) {}\n}\n\ntry {\n  main();\n} catch (error) {\n  console.log(error);\n}\n\n////////////////////////////////////////////////////////////\n/// UNUSED /////////////////////////////////////////////////\n////////////////////////////////////////////////////////////\n\nasync function expandMangoAccount(userKeypair: string) {\n  const result = await buildUserClient(userKeypair);\n  const client = result[0];\n  const group = result[1];\n  const user = result[2];\n\n  const mangoAccounts = await client.getMangoAccountsForOwner(\n    group,\n    user.publicKey,\n  );\n  if (!mangoAccounts) {\n    throw new Error(`MangoAccounts not found for user ${user.publicKey}`);\n  }\n\n  for (const mangoAccount of mangoAccounts) {\n    console.log(\n      `...expanding MangoAccount ${mangoAccount.publicKey.toBase58()}`,\n    );\n    await client.expandMangoAccount(group, mangoAccount, 8, 8, 8, 8);\n  }\n}\n\nasync function placeSerum3TradeAndCancelIt(userKeypair: string) {\n  const result = await buildUserClient(userKeypair);\n  const client = result[0];\n  const group = result[1];\n  const user = result[2];\n\n  const mangoAccounts = await client.getMangoAccountsForOwner(\n    group,\n    user.publicKey,\n  );\n  if (!mangoAccounts) {\n    throw new Error(`MangoAccounts not found for user ${user.publicKey}`);\n  }\n\n  for (const mangoAccount of mangoAccounts) {\n    console.log(`...found MangoAccount ${mangoAccount.publicKey.toBase58()}`);\n    console.log(`...placing serum3 order`);\n    await client.serum3PlaceOrder(\n      group,\n      mangoAccount,\n      new PublicKey(MAINNET_SERUM3_MARKETS.get('SOL/USDC')!),\n      Serum3Side.bid,\n      1,\n      1,\n      Serum3SelfTradeBehavior.decrementTake,\n      Serum3OrderType.limit,\n      Date.now(),\n      10,\n    );\n    console.log(`...current own orders on OB`);\n    let orders = await mangoAccount.loadSerum3OpenOrdersForMarket(\n      client,\n      group,\n      new PublicKey(MAINNET_SERUM3_MARKETS.get('SOL/USDC')!),\n    );\n    for (const order of orders) {\n      console.log(order);\n    }\n    console.log(`...cancelling serum3 orders`);\n    await client.serum3CancelAllOrders(\n      group,\n      mangoAccount,\n      new PublicKey(MAINNET_SERUM3_MARKETS.get('SOL/USDC')!),\n      10,\n    );\n    console.log(`...current own orders on OB`);\n    orders = await mangoAccount.loadSerum3OpenOrdersForMarket(\n      client,\n      group,\n      new PublicKey(MAINNET_SERUM3_MARKETS.get('SOL/USDC')!),\n    );\n    for (const order of orders) {\n      console.log(order);\n    }\n  }\n}\n\nasync function deregisterSerum3Markets() {\n  const result = await buildAdminClient();\n  const client = result[0];\n  const admin = result[1];\n\n  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);\n\n  // change xxx/xxx to market of choice\n  let serum3Market = group.getSerum3MarketByName('XXX/XXX');\n  let sig = await client.serum3deregisterMarket(\n    group,\n    serum3Market.serumMarketExternal,\n  );\n  console.log(\n    `...deregistered serum market ${serum3Market.name}, sig https://explorer.solana.com/tx/${sig}`,\n  );\n}\n\nasync function deregisterTokens() {\n  const result = await buildAdminClient();\n  const client = result[0];\n  const admin = result[1];\n\n  const group = await client.getGroupForCreator(admin.publicKey, GROUP_NUM);\n\n  // change -1 to tokenIndex of choice\n  let bank = group.getFirstBankByTokenIndex(-1 as TokenIndex);\n  let sig = await client.tokenDeregister(group, bank.mint);\n  console.log(\n    `...removed token ${bank.name}, sig https://explorer.solana.com/tx/${sig}`,\n  );\n}\n"]}