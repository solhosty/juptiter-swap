{"version":3,"sources":["../ts/client/src/ids.ts","../ts/client/ids.json"],"names":[],"mappings":"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","sourcesContent":["import { Cluster, PublicKey } from '@solana/web3.js';\nimport fetch from 'cross-fetch';\nimport ids from '../ids.json';\nexport class Id {\n  constructor(\n    public cluster: Cluster,\n    public name: string,\n    public publicKey: string,\n    public serum3ProgramId: string,\n    public mangoProgramId: string,\n    public banks: { name: string; publicKey: string; active: boolean }[],\n    public stubOracles: { name: string; publicKey: string }[],\n    public mintInfos: { name: string; publicKey: string }[],\n    public serum3Markets: {\n      name: string;\n      publicKey: string;\n      active: boolean;\n      marketExternal: string;\n    }[],\n    public perpMarkets: { name: string; publicKey: string; active: boolean }[],\n  ) {}\n\n  public getBanks(): PublicKey[] {\n    return Array.from(\n      this.banks\n        .filter((perpMarket) => perpMarket.active)\n        .map((bank) => new PublicKey(bank.publicKey)),\n    );\n  }\n\n  public getStubOracles(): PublicKey[] {\n    return Array.from(\n      this.stubOracles.map((stubOracle) => new PublicKey(stubOracle.publicKey)),\n    );\n  }\n\n  public getMintInfos(): PublicKey[] {\n    return Array.from(\n      this.mintInfos.map((mintInfo) => new PublicKey(mintInfo.publicKey)),\n    );\n  }\n\n  public getSerum3Markets(): PublicKey[] {\n    return Array.from(\n      this.serum3Markets\n        .filter((perpMarket) => perpMarket.active)\n        .map((serum3Market) => new PublicKey(serum3Market.publicKey)),\n    );\n  }\n\n  public getPerpMarkets(): PublicKey[] {\n    return Array.from(\n      this.perpMarkets\n        .filter((perpMarket) => perpMarket.active)\n        .map((perpMarket) => new PublicKey(perpMarket.publicKey)),\n    );\n  }\n\n  static fromIdsByName(name: string): Id {\n    const groupConfig = ids.groups.find((id) => id['name'] === name);\n    if (!groupConfig) throw new Error(`No group config ${name} found in Ids!`);\n    return new Id(\n      groupConfig.cluster as Cluster,\n      groupConfig.name,\n      groupConfig.publicKey,\n      groupConfig.serum3ProgramId,\n      groupConfig.mangoProgramId,\n      groupConfig['banks'],\n      groupConfig['stubOracles'],\n      groupConfig['mintInfos'],\n      groupConfig['serum3Markets'],\n      groupConfig['perpMarkets'],\n    );\n  }\n\n  static fromIdsByPk(groupPk: PublicKey): Id {\n    const groupConfig = ids.groups.find(\n      (id) => id['publicKey'] === groupPk.toString(),\n    );\n    if (!groupConfig)\n      throw new Error(`No group config ${groupPk.toString()} found in Ids!`);\n    return new Id(\n      groupConfig.cluster as Cluster,\n      groupConfig.name,\n      groupConfig.publicKey,\n      groupConfig.serum3ProgramId,\n      groupConfig.mangoProgramId,\n      groupConfig['banks'],\n      groupConfig['stubOracles'],\n      groupConfig['mintInfos'],\n      groupConfig['serum3Markets'],\n      groupConfig['perpMarkets'],\n    );\n  }\n\n  static async fromApi(groupPk: PublicKey): Promise<Id> {\n    const groupMetadataApiUrl =\n      'https://mango-transaction-log.herokuapp.com/v4/group-metadata';\n    const response = await fetch(groupMetadataApiUrl);\n    const jsonData = await response.json();\n\n    const groupConfig = jsonData.groups.find(\n      (group) => group.publicKey === groupPk.toString(),\n    );\n\n    return new Id(\n      groupConfig.cluster as Cluster,\n      groupConfig.name,\n      groupConfig.publicKey,\n      groupConfig.serum3ProgramId,\n      groupConfig.mangoProgramId,\n      groupConfig.tokens.flatMap((t) =>\n        t.banks.map((b) => ({\n          name: t.symbol,\n          mint: t.mint,\n          tokenIndex: t.tokenIndex,\n          bankNum: b.bankNum,\n          publicKey: b.publicKey,\n        })),\n      ),\n      groupConfig.stubOracles.map((s) => ({\n        mint: s.mint,\n        publicKey: s.publicKey,\n      })),\n      groupConfig.tokens.map((t) => ({\n        name: t.symbol,\n        mint: t.mint,\n        tokenIndex: t.tokenIndex,\n        publicKey: t.mintInfo,\n      })),\n      groupConfig.serum3Markets.map((s) => ({\n        name: s.name,\n        publicKey: s.publicKey,\n        marketExternal: s.marketExternal,\n      })),\n      groupConfig.perpMarkets.map((p) => ({\n        name: p.name,\n        publicKey: p.publicKey,\n      })),\n    );\n  }\n}\n","{\n  \"groups\": [\n    {\n      \"cluster\": \"mainnet-beta\",\n      \"name\": \"mainnet-beta.clarkeni\",\n      \"publicKey\": \"DLdcpC6AsAJ9xeKMR3WhHrN5sM5o7GVVXQhQ5vwisTtz\",\n      \"serum3ProgramId\": \"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\",\n      \"mangoProgramId\": \"4MangoMjqJ2firMokCjjGgoK8d4MXcrgL7XJaL3w6fVg\",\n      \"banks\": [\n        {\n          \"name\": \"SOL\",\n          \"publicKey\": \"8Z8ypSDDbC2UWqapP4AqDGbTbxYgh5AKtv1682UYc74o\",\n          \"mint\": \"So11111111111111111111111111111111111111112\",\n          \"tokenIndex\": 5,\n          \"bankNum\": 0,\n          \"active\": true\n        },\n        {\n          \"name\": \"USDT\",\n          \"publicKey\": \"Bid15jgtr5Ppftj7BZdEJbiWFN3R1U3i2PUELA2ZDU1N\",\n          \"mint\": \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\",\n          \"tokenIndex\": 1,\n          \"bankNum\": 0,\n          \"active\": true\n        },\n        {\n          \"name\": \"USDC\",\n          \"publicKey\": \"MZSA6xDJFieoMbydmjWv7FkPCcipmtDC2bxE1qYGvaY\",\n          \"mint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n          \"tokenIndex\": 0,\n          \"bankNum\": 0,\n          \"active\": true\n        },\n        {\n          \"name\": \"BTC\",\n          \"publicKey\": \"JfS9mG5Sonm6eyhQis2DdFSkfFmtoP8kW5UAaXcEWa4\",\n          \"mint\": \"9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E\",\n          \"tokenIndex\": 2,\n          \"bankNum\": 0,\n          \"active\": true\n        },\n        {\n          \"name\": \"soETH\",\n          \"publicKey\": \"549bGbirHQSQ5mnFQNT5zBUs8XMFyK9hNAWRWcpCJzBn\",\n          \"mint\": \"2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk\",\n          \"tokenIndex\": 4,\n          \"bankNum\": 0,\n          \"active\": true\n        },\n        {\n          \"name\": \"ETH\",\n          \"publicKey\": \"2emCTQgGDubaZEdstGXbf9cL4sTgCiSBvWjwk925F4Bd\",\n          \"mint\": \"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\",\n          \"tokenIndex\": 3,\n          \"bankNum\": 0,\n          \"active\": true\n        },\n        {\n          \"name\": \"MSOL\",\n          \"publicKey\": \"2uL6J4aUqpDerWoXejAZQ585SVYLjhBhgQvpBEHeLybb\",\n          \"mint\": \"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\",\n          \"tokenIndex\": 6,\n          \"bankNum\": 0,\n          \"active\": true\n        }\n      ],\n      \"stubOracles\": [\n        {\n          \"name\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n          \"publicKey\": \"F1JkVYh6ouopvmgWgaR9p4DyBTeGweHPumE4PzrvK5ti\"\n        }\n      ],\n      \"mintInfos\": [\n        {\n          \"name\": \"SOL\",\n          \"publicKey\": \"TvWkqqRPT7gRtbAecnYuSgAA11gcQPKJ9eggqt6bM8Q\",\n          \"mint\": \"So11111111111111111111111111111111111111112\",\n          \"tokenIndex\": 5\n        },\n        {\n          \"name\": \"USDT\",\n          \"publicKey\": \"9HGCxDaCfV7L8megn7aSXbQ39DR4BdT2qmvLxVNYgh69\",\n          \"mint\": \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\",\n          \"tokenIndex\": 1\n        },\n        {\n          \"name\": \"USDC\",\n          \"publicKey\": \"9mbfSj6EWVYShL5ozA7hYFghdjKXtx4GXwUygogqK8ZR\",\n          \"mint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n          \"tokenIndex\": 0\n        },\n        {\n          \"name\": \"BTC\",\n          \"publicKey\": \"2rzUjP3ZHR6ZepqwLQ561HzEe2n5Sh1M67AqmzydzzcD\",\n          \"mint\": \"9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E\",\n          \"tokenIndex\": 2\n        },\n        {\n          \"name\": \"soETH\",\n          \"publicKey\": \"BYuxStPHhVfNXXdL1sCAfiYmCzFcpoTtbaBhYqYGaE4D\",\n          \"mint\": \"2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk\",\n          \"tokenIndex\": 4\n        },\n        {\n          \"name\": \"ETH\",\n          \"publicKey\": \"8J9NCLCAwHWk5pzYTSmCZPvmkTJik8M4yXtrgeFHqPha\",\n          \"mint\": \"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\",\n          \"tokenIndex\": 3\n        },\n        {\n          \"name\": \"MSOL\",\n          \"publicKey\": \"DRnvY2SVHuj8YiyyxVHPJu8ZtaXzsgcqxz3Tzf8az3Zx\",\n          \"mint\": \"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\",\n          \"tokenIndex\": 6\n        }\n      ],\n      \"serum3Markets\": [],\n      \"perpMarkets\": []\n    }\n  ]\n}\n"]}