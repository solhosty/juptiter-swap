{"version":3,"sources":["../ts/client/src/accounts/serum3.ts"],"names":[],"mappings":"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","sourcesContent":["import { utf8 } from '@project-serum/anchor/dist/cjs/utils/bytes';\nimport { Market, Orderbook } from '@project-serum/serum/lib/market';\nimport { Cluster, PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { MangoClient } from '../client';\nimport { OPENBOOK_PROGRAM_ID } from '../constants';\nimport { MAX_I80F48, ONE_I80F48, ZERO_I80F48 } from '../numbers/I80F48';\nimport { As } from '../utils';\nimport { TokenIndex } from './bank';\nimport { Group } from './group';\n\nexport type MarketIndex = number & As<'market-index'>;\n\nexport class Serum3Market {\n  public name: string;\n  static from(\n    publicKey: PublicKey,\n    obj: {\n      group: PublicKey;\n      baseTokenIndex: number;\n      quoteTokenIndex: number;\n      name: number[];\n      serumProgram: PublicKey;\n      serumMarketExternal: PublicKey;\n      marketIndex: number;\n      registrationTime: BN;\n      reduceOnly: number;\n    },\n  ): Serum3Market {\n    return new Serum3Market(\n      publicKey,\n      obj.group,\n      obj.baseTokenIndex as TokenIndex,\n      obj.quoteTokenIndex as TokenIndex,\n      obj.name,\n      obj.serumProgram,\n      obj.serumMarketExternal,\n      obj.marketIndex as MarketIndex,\n      obj.registrationTime,\n      obj.reduceOnly == 1,\n    );\n  }\n\n  constructor(\n    public publicKey: PublicKey,\n    public group: PublicKey,\n    public baseTokenIndex: TokenIndex,\n    public quoteTokenIndex: TokenIndex,\n    name: number[],\n    public serumProgram: PublicKey,\n    public serumMarketExternal: PublicKey,\n    public marketIndex: MarketIndex,\n    public registrationTime: BN,\n    public reduceOnly: boolean,\n  ) {\n    this.name = utf8.decode(new Uint8Array(name)).split('\\x00')[0];\n  }\n\n  public async findOoPda(\n    programId: PublicKey,\n    mangoAccount: PublicKey,\n  ): Promise<PublicKey> {\n    const [openOrderPublicKey] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from('Serum3OO'),\n        mangoAccount.toBuffer(),\n        this.publicKey.toBuffer(),\n      ],\n      programId,\n    );\n\n    return openOrderPublicKey;\n  }\n\n  public getFeeRates(taker = true): number {\n    // See https://github.com/openbook-dex/program/blob/master/dex/src/fees.rs#L81\n    const ratesBps =\n      this.name === 'USDT/USDC'\n        ? { maker: -0.5, taker: 1 }\n        : { maker: -2, taker: 4 };\n    return taker ? ratesBps.maker * 0.0001 : ratesBps.taker * 0.0001;\n  }\n\n  /**\n   *\n   * @param group\n   * @returns maximum leverage one can bid on this market, this is only for display purposes,\n   *  also see getMaxQuoteForSerum3BidUi and getMaxBaseForSerum3AskUi\n   */\n  maxBidLeverage(group: Group): number {\n    const baseBank = group.getFirstBankByTokenIndex(this.baseTokenIndex);\n    const quoteBank = group.getFirstBankByTokenIndex(this.quoteTokenIndex);\n    if (\n      quoteBank.initLiabWeight.sub(baseBank.initAssetWeight).lte(ZERO_I80F48())\n    ) {\n      return MAX_I80F48().toNumber();\n    }\n\n    return ONE_I80F48()\n      .div(quoteBank.initLiabWeight.sub(baseBank.initAssetWeight))\n      .toNumber();\n  }\n\n  /**\n   *\n   * @param group\n   * @returns maximum leverage one can ask on this market, this is only for display purposes,\n   *  also see getMaxQuoteForSerum3BidUi and getMaxBaseForSerum3AskUi\n   */\n  maxAskLeverage(group: Group): number {\n    const baseBank = group.getFirstBankByTokenIndex(this.baseTokenIndex);\n    const quoteBank = group.getFirstBankByTokenIndex(this.quoteTokenIndex);\n\n    if (\n      baseBank.initLiabWeight.sub(quoteBank.initAssetWeight).lte(ZERO_I80F48())\n    ) {\n      return MAX_I80F48().toNumber();\n    }\n\n    return ONE_I80F48()\n      .div(baseBank.initLiabWeight.sub(quoteBank.initAssetWeight))\n      .toNumber();\n  }\n\n  public async loadBids(client: MangoClient, group: Group): Promise<Orderbook> {\n    const serum3MarketExternal = group.getSerum3ExternalMarket(\n      this.serumMarketExternal,\n    );\n    return await serum3MarketExternal.loadBids(\n      client.program.provider.connection,\n    );\n  }\n\n  public async loadAsks(client: MangoClient, group: Group): Promise<Orderbook> {\n    const serum3MarketExternal = group.getSerum3ExternalMarket(\n      this.serumMarketExternal,\n    );\n    return await serum3MarketExternal.loadAsks(\n      client.program.provider.connection,\n    );\n  }\n\n  public async logOb(client: MangoClient, group: Group): Promise<string> {\n    let res = ``;\n    res += `  ${this.name} OrderBook`;\n    let orders = await this?.loadAsks(client, group);\n    for (const order of orders!.items(true)) {\n      res += `\\n  ${order.price.toString().padStart(10)}, ${order.size\n        .toString()\n        .padStart(10)}`;\n    }\n    res += `\\n  --------------------------`;\n    orders = await this?.loadBids(client, group);\n    for (const order of orders!.items(true)) {\n      res += `\\n  ${order.price.toString().padStart(10)}, ${order.size\n        .toString()\n        .padStart(10)}`;\n    }\n    return res;\n  }\n}\n\nexport class Serum3SelfTradeBehavior {\n  static decrementTake = { decrementTake: {} };\n  static cancelProvide = { cancelProvide: {} };\n  static abortTransaction = { abortTransaction: {} };\n}\n\nexport class Serum3OrderType {\n  static limit = { limit: {} };\n  static immediateOrCancel = { immediateOrCancel: {} };\n  static postOnly = { postOnly: {} };\n}\n\nexport class Serum3Side {\n  static bid = { bid: {} };\n  static ask = { ask: {} };\n}\n\nexport async function generateSerum3MarketExternalVaultSignerAddress(\n  cluster: Cluster,\n  serum3Market: Serum3Market,\n  serum3MarketExternal: Market,\n): Promise<PublicKey> {\n  return await PublicKey.createProgramAddress(\n    [\n      serum3Market.serumMarketExternal.toBuffer(),\n      serum3MarketExternal.decoded.vaultSignerNonce.toArrayLike(\n        Buffer,\n        'le',\n        8,\n      ),\n    ],\n    OPENBOOK_PROGRAM_ID[cluster],\n  );\n}\n"]}