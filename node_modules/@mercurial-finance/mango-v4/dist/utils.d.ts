import { AnchorProvider } from '@project-serum/anchor';
import { PublicKey, TransactionInstruction, Signer, AddressLookupTableAccount, VersionedTransaction } from '@solana/web3.js';
import BN from 'bn.js';
import { I80F48 } from './numbers/I80F48.js';
import 'big.js';

declare const U64_MAX_BN: any;
declare const I64_MAX_BN: any;
declare function toNativeI80F48ForQuote(uiAmount: number): I80F48;
declare function toNativeI80F48(uiAmount: number, decimals: number): I80F48;
declare function toNative(uiAmount: number, decimals: number): BN;
declare function toUiDecimals(nativeAmount: BN | I80F48 | number, decimals: number): number;
declare function toUiDecimalsForQuote(nativeAmount: BN | I80F48 | number): number;
declare function toUiI80F48(nativeAmount: I80F48, decimals: number): I80F48;
/**
 * Get the address of the associated token account for a given mint and owner
 *
 * @param mint                     Token mint account
 * @param owner                    Owner of the new account
 * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)
 * @param programId                SPL Token program account
 * @param associatedTokenProgramId SPL Associated Token program account
 *
 * @return Address of the associated token account
 */
declare function getAssociatedTokenAddress(mint: PublicKey, owner: PublicKey, allowOwnerOffCurve?: boolean, programId?: PublicKey, associatedTokenProgramId?: PublicKey): Promise<PublicKey>;
declare function createAssociatedTokenAccountIdempotentInstruction(payer: PublicKey, owner: PublicKey, mint: PublicKey): Promise<TransactionInstruction>;
declare function buildVersionedTx(provider: AnchorProvider, ix: TransactionInstruction[], additionalSigners?: Signer[], alts?: AddressLookupTableAccount[]): Promise<VersionedTransaction>;
declare abstract class As<Tag extends keyof never> {
    private static readonly $as$;
    private [As.$as$];
}

export { As, I64_MAX_BN, U64_MAX_BN, buildVersionedTx, createAssociatedTokenAccountIdempotentInstruction, getAssociatedTokenAddress, toNative, toNativeI80F48, toNativeI80F48ForQuote, toUiDecimals, toUiDecimalsForQuote, toUiI80F48 };
