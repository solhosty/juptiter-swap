import { BN } from '@project-serum/anchor';
import { PublicKey } from '@solana/web3.js';
import { I80F48Dto, I80F48 } from '../numbers/I80F48.js';
import { As } from '../utils.js';
import 'big.js';
import 'bn.js';

declare const QUOTE_DECIMALS = 6;
declare type TokenIndex = number & As<'token-index'>;
declare type OracleConfigDto = {
    confFilter: I80F48Dto;
    maxStalenessSlots: BN;
};
declare type OracleConfig = {
    confFilter: I80F48;
    maxStalenessSlots: BN;
};
declare type StablePriceModel = {
    stablePrice: number;
    lastUpdateTimestamp: BN;
    delayPrices: number[];
    delayAccumulatorPrice: number;
    delayAccumulatorTime: number;
    delayIntervalSeconds: number;
    delayGrowthLimit: number;
    stableGrowthLimit: number;
    lastDelayIntervalIndex: number;
};
interface BankForHealth {
    tokenIndex: TokenIndex;
    maintAssetWeight: I80F48;
    initAssetWeight: I80F48;
    maintLiabWeight: I80F48;
    initLiabWeight: I80F48;
    price: I80F48;
    stablePriceModel: StablePriceModel;
    scaledInitAssetWeight(price: I80F48): I80F48;
    scaledInitLiabWeight(price: I80F48): I80F48;
}
declare class Bank implements BankForHealth {
    publicKey: PublicKey;
    group: PublicKey;
    mint: PublicKey;
    vault: PublicKey;
    oracle: PublicKey;
    stablePriceModel: StablePriceModel;
    indexLastUpdated: BN;
    bankRateLastUpdated: BN;
    tokenIndex: TokenIndex;
    mintDecimals: number;
    bankNum: number;
    minVaultToDepositsRatio: number;
    netBorrowLimitWindowSizeTs: BN;
    lastNetBorrowsWindowStartTs: BN;
    netBorrowLimitPerWindowQuote: BN;
    netBorrowsInWindow: BN;
    borrowWeightScaleStartQuote: number;
    depositWeightScaleStartQuote: number;
    reduceOnly: boolean;
    name: string;
    oracleConfig: OracleConfig;
    depositIndex: I80F48;
    borrowIndex: I80F48;
    indexedDeposits: I80F48;
    indexedBorrows: I80F48;
    avgUtilization: I80F48;
    adjustmentFactor: I80F48;
    maxRate: I80F48;
    rate0: I80F48;
    rate1: I80F48;
    util0: I80F48;
    util1: I80F48;
    _price: I80F48 | undefined;
    _uiPrice: number | undefined;
    _oracleLastUpdatedSlot: number | undefined;
    collectedFeesNative: I80F48;
    loanFeeRate: I80F48;
    loanOriginationFeeRate: I80F48;
    initAssetWeight: I80F48;
    maintAssetWeight: I80F48;
    initLiabWeight: I80F48;
    maintLiabWeight: I80F48;
    liquidationFee: I80F48;
    dust: I80F48;
    static from(publicKey: PublicKey, obj: {
        group: PublicKey;
        name: number[];
        mint: PublicKey;
        vault: PublicKey;
        oracle: PublicKey;
        oracleConfig: OracleConfigDto;
        stablePriceModel: StablePriceModel;
        depositIndex: I80F48Dto;
        borrowIndex: I80F48Dto;
        indexedDeposits: I80F48Dto;
        indexedBorrows: I80F48Dto;
        indexLastUpdated: BN;
        bankRateLastUpdated: BN;
        avgUtilization: I80F48Dto;
        adjustmentFactor: I80F48Dto;
        util0: I80F48Dto;
        rate0: I80F48Dto;
        util1: I80F48Dto;
        rate1: I80F48Dto;
        maxRate: I80F48Dto;
        collectedFeesNative: I80F48Dto;
        loanOriginationFeeRate: I80F48Dto;
        loanFeeRate: I80F48Dto;
        maintAssetWeight: I80F48Dto;
        initAssetWeight: I80F48Dto;
        maintLiabWeight: I80F48Dto;
        initLiabWeight: I80F48Dto;
        liquidationFee: I80F48Dto;
        dust: I80F48Dto;
        flashLoanTokenAccountInitial: BN;
        flashLoanApprovedAmount: BN;
        tokenIndex: number;
        mintDecimals: number;
        bankNum: number;
        minVaultToDepositsRatio: number;
        netBorrowLimitWindowSizeTs: BN;
        lastNetBorrowsWindowStartTs: BN;
        netBorrowLimitPerWindowQuote: BN;
        netBorrowsInWindow: BN;
        borrowWeightScaleStartQuote: number;
        depositWeightScaleStartQuote: number;
        reduceOnly: number;
    }): Bank;
    constructor(publicKey: PublicKey, group: PublicKey, name: number[], mint: PublicKey, vault: PublicKey, oracle: PublicKey, oracleConfig: OracleConfigDto, stablePriceModel: StablePriceModel, depositIndex: I80F48Dto, borrowIndex: I80F48Dto, indexedDeposits: I80F48Dto, indexedBorrows: I80F48Dto, indexLastUpdated: BN, bankRateLastUpdated: BN, avgUtilization: I80F48Dto, adjustmentFactor: I80F48Dto, util0: I80F48Dto, rate0: I80F48Dto, util1: I80F48Dto, rate1: I80F48Dto, maxRate: I80F48Dto, collectedFeesNative: I80F48Dto, loanOriginationFeeRate: I80F48Dto, loanFeeRate: I80F48Dto, maintAssetWeight: I80F48Dto, initAssetWeight: I80F48Dto, maintLiabWeight: I80F48Dto, initLiabWeight: I80F48Dto, liquidationFee: I80F48Dto, dust: I80F48Dto, flashLoanTokenAccountInitial: BN, flashLoanApprovedAmount: BN, tokenIndex: TokenIndex, mintDecimals: number, bankNum: number, minVaultToDepositsRatio: number, netBorrowLimitWindowSizeTs: BN, lastNetBorrowsWindowStartTs: BN, netBorrowLimitPerWindowQuote: BN, netBorrowsInWindow: BN, borrowWeightScaleStartQuote: number, depositWeightScaleStartQuote: number, reduceOnly: boolean);
    toString(): string;
    scaledInitAssetWeight(price: I80F48): I80F48;
    scaledInitLiabWeight(price: I80F48): I80F48;
    get price(): I80F48;
    get uiPrice(): number;
    get oracleLastUpdatedSlot(): number;
    nativeDeposits(): I80F48;
    nativeBorrows(): I80F48;
    uiDeposits(): number;
    uiBorrows(): number;
    /**
     *
     * @returns borrow rate, 0 is 0% where 1 is 100%
     */
    getBorrowRate(): I80F48;
    /**
     *
     * @returns borrow rate percentage
     */
    getBorrowRateUi(): number;
    /**
     *
     * @returns deposit rate, 0 is 0% where 1 is 100%
     */
    getDepositRate(): I80F48;
    /**
     *
     * @returns deposit rate percentage
     */
    getDepositRateUi(): number;
}
declare class MintInfo {
    publicKey: PublicKey;
    group: PublicKey;
    tokenIndex: TokenIndex;
    mint: PublicKey;
    banks: PublicKey[];
    vaults: PublicKey[];
    oracle: PublicKey;
    registrationTime: BN;
    groupInsuranceFund: number;
    static from(publicKey: PublicKey, obj: {
        group: PublicKey;
        tokenIndex: number;
        mint: PublicKey;
        banks: PublicKey[];
        vaults: PublicKey[];
        oracle: PublicKey;
        registrationTime: BN;
        groupInsuranceFund: number;
    }): MintInfo;
    constructor(publicKey: PublicKey, group: PublicKey, tokenIndex: TokenIndex, mint: PublicKey, banks: PublicKey[], vaults: PublicKey[], oracle: PublicKey, registrationTime: BN, groupInsuranceFund: number);
    firstBank(): PublicKey;
    firstVault(): PublicKey;
    toString(): string;
}

export { Bank, BankForHealth, MintInfo, OracleConfig, OracleConfigDto, QUOTE_DECIMALS, StablePriceModel, TokenIndex };
