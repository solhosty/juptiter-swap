{"version":3,"sources":["../../ts/client/src/accounts/healthCache.spec.ts"],"names":["hc","maxSwapFn"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,UAAU;AAEnB,SAAS,cAAc;AACvB,SAAS,WAAW,aAAa;AASjC,SAAS,kBACP,YACA,aACA,YACA,OACA,aACe;AACf,SAAO;AAAA,IACL;AAAA,IACA,kBAAkB,OAAO,WAAW,IAAI,WAAW;AAAA,IACnD,iBAAiB,OAAO,WAAW,IAAI,UAAU;AAAA,IACjD,iBAAiB,OAAO,WAAW,IAAI,WAAW;AAAA,IAClD,gBAAgB,OAAO,WAAW,IAAI,UAAU;AAAA,IAChD,OAAO,OAAO,WAAW,KAAK;AAAA,IAC9B,kBAAkB,EAAE,YAAyB;AAAA,IAC7C,uBAAuB,MAAM,OAAO,WAAW,IAAI,UAAU;AAAA,IAC7D,sBAAsB,MAAM,OAAO,WAAW,IAAI,UAAU;AAAA,EAC9D;AACF;AAEA,SAAS,eACP,iBACA,iBACA,gBACA,aACA,OACY;AACZ,SAAO;AAAA,IACL;AAAA,IACA,sBAAsB,OAAO,WAAW,IAAI,eAAe;AAAA,IAC3D,qBAAqB,OAAO,WAAW,IAAI,cAAc;AAAA,IACzD,qBAAqB,OAAO,WAAW,IAAI,eAAe;AAAA,IAC1D,oBAAoB,OAAO,WAAW,IAAI,cAAc;AAAA,IACxD,yBAAyB,OAAO,WAAW,IAAI,IAAI;AAAA,IACnD,wBAAwB,OAAO,WAAW,IAAI,IAAI;AAAA,IAClD,OAAO,OAAO,WAAW,KAAK;AAAA,IAC9B,kBAAkB,EAAE,aAAa,MAAM;AAAA,IACvC,cAAc,IAAI,GAAG,GAAG;AAAA,IACxB,aAAa,IAAI,GAAG,WAAW;AAAA,IAC/B,aAAa,YAAY;AAAA,IACzB,cAAc,YAAY;AAAA,EAC5B;AACF;AAEA,SAAS,gBAAgB,MAAM;AAC7B,KAAG,gBAAgB,MAAM;AACvB,UAAM,aAA4B;AAAA,MAChC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,UAAM,aAA4B;AAAA,MAChC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,UAAM,MAAM,UAAU,SAAS,YAAY,OAAO,WAAW,GAAG,CAAC;AACjE,UAAM,MAAM,UAAU,SAAS,YAAY,OAAO,WAAW,GAAG,CAAC;AAEjE,UAAM,MAAM,WAAW;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,QACE,iBAAiB,IAAI,GAAG,EAAE;AAAA,QAC1B,gBAAgB,IAAI,GAAG,EAAE;AAAA,QACzB,gBAAgB,IAAI,GAAG,CAAC;AAAA,QACxB,eAAe,IAAI,GAAG,CAAC;AAAA,QACvB,wBAAwB,IAAI,GAAG,CAAC;AAAA,MAClC;AAAA,IACF;AAEA,UAAM,KAAK,eAAe,GAAG,KAAK,KAAK,IAAI,WAAW,MAAM,SAAS,CAAC;AACtE,UAAM,KAAK,IAAI;AAAA,MACb,GAAG;AAAA,MACH;AAAA,MACA,IAAI,GAAG,CAAC;AAAA,MACR,IAAI,GAAG,CAAC;AAAA,MACR,OAAO,WAAW,IAAI;AAAA,MACtB,IAAI,GAAG,CAAC;AAAA,MACR,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,IAAI,GAAG,CAAC;AAAA,MACR,IAAI,GAAG,EAAE;AAAA,MACT,IAAI,GAAG,CAAC;AAAA,MACR,IAAI,GAAG,CAAC;AAAA,MACR;AAAA,MACA;AAAA,MACA,IAAI,GAAG,CAAC;AAAA,MACR,IAAI,GAAG,CAAC;AAAA,MACR,IAAI,GAAG,CAAC;AAAA,MACR;AAAA,MACA,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,IAAI,GAAG,CAAC;AAAA,MACR,YAAY;AAAA,IACd;AACA,UAAM,MAAM,SAAS,iBAAiB,IAAI,EAAE;AAE5C,UAAM,KAAK,IAAI,YAAY,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC;AAGnD,UAAM,WAAW,MAAQ,IAAM,KAAO,KAAO,KAAO,MAAQ;AAE5D,UAAM,WAAW,MAAQ,KAAO,IAAM;AAEtC,UAAM,WACH,IAAM,IAAM,KAAO,KAAO,IAAM,OAChC,OAAS,IAAM,MAAQ,IAAM,KAAO;AAEvC,UAAM,SAAS,GAAG,OAAO,WAAW,IAAI,EAAE,SAAS;AACnD,YAAQ;AAAA,MACN,aAAa,OACV,QAAQ,CAAC,EACT;AAAA,QACC;AAAA,MACF;AAAA,IACJ;AAEA,WAAO,UAAU,UAAU,UAAU,QAAQ,EAAE,SAAS,IAAS;AAAA,EACnE,CAAC;AAED,KAAG,gBAAgB,CAAC,SAAS;AAC3B,aAAS,YAAY,SASZ;AACP,YAAM,QAAuB;AAAA,QAC3B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,YAAM,QAAuB;AAAA,QAC3B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,YAAM,QAAuB;AAAA,QAC3B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,YAAM,MAAM,UAAU,SAAS,OAAO,OAAO,WAAW,QAAQ,MAAM,CAAC;AACvE,YAAM,MAAM,UAAU,SAAS,OAAO,OAAO,WAAW,QAAQ,MAAM,CAAC;AACvE,YAAM,MAAM,UAAU,SAAS,OAAO,OAAO,WAAW,QAAQ,MAAM,CAAC;AAEvE,YAAM,MAAM,WAAW;AAAA,QACrB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,UACE,iBAAiB,IAAI,GAAG,QAAQ,KAAK,CAAC,CAAC;AAAA,UACvC,gBAAgB,IAAI,GAAG,QAAQ,KAAK,CAAC,CAAC;AAAA,UACtC,gBAAgB,IAAI,GAAG,CAAC;AAAA,UACxB,eAAe,IAAI,GAAG,CAAC;AAAA,UACvB,wBAAwB,IAAI,GAAG,CAAC;AAAA,QAClC;AAAA,MACF;AAEA,YAAM,MAAM,WAAW;AAAA,QACrB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,UACE,iBAAiB,IAAI,GAAG,QAAQ,KAAK,CAAC,CAAC;AAAA,UACvC,gBAAgB,IAAI,GAAG,QAAQ,KAAK,CAAC,CAAC;AAAA,UACtC,gBAAgB,IAAI,GAAG,CAAC;AAAA,UACxB,eAAe,IAAI,GAAG,CAAC;AAAA,UACvB,wBAAwB,IAAI,GAAG,CAAC;AAAA,QAClC;AAAA,MACF;AAEA,YAAM,KAAK,eAAe,GAAG,KAAK,KAAK,IAAI,MAAM,MAAM,SAAS,CAAC;AACjE,YAAM,KAAK,IAAI;AAAA,QACb,GAAG;AAAA,QACH;AAAA,QACA,IAAI,GAAG,CAAC;AAAA,QACR,IAAI,GAAG,QAAQ,MAAM,CAAC,CAAC;AAAA,QACvB,OAAO,WAAW,QAAQ,MAAM,CAAC,CAAC;AAAA,QAClC,IAAI,GAAG,CAAC;AAAA,QACR,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,IAAI,GAAG,QAAQ,MAAM,CAAC,CAAC;AAAA,QACvB,IAAI,GAAG,QAAQ,MAAM,CAAC,CAAC;AAAA,QACvB,IAAI,GAAG,CAAC;AAAA,QACR,IAAI,GAAG,CAAC;AAAA,QACR;AAAA,QACA;AAAA,QACA,IAAI,GAAG,CAAC;AAAA,QACR,IAAI,GAAG,CAAC;AAAA,QACR,IAAI,GAAG,CAAC;AAAA,QACR;AAAA,QACA,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,IAAI,GAAG,CAAC;AAAA,QACR,YAAY;AAAA,MACd;AACA,YAAM,MAAM,SAAS,iBAAiB,IAAI,EAAE;AAE5C,YAAM,KAAK,IAAI,YAAY,CAAC,KAAK,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC;AAC7D,YAAM,SAAS,GAAG,OAAO,WAAW,IAAI,EAAE,SAAS;AACnD,cAAQ;AAAA,QACN,YAAY,QAAQ,gBAAgB,OACjC,QAAQ,CAAC,EACT,SAAS,EAAE,eAAe,QAAQ;AAAA,MACvC;AACA,aAAO,SAAS,QAAQ,cAAc,EAAE,SAAS,IAAS;AAAA,IAC5D;AAEA,UAAM,YAAY;AAClB,UAAM,kBAAkB,KAAO;AAE/B,gBAAY;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM,CAAC,IAAI,EAAE;AAAA,MACb,MAAM,CAAC,GAAG,CAAC;AAAA,MACX,OAAO,CAAC,GAAG,MAAM,GAAG,EAAE;AAAA,MACtB;AAAA;AAAA,SAEG,OAAS,KAAO,KAAO,cAAc;AAAA,QAEtC,KAAO,YAAY;AAAA,SAElB,IAAM,KAAO,kBAAkB,OAC/B,OAAS,IAAM;AAAA;AAAA,IACpB,CAAC;AAED,gBAAY;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM,CAAC,IAAI,EAAE;AAAA,MACb,MAAM,CAAC,GAAG,CAAC;AAAA,MACX,OAAO,CAAC,KAAK,MAAM,GAAG,EAAE;AAAA,MACxB;AAAA;AAAA,QAEE,OAAS;AAAA,SAER,KAAO,aAAa,KAAO,KAAO,cAAc;AAAA,SAEhD,MAAQ,MAAQ,kBAAkB,OAClC,OAAS,KAAO;AAAA;AAAA,IACrB,CAAC;AAED,gBAAY;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM,CAAC,GAAG,CAAC;AAAA,MACX,MAAM,CAAC,GAAG,CAAC;AAAA,MACX,OAAO,CAAC,IAAI,KAAK,GAAG,CAAC;AAAA,MACrB,gBAAgB,QAAQ,MAAQ,MAAM,IAAM;AAAA,IAC9C,CAAC;AAED,gBAAY;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM,CAAC,GAAG,CAAC;AAAA,MACX,MAAM,CAAC,GAAG,CAAC;AAAA,MACX,OAAO,CAAC,GAAG,MAAM,GAAG,CAAC;AAAA,MACrB,gBAAgB,OAAS,MAAM,IAAM;AAAA,IACvC,CAAC;AAED,gBAAY;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM,CAAC,GAAG,CAAC;AAAA,MACX,MAAM,CAAC,GAAG,CAAC;AAAA,MACX,OAAO,CAAC,IAAI,KAAK,GAAG,CAAC;AAAA,MACrB,gBAAgB,QAAQ,MAAQ,MAAM,KAAO;AAAA,IAC/C,CAAC;AAED,gBAAY;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM,CAAC,GAAG,CAAC;AAAA,MACX,MAAM,CAAC,GAAG,CAAC;AAAA,MACX,OAAO,CAAC,IAAI,MAAM,GAAG,CAAC;AAAA,MACtB,gBAAgB,QAAQ,OAAS,MAAM,KAAO;AAAA,IAChD,CAAC;AAED,gBAAY;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM,CAAC,GAAG,CAAC;AAAA,MACX,MAAM,CAAC,GAAG,CAAC;AAAA,MACX,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,MAClB;AAAA;AAAA,QAEE,OAAS,MACT,KAAO,IAAM,MACb,KAAO,KAAO;AAAA,SAEb,IAAM,KAAO;AAAA,SAEb,IAAM,MAAQ;AAAA;AAAA,IACnB,CAAC;AAED,gBAAY;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM,CAAC,GAAG,CAAC;AAAA,MACX,MAAM,CAAC,GAAG,CAAC;AAAA,MACX,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,MAClB,gBACE,MAAQ,MACR,KAAO,IAAM,MACb,KAAO,KAAO;AAAA,MAEd,IAAM,MACN,IAAM;AAAA,MAEN,IAAM,MACN,IAAM;AAAA,IACV,CAAC;AAED,gBAAY;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM,CAAC,GAAG,CAAC;AAAA,MACX,MAAM,CAAC,IAAI,CAAC;AAAA,MACZ,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,MAClB;AAAA;AAAA,QAEE,OAAS,MACT,MAAQ,IAAM,MACd,KAAO;AAAA,QAEP,KAAO,MACP,KAAO;AAAA;AAAA,IACX,CAAC;AAED,gBAAY;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM,CAAC,KAAK,CAAC;AAAA,MACb,MAAM,CAAC,IAAI,CAAC;AAAA,MACZ,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,MAClB;AAAA;AAAA,QAEE,OAAS,MACT,MAAQ,IAAM,MACd,KAAO;AAAA,QAEP,KAAO,MACP,KAAO;AAAA,QAEP,KAAO;AAAA;AAAA,IACX,CAAC;AAED,SAAK;AAAA,EACP,CAAC;AAED,KAAG,iBAAiB,CAAC,SAAS;AAC5B,UAAM,KAAK,kBAAkB,GAAiB,KAAK,KAAK,GAAG,CAAC;AAC5D,UAAM,KAAK,kBAAkB,GAAiB,KAAK,KAAK,GAAG,CAAC;AAC5D,UAAM,KAAK,kBAAkB,GAAiB,KAAK,KAAK,GAAG,CAAC;AAC5D,UAAM,QAAQ,CAAC,IAAI,IAAI,EAAE;AACzB,UAAM,KAAK,IAAI;AAAA,MACb;AAAA,QACE,UAAU,SAAS,IAAI,OAAO,WAAW,CAAC,CAAC;AAAA,QAC3C,UAAU,SAAS,IAAI,OAAO,WAAW,CAAC,CAAC;AAAA,QAC3C,UAAU,SAAS,IAAI,OAAO,WAAW,CAAC,CAAC;AAAA,MAC7C;AAAA,MACA,CAAC;AAAA,MACD,CAAC;AAAA,IACH;AAEA;AAAA,MACE,GACG;AAAA,QACC;AAAA,QACA;AAAA,QACA,OAAO,WAAW,IAAI,CAAC;AAAA,QACvB,OAAO,WAAW,EAAE;AAAA,MACtB,EACC,SAAS;AAAA,IACd,EAAE,SAAS,IAAS;AAEpB,aAAS,kBACPA,KACA,QACA,QACA,UACA,aACAC,YACU;AACV,YAAM,WAAwB,UAAUD,GAAE;AAE1C,YAAM,cAAc,SAAS,WAAW,MAAM,EAAE;AAChD,YAAM,cAAc,SAAS,WAAW,MAAM,EAAE;AAChD,YAAM,YAAY,OAAO,WAAW,WAAW,EAC5C,IAAI,YAAY,MAAM,EACtB,IAAI,YAAY,MAAM;AACzB,YAAM,eAAe,SAAS;AAAA,QAC5B,MAAM,MAAM;AAAA,QACZ,MAAM,MAAM;AAAA,QACZ;AAAA,QACA,OAAO,WAAW,QAAQ;AAAA,QAC1BC;AAAA,MACF;AAEA,eAAS,eAAe,QAAwB;AAE9C,cAAM,gBAA6B,UAAU,QAAQ;AACrD,iBAAS,WAAW,MAAM,EAAE,cAAc,KAAK,MAAM;AACrD,iBAAS,WAAW,MAAM,EAAE,cAAc,KAAK,OAAO,IAAI,SAAS,CAAC;AACpE,eAAOA,WAAU,aAAa;AAAA,MAChC;AAEA,aAAO;AAAA,QACL,aAAa,SAAS;AAAA,QACtB,eAAe,YAAY,EAAE,SAAS;AAAA,QACtC,eAAe,aAAa,IAAI,WAAW,CAAC,CAAC,EAAE,SAAS;AAAA,QACxD,eAAe,aAAa,IAAI,WAAW,CAAC,CAAC,EAAE,SAAS;AAAA,MAC1D;AAAA,IACF;AAEA,aAAS,mBACPD,KACA,QACA,QACA,UACA,aACAC,YACM;AACN,YAAM,CAAC,cAAc,aAAa,YAAY,SAAS,IACrD,kBAAkBD,KAAI,QAAQ,QAAQ,UAAU,aAAaC,UAAS;AACxE,cAAQ;AAAA,QACN,gBAAgB,aAAa,2BAA2B,wBAAwB,oBAAoB,cAAc,eAAe,sBAAsB;AAAA,MACzJ;AACA,UAAI,cAAc,UAAU;AAE1B,eAAO,YAAY,WAAW;AAAA,MAChC,OAAO;AACL,eAAO,eAAe,QAAQ;AAG9B,eAAO,cAAc,WAAW,KAAK,YAAY,QAAQ;AAAA,MAC3D;AAAA,IACF;AAEA,aAAS,eAAeD,KAAyB;AAC/C,aAAOA,IAAG,YAAY,WAAW,IAAI;AAAA,IACvC;AAEA,aAAS,UAAUA,KAAyB;AAC1C,aAAOA,IAAG,OAAO,WAAW,IAAI;AAAA,IAClC;AAEA,eAAW,MAAM,CAAC,WAAW,cAAc,GAAG;AAC5C;AACE,gBAAQ,IAAI,WAAW;AAEvB,cAAM,WAAwB,UAAU,EAAE;AAC1C,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,GAAG,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QACjE;AAEA,mBAAW,eAAe,CAAC,KAAK,KAAK,GAAG,GAAG;AACzC,qBAAW,UAAU,MAAM,GAAG,KAAK,CAAC,GAAG;AACrC;AAAA,cACE;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA;AAAA,cACE;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA;AAAA,cACE;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAGA,eAAO,WAAY;AACjB;AAAA,YACE;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,QACF,CAAC,EAAE,GAAG,MAAM,qBAAqB;AAAA,MACnC;AAEA;AACE,gBAAQ,IAAI,WAAW;AACvB,cAAM,WAAwB,UAAU,EAAE;AAE1C,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,GAAG,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QACjE;AACA,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,GAAG,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QACjE;AAEA,mBAAW,eAAe,CAAC,KAAK,KAAK,GAAG,GAAG;AACzC,qBAAW,UAAU,MAAM,GAAG,KAAK,CAAC,GAAG;AACrC;AAAA,cACE;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA;AAAA,cACE;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA;AAAA,cACE;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA;AAAA,cACE;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA;AACE,gBAAQ,IAAI,WAAW;AACvB,cAAM,WAAwB,UAAU,EAAE;AAE1C,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,GAAG,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QACjE;AACA,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,GAAG,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QACjE;AAEA;AAAA,UACE;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UAEA;AAAA,QACF;AAAA,MACF;AAEA;AACE,gBAAQ,IAAI,WAAW;AACvB,cAAM,WAAwB,UAAU,EAAE;AAE1C,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,GAAG,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QACjE;AACA,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,GAAG,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QACjE;AACA,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,GAAG,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QACjE;AAIA,cAAM,YAAY,SAAS,YAAY,WAAW,IAAI,EAAE,SAAS;AACjE,cAAM,CAAC,QAAQ,WAAW,IAAI;AAAA,UAC5B;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA,eAAO,cAAc,IAAM,SAAS;AACpC,eAAO,SAAS,MAAM,CAAC,EAAE,SAAS,CAAC;AAAA,MACrC;AAEA;AACE,gBAAQ,IAAI,WAAW;AACvB,cAAM,WAAwB,UAAU,EAAE;AAE1C,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,GAAG,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QACjE;AACA,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,EAAE,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QAChE;AACA,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,GAAG,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QACjE;AAEA,cAAM,YAAY,SAAS,YAAY,WAAW,IAAI;AACtD,eAAO,UAAU,SAAS,CAAC,EAAE,YAAY,CAAC;AAC1C,eAAO,UAAU,SAAS,CAAC,EAAE,SAAS,CAAC;AAEvC;AAAA,UACE;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA;AAAA,UACE;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA;AAAA,UACE;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAIA;AACE,gBAAQ,IAAI,WAAW;AACvB,cAAM,WAAwB,UAAU,EAAE;AAC1C,iBAAS,cAAc;AAAA,UACrB,IAAI;AAAA,YACF,OAAO,WAAW,KAAK,CAAC;AAAA,YACxB,OAAO,WAAW,KAAK,CAAC;AAAA,YACxB;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,QACF;AAGA,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,GAAG,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QACjE;AACA,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,GAAG,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QACjE;AACA,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,GAAG,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QACjE;AAEA,mBAAW,eAAe,CAAC,KAAK,GAAG,GAAG;AACpC,qBAAW,UAAU,MAAM,GAAG,KAAK,CAAC,GAAG;AACrC;AAAA,cACE;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA;AAAA,cACE;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA;AAAA,cACE;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA;AAAA,cACE;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA;AAAA,cACE;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA;AAAA,cACE;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA;AAEE,gBAAQ,IAAI,WAAW;AACvB,cAAM,WAAwB,UAAU,EAAE;AAG1C,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,GAAG,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QACjE;AACA,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,EAAE,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QAChE;AACA,eAAO,SAAS,OAAO,WAAW,IAAI,EAAE,SAAS,IAAI,CAAC;AAEtD,mBAAW,eAAe,CAAC,KAAK,GAAG,GAAG;AACpC,qBAAW,UAAU,MAAM,GAAG,KAAK,CAAC,GAAG;AACrC;AAAA,cACE;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA;AAEE,gBAAQ,IAAI,WAAW;AACvB,cAAM,WAAwB,UAAU,EAAE;AAG1C,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,GAAG,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QACjE;AACA,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,EAAE,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QAChE;AACA,eAAO,SAAS,OAAO,WAAW,IAAI,EAAE,SAAS,IAAI,CAAC;AAEtD,mBAAW,eAAe,CAAC,KAAK,GAAG,GAAG;AACpC,qBAAW,UAAU,MAAM,GAAG,KAAK,CAAC,GAAG;AACrC;AAAA,cACE;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA;AAEE,gBAAQ,IAAI,WAAW;AACvB,cAAM,WAAwB,UAAU,EAAE;AAG1C,iBAAS,WAAW,CAAC,EAAE,cAAc;AAAA,UACnC,OAAO,WAAW,EAAE,EAAE,IAAI,SAAS,WAAW,CAAC,EAAE,OAAO,MAAM;AAAA,QAChE;AACA,iBAAS,WAAW,CAAC,EAAE,kBAAkB,YAAY;AACrD;AAAA,UACE;AAAA,YACE;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF,EAAE,CAAC,IAAI;AAAA,QACT;AAEA,mBAAW,eAAe,CAAC,KAAK,GAAG,GAAG;AACpC,qBAAW,UAAU,MAAM,GAAG,KAAK,CAAC,GAAG;AACrC;AAAA,cACE;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,SAAK;AAAA,EACP,CAAC;AAED,KAAG,iBAAiB,CAAC,SAAS;AAC5B,UAAM,cAAc;AACpB,UAAM,KAAK,kBAAkB,GAAiB,GAAK,GAAK,GAAG,CAAC;AAC5D,UAAM,KAAK,eAAe,GAAG,KAAK,KAAK,aAAa,CAAC;AACrD,UAAM,KAAK,IAAI;AAAA,MACb,CAAC,UAAU,SAAS,IAAI,OAAO,WAAW,CAAC,CAAC,CAAC;AAAA,MAC7C,CAAC;AAAA,MACD,CAAC,SAAS,oBAAoB,EAAE,CAAC;AAAA,IACnC;AAEA,WAAO,GAAG,OAAO,WAAW,IAAI,EAAE,SAAS,CAAC,EAAE,OAAO,CAAC;AAEtD;AAAA,MACE,GACG;AAAA,QACC;AAAA,QACA,OAAO,WAAW,CAAC;AAAA,QACnB,cAAc;AAAA,QACd,OAAO,WAAW,EAAE;AAAA,MACtB,EACC,SAAS;AAAA,IACd,EAAE,OAAO,CAAC;AAEV,aAAS,aACPA,KACA,MACA,OACA,aACU;AACV,YAAM,SAASA,IAAG,UAAU,CAAC,EAAE;AAC/B,YAAM,aAAa,OAAO,WAAW,WAAW,EAAE,IAAI,OAAO,MAAM;AACnE,YAAM,YAAYA,IACf;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,QACA,OAAO,WAAW,KAAK;AAAA,MACzB,EACC,SAAS;AAEZ,YAAM,YAAY,QAAQ,cAAc,MAAM,IAAI;AAGlD,YAAM,YAAY,YAAY;AAC9B,UAAI,aAAa,OAAO,WAAW,SAAS,EAAE;AAAA,QAC5C,OAAO,WAAW,WAAW;AAAA,MAC/B;AACA,UAAI,UAAuB,UAAUA,GAAE;AACvC,cAAQ,UAAU,CAAC,EAAE,SAAS,KAAK,IAAI,GAAG,SAAS,CAAC;AACpD,cAAQ,UAAU,CAAC,EAAE,MAAM,KAAK,WAAW,IAAI,UAAU,CAAC;AAC1D,YAAM,cAAc,QAAQ,YAAY,WAAW,IAAI;AAGvD,YAAM,YAAY,aAAa,YAAY;AAC3C,mBAAa,OAAO,WAAW,YAAY,WAAW;AACtD,gBAAU,UAAUA,GAAE;AACtB,cAAQ,UAAU,CAAC,EAAE,SAAS,KAAK,IAAI,GAAG,SAAS,CAAC;AACpD,cAAQ,UAAU,CAAC,EAAE,MAAM,KAAK,WAAW,IAAI,UAAU,CAAC;AAC1D,YAAM,YAAY,QAAQ,YAAY,WAAW,IAAI;AAErD,aAAO,CAAC,WAAW,YAAY,SAAS,GAAG,UAAU,SAAS,CAAC;AAAA,IACjE;AAEA,aAAS,cACPA,KACA,MACA,OACA,aACM;AACN,YAAM,CAAC,UAAU,aAAa,SAAS,IAAI;AAAA,QACzCA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,cAAQ;AAAA,QACN,8BAA8B,6BAA6B,wBAAwB,4BAA4B,yBAAyB;AAAA,MAC1I;AACA,aAAO,KAAK,EAAE,SAAS,WAAW;AAClC,aAAO,YAAY,GAAG,EAAE,gBAAgB,KAAK;AAAA,IAC/C;AAGA,OAAG,WAAW,CAAC,EAAE,cAAc,KAAK,OAAO,WAAW,GAAI,CAAC;AAC3D,eAAW,YAAY,CAAC,IAAI,GAAG,CAAC,GAAG;AACjC,YAAM,UAAuB,UAAU,EAAE;AACzC,cAAQ,UAAU,CAAC,EAAE,SAAS,KAAK,IAAI,GAAG,QAAQ,CAAC;AACnD,cAAQ,UAAU,CAAC,EAAE,MAAM;AAAA,QACzB,OAAO,WAAW,WAAW,cAAc,CAAC;AAAA,MAC9C;AACA,iBAAW,QAAQ,CAAC,cAAc,KAAK,cAAc,GAAG,GAAG;AACzD,gBAAQ;AAAA,UACN,YAAY,YAAY,SAAS,cAAc,MAAM,QAAQ;AAAA,QAC/D;AACA,mBAAW,eAAe,CAAC,KAAK,GAAK,GAAG,GAAG;AACzC,qBAAW,SAAS,MAAM,GAAG,KAAK,CAAC,GAAG;AACpC,0BAAc,SAAS,MAAM,OAAO,WAAW;AAAA,UACjD;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGA,kBAAc,IAAI,cAAc,KAAK,IAAI,CAAC;AAC1C,kBAAc,IAAI,cAAc,KAAK,IAAI,GAAG;AAG5C,WAAO,WAAY;AACjB,mBAAa,IAAI,cAAc,KAAK,IAAI,GAAG;AAAA,IAC7C,CAAC,EAAE,GAAG,MAAM;AACZ,WAAO,WAAY;AACjB,mBAAa,IAAI,cAAc,KAAK,IAAI,GAAG;AAAA,IAC7C,CAAC,EAAE,GAAG,MAAM;AAEZ,SAAK;AAAA,EACP,CAAC;AACH,CAAC","sourcesContent":["import { BN } from '@project-serum/anchor';\nimport { OpenOrders } from '@project-serum/serum';\nimport { expect } from 'chai';\nimport { cloneDeep, range } from 'lodash';\n\nimport { I80F48, ONE_I80F48, ZERO_I80F48 } from '../numbers/I80F48';\nimport { BankForHealth, StablePriceModel, TokenIndex } from './bank';\nimport { HealthCache, PerpInfo, Serum3Info, TokenInfo } from './healthCache';\nimport { HealthType, PerpPosition } from './mangoAccount';\nimport { PerpMarket, PerpOrderSide } from './perp';\nimport { MarketIndex } from './serum3';\n\nfunction mockBankAndOracle(\n  tokenIndex: TokenIndex,\n  maintWeight: number,\n  initWeight: number,\n  price: number,\n  stablePrice: number,\n): BankForHealth {\n  return {\n    tokenIndex,\n    maintAssetWeight: I80F48.fromNumber(1 - maintWeight),\n    initAssetWeight: I80F48.fromNumber(1 - initWeight),\n    maintLiabWeight: I80F48.fromNumber(1 + maintWeight),\n    initLiabWeight: I80F48.fromNumber(1 + initWeight),\n    price: I80F48.fromNumber(price),\n    stablePriceModel: { stablePrice: stablePrice } as StablePriceModel,\n    scaledInitAssetWeight: () => I80F48.fromNumber(1 - initWeight),\n    scaledInitLiabWeight: () => I80F48.fromNumber(1 + initWeight),\n  };\n}\n\nfunction mockPerpMarket(\n  perpMarketIndex: number,\n  maintBaseWeight: number,\n  initBaseWeight: number,\n  baseLotSize: number,\n  price: number,\n): PerpMarket {\n  return {\n    perpMarketIndex,\n    maintBaseAssetWeight: I80F48.fromNumber(1 - maintBaseWeight),\n    initBaseAssetWeight: I80F48.fromNumber(1 - initBaseWeight),\n    maintBaseLiabWeight: I80F48.fromNumber(1 + maintBaseWeight),\n    initBaseLiabWeight: I80F48.fromNumber(1 + initBaseWeight),\n    maintOverallAssetWeight: I80F48.fromNumber(1 - 0.02),\n    initOverallAssetWeight: I80F48.fromNumber(1 - 0.05),\n    price: I80F48.fromNumber(price),\n    stablePriceModel: { stablePrice: price } as StablePriceModel,\n    quoteLotSize: new BN(100),\n    baseLotSize: new BN(baseLotSize),\n    longFunding: ZERO_I80F48(),\n    shortFunding: ZERO_I80F48(),\n  } as unknown as PerpMarket;\n}\n\ndescribe('Health Cache', () => {\n  it('test_health0', () => {\n    const sourceBank: BankForHealth = mockBankAndOracle(\n      1 as TokenIndex,\n      0.1,\n      0.2,\n      1,\n      1,\n    );\n    const targetBank: BankForHealth = mockBankAndOracle(\n      4 as TokenIndex,\n      0.3,\n      0.5,\n      5,\n      5,\n    );\n\n    const ti1 = TokenInfo.fromBank(sourceBank, I80F48.fromNumber(100));\n    const ti2 = TokenInfo.fromBank(targetBank, I80F48.fromNumber(-10));\n\n    const si1 = Serum3Info.fromOoModifyingTokenInfos(\n      1,\n      ti2,\n      0,\n      ti1,\n      2 as MarketIndex,\n      {\n        quoteTokenTotal: new BN(21),\n        baseTokenTotal: new BN(18),\n        quoteTokenFree: new BN(1),\n        baseTokenFree: new BN(3),\n        referrerRebatesAccrued: new BN(2),\n      } as any as OpenOrders,\n    );\n\n    const pM = mockPerpMarket(9, 0.1, 0.2, 10, targetBank.price.toNumber());\n    const pp = new PerpPosition(\n      pM.perpMarketIndex,\n      0,\n      new BN(0),\n      new BN(3),\n      I80F48.fromNumber(-310),\n      new BN(0),\n      ZERO_I80F48(),\n      ZERO_I80F48(),\n      new BN(7),\n      new BN(11),\n      new BN(1),\n      new BN(2),\n      0,\n      0,\n      new BN(0),\n      new BN(0),\n      new BN(0),\n      0,\n      ZERO_I80F48(),\n      ZERO_I80F48(),\n      new BN(0),\n      ZERO_I80F48(),\n    );\n    const pi1 = PerpInfo.fromPerpPosition(pM, pp);\n\n    const hc = new HealthCache([ti1, ti2], [si1], [pi1]);\n\n    // for bank1/oracle1, including open orders (scenario: bids execute)\n    const health1 = (100.0 + 1.0 + 2.0 + (20.0 + 15.0 * 5.0)) * 0.8;\n    // for bank2/oracle2\n    const health2 = (-10.0 + 3.0) * 5.0 * 1.5;\n    // for perp (scenario: bids execute)\n    const health3 =\n      (3.0 + 7.0 + 1.0) * 10.0 * 5.0 * 0.8 +\n      (-310.0 + 2.0 * 100.0 - 7.0 * 10.0 * 5.0);\n\n    const health = hc.health(HealthType.init).toNumber();\n    console.log(\n      ` - health ${health\n        .toFixed(3)\n        .padStart(\n          10,\n        )}, case \"test that includes all the side values (like referrer_rebates_accrued)\"`,\n    );\n\n    expect(health - (health1 + health2 + health3)).lessThan(0.0000001);\n  });\n\n  it('test_health1', (done) => {\n    function testFixture(fixture: {\n      name: string;\n      token1: number;\n      token2: number;\n      token3: number;\n      oo12: [number, number];\n      oo13: [number, number];\n      perp1: [number, number, number, number];\n      expectedHealth: number;\n    }): void {\n      const bank1: BankForHealth = mockBankAndOracle(\n        1 as TokenIndex,\n        0.1,\n        0.2,\n        1,\n        1,\n      );\n      const bank2: BankForHealth = mockBankAndOracle(\n        4 as TokenIndex,\n        0.3,\n        0.5,\n        5,\n        5,\n      );\n      const bank3: BankForHealth = mockBankAndOracle(\n        5 as TokenIndex,\n        0.3,\n        0.5,\n        10,\n        10,\n      );\n\n      const ti1 = TokenInfo.fromBank(bank1, I80F48.fromNumber(fixture.token1));\n      const ti2 = TokenInfo.fromBank(bank2, I80F48.fromNumber(fixture.token2));\n      const ti3 = TokenInfo.fromBank(bank3, I80F48.fromNumber(fixture.token3));\n\n      const si1 = Serum3Info.fromOoModifyingTokenInfos(\n        1,\n        ti2,\n        0,\n        ti1,\n        2 as MarketIndex,\n        {\n          quoteTokenTotal: new BN(fixture.oo12[0]),\n          baseTokenTotal: new BN(fixture.oo12[1]),\n          quoteTokenFree: new BN(0),\n          baseTokenFree: new BN(0),\n          referrerRebatesAccrued: new BN(0),\n        } as any as OpenOrders,\n      );\n\n      const si2 = Serum3Info.fromOoModifyingTokenInfos(\n        2,\n        ti3,\n        0,\n        ti1,\n        2 as MarketIndex,\n        {\n          quoteTokenTotal: new BN(fixture.oo13[0]),\n          baseTokenTotal: new BN(fixture.oo13[1]),\n          quoteTokenFree: new BN(0),\n          baseTokenFree: new BN(0),\n          referrerRebatesAccrued: new BN(0),\n        } as any as OpenOrders,\n      );\n\n      const pM = mockPerpMarket(9, 0.1, 0.2, 10, bank2.price.toNumber());\n      const pp = new PerpPosition(\n        pM.perpMarketIndex,\n        0,\n        new BN(0),\n        new BN(fixture.perp1[0]),\n        I80F48.fromNumber(fixture.perp1[1]),\n        new BN(0),\n        ZERO_I80F48(),\n        ZERO_I80F48(),\n        new BN(fixture.perp1[2]),\n        new BN(fixture.perp1[3]),\n        new BN(0),\n        new BN(0),\n        0,\n        0,\n        new BN(0),\n        new BN(0),\n        new BN(0),\n        0,\n        ZERO_I80F48(),\n        ZERO_I80F48(),\n        new BN(0),\n        ZERO_I80F48(),\n      );\n      const pi1 = PerpInfo.fromPerpPosition(pM, pp);\n\n      const hc = new HealthCache([ti1, ti2, ti3], [si1, si2], [pi1]);\n      const health = hc.health(HealthType.init).toNumber();\n      console.log(\n        ` - case \"${fixture.name}\" health ${health\n          .toFixed(3)\n          .padStart(10)}, expected ${fixture.expectedHealth}`,\n      );\n      expect(health - fixture.expectedHealth).lessThan(0.0000001);\n    }\n\n    const basePrice = 5;\n    const baseLotsToQuote = 10.0 * basePrice;\n\n    testFixture({\n      name: '0',\n      token1: 100,\n      token2: -10,\n      token3: 0,\n      oo12: [20, 15],\n      oo13: [0, 0],\n      perp1: [3, -131, 7, 11],\n      expectedHealth:\n        // for token1, including open orders (scenario: bids execute)\n        (100.0 + (20.0 + 15.0 * basePrice)) * 0.8 -\n        // for token2\n        10.0 * basePrice * 1.5 +\n        // for perp (scenario: bids execute)\n        (3.0 + 7.0) * baseLotsToQuote * 0.8 +\n        (-131.0 - 7.0 * baseLotsToQuote),\n    });\n\n    testFixture({\n      name: '1',\n      token1: -100,\n      token2: 10,\n      token3: 0,\n      oo12: [20, 15],\n      oo13: [0, 0],\n      perp1: [-10, -131, 7, 11],\n      expectedHealth:\n        // for token1\n        -100.0 * 1.2 +\n        // for token2, including open orders (scenario: asks execute)\n        (10.0 * basePrice + (20.0 + 15.0 * basePrice)) * 0.5 +\n        // for perp (scenario: asks execute)\n        (-10.0 - 11.0) * baseLotsToQuote * 1.2 +\n        (-131.0 + 11.0 * baseLotsToQuote),\n    });\n\n    testFixture({\n      name: '2: weighted positive perp pnl',\n      token1: 0,\n      token2: 0,\n      token3: 0,\n      oo12: [0, 0],\n      oo13: [0, 0],\n      perp1: [-1, 100, 0, 0],\n      expectedHealth: 0.95 * (100.0 - 1.2 * 1.0 * baseLotsToQuote),\n    });\n\n    testFixture({\n      name: '3: negative perp pnl is not weighted',\n      token1: 0,\n      token2: 0,\n      token3: 0,\n      oo12: [0, 0],\n      oo13: [0, 0],\n      perp1: [1, -100, 0, 0],\n      expectedHealth: -100.0 + 0.8 * 1.0 * baseLotsToQuote,\n    });\n\n    testFixture({\n      name: '4: perp health',\n      token1: 0,\n      token2: 0,\n      token3: 0,\n      oo12: [0, 0],\n      oo13: [0, 0],\n      perp1: [10, 100, 0, 0],\n      expectedHealth: 0.95 * (100.0 + 0.8 * 10.0 * baseLotsToQuote),\n    });\n\n    testFixture({\n      name: '5: perp health',\n      token1: 0,\n      token2: 0,\n      token3: 0,\n      oo12: [0, 0],\n      oo13: [0, 0],\n      perp1: [30, -100, 0, 0],\n      expectedHealth: 0.95 * (-100.0 + 0.8 * 30.0 * baseLotsToQuote),\n    });\n\n    testFixture({\n      name: '6, reserved oo funds',\n      token1: -100,\n      token2: -10,\n      token3: -10,\n      oo12: [1, 1],\n      oo13: [1, 1],\n      perp1: [0, 0, 0, 0],\n      expectedHealth:\n        // tokens\n        -100.0 * 1.2 -\n        10.0 * 5.0 * 1.5 -\n        10.0 * 10.0 * 1.5 +\n        // oo_1_2 (-> token1)\n        (1.0 + 5.0) * 1.2 +\n        // oo_1_3 (-> token1)\n        (1.0 + 10.0) * 1.2,\n    });\n\n    testFixture({\n      name: '7, reserved oo funds cross the zero balance level',\n      token1: -14,\n      token2: -10,\n      token3: -10,\n      oo12: [1, 1],\n      oo13: [1, 1],\n      perp1: [0, 0, 0, 0],\n      expectedHealth:\n        -14.0 * 1.2 -\n        10.0 * 5.0 * 1.5 -\n        10.0 * 10.0 * 1.5 +\n        // oo_1_2 (-> token1)\n        3.0 * 1.2 +\n        3.0 * 0.8 +\n        // oo_1_3 (-> token1)\n        8.0 * 1.2 +\n        3.0 * 0.8,\n    });\n\n    testFixture({\n      name: '8, reserved oo funds in a non-quote currency',\n      token1: -100,\n      token2: -100,\n      token3: -1,\n      oo12: [0, 0],\n      oo13: [10, 1],\n      perp1: [0, 0, 0, 0],\n      expectedHealth:\n        // tokens\n        -100.0 * 1.2 -\n        100.0 * 5.0 * 1.5 -\n        10.0 * 1.5 +\n        // oo_1_3 (-> token3)\n        10.0 * 1.5 +\n        10.0 * 0.5,\n    });\n\n    testFixture({\n      name: '9, like 8 but oo_1_2 flips the oo_1_3 target',\n      token1: -100,\n      token2: -100,\n      token3: -1,\n      oo12: [100, 0],\n      oo13: [10, 1],\n      perp1: [0, 0, 0, 0],\n      expectedHealth:\n        // tokens\n        -100.0 * 1.2 -\n        100.0 * 5.0 * 1.5 -\n        10.0 * 1.5 +\n        // oo_1_2 (-> token1)\n        80.0 * 1.2 +\n        20.0 * 0.8 +\n        // oo_1_3 (-> token1)\n        20.0 * 0.8,\n    });\n\n    done();\n  });\n\n  it('test_max_swap', (done) => {\n    const b0 = mockBankAndOracle(0 as TokenIndex, 0.1, 0.1, 2, 2);\n    const b1 = mockBankAndOracle(1 as TokenIndex, 0.2, 0.2, 3, 3);\n    const b2 = mockBankAndOracle(2 as TokenIndex, 0.3, 0.3, 4, 4);\n    const banks = [b0, b1, b2];\n    const hc = new HealthCache(\n      [\n        TokenInfo.fromBank(b0, I80F48.fromNumber(0)),\n        TokenInfo.fromBank(b1, I80F48.fromNumber(0)),\n        TokenInfo.fromBank(b2, I80F48.fromNumber(0)),\n      ],\n      [],\n      [],\n    );\n\n    expect(\n      hc\n        .getMaxSwapSourceForHealthRatio(\n          b0,\n          b1,\n          I80F48.fromNumber(2 / 3),\n          I80F48.fromNumber(50),\n        )\n        .toNumber(),\n    ).lessThan(0.0000001);\n\n    function findMaxSwapActual(\n      hc: HealthCache,\n      source: TokenIndex,\n      target: TokenIndex,\n      minValue: number,\n      priceFactor: number,\n      maxSwapFn: (HealthCache) => I80F48,\n    ): number[] {\n      const clonedHc: HealthCache = cloneDeep(hc);\n\n      const sourcePrice = clonedHc.tokenInfos[source].prices;\n      const targetPrice = clonedHc.tokenInfos[target].prices;\n      const swapPrice = I80F48.fromNumber(priceFactor)\n        .mul(sourcePrice.oracle)\n        .div(targetPrice.oracle);\n      const sourceAmount = clonedHc.getMaxSwapSourceForHealthFn(\n        banks[source],\n        banks[target],\n        swapPrice,\n        I80F48.fromNumber(minValue),\n        maxSwapFn,\n      );\n\n      function valueForAmount(amount: I80F48): I80F48 {\n        // adjust token balance\n        const clonedHcClone: HealthCache = cloneDeep(clonedHc);\n        clonedHc.tokenInfos[source].balanceNative.isub(amount);\n        clonedHc.tokenInfos[target].balanceNative.iadd(amount.mul(swapPrice));\n        return maxSwapFn(clonedHcClone);\n      }\n\n      return [\n        sourceAmount.toNumber(),\n        valueForAmount(sourceAmount).toNumber(),\n        valueForAmount(sourceAmount.sub(ONE_I80F48())).toNumber(),\n        valueForAmount(sourceAmount.add(ONE_I80F48())).toNumber(),\n      ];\n    }\n\n    function checkMaxSwapResult(\n      hc: HealthCache,\n      source: TokenIndex,\n      target: TokenIndex,\n      minValue: number,\n      priceFactor: number,\n      maxSwapFn: (HealthCache) => I80F48,\n    ): void {\n      const [sourceAmount, actualValue, minusValue, plusValue] =\n        findMaxSwapActual(hc, source, target, minValue, priceFactor, maxSwapFn);\n      console.log(\n        ` -- checking ${source} to ${target} for priceFactor: ${priceFactor}, target: ${minValue} actual: ${minusValue}/${actualValue}/${plusValue}, amount: ${sourceAmount}`,\n      );\n      if (actualValue < minValue) {\n        // check that swapping more would decrease the ratio!\n        expect(plusValue < actualValue);\n      } else {\n        expect(actualValue >= minValue);\n        // either we're within tolerance of the target, or swapping 1 more would\n        // bring us below the target\n        expect(actualValue < minValue + 1 || plusValue < minValue);\n      }\n    }\n\n    function maxSwapFnRatio(hc: HealthCache): I80F48 {\n      return hc.healthRatio(HealthType.init);\n    }\n\n    function maxSwapFn(hc: HealthCache): I80F48 {\n      return hc.health(HealthType.init);\n    }\n\n    for (const fn of [maxSwapFn, maxSwapFnRatio]) {\n      {\n        console.log(' - test 0');\n        // adjust by usdc\n        const clonedHc: HealthCache = cloneDeep(hc);\n        clonedHc.tokenInfos[1].balanceNative.iadd(\n          I80F48.fromNumber(100).div(clonedHc.tokenInfos[1].prices.oracle),\n        );\n\n        for (const priceFactor of [0.1, 0.9, 1.1]) {\n          for (const target of range(1, 100, 1)) {\n            checkMaxSwapResult(\n              clonedHc,\n              0 as TokenIndex,\n              1 as TokenIndex,\n              target,\n              priceFactor,\n              fn,\n            );\n            checkMaxSwapResult(\n              clonedHc,\n              1 as TokenIndex,\n              0 as TokenIndex,\n              target,\n              priceFactor,\n              fn,\n            );\n            checkMaxSwapResult(\n              clonedHc,\n              0 as TokenIndex,\n              2 as TokenIndex,\n              target,\n              priceFactor,\n              fn,\n            );\n          }\n        }\n\n        // At this unlikely price it's healthy to swap infinitely\n        expect(function () {\n          findMaxSwapActual(\n            clonedHc,\n            0 as TokenIndex,\n            1 as TokenIndex,\n            50.0,\n            1.5,\n            fn,\n          );\n        }).to.throw('Number out of range');\n      }\n\n      {\n        console.log(' - test 1');\n        const clonedHc: HealthCache = cloneDeep(hc);\n        // adjust by usdc\n        clonedHc.tokenInfos[0].balanceNative.iadd(\n          I80F48.fromNumber(-20).div(clonedHc.tokenInfos[0].prices.oracle),\n        );\n        clonedHc.tokenInfos[1].balanceNative.iadd(\n          I80F48.fromNumber(100).div(clonedHc.tokenInfos[1].prices.oracle),\n        );\n\n        for (const priceFactor of [0.1, 0.9, 1.1]) {\n          for (const target of range(1, 100, 1)) {\n            checkMaxSwapResult(\n              clonedHc,\n              0 as TokenIndex,\n              1 as TokenIndex,\n              target,\n              priceFactor,\n              fn,\n            );\n            checkMaxSwapResult(\n              clonedHc,\n              1 as TokenIndex,\n              0 as TokenIndex,\n              target,\n              priceFactor,\n              fn,\n            );\n            checkMaxSwapResult(\n              clonedHc,\n              0 as TokenIndex,\n              2 as TokenIndex,\n              target,\n              priceFactor,\n              fn,\n            );\n            checkMaxSwapResult(\n              clonedHc,\n              2 as TokenIndex,\n              0 as TokenIndex,\n              target,\n              priceFactor,\n              fn,\n            );\n          }\n        }\n      }\n\n      {\n        console.log(' - test 2');\n        const clonedHc: HealthCache = cloneDeep(hc);\n        // adjust by usdc\n        clonedHc.tokenInfos[0].balanceNative.iadd(\n          I80F48.fromNumber(-50).div(clonedHc.tokenInfos[0].prices.oracle),\n        );\n        clonedHc.tokenInfos[1].balanceNative.iadd(\n          I80F48.fromNumber(100).div(clonedHc.tokenInfos[1].prices.oracle),\n        );\n        // possible even though the init ratio is <100\n        checkMaxSwapResult(\n          clonedHc,\n          1 as TokenIndex,\n          0 as TokenIndex,\n          100,\n          1,\n\n          maxSwapFn,\n        );\n      }\n\n      {\n        console.log(' - test 3');\n        const clonedHc: HealthCache = cloneDeep(hc);\n        // adjust by usdc\n        clonedHc.tokenInfos[0].balanceNative.iadd(\n          I80F48.fromNumber(-30).div(clonedHc.tokenInfos[0].prices.oracle),\n        );\n        clonedHc.tokenInfos[1].balanceNative.iadd(\n          I80F48.fromNumber(100).div(clonedHc.tokenInfos[1].prices.oracle),\n        );\n        clonedHc.tokenInfos[2].balanceNative.iadd(\n          I80F48.fromNumber(-30).div(clonedHc.tokenInfos[2].prices.oracle),\n        );\n\n        // swapping with a high ratio advises paying back all liabs\n        // and then swapping even more because increasing assets in 0 has better asset weight\n        const initRatio = clonedHc.healthRatio(HealthType.init).toNumber();\n        const [amount, actualRatio] = findMaxSwapActual(\n          clonedHc,\n          1 as TokenIndex,\n          0 as TokenIndex,\n          100,\n          1,\n          maxSwapFn,\n        );\n        expect(actualRatio / 2.0 > initRatio);\n        expect(amount - 100 / 3).lessThan(1);\n      }\n\n      {\n        console.log(' - test 4');\n        const clonedHc: HealthCache = cloneDeep(hc);\n        // adjust by usdc\n        clonedHc.tokenInfos[0].balanceNative.iadd(\n          I80F48.fromNumber(100).div(clonedHc.tokenInfos[0].prices.oracle),\n        );\n        clonedHc.tokenInfos[1].balanceNative.iadd(\n          I80F48.fromNumber(-2).div(clonedHc.tokenInfos[1].prices.oracle),\n        );\n        clonedHc.tokenInfos[2].balanceNative.iadd(\n          I80F48.fromNumber(-65).div(clonedHc.tokenInfos[2].prices.oracle),\n        );\n\n        const initRatio = clonedHc.healthRatio(HealthType.init);\n        expect(initRatio.toNumber()).greaterThan(3);\n        expect(initRatio.toNumber()).lessThan(4);\n\n        checkMaxSwapResult(\n          clonedHc,\n          0 as TokenIndex,\n          1 as TokenIndex,\n          1,\n          1,\n          maxSwapFn,\n        );\n        checkMaxSwapResult(\n          clonedHc,\n          0 as TokenIndex,\n          1 as TokenIndex,\n          3,\n          1,\n          maxSwapFn,\n        );\n        checkMaxSwapResult(\n          clonedHc,\n          0 as TokenIndex,\n          1 as TokenIndex,\n          4,\n          1,\n          maxSwapFn,\n        );\n      }\n\n      // TODO test 5\n\n      {\n        console.log(' - test 6');\n        const clonedHc: HealthCache = cloneDeep(hc);\n        clonedHc.serum3Infos = [\n          new Serum3Info(\n            I80F48.fromNumber(30 / 3),\n            I80F48.fromNumber(30 / 2),\n            1,\n            0,\n            0 as MarketIndex,\n          ),\n        ];\n\n        // adjust by usdc\n        clonedHc.tokenInfos[0].balanceNative.iadd(\n          I80F48.fromNumber(-20).div(clonedHc.tokenInfos[0].prices.oracle),\n        );\n        clonedHc.tokenInfos[1].balanceNative.iadd(\n          I80F48.fromNumber(-40).div(clonedHc.tokenInfos[1].prices.oracle),\n        );\n        clonedHc.tokenInfos[2].balanceNative.iadd(\n          I80F48.fromNumber(120).div(clonedHc.tokenInfos[2].prices.oracle),\n        );\n\n        for (const priceFactor of [0.9, 1.1]) {\n          for (const target of range(1, 100, 1)) {\n            checkMaxSwapResult(\n              clonedHc,\n              0 as TokenIndex,\n              1 as TokenIndex,\n              target,\n              priceFactor,\n              fn,\n            );\n            checkMaxSwapResult(\n              clonedHc,\n              1 as TokenIndex,\n              0 as TokenIndex,\n              target,\n              priceFactor,\n              fn,\n            );\n            checkMaxSwapResult(\n              clonedHc,\n              0 as TokenIndex,\n              2 as TokenIndex,\n              target,\n              priceFactor,\n              fn,\n            );\n            checkMaxSwapResult(\n              clonedHc,\n              1 as TokenIndex,\n              2 as TokenIndex,\n              target,\n              priceFactor,\n              fn,\n            );\n            checkMaxSwapResult(\n              clonedHc,\n              2 as TokenIndex,\n              0 as TokenIndex,\n              target,\n              priceFactor,\n              fn,\n            );\n            checkMaxSwapResult(\n              clonedHc,\n              2 as TokenIndex,\n              1 as TokenIndex,\n              target,\n              priceFactor,\n              fn,\n            );\n          }\n        }\n      }\n\n      {\n        // check starting with negative health but swapping can make it positive\n        console.log(' - test 7');\n        const clonedHc: HealthCache = cloneDeep(hc);\n\n        // adjust by usdc\n        clonedHc.tokenInfos[0].balanceNative.iadd(\n          I80F48.fromNumber(-20).div(clonedHc.tokenInfos[0].prices.oracle),\n        );\n        clonedHc.tokenInfos[1].balanceNative.iadd(\n          I80F48.fromNumber(20).div(clonedHc.tokenInfos[1].prices.oracle),\n        );\n        expect(clonedHc.health(HealthType.init).toNumber() < 0);\n\n        for (const priceFactor of [0.9, 1.1]) {\n          for (const target of range(1, 100, 1)) {\n            checkMaxSwapResult(\n              clonedHc,\n              1 as TokenIndex,\n              0 as TokenIndex,\n              target,\n              priceFactor,\n              fn,\n            );\n          }\n        }\n      }\n\n      {\n        // check starting with negative health but swapping can't make it positive\n        console.log(' - test 8');\n        const clonedHc: HealthCache = cloneDeep(hc);\n\n        // adjust by usdc\n        clonedHc.tokenInfos[0].balanceNative.iadd(\n          I80F48.fromNumber(-20).div(clonedHc.tokenInfos[0].prices.oracle),\n        );\n        clonedHc.tokenInfos[1].balanceNative.iadd(\n          I80F48.fromNumber(10).div(clonedHc.tokenInfos[1].prices.oracle),\n        );\n        expect(clonedHc.health(HealthType.init).toNumber() < 0);\n\n        for (const priceFactor of [0.9, 1.1]) {\n          for (const target of range(1, 100, 1)) {\n            checkMaxSwapResult(\n              clonedHc,\n              1 as TokenIndex,\n              0 as TokenIndex,\n              target,\n              priceFactor,\n              fn,\n            );\n          }\n        }\n      }\n\n      {\n        // swap some assets into a zero-asset-weight token\n        console.log(' - test 9');\n        const clonedHc: HealthCache = cloneDeep(hc);\n\n        // adjust by usdc\n        clonedHc.tokenInfos[0].balanceNative.iadd(\n          I80F48.fromNumber(10).div(clonedHc.tokenInfos[0].prices.oracle),\n        );\n        clonedHc.tokenInfos[1].initAssetWeight = ZERO_I80F48();\n        expect(\n          findMaxSwapActual(\n            clonedHc,\n            0 as TokenIndex,\n            1 as TokenIndex,\n            1,\n            1,\n            maxSwapFn,\n          )[0] > 0,\n        );\n\n        for (const priceFactor of [0.9, 1.1]) {\n          for (const target of range(1, 100, 1)) {\n            checkMaxSwapResult(\n              clonedHc,\n              0 as TokenIndex,\n              1 as TokenIndex,\n              target,\n              priceFactor,\n              fn,\n            );\n          }\n        }\n      }\n    }\n    done();\n  });\n\n  it('test_max_perp', (done) => {\n    const baseLotSize = 100;\n    const b0 = mockBankAndOracle(0 as TokenIndex, 0.0, 0.0, 1, 1);\n    const p0 = mockPerpMarket(0, 0.3, 0.3, baseLotSize, 2);\n    const hc = new HealthCache(\n      [TokenInfo.fromBank(b0, I80F48.fromNumber(0))],\n      [],\n      [PerpInfo.emptyFromPerpMarket(p0)],\n    );\n\n    expect(hc.health(HealthType.init).toNumber()).equals(0);\n\n    expect(\n      hc\n        .getMaxPerpForHealthRatio(\n          p0,\n          I80F48.fromNumber(2),\n          PerpOrderSide.bid,\n          I80F48.fromNumber(50),\n        )\n        .toNumber(),\n    ).equals(0);\n\n    function findMaxTrade(\n      hc: HealthCache,\n      side: PerpOrderSide,\n      ratio: number,\n      priceFactor: number,\n    ): number[] {\n      const prices = hc.perpInfos[0].prices;\n      const tradePrice = I80F48.fromNumber(priceFactor).mul(prices.oracle);\n      const baseLots0 = hc\n        .getMaxPerpForHealthRatio(\n          p0,\n          tradePrice,\n          side,\n          I80F48.fromNumber(ratio),\n        )\n        .toNumber();\n\n      const direction = side == PerpOrderSide.bid ? 1 : -1;\n\n      // compute the health ratio we'd get when executing the trade\n      const baseLots1 = direction * baseLots0;\n      let baseNative = I80F48.fromNumber(baseLots1).mul(\n        I80F48.fromNumber(baseLotSize),\n      );\n      let hcClone: HealthCache = cloneDeep(hc);\n      hcClone.perpInfos[0].baseLots.iadd(new BN(baseLots1));\n      hcClone.perpInfos[0].quote.isub(baseNative.mul(tradePrice));\n      const actualRatio = hcClone.healthRatio(HealthType.init);\n\n      // the ratio for trading just one base lot extra\n      const baseLots2 = direction * (baseLots0 + 1);\n      baseNative = I80F48.fromNumber(baseLots2 * baseLotSize);\n      hcClone = cloneDeep(hc);\n      hcClone.perpInfos[0].baseLots.iadd(new BN(baseLots2));\n      hcClone.perpInfos[0].quote.isub(baseNative.mul(tradePrice));\n      const plusRatio = hcClone.healthRatio(HealthType.init);\n\n      return [baseLots0, actualRatio.toNumber(), plusRatio.toNumber()];\n    }\n\n    function checkMaxTrade(\n      hc: HealthCache,\n      side: PerpOrderSide,\n      ratio: number,\n      priceFactor: number,\n    ): void {\n      const [baseLots, actualRatio, plusRatio] = findMaxTrade(\n        hc,\n        side,\n        ratio,\n        priceFactor,\n      );\n      console.log(\n        `checking for price_factor: ${priceFactor}, target ratio ${ratio}: actual ratio: ${actualRatio}, plus ratio: ${plusRatio}, base_lots: ${baseLots}`,\n      );\n      expect(ratio).lessThan(actualRatio);\n      expect(plusRatio - 0.1).lessThanOrEqual(ratio);\n    }\n\n    // adjust token\n    hc.tokenInfos[0].balanceNative.iadd(I80F48.fromNumber(3000));\n    for (const existing of [-5, 0, 3]) {\n      const hcClone: HealthCache = cloneDeep(hc);\n      hcClone.perpInfos[0].baseLots.iadd(new BN(existing));\n      hcClone.perpInfos[0].quote.isub(\n        I80F48.fromNumber(existing * baseLotSize * 2),\n      );\n      for (const side of [PerpOrderSide.bid, PerpOrderSide.ask]) {\n        console.log(\n          `existing ${existing} ${side === PerpOrderSide.bid ? 'bid' : 'ask'}`,\n        );\n        for (const priceFactor of [0.8, 1.0, 1.1]) {\n          for (const ratio of range(1, 101, 1)) {\n            checkMaxTrade(hcClone, side, ratio, priceFactor);\n          }\n        }\n      }\n    }\n\n    // check some extremely bad prices\n    checkMaxTrade(hc, PerpOrderSide.bid, 50, 2);\n    checkMaxTrade(hc, PerpOrderSide.ask, 50, 0.1);\n\n    // and extremely good prices\n    expect(function () {\n      findMaxTrade(hc, PerpOrderSide.bid, 50, 0.1);\n    }).to.throw();\n    expect(function () {\n      findMaxTrade(hc, PerpOrderSide.ask, 50, 1.5);\n    }).to.throw();\n\n    done();\n  });\n});\n"]}