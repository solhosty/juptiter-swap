{"version":3,"sources":["../ts/client/src/development.ts"],"names":["banks","serum3","serum3Market"],"mappings":";;;AAUO,SAAS,kBAAkB,KAA0B;AAC1D,aAAW,MAAM,KAAK;AACpB,YAAQ;AAAA,MACN,GAAG,GAAG,OAAO,SAAS,gBAAgB,GAAG,SACtC,SAAS,EACT,SAAS,GAAG,GAAG,mBAAmB,GAAG,WACrC,SAAS,EACT,SAAS,GAAG,GAAG;AAAA,IACpB;AAAA,EACF;AACF;AAEO,SAAS,oBACd,OACA,cACA,YACM;AACN,QAAM,QAAQ,IAAI;AAAA,IAChB,MAAM,KAAK,MAAM,eAAe,OAAO,CAAC,EAAE,IAAI,CAACA,WAAkB;AAAA,MAC/DA,OAAM,CAAC,EAAE,UAAU,SAAS;AAAA,MAC5B,GAAGA,OAAM,CAAC,EAAE;AAAA,IACd,CAAC;AAAA,EACH;AACA,QAAM,UAAU,IAAI;AAAA,IAClB,MAAM,KAAK,MAAM,eAAe,OAAO,CAAC,EAAE,IAAI,CAACA,WAAkB;AAAA,MAC/DA,OAAM,CAAC,EAAE,OAAO,SAAS;AAAA,MACzB,GAAGA,OAAM,CAAC,EAAE;AAAA,IACd,CAAC;AAAA,EACH;AACA,QAAM,SAAS,IAAI;AAAA,IACjB,aAAa,aAAa,EAAE,IAAI,CAACC,YAAyB;AACxD,YAAM,eAAe,MAAM;AAAA,QACzB,MAAM,2BAA2B,OAAO;AAAA,MAC1C,EAAE,KAAK,CAACC,kBAAiBA,cAAa,gBAAgBD,QAAO,WAAW;AACxE,UAAI,CAAC,cAAc;AACjB,cAAM,IAAI;AAAA,UACR,0DAA0DA,QAAO;AAAA,QACnE;AAAA,MACF;AACA,aAAO,CAACA,QAAO,WAAW,SAAS,GAAG,GAAG,aAAa,cAAc;AAAA,IACtE,CAAC;AAAA,EACH;AACA,QAAM,QAAQ,IAAI;AAAA,IAChB,MAAM,KAAK,MAAM,qBAAqB,OAAO,CAAC,EAAE;AAAA,MAC9C,CAAC,eAA2B;AAAA,QAC1B,WAAW,UAAU,SAAS;AAAA,QAC9B,GAAG,WAAW;AAAA,MAChB;AAAA,IACF;AAAA,EACF;AAEA,aAAW,IAAI,CAAC,OAAO;AACrB,QAAI,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG;AAC5B,cAAQ,IAAI,MAAM,IAAI,GAAG,SAAS,CAAC,CAAC;AAAA,IACtC;AACA,QAAI,QAAQ,IAAI,GAAG,SAAS,CAAC,GAAG;AAC9B,cAAQ,IAAI,QAAQ,IAAI,GAAG,SAAS,CAAC,CAAC;AAAA,IACxC;AACA,QAAI,OAAO,IAAI,GAAG,SAAS,CAAC,GAAG;AAC7B,cAAQ,IAAI,OAAO,IAAI,GAAG,SAAS,CAAC,CAAC;AAAA,IACvC;AACA,QAAI,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG;AAC5B,cAAQ,IAAI,MAAM,IAAI,GAAG,SAAS,CAAC,CAAC;AAAA,IACtC;AAAA,EACF,CAAC;AACH","sourcesContent":["///\n/// debugging\n///\n\nimport { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { Bank } from './accounts/bank';\nimport { Group } from './accounts/group';\nimport { MangoAccount, Serum3Orders } from './accounts/mangoAccount';\nimport { PerpMarket } from './accounts/perp';\n\nexport function debugAccountMetas(ams: AccountMeta[]): void {\n  for (const am of ams) {\n    console.log(\n      `${am.pubkey.toBase58()}, isSigner: ${am.isSigner\n        .toString()\n        .padStart(5, ' ')}, isWritable - ${am.isWritable\n        .toString()\n        .padStart(5, ' ')}`,\n    );\n  }\n}\n\nexport function debugHealthAccounts(\n  group: Group,\n  mangoAccount: MangoAccount,\n  publicKeys: PublicKey[],\n): void {\n  const banks = new Map(\n    Array.from(group.banksMapByName.values()).map((banks: Bank[]) => [\n      banks[0].publicKey.toBase58(),\n      `${banks[0].name} bank`,\n    ]),\n  );\n  const oracles = new Map(\n    Array.from(group.banksMapByName.values()).map((banks: Bank[]) => [\n      banks[0].oracle.toBase58(),\n      `${banks[0].name} oracle`,\n    ]),\n  );\n  const serum3 = new Map(\n    mangoAccount.serum3Active().map((serum3: Serum3Orders) => {\n      const serum3Market = Array.from(\n        group.serum3MarketsMapByExternal.values(),\n      ).find((serum3Market) => serum3Market.marketIndex === serum3.marketIndex);\n      if (!serum3Market) {\n        throw new Error(\n          `Serum3Orders for non existent market with market index ${serum3.marketIndex}`,\n        );\n      }\n      return [serum3.openOrders.toBase58(), `${serum3Market.name} spot oo`];\n    }),\n  );\n  const perps = new Map(\n    Array.from(group.perpMarketsMapByName.values()).map(\n      (perpMarket: PerpMarket) => [\n        perpMarket.publicKey.toBase58(),\n        `${perpMarket.name} perp market`,\n      ],\n    ),\n  );\n\n  publicKeys.map((pk) => {\n    if (banks.get(pk.toBase58())) {\n      console.log(banks.get(pk.toBase58()));\n    }\n    if (oracles.get(pk.toBase58())) {\n      console.log(oracles.get(pk.toBase58()));\n    }\n    if (serum3.get(pk.toBase58())) {\n      console.log(serum3.get(pk.toBase58()));\n    }\n    if (perps.get(pk.toBase58())) {\n      console.log(perps.get(pk.toBase58()));\n    }\n  });\n}\n"]}