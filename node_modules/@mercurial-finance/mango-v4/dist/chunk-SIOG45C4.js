"use strict";Object.defineProperty(exports, "__esModule", {value: true});// ts/client/src/scripts/mm/sequence-enforcer-util.ts
var _anchor = require('@project-serum/anchor');




var _web3js = require('@solana/web3.js');
var _crypto = require('crypto');
var seqEnforcerProgramIds = {
  devnet: new (0, _web3js.PublicKey)("FBngRHN4s5cmHagqy3Zd6xcK3zPJBeX5DixtHFbBhyCn"),
  testnet: new (0, _web3js.PublicKey)("FThcgpaJM8WiEbK5rw3i31Ptb8Hm4rQ27TrhfzeR1uUy"),
  "mainnet-beta": new (0, _web3js.PublicKey)("GDDMwNyyx8uB6zrqwBFHjLLG3TBYk2F8Az4yrQC5RzMp")
};
function makeInitSequenceEnforcerAccountIx(account, ownerPk, bump, sym, cluster) {
  const keys = [
    { isSigner: false, isWritable: true, pubkey: account },
    { isSigner: true, isWritable: true, pubkey: ownerPk },
    { isSigner: false, isWritable: false, pubkey: _web3js.SystemProgram.programId }
  ];
  const variant = _crypto.createHash.call(void 0, "sha256").update("global:initialize").digest().slice(0, 8);
  const bumpData = new (0, _anchor.BN)(bump).toBuffer("le", 1);
  const strLen = new (0, _anchor.BN)(sym.length).toBuffer("le", 4);
  const symEncoded = Buffer.from(sym);
  const data = Buffer.concat([variant, bumpData, strLen, symEncoded]);
  return new (0, _web3js.TransactionInstruction)({
    keys,
    data,
    programId: seqEnforcerProgramIds[cluster]
  });
}
function makeCheckAndSetSequenceNumberIx(sequenceAccount, ownerPk, seqNum, cluster) {
  const keys = [
    { isSigner: false, isWritable: true, pubkey: sequenceAccount },
    { isSigner: true, isWritable: false, pubkey: ownerPk }
  ];
  const variant = _crypto.createHash.call(void 0, "sha256").update("global:check_and_set_sequence_number").digest().slice(0, 8);
  const seqNumBuffer = new (0, _anchor.BN)(seqNum).toBuffer("le", 8);
  const data = Buffer.concat([variant, seqNumBuffer]);
  return new (0, _web3js.TransactionInstruction)({
    keys,
    data,
    programId: seqEnforcerProgramIds[cluster]
  });
}





exports.seqEnforcerProgramIds = seqEnforcerProgramIds; exports.makeInitSequenceEnforcerAccountIx = makeInitSequenceEnforcerAccountIx; exports.makeCheckAndSetSequenceNumberIx = makeCheckAndSetSequenceNumberIx;
//# sourceMappingURL=chunk-SIOG45C4.js.map