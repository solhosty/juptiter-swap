{"version":3,"sources":["../ts/client/src/client.ts"],"sourcesContent":["import { AnchorProvider, BN, Program, Provider } from '@project-serum/anchor';\nimport {\n  WRAPPED_SOL_MINT,\n  closeAccount,\n  initializeAccount,\n} from '@project-serum/serum/lib/token-instructions';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport {\n  AccountMeta,\n  AddressLookupTableAccount,\n  Cluster,\n  Commitment,\n  Keypair,\n  MemcmpFilter,\n  PublicKey,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  Signer,\n  SystemProgram,\n  TransactionInstruction,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport bs58 from 'bs58';\nimport { Bank, MintInfo, TokenIndex } from './accounts/bank';\nimport { Group } from './accounts/group';\nimport {\n  MangoAccount,\n  PerpPosition,\n  Serum3Orders,\n  TokenPosition,\n} from './accounts/mangoAccount';\nimport { StubOracle } from './accounts/oracle';\nimport {\n  FillEvent,\n  OutEvent,\n  PerpEventQueue,\n  PerpMarket,\n  PerpMarketIndex,\n  PerpOrderSide,\n  PerpOrderType,\n} from './accounts/perp';\nimport {\n  Serum3Market,\n  Serum3OrderType,\n  Serum3SelfTradeBehavior,\n  Serum3Side,\n  generateSerum3MarketExternalVaultSignerAddress,\n} from './accounts/serum3';\nimport {\n  IxGateParams,\n  PerpEditParams,\n  TokenEditParams,\n  buildIxGate,\n} from './clientIxParamBuilder';\nimport { OPENBOOK_PROGRAM_ID } from './constants';\nimport { Id } from './ids';\nimport { IDL, MangoV4 } from './mango_v4';\nimport { I80F48 } from './numbers/I80F48';\nimport { FlashLoanType, InterestRateParams, OracleConfigParams } from './types';\nimport {\n  I64_MAX_BN,\n  U64_MAX_BN,\n  createAssociatedTokenAccountIdempotentInstruction,\n  getAssociatedTokenAddress,\n  toNative,\n} from './utils';\nimport { sendTransaction } from './utils/rpc';\n\nexport enum AccountRetriever {\n  Scanning,\n  Fixed,\n}\n\nexport type IdsSource = 'api' | 'static' | 'get-program-accounts';\n\nexport type MangoClientOptions = {\n  idsSource?: IdsSource;\n  postSendTxCallback?: ({ txid }: { txid: string }) => void;\n  prioritizationFee?: number;\n  txConfirmationCommitment?: Commitment;\n};\n\nexport class MangoClient {\n  private idsSource: IdsSource;\n  private postSendTxCallback?: ({ txid }) => void;\n  private prioritizationFee: number;\n  private txConfirmationCommitment: Commitment;\n\n  constructor(\n    public program: Program<MangoV4>,\n    public programId: PublicKey,\n    public cluster: Cluster,\n    public opts: MangoClientOptions = {},\n  ) {\n    this.idsSource = opts?.idsSource || 'get-program-accounts';\n    this.prioritizationFee = opts?.prioritizationFee || 0;\n    this.postSendTxCallback = opts?.postSendTxCallback;\n    this.txConfirmationCommitment =\n      opts?.txConfirmationCommitment ??\n      (program.provider as AnchorProvider).opts.commitment ??\n      'processed';\n    // TODO: evil side effect, but limited backtraces are a nightmare\n    Error.stackTraceLimit = 1000;\n  }\n\n  /// Transactions\n  public async sendAndConfirmTransaction(\n    ixs: TransactionInstruction[],\n    opts: any = {},\n  ): Promise<string> {\n    return await sendTransaction(\n      this.program.provider as AnchorProvider,\n      ixs,\n      opts.alts ?? [],\n      {\n        postSendTxCallback: this.postSendTxCallback,\n        prioritizationFee: this.prioritizationFee,\n        txConfirmationCommitment: this.txConfirmationCommitment,\n        ...opts,\n      },\n    );\n  }\n\n  private async sendAndConfirmTransactionForGroup(\n    group: Group,\n    ixs: TransactionInstruction[],\n    opts: any = {},\n  ): Promise<string> {\n    return await this.sendAndConfirmTransaction(ixs, {\n      alts: group.addressLookupTablesList,\n      ...opts,\n    });\n  }\n\n  // Group\n  public async groupCreate(\n    groupNum: number,\n    testing: boolean,\n    version: number,\n    insuranceMintPk: PublicKey,\n  ): Promise<TransactionSignature> {\n    const adminPk = (this.program.provider as AnchorProvider).wallet.publicKey;\n    const ix = await this.program.methods\n      .groupCreate(groupNum, testing ? 1 : 0, version)\n      .accounts({\n        creator: adminPk,\n        payer: adminPk,\n        insuranceMint: insuranceMintPk,\n      })\n      .instruction();\n    return await this.sendAndConfirmTransaction([ix]);\n  }\n\n  public async groupEdit(\n    group: Group,\n    admin?: PublicKey,\n    fastListingAdmin?: PublicKey,\n    securityAdmin?: PublicKey,\n    testing?: number,\n    version?: number,\n    depositLimitQuote?: BN,\n  ): Promise<TransactionSignature> {\n    const ix = await this.program.methods\n      .groupEdit(\n        admin ?? null,\n        fastListingAdmin ?? null,\n        securityAdmin ?? null,\n        testing ?? null,\n        version ?? null,\n        depositLimitQuote !== undefined ? depositLimitQuote : null,\n      )\n      .accounts({\n        group: group.publicKey,\n        admin: (this.program.provider as AnchorProvider).wallet.publicKey,\n      })\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async ixGateSet(\n    group: Group,\n    ixGateParams: IxGateParams,\n  ): Promise<TransactionSignature> {\n    const ix = await this.program.methods\n      .ixGateSet(buildIxGate(ixGateParams))\n      .accounts({\n        group: group.publicKey,\n        admin: (this.program.provider as AnchorProvider).wallet.publicKey,\n      })\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async groupClose(group: Group): Promise<TransactionSignature> {\n    const adminPk = (this.program.provider as AnchorProvider).wallet.publicKey;\n    const ix = await this.program.methods\n      .groupClose()\n      .accounts({\n        group: group.publicKey,\n        insuranceVault: group.insuranceVault,\n        admin: adminPk,\n        solDestination: (this.program.provider as AnchorProvider).wallet\n          .publicKey,\n      })\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async getGroup(groupPk: PublicKey): Promise<Group> {\n    const groupAccount = await this.program.account.group.fetch(groupPk);\n    const group = Group.from(groupPk, groupAccount);\n    await group.reloadAll(this);\n    return group;\n  }\n\n  public async getGroupsForCreator(creatorPk: PublicKey): Promise<Group[]> {\n    const filters: MemcmpFilter[] = [\n      {\n        memcmp: {\n          bytes: creatorPk.toBase58(),\n          offset: 8,\n        },\n      },\n    ];\n\n    const groups = (await this.program.account.group.all(filters)).map(\n      (tuple) => Group.from(tuple.publicKey, tuple.account),\n    );\n    groups.forEach((group) => group.reloadAll(this));\n    return groups;\n  }\n\n  public async getGroupForCreator(\n    creatorPk: PublicKey,\n    groupNum: number,\n  ): Promise<Group> {\n    const bbuf = Buffer.alloc(4);\n    bbuf.writeUInt32LE(groupNum);\n    const filters: MemcmpFilter[] = [\n      {\n        memcmp: {\n          bytes: creatorPk.toBase58(),\n          offset: 8,\n        },\n      },\n      {\n        memcmp: {\n          bytes: bs58.encode(bbuf),\n          offset: 40,\n        },\n      },\n    ];\n    const groups = (await this.program.account.group.all(filters)).map(\n      (tuple) => Group.from(tuple.publicKey, tuple.account),\n    );\n    await groups[0].reloadAll(this);\n    return groups[0];\n  }\n\n  public async getIds(groupPk: PublicKey): Promise<Id | undefined> {\n    switch (this.idsSource) {\n      case 'api':\n        return await Id.fromApi(groupPk);\n      case 'get-program-accounts':\n        return undefined;\n      case 'static':\n        return Id.fromIdsByPk(groupPk);\n    }\n  }\n\n  // Tokens/Banks\n\n  public async tokenRegister(\n    group: Group,\n    mintPk: PublicKey,\n    oraclePk: PublicKey,\n    oracleConfig: OracleConfigParams,\n    tokenIndex: number,\n    name: string,\n    interestRateParams: InterestRateParams,\n    loanFeeRate: number,\n    loanOriginationFeeRate: number,\n    maintAssetWeight: number,\n    initAssetWeight: number,\n    maintLiabWeight: number,\n    initLiabWeight: number,\n    liquidationFee: number,\n    minVaultToDepositsRatio: number,\n    netBorrowLimitWindowSizeTs: number,\n    netBorrowLimitPerWindowQuote: number,\n  ): Promise<TransactionSignature> {\n    const ix = await this.program.methods\n      .tokenRegister(\n        tokenIndex,\n        name,\n        oracleConfig,\n        interestRateParams,\n        loanFeeRate,\n        loanOriginationFeeRate,\n        maintAssetWeight,\n        initAssetWeight,\n        maintLiabWeight,\n        initLiabWeight,\n        liquidationFee,\n        minVaultToDepositsRatio,\n        new BN(netBorrowLimitWindowSizeTs),\n        new BN(netBorrowLimitPerWindowQuote),\n      )\n      .accounts({\n        group: group.publicKey,\n        admin: (this.program.provider as AnchorProvider).wallet.publicKey,\n        mint: mintPk,\n        oracle: oraclePk,\n        payer: (this.program.provider as AnchorProvider).wallet.publicKey,\n        rent: SYSVAR_RENT_PUBKEY,\n      })\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async tokenRegisterTrustless(\n    group: Group,\n    mintPk: PublicKey,\n    oraclePk: PublicKey,\n    tokenIndex: number,\n    name: string,\n  ): Promise<TransactionSignature> {\n    const ix = await this.program.methods\n      .tokenRegisterTrustless(tokenIndex, name)\n      .accounts({\n        group: group.publicKey,\n        fastListingAdmin: (this.program.provider as AnchorProvider).wallet\n          .publicKey,\n        mint: mintPk,\n        oracle: oraclePk,\n        payer: (this.program.provider as AnchorProvider).wallet.publicKey,\n        rent: SYSVAR_RENT_PUBKEY,\n      })\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async tokenEdit(\n    group: Group,\n    mintPk: PublicKey,\n    params: TokenEditParams,\n  ): Promise<TransactionSignature> {\n    const bank = group.getFirstBankByMint(mintPk);\n    const mintInfo = group.mintInfosMapByTokenIndex.get(bank.tokenIndex)!;\n\n    const ix = await this.program.methods\n      .tokenEdit(\n        params.oracle,\n        params.oracleConfig,\n        params.groupInsuranceFund,\n        params.interestRateParams,\n        params.loanFeeRate,\n        params.loanOriginationFeeRate,\n        params.maintAssetWeight,\n        params.initAssetWeight,\n        params.maintLiabWeight,\n        params.initLiabWeight,\n        params.liquidationFee,\n        params.stablePriceDelayIntervalSeconds,\n        params.stablePriceDelayGrowthLimit,\n        params.stablePriceGrowthLimit,\n        params.minVaultToDepositsRatio,\n        params.netBorrowLimitPerWindowQuote !== null\n          ? new BN(params.netBorrowLimitPerWindowQuote)\n          : null,\n        params.netBorrowLimitWindowSizeTs !== null\n          ? new BN(params.netBorrowLimitWindowSizeTs)\n          : null,\n        params.borrowWeightScaleStartQuote,\n        params.depositWeightScaleStartQuote,\n        params.resetStablePrice ?? false,\n        params.resetNetBorrowLimit ?? false,\n        params.reduceOnly,\n      )\n      .accounts({\n        group: group.publicKey,\n        oracle: params.oracle ?? bank.oracle,\n        admin: (this.program.provider as AnchorProvider).wallet.publicKey,\n        mintInfo: mintInfo.publicKey,\n      })\n      .remainingAccounts([\n        {\n          pubkey: bank.publicKey,\n          isWritable: true,\n          isSigner: false,\n        } as AccountMeta,\n      ])\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async tokenDeregister(\n    group: Group,\n    mintPk: PublicKey,\n  ): Promise<TransactionSignature> {\n    const bank = group.getFirstBankByMint(mintPk);\n    const adminPk = (this.program.provider as AnchorProvider).wallet.publicKey;\n\n    const dustVaultPk = await getAssociatedTokenAddress(bank.mint, adminPk);\n    const ai = await this.program.provider.connection.getAccountInfo(\n      dustVaultPk,\n    );\n    const preInstructions: TransactionInstruction[] = [];\n    if (!ai) {\n      preInstructions.push(\n        await createAssociatedTokenAccountIdempotentInstruction(\n          adminPk,\n          adminPk,\n          bank.mint,\n        ),\n      );\n    }\n\n    const ix = await this.program.methods\n      .tokenDeregister()\n      .accounts({\n        group: group.publicKey,\n        admin: adminPk,\n        mintInfo: group.mintInfosMapByTokenIndex.get(bank.tokenIndex)\n          ?.publicKey,\n        dustVault: dustVaultPk,\n        solDestination: (this.program.provider as AnchorProvider).wallet\n          .publicKey,\n      })\n      .remainingAccounts(\n        [bank.publicKey, bank.vault].map(\n          (pk) =>\n            ({ pubkey: pk, isWritable: true, isSigner: false } as AccountMeta),\n        ),\n      )\n      .instruction();\n\n    return await this.sendAndConfirmTransactionForGroup(group, [\n      ...preInstructions,\n      ix,\n    ]);\n  }\n\n  public async getBanksForGroup(group: Group): Promise<Bank[]> {\n    return (\n      await this.program.account.bank.all([\n        {\n          memcmp: {\n            bytes: group.publicKey.toBase58(),\n            offset: 8,\n          },\n        },\n      ])\n    ).map((tuple) => Bank.from(tuple.publicKey, tuple.account));\n  }\n\n  public async getMintInfosForGroup(group: Group): Promise<MintInfo[]> {\n    return (\n      await this.program.account.mintInfo.all([\n        {\n          memcmp: {\n            bytes: group.publicKey.toBase58(),\n            offset: 8,\n          },\n        },\n      ])\n    ).map((tuple) => {\n      return MintInfo.from(tuple.publicKey, tuple.account);\n    });\n  }\n\n  public async getMintInfoForTokenIndex(\n    group: Group,\n    tokenIndex: TokenIndex,\n  ): Promise<MintInfo[]> {\n    const tokenIndexBuf = Buffer.alloc(2);\n    tokenIndexBuf.writeUInt16LE(tokenIndex);\n    return (\n      await this.program.account.mintInfo.all([\n        {\n          memcmp: {\n            bytes: group.publicKey.toBase58(),\n            offset: 8,\n          },\n        },\n        {\n          memcmp: {\n            bytes: bs58.encode(tokenIndexBuf),\n            offset: 40,\n          },\n        },\n      ])\n    ).map((tuple) => {\n      return MintInfo.from(tuple.publicKey, tuple.account);\n    });\n  }\n\n  // Stub Oracle\n\n  public async stubOracleCreate(\n    group: Group,\n    mintPk: PublicKey,\n    price: number,\n  ): Promise<TransactionSignature> {\n    const ix = await this.program.methods\n      .stubOracleCreate({ val: I80F48.fromNumber(price).getData() })\n      .accounts({\n        group: group.publicKey,\n        admin: (this.program.provider as AnchorProvider).wallet.publicKey,\n        mint: mintPk,\n        payer: (this.program.provider as AnchorProvider).wallet.publicKey,\n      })\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async stubOracleClose(\n    group: Group,\n    oracle: PublicKey,\n  ): Promise<TransactionSignature> {\n    const ix = await this.program.methods\n      .stubOracleClose()\n      .accounts({\n        group: group.publicKey,\n        oracle: oracle,\n        solDestination: (this.program.provider as AnchorProvider).wallet\n          .publicKey,\n      })\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async stubOracleSet(\n    group: Group,\n    oraclePk: PublicKey,\n    price: number,\n  ): Promise<TransactionSignature> {\n    const ix = await this.program.methods\n      .stubOracleSet({ val: I80F48.fromNumber(price).getData() })\n      .accounts({\n        group: group.publicKey,\n        admin: (this.program.provider as AnchorProvider).wallet.publicKey,\n        oracle: oraclePk,\n      })\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async getStubOracle(\n    group: Group,\n    mintPk?: PublicKey,\n  ): Promise<StubOracle[]> {\n    const filters = [\n      {\n        memcmp: {\n          bytes: group.publicKey.toBase58(),\n          offset: 8,\n        },\n      },\n    ];\n\n    if (mintPk) {\n      filters.push({\n        memcmp: {\n          bytes: mintPk.toBase58(),\n          offset: 40,\n        },\n      });\n    }\n\n    return (await this.program.account.stubOracle.all(filters)).map((pa) =>\n      StubOracle.from(pa.publicKey, pa.account),\n    );\n  }\n\n  // MangoAccount\n\n  public async getOrCreateMangoAccount(\n    group: Group,\n    loadSerum3Oo = false,\n  ): Promise<MangoAccount> {\n    const clientOwner = (this.program.provider as AnchorProvider).wallet\n      .publicKey;\n    let mangoAccounts = await this.getMangoAccountsForOwner(\n      group,\n      (this.program.provider as AnchorProvider).wallet.publicKey,\n      loadSerum3Oo,\n    );\n    if (mangoAccounts.length === 0) {\n      await this.createMangoAccount(group);\n      mangoAccounts = await this.getMangoAccountsForOwner(\n        group,\n        clientOwner,\n        loadSerum3Oo,\n      );\n    }\n    return mangoAccounts.sort((a, b) => a.accountNum - b.accountNum)[0];\n  }\n\n  public async createMangoAccount(\n    group: Group,\n    accountNumber?: number,\n    name?: string,\n    tokenCount?: number,\n    serum3Count?: number,\n    perpCount?: number,\n    perpOoCount?: number,\n  ): Promise<TransactionSignature> {\n    const ix = await this.program.methods\n      .accountCreate(\n        accountNumber ?? 0,\n        tokenCount ?? 8,\n        serum3Count ?? 8,\n        perpCount ?? 8,\n        perpOoCount ?? 8,\n        name ?? '',\n      )\n      .accounts({\n        group: group.publicKey,\n        owner: (this.program.provider as AnchorProvider).wallet.publicKey,\n        payer: (this.program.provider as AnchorProvider).wallet.publicKey,\n      })\n      .instruction();\n\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async createAndFetchMangoAccount(\n    group: Group,\n    accountNumber?: number,\n    name?: string,\n    tokenCount?: number,\n    serum3Count?: number,\n    perpCount?: number,\n    perpOoCount?: number,\n    loadSerum3Oo = false,\n  ): Promise<MangoAccount | undefined> {\n    const accNum = accountNumber ?? 0;\n    await this.createMangoAccount(\n      group,\n      accNum,\n      name,\n      tokenCount,\n      serum3Count,\n      perpCount,\n      perpOoCount,\n    );\n    return await this.getMangoAccountForOwner(\n      group,\n      (this.program.provider as AnchorProvider).wallet.publicKey,\n      accNum,\n      loadSerum3Oo,\n    );\n  }\n\n  public async expandMangoAccount(\n    group: Group,\n    account: MangoAccount,\n    tokenCount: number,\n    serum3Count: number,\n    perpCount: number,\n    perpOoCount: number,\n  ): Promise<TransactionSignature> {\n    const ix = await this.program.methods\n      .accountExpand(tokenCount, serum3Count, perpCount, perpOoCount)\n      .accounts({\n        group: group.publicKey,\n        account: account.publicKey,\n        owner: (this.program.provider as AnchorProvider).wallet.publicKey,\n        payer: (this.program.provider as AnchorProvider).wallet.publicKey,\n      })\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async editMangoAccount(\n    group: Group,\n    mangoAccount: MangoAccount,\n    name?: string,\n    delegate?: PublicKey,\n  ): Promise<TransactionSignature> {\n    const ix = await this.program.methods\n      .accountEdit(name ?? null, delegate ?? null)\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        owner: (this.program.provider as AnchorProvider).wallet.publicKey,\n      })\n      .instruction();\n\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async computeAccountData(\n    group: Group,\n    mangoAccount: MangoAccount,\n  ): Promise<TransactionSignature> {\n    const healthRemainingAccounts: PublicKey[] =\n      this.buildHealthRemainingAccounts(\n        AccountRetriever.Fixed,\n        group,\n        [mangoAccount],\n        [],\n        [],\n      );\n\n    const ix = await this.program.methods\n      .computeAccountData()\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n      })\n      .remainingAccounts(\n        healthRemainingAccounts.map(\n          (pk) =>\n            ({ pubkey: pk, isWritable: false, isSigner: false } as AccountMeta),\n        ),\n      )\n      .instruction();\n\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async toggleMangoAccountFreeze(\n    group: Group,\n    mangoAccount: MangoAccount,\n    freeze: boolean,\n  ): Promise<TransactionSignature> {\n    const ix = await this.program.methods\n      .accountToggleFreeze(freeze)\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        admin: (this.program.provider as AnchorProvider).wallet.publicKey,\n      })\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async getMangoAccount(\n    mangoAccount: MangoAccount | PublicKey,\n    loadSerum3Oo = false,\n  ): Promise<MangoAccount> {\n    const mangoAccountPk =\n      mangoAccount instanceof MangoAccount\n        ? mangoAccount.publicKey\n        : mangoAccount;\n    const mangoAccount_ = MangoAccount.from(\n      mangoAccountPk,\n      await this.program.account.mangoAccount.fetch(mangoAccountPk),\n    );\n    if (loadSerum3Oo) {\n      await mangoAccount_?.reloadSerum3OpenOrders(this);\n    }\n    return mangoAccount_;\n  }\n\n  public async getMangoAccountWithSlot(\n    mangoAccountPk: PublicKey,\n    loadSerum3Oo = false,\n  ): Promise<{ slot: number; value: MangoAccount } | undefined> {\n    const resp =\n      await this.program.provider.connection.getAccountInfoAndContext(\n        mangoAccountPk,\n      );\n    if (!resp?.value) return;\n    const decodedMangoAccount = this.program.coder.accounts.decode(\n      'mangoAccount',\n      resp.value.data,\n    );\n    const mangoAccount = MangoAccount.from(mangoAccountPk, decodedMangoAccount);\n    if (loadSerum3Oo) {\n      await mangoAccount?.reloadSerum3OpenOrders(this);\n    }\n    return { slot: resp.context.slot, value: mangoAccount };\n  }\n\n  public async getMangoAccountForOwner(\n    group: Group,\n    ownerPk: PublicKey,\n    accountNumber: number,\n    loadSerum3Oo = false,\n  ): Promise<MangoAccount | undefined> {\n    const mangoAccounts = await this.getMangoAccountsForOwner(\n      group,\n      ownerPk,\n      loadSerum3Oo,\n    );\n    const foundMangoAccount = mangoAccounts.find(\n      (a) => a.accountNum == accountNumber,\n    );\n\n    return foundMangoAccount;\n  }\n\n  public async getMangoAccountsForOwner(\n    group: Group,\n    ownerPk: PublicKey,\n    loadSerum3Oo = false,\n  ): Promise<MangoAccount[]> {\n    const accounts = (\n      await this.program.account.mangoAccount.all([\n        {\n          memcmp: {\n            bytes: group.publicKey.toBase58(),\n            offset: 8,\n          },\n        },\n        {\n          memcmp: {\n            bytes: ownerPk.toBase58(),\n            offset: 40,\n          },\n        },\n      ])\n    ).map((pa) => {\n      return MangoAccount.from(pa.publicKey, pa.account);\n    });\n\n    if (loadSerum3Oo) {\n      await Promise.all(\n        accounts.map(async (a) => await a.reloadSerum3OpenOrders(this)),\n      );\n    }\n\n    return accounts;\n  }\n\n  public async getMangoAccountsForDelegate(\n    group: Group,\n    delegate: PublicKey,\n    loadSerum3Oo = false,\n  ): Promise<MangoAccount[]> {\n    const accounts = (\n      await this.program.account.mangoAccount.all([\n        {\n          memcmp: {\n            bytes: group.publicKey.toBase58(),\n            offset: 8,\n          },\n        },\n        {\n          memcmp: {\n            bytes: delegate.toBase58(),\n            offset: 104,\n          },\n        },\n      ])\n    ).map((pa) => {\n      return MangoAccount.from(pa.publicKey, pa.account);\n    });\n\n    if (loadSerum3Oo) {\n      await Promise.all(\n        accounts.map(async (a) => await a.reloadSerum3OpenOrders(this)),\n      );\n    }\n\n    return accounts;\n  }\n\n  public async getAllMangoAccounts(\n    group: Group,\n    loadSerum3Oo = false,\n  ): Promise<MangoAccount[]> {\n    const accounts = (\n      await this.program.account.mangoAccount.all([\n        {\n          memcmp: {\n            bytes: group.publicKey.toBase58(),\n            offset: 8,\n          },\n        },\n      ])\n    ).map((pa) => {\n      return MangoAccount.from(pa.publicKey, pa.account);\n    });\n\n    if (loadSerum3Oo) {\n      await Promise.all(\n        accounts.map(async (a) => await a.reloadSerum3OpenOrders(this)),\n      );\n    }\n\n    return accounts;\n  }\n\n  /**\n   * Note: this ix doesn't settle liabs, reduce open positions, or withdraw tokens to wallet,\n   * it simply closes the account. To close successfully ensure all positions are closed, or\n   * use forceClose flag\n   * @param group\n   * @param mangoAccount\n   * @param forceClose\n   * @returns\n   */\n  public async closeMangoAccount(\n    group: Group,\n    mangoAccount: MangoAccount,\n    forceClose = false,\n  ): Promise<TransactionSignature> {\n    const ix = await this.program.methods\n      .accountClose(forceClose)\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        owner: (this.program.provider as AnchorProvider).wallet.publicKey,\n        solDestination: mangoAccount.owner,\n      })\n      .instruction();\n\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async emptyAndCloseMangoAccount(\n    group: Group,\n    mangoAccount: MangoAccount,\n  ): Promise<TransactionSignature> {\n    const instructions: TransactionInstruction[] = [];\n    const healthAccountsToExclude: PublicKey[] = [];\n\n    for (const serum3Account of mangoAccount.serum3Active()) {\n      const serum3Market = group.serum3MarketsMapByMarketIndex.get(\n        serum3Account.marketIndex,\n      )!;\n\n      const closeOOIx = await this.serum3CloseOpenOrdersIx(\n        group,\n        mangoAccount,\n        serum3Market.serumMarketExternal,\n      );\n      healthAccountsToExclude.push(serum3Account.openOrders);\n      instructions.push(closeOOIx);\n    }\n\n    for (const perp of mangoAccount.perpActive()) {\n      const perpMarketIndex = perp.marketIndex;\n      const perpMarket = group.getPerpMarketByMarketIndex(perpMarketIndex);\n      const deactivatingPositionIx = await this.perpDeactivatePositionIx(\n        group,\n        mangoAccount,\n        perpMarketIndex,\n      );\n      healthAccountsToExclude.push(perpMarket.publicKey, perpMarket.oracle);\n      instructions.push(deactivatingPositionIx);\n    }\n\n    for (const index in mangoAccount.tokensActive()) {\n      const indexNum = Number(index);\n      const accountsToExclude = [...healthAccountsToExclude];\n      const token = mangoAccount.tokensActive()[indexNum];\n      const bank = group.getFirstBankByTokenIndex(token.tokenIndex);\n      //to withdraw from all token accounts we need to exclude previous tokens pubkeys\n      //used to build health remaining accounts\n      if (indexNum !== 0) {\n        for (let i = indexNum; i--; i >= 0) {\n          const prevToken = mangoAccount.tokensActive()[i];\n          const prevBank = group.getFirstBankByTokenIndex(prevToken.tokenIndex);\n          accountsToExclude.push(prevBank.publicKey, prevBank.oracle);\n        }\n      }\n      const withdrawIx = await this.tokenWithdrawNativeIx(\n        group,\n        mangoAccount,\n        bank.mint,\n        U64_MAX_BN,\n        false,\n        [...accountsToExclude],\n      );\n      instructions.push(...withdrawIx);\n    }\n\n    const closeIx = await this.program.methods\n      .accountClose(false)\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        owner: (this.program.provider as AnchorProvider).wallet.publicKey,\n        solDestination: mangoAccount.owner,\n      })\n      .instruction();\n    instructions.push(closeIx);\n\n    return await this.sendAndConfirmTransactionForGroup(group, instructions);\n  }\n\n  public async tokenDeposit(\n    group: Group,\n    mangoAccount: MangoAccount,\n    mintPk: PublicKey,\n    amount: number,\n    reduceOnly = false,\n  ): Promise<TransactionSignature> {\n    const decimals = group.getMintDecimals(mintPk);\n    const nativeAmount = toNative(amount, decimals);\n    return await this.tokenDepositNative(\n      group,\n      mangoAccount,\n      mintPk,\n      nativeAmount,\n      reduceOnly,\n    );\n  }\n\n  public async tokenDepositNative(\n    group: Group,\n    mangoAccount: MangoAccount,\n    mintPk: PublicKey,\n    nativeAmount: BN,\n    reduceOnly = false,\n  ): Promise<TransactionSignature> {\n    const bank = group.getFirstBankByMint(mintPk);\n\n    const tokenAccountPk = await getAssociatedTokenAddress(\n      mintPk,\n      mangoAccount.owner,\n    );\n\n    let wrappedSolAccount: Keypair | undefined;\n    let preInstructions: TransactionInstruction[] = [];\n    let postInstructions: TransactionInstruction[] = [];\n    const additionalSigners: Signer[] = [];\n    if (mintPk.equals(WRAPPED_SOL_MINT)) {\n      wrappedSolAccount = new Keypair();\n      const lamports = nativeAmount.add(new BN(1e7));\n\n      preInstructions = [\n        SystemProgram.createAccount({\n          fromPubkey: mangoAccount.owner,\n          newAccountPubkey: wrappedSolAccount.publicKey,\n          lamports: lamports.toNumber(),\n          space: 165,\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        initializeAccount({\n          account: wrappedSolAccount.publicKey,\n          mint: WRAPPED_SOL_MINT,\n          owner: mangoAccount.owner,\n        }),\n      ];\n      postInstructions = [\n        closeAccount({\n          source: wrappedSolAccount.publicKey,\n          destination: mangoAccount.owner,\n          owner: mangoAccount.owner,\n        }),\n      ];\n      additionalSigners.push(wrappedSolAccount);\n    }\n\n    const healthRemainingAccounts: PublicKey[] =\n      this.buildHealthRemainingAccounts(\n        AccountRetriever.Fixed,\n        group,\n        [mangoAccount],\n        [bank],\n        [],\n      );\n\n    const ix = await this.program.methods\n      .tokenDeposit(new BN(nativeAmount), reduceOnly)\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        owner: mangoAccount.owner,\n        bank: bank.publicKey,\n        vault: bank.vault,\n        oracle: bank.oracle,\n        tokenAccount: wrappedSolAccount?.publicKey ?? tokenAccountPk,\n        tokenAuthority: mangoAccount.owner,\n      })\n      .remainingAccounts(\n        healthRemainingAccounts.map(\n          (pk) =>\n            ({ pubkey: pk, isWritable: false, isSigner: false } as AccountMeta),\n        ),\n      )\n      .instruction();\n\n    return await this.sendAndConfirmTransactionForGroup(\n      group,\n      [...preInstructions, ix, ...postInstructions],\n      { additionalSigners },\n    );\n  }\n\n  public async tokenWithdraw(\n    group: Group,\n    mangoAccount: MangoAccount,\n    mintPk: PublicKey,\n    amount: number,\n    allowBorrow: boolean,\n  ): Promise<TransactionSignature> {\n    const nativeAmount = toNative(amount, group.getMintDecimals(mintPk));\n    const ixes = await this.tokenWithdrawNativeIx(\n      group,\n      mangoAccount,\n      mintPk,\n      nativeAmount,\n      allowBorrow,\n    );\n\n    return await this.sendAndConfirmTransactionForGroup(group, ixes);\n  }\n\n  public async tokenWithdrawNativeIx(\n    group: Group,\n    mangoAccount: MangoAccount,\n    mintPk: PublicKey,\n    nativeAmount: BN,\n    allowBorrow: boolean,\n    healthAccountsToExclude: PublicKey[] = [],\n  ): Promise<TransactionInstruction[]> {\n    const bank = group.getFirstBankByMint(mintPk);\n\n    const tokenAccountPk = await getAssociatedTokenAddress(\n      bank.mint,\n      mangoAccount.owner,\n    );\n\n    // ensure withdraws don't fail with missing ATAs\n    const preInstructions: TransactionInstruction[] = [\n      await createAssociatedTokenAccountIdempotentInstruction(\n        mangoAccount.owner,\n        mangoAccount.owner,\n        bank.mint,\n      ),\n    ];\n\n    const postInstructions: TransactionInstruction[] = [];\n    if (mintPk.equals(WRAPPED_SOL_MINT)) {\n      postInstructions.push(\n        closeAccount({\n          source: tokenAccountPk,\n          destination: mangoAccount.owner,\n          owner: mangoAccount.owner,\n        }),\n      );\n    }\n\n    const healthRemainingAccounts: PublicKey[] =\n      this.buildHealthRemainingAccounts(\n        AccountRetriever.Fixed,\n        group,\n        [mangoAccount],\n        [bank],\n        [],\n      );\n\n    const ix = await this.program.methods\n      .tokenWithdraw(new BN(nativeAmount), allowBorrow)\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        owner: mangoAccount.owner,\n        bank: bank.publicKey,\n        vault: bank.vault,\n        oracle: bank.oracle,\n        tokenAccount: tokenAccountPk,\n      })\n      .remainingAccounts(\n        healthRemainingAccounts\n          .filter(\n            (accounts) =>\n              !healthAccountsToExclude.find((accountsToExclude) =>\n                accounts.equals(accountsToExclude),\n              ),\n          )\n          .map(\n            (pk) =>\n              ({\n                pubkey: pk,\n                isWritable: false,\n                isSigner: false,\n              } as AccountMeta),\n          ),\n      )\n      .instruction();\n\n    return [...preInstructions, ix, ...postInstructions];\n  }\n\n  public async tokenWithdrawNative(\n    group: Group,\n    mangoAccount: MangoAccount,\n    mintPk: PublicKey,\n    nativeAmount: BN,\n    allowBorrow: boolean,\n    healthAccountsToExclude: PublicKey[] = [],\n  ): Promise<TransactionSignature> {\n    const ixs = await this.tokenWithdrawNativeIx(\n      group,\n      mangoAccount,\n      mintPk,\n      nativeAmount,\n      allowBorrow,\n      healthAccountsToExclude,\n    );\n    return await this.sendAndConfirmTransactionForGroup(group, ixs);\n  }\n\n  // Serum\n\n  public async serum3RegisterMarket(\n    group: Group,\n    serum3MarketExternalPk: PublicKey,\n    baseBank: Bank,\n    quoteBank: Bank,\n    marketIndex: number,\n    name: string,\n  ): Promise<TransactionSignature> {\n    const ix = await this.program.methods\n      .serum3RegisterMarket(marketIndex, name)\n      .accounts({\n        group: group.publicKey,\n        admin: (this.program.provider as AnchorProvider).wallet.publicKey,\n        serumProgram: OPENBOOK_PROGRAM_ID[this.cluster],\n        serumMarketExternal: serum3MarketExternalPk,\n        baseBank: baseBank.publicKey,\n        quoteBank: quoteBank.publicKey,\n        payer: (this.program.provider as AnchorProvider).wallet.publicKey,\n      })\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async serum3deregisterMarket(\n    group: Group,\n    externalMarketPk: PublicKey,\n  ): Promise<TransactionSignature> {\n    const serum3Market = group.serum3MarketsMapByExternal.get(\n      externalMarketPk.toBase58(),\n    )!;\n\n    const marketIndexBuf = Buffer.alloc(2);\n    marketIndexBuf.writeUInt16LE(serum3Market.marketIndex);\n    const [indexReservation] = await PublicKey.findProgramAddress(\n      [Buffer.from('Serum3Index'), group.publicKey.toBuffer(), marketIndexBuf],\n      this.program.programId,\n    );\n\n    const ix = await this.program.methods\n      .serum3DeregisterMarket()\n      .accounts({\n        group: group.publicKey,\n        serumMarket: serum3Market.publicKey,\n        indexReservation,\n        solDestination: (this.program.provider as AnchorProvider).wallet\n          .publicKey,\n      })\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async serum3GetMarkets(\n    group: Group,\n    baseTokenIndex?: number,\n    quoteTokenIndex?: number,\n  ): Promise<Serum3Market[]> {\n    const bumpfbuf = Buffer.alloc(1);\n    bumpfbuf.writeUInt8(255);\n\n    const filters: MemcmpFilter[] = [\n      {\n        memcmp: {\n          bytes: group.publicKey.toBase58(),\n          offset: 8,\n        },\n      },\n    ];\n\n    if (baseTokenIndex) {\n      const bbuf = Buffer.alloc(2);\n      bbuf.writeUInt16LE(baseTokenIndex);\n      filters.push({\n        memcmp: {\n          bytes: bs58.encode(bbuf),\n          offset: 40,\n        },\n      });\n    }\n\n    if (quoteTokenIndex) {\n      const qbuf = Buffer.alloc(2);\n      qbuf.writeUInt16LE(quoteTokenIndex);\n      filters.push({\n        memcmp: {\n          bytes: bs58.encode(qbuf),\n          offset: 42,\n        },\n      });\n    }\n\n    return (await this.program.account.serum3Market.all(filters)).map((tuple) =>\n      Serum3Market.from(tuple.publicKey, tuple.account),\n    );\n  }\n\n  public async serum3CreateOpenOrders(\n    group: Group,\n    mangoAccount: MangoAccount,\n    externalMarketPk: PublicKey,\n  ): Promise<TransactionSignature> {\n    const serum3Market: Serum3Market = group.serum3MarketsMapByExternal.get(\n      externalMarketPk.toBase58(),\n    )!;\n\n    const ix = await this.program.methods\n      .serum3CreateOpenOrders()\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        serumMarket: serum3Market.publicKey,\n        serumProgram: serum3Market.serumProgram,\n        serumMarketExternal: serum3Market.serumMarketExternal,\n        owner: (this.program.provider as AnchorProvider).wallet.publicKey,\n        payer: (this.program.provider as AnchorProvider).wallet.publicKey,\n      })\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async serum3CreateOpenOrdersIx(\n    group: Group,\n    mangoAccount: MangoAccount,\n    externalMarketPk: PublicKey,\n  ): Promise<TransactionInstruction> {\n    const serum3Market: Serum3Market = group.serum3MarketsMapByExternal.get(\n      externalMarketPk.toBase58(),\n    )!;\n\n    const ix = await this.program.methods\n      .serum3CreateOpenOrders()\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        serumMarket: serum3Market.publicKey,\n        serumProgram: serum3Market.serumProgram,\n        serumMarketExternal: serum3Market.serumMarketExternal,\n        owner: (this.program.provider as AnchorProvider).wallet.publicKey,\n        payer: (this.program.provider as AnchorProvider).wallet.publicKey,\n      })\n      .instruction();\n\n    return ix;\n  }\n\n  public async serum3CloseOpenOrdersIx(\n    group: Group,\n    mangoAccount: MangoAccount,\n    externalMarketPk: PublicKey,\n  ): Promise<TransactionInstruction> {\n    const serum3Market = group.serum3MarketsMapByExternal.get(\n      externalMarketPk.toBase58(),\n    )!;\n\n    const openOrders = mangoAccount.serum3.find(\n      (account) => account.marketIndex === serum3Market.marketIndex,\n    )?.openOrders;\n\n    return await this.program.methods\n      .serum3CloseOpenOrders()\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        serumMarket: serum3Market.publicKey,\n        serumProgram: serum3Market.serumProgram,\n        serumMarketExternal: serum3Market.serumMarketExternal,\n        openOrders,\n        solDestination: (this.program.provider as AnchorProvider).wallet\n          .publicKey,\n      })\n      .instruction();\n  }\n\n  public async serum3CloseOpenOrders(\n    group: Group,\n    mangoAccount: MangoAccount,\n    externalMarketPk: PublicKey,\n  ): Promise<TransactionSignature> {\n    const ix = await this.serum3CloseOpenOrdersIx(\n      group,\n      mangoAccount,\n      externalMarketPk,\n    );\n\n    return await sendTransaction(\n      this.program.provider as AnchorProvider,\n      [ix],\n      group.addressLookupTablesList,\n      {\n        postSendTxCallback: this.postSendTxCallback,\n      },\n    );\n  }\n\n  public async serum3PlaceOrderIx(\n    group: Group,\n    mangoAccount: MangoAccount,\n    externalMarketPk: PublicKey,\n    side: Serum3Side,\n    price: number,\n    size: number,\n    selfTradeBehavior: Serum3SelfTradeBehavior,\n    orderType: Serum3OrderType,\n    clientOrderId: number,\n    limit: number,\n  ): Promise<TransactionInstruction[]> {\n    const ixs: TransactionInstruction[] = [];\n    const serum3Market = group.serum3MarketsMapByExternal.get(\n      externalMarketPk.toBase58(),\n    )!;\n\n    let openOrderPk: PublicKey | undefined = undefined;\n    const banks: Bank[] = [];\n    const openOrdersForMarket: [Serum3Market, PublicKey][] = [];\n    if (!mangoAccount.getSerum3Account(serum3Market.marketIndex)) {\n      const ix = await this.serum3CreateOpenOrdersIx(\n        group,\n        mangoAccount,\n        serum3Market.serumMarketExternal,\n      );\n      ixs.push(ix);\n      openOrderPk = await serum3Market.findOoPda(\n        this.program.programId,\n        mangoAccount.publicKey,\n      );\n      openOrdersForMarket.push([serum3Market, openOrderPk]);\n      const baseTokenIndex = serum3Market.baseTokenIndex;\n      const quoteTokenIndex = serum3Market.quoteTokenIndex;\n      // only include banks if no deposit has been previously made for same token\n      if (!mangoAccount.getToken(baseTokenIndex)?.isActive()) {\n        banks.push(group.getFirstBankByTokenIndex(baseTokenIndex));\n      }\n      if (!mangoAccount.getToken(quoteTokenIndex)?.isActive()) {\n        banks.push(group.getFirstBankByTokenIndex(quoteTokenIndex));\n      }\n    }\n\n    const healthRemainingAccounts: PublicKey[] =\n      this.buildHealthRemainingAccounts(\n        AccountRetriever.Fixed,\n        group,\n        [mangoAccount],\n        banks,\n        [],\n        openOrdersForMarket,\n      );\n\n    const serum3MarketExternal = group.serum3ExternalMarketsMap.get(\n      externalMarketPk.toBase58(),\n    )!;\n    const serum3MarketExternalVaultSigner =\n      await generateSerum3MarketExternalVaultSignerAddress(\n        this.cluster,\n        serum3Market,\n        serum3MarketExternal,\n      );\n\n    const limitPrice = serum3MarketExternal.priceNumberToLots(price);\n    const maxBaseQuantity = serum3MarketExternal.baseSizeNumberToLots(size);\n    const isTaker = orderType !== Serum3OrderType.postOnly;\n    const maxQuoteQuantity = new BN(\n      serum3MarketExternal.decoded.quoteLotSize.toNumber() *\n        (1 + Math.max(serum3Market.getFeeRates(isTaker), 0)) *\n        serum3MarketExternal.baseSizeNumberToLots(size).toNumber() *\n        serum3MarketExternal.priceNumberToLots(price).toNumber(),\n    );\n\n    const payerTokenIndex = ((): TokenIndex => {\n      if (side == Serum3Side.bid) {\n        return serum3Market.quoteTokenIndex;\n      } else {\n        return serum3Market.baseTokenIndex;\n      }\n    })();\n\n    const payerBank = group.getFirstBankByTokenIndex(payerTokenIndex);\n    const ix = await this.program.methods\n      .serum3PlaceOrder(\n        side,\n        limitPrice,\n        maxBaseQuantity,\n        maxQuoteQuantity,\n        selfTradeBehavior,\n        orderType,\n        new BN(clientOrderId),\n        limit,\n      )\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        owner: (this.program.provider as AnchorProvider).wallet.publicKey,\n        openOrders:\n          openOrderPk ||\n          mangoAccount.getSerum3Account(serum3Market.marketIndex)?.openOrders,\n        serumMarket: serum3Market.publicKey,\n        serumProgram: OPENBOOK_PROGRAM_ID[this.cluster],\n        serumMarketExternal: serum3Market.serumMarketExternal,\n        marketBids: serum3MarketExternal.bidsAddress,\n        marketAsks: serum3MarketExternal.asksAddress,\n        marketEventQueue: serum3MarketExternal.decoded.eventQueue,\n        marketRequestQueue: serum3MarketExternal.decoded.requestQueue,\n        marketBaseVault: serum3MarketExternal.decoded.baseVault,\n        marketQuoteVault: serum3MarketExternal.decoded.quoteVault,\n        marketVaultSigner: serum3MarketExternalVaultSigner,\n        payerBank: payerBank.publicKey,\n        payerVault: payerBank.vault,\n        payerOracle: payerBank.oracle,\n      })\n      .remainingAccounts(\n        healthRemainingAccounts.map(\n          (pk) =>\n            ({ pubkey: pk, isWritable: false, isSigner: false } as AccountMeta),\n        ),\n      )\n      .instruction();\n\n    ixs.push(ix);\n\n    return ixs;\n  }\n\n  public async serum3PlaceOrder(\n    group: Group,\n    mangoAccount: MangoAccount,\n    externalMarketPk: PublicKey,\n    side: Serum3Side,\n    price: number,\n    size: number,\n    selfTradeBehavior: Serum3SelfTradeBehavior,\n    orderType: Serum3OrderType,\n    clientOrderId: number,\n    limit: number,\n  ): Promise<TransactionSignature> {\n    const placeOrderIxes = await this.serum3PlaceOrderIx(\n      group,\n      mangoAccount,\n      externalMarketPk,\n      side,\n      price,\n      size,\n      selfTradeBehavior,\n      orderType,\n      clientOrderId,\n      limit,\n    );\n    const settleIx = await this.serum3SettleFundsIx(\n      group,\n      mangoAccount,\n      externalMarketPk,\n    );\n\n    return await this.sendAndConfirmTransactionForGroup(group, [\n      ...placeOrderIxes,\n      settleIx,\n    ]);\n  }\n\n  public async serum3CancelAllOrders(\n    group: Group,\n    mangoAccount: MangoAccount,\n    externalMarketPk: PublicKey,\n    limit?: number,\n  ): Promise<TransactionSignature> {\n    const serum3Market = group.serum3MarketsMapByExternal.get(\n      externalMarketPk.toBase58(),\n    )!;\n\n    const serum3MarketExternal = group.serum3ExternalMarketsMap.get(\n      externalMarketPk.toBase58(),\n    )!;\n\n    const ix = await this.program.methods\n      .serum3CancelAllOrders(limit ? limit : 10)\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        owner: (this.program.provider as AnchorProvider).wallet.publicKey,\n        openOrders: mangoAccount.getSerum3Account(serum3Market.marketIndex)\n          ?.openOrders,\n        serumMarket: serum3Market.publicKey,\n        serumProgram: OPENBOOK_PROGRAM_ID[this.cluster],\n        serumMarketExternal: serum3Market.serumMarketExternal,\n        marketBids: serum3MarketExternal.bidsAddress,\n        marketAsks: serum3MarketExternal.asksAddress,\n        marketEventQueue: serum3MarketExternal.decoded.eventQueue,\n      })\n      .instruction();\n\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async serum3SettleFundsIx(\n    group: Group,\n    mangoAccount: MangoAccount,\n    externalMarketPk: PublicKey,\n  ): Promise<TransactionInstruction> {\n    const serum3Market = group.serum3MarketsMapByExternal.get(\n      externalMarketPk.toBase58(),\n    )!;\n    const serum3MarketExternal = group.serum3ExternalMarketsMap.get(\n      externalMarketPk.toBase58(),\n    )!;\n\n    const [serum3MarketExternalVaultSigner, openOrderPublicKey] =\n      await Promise.all([\n        generateSerum3MarketExternalVaultSignerAddress(\n          this.cluster,\n          serum3Market,\n          serum3MarketExternal,\n        ),\n        serum3Market.findOoPda(this.program.programId, mangoAccount.publicKey),\n      ]);\n\n    const ix = await this.program.methods\n      .serum3SettleFunds()\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        owner: (this.program.provider as AnchorProvider).wallet.publicKey,\n        openOrders: openOrderPublicKey,\n        serumMarket: serum3Market.publicKey,\n        serumProgram: OPENBOOK_PROGRAM_ID[this.cluster],\n        serumMarketExternal: serum3Market.serumMarketExternal,\n        marketBaseVault: serum3MarketExternal.decoded.baseVault,\n        marketQuoteVault: serum3MarketExternal.decoded.quoteVault,\n        marketVaultSigner: serum3MarketExternalVaultSigner,\n        quoteBank: group.getFirstBankByTokenIndex(serum3Market.quoteTokenIndex)\n          .publicKey,\n        quoteVault: group.getFirstBankByTokenIndex(serum3Market.quoteTokenIndex)\n          .vault,\n        baseBank: group.getFirstBankByTokenIndex(serum3Market.baseTokenIndex)\n          .publicKey,\n        baseVault: group.getFirstBankByTokenIndex(serum3Market.baseTokenIndex)\n          .vault,\n      })\n      .instruction();\n\n    return ix;\n  }\n\n  public async serum3SettleFunds(\n    group: Group,\n    mangoAccount: MangoAccount,\n    externalMarketPk: PublicKey,\n  ): Promise<TransactionSignature> {\n    const ix = await this.serum3SettleFundsIx(\n      group,\n      mangoAccount,\n      externalMarketPk,\n    );\n\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async serum3CancelOrderIx(\n    group: Group,\n    mangoAccount: MangoAccount,\n    externalMarketPk: PublicKey,\n    side: Serum3Side,\n    orderId: BN,\n  ): Promise<TransactionInstruction> {\n    const serum3Market = group.serum3MarketsMapByExternal.get(\n      externalMarketPk.toBase58(),\n    )!;\n\n    const serum3MarketExternal = group.serum3ExternalMarketsMap.get(\n      externalMarketPk.toBase58(),\n    )!;\n\n    const ix = await this.program.methods\n      .serum3CancelOrder(side, orderId)\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        openOrders: mangoAccount.getSerum3Account(serum3Market.marketIndex)\n          ?.openOrders,\n        serumMarket: serum3Market.publicKey,\n        serumProgram: OPENBOOK_PROGRAM_ID[this.cluster],\n        serumMarketExternal: serum3Market.serumMarketExternal,\n        marketBids: serum3MarketExternal.bidsAddress,\n        marketAsks: serum3MarketExternal.asksAddress,\n        marketEventQueue: serum3MarketExternal.decoded.eventQueue,\n      })\n      .instruction();\n\n    return ix;\n  }\n\n  public async serum3CancelOrder(\n    group: Group,\n    mangoAccount: MangoAccount,\n    externalMarketPk: PublicKey,\n    side: Serum3Side,\n    orderId: BN,\n  ): Promise<TransactionSignature> {\n    const ixes = await Promise.all([\n      this.serum3CancelOrderIx(\n        group,\n        mangoAccount,\n        externalMarketPk,\n        side,\n        orderId,\n      ),\n      this.serum3SettleFundsIx(group, mangoAccount, externalMarketPk),\n    ]);\n\n    return await this.sendAndConfirmTransactionForGroup(group, ixes);\n  }\n\n  /// perps\n\n  public async perpCreateMarket(\n    group: Group,\n    oraclePk: PublicKey,\n    perpMarketIndex: number,\n    name: string,\n    oracleConfig: OracleConfigParams,\n    baseDecimals: number,\n    quoteLotSize: number,\n    baseLotSize: number,\n    maintBaseAssetWeight: number,\n    initBaseAssetWeight: number,\n    maintBaseLiabWeight: number,\n    initBaseLiabWeight: number,\n    maintOverallAssetWeight: number,\n    initOverallAssetWeight: number,\n    baseLiquidationFee: number,\n    makerFee: number,\n    takerFee: number,\n    feePenalty: number,\n    minFunding: number,\n    maxFunding: number,\n    impactQuantity: number,\n    groupInsuranceFund: boolean,\n    settleFeeFlat: number,\n    settleFeeAmountThreshold: number,\n    settleFeeFractionLowHealth: number,\n    settleTokenIndex: number,\n    settlePnlLimitFactor: number,\n    settlePnlLimitWindowSize: number,\n    positivePnlLiquidationFee: number,\n  ): Promise<TransactionSignature> {\n    const bids = new Keypair();\n    const asks = new Keypair();\n    const eventQueue = new Keypair();\n\n    const bookSideSize = (this.program as any)._coder.accounts.size(\n      (this.program.account.bookSide as any)._idlAccount,\n    );\n    const eventQueueSize = (this.program as any)._coder.accounts.size(\n      (this.program.account.eventQueue as any)._idlAccount,\n    );\n\n    const ix = await this.program.methods\n      .perpCreateMarket(\n        perpMarketIndex,\n        name,\n        oracleConfig,\n        baseDecimals,\n        new BN(quoteLotSize),\n        new BN(baseLotSize),\n        maintBaseAssetWeight,\n        initBaseAssetWeight,\n        maintBaseLiabWeight,\n        initBaseLiabWeight,\n        maintOverallAssetWeight,\n        initOverallAssetWeight,\n        baseLiquidationFee,\n        makerFee,\n        takerFee,\n        minFunding,\n        maxFunding,\n        new BN(impactQuantity),\n        groupInsuranceFund,\n        feePenalty,\n        settleFeeFlat,\n        settleFeeAmountThreshold,\n        settleFeeFractionLowHealth,\n        settleTokenIndex,\n        settlePnlLimitFactor,\n        new BN(settlePnlLimitWindowSize),\n        positivePnlLiquidationFee,\n      )\n      .accounts({\n        group: group.publicKey,\n        admin: (this.program.provider as AnchorProvider).wallet.publicKey,\n        oracle: oraclePk,\n        bids: bids.publicKey,\n        asks: asks.publicKey,\n        eventQueue: eventQueue.publicKey,\n        payer: (this.program.provider as AnchorProvider).wallet.publicKey,\n      })\n      .instruction();\n    const preInstructions = [\n      // book sides\n      SystemProgram.createAccount({\n        programId: this.program.programId,\n        space: bookSideSize,\n        lamports:\n          await this.program.provider.connection.getMinimumBalanceForRentExemption(\n            bookSideSize,\n          ),\n        fromPubkey: (this.program.provider as AnchorProvider).wallet.publicKey,\n        newAccountPubkey: bids.publicKey,\n      }),\n      SystemProgram.createAccount({\n        programId: this.program.programId,\n        space: bookSideSize,\n        lamports:\n          await this.program.provider.connection.getMinimumBalanceForRentExemption(\n            bookSideSize,\n          ),\n        fromPubkey: (this.program.provider as AnchorProvider).wallet.publicKey,\n        newAccountPubkey: asks.publicKey,\n      }),\n      // event queue\n      SystemProgram.createAccount({\n        programId: this.program.programId,\n        space: eventQueueSize,\n        lamports:\n          await this.program.provider.connection.getMinimumBalanceForRentExemption(\n            eventQueueSize,\n          ),\n        fromPubkey: (this.program.provider as AnchorProvider).wallet.publicKey,\n        newAccountPubkey: eventQueue.publicKey,\n      }),\n    ];\n    return await this.sendAndConfirmTransactionForGroup(\n      group,\n      [...preInstructions, ix],\n      {\n        additionalSigners: [bids, asks, eventQueue],\n      },\n    );\n  }\n\n  public async perpEditMarket(\n    group: Group,\n    perpMarketIndex: PerpMarketIndex,\n    params: PerpEditParams,\n  ): Promise<TransactionSignature> {\n    const perpMarket = group.getPerpMarketByMarketIndex(perpMarketIndex);\n\n    const ix = await this.program.methods\n      .perpEditMarket(\n        params.oracle,\n        params.oracleConfig,\n        params.baseDecimals,\n        params.maintBaseAssetWeight,\n        params.initBaseAssetWeight,\n        params.maintBaseLiabWeight,\n        params.initBaseLiabWeight,\n        params.maintOverallAssetWeight,\n        params.initOverallAssetWeight,\n        params.baseLiquidationFee,\n        params.makerFee,\n        params.takerFee,\n        params.minFunding,\n        params.maxFunding,\n        params.impactQuantity !== null ? new BN(params.impactQuantity) : null,\n        params.groupInsuranceFund,\n        params.feePenalty,\n        params.settleFeeFlat,\n        params.settleFeeAmountThreshold,\n        params.settleFeeFractionLowHealth,\n        params.stablePriceDelayIntervalSeconds,\n        params.stablePriceDelayGrowthLimit,\n        params.stablePriceGrowthLimit,\n        params.settlePnlLimitFactor,\n        params.settlePnlLimitWindowSize !== null\n          ? new BN(params.settlePnlLimitWindowSize)\n          : null,\n        params.reduceOnly,\n        params.resetStablePrice ?? false,\n        params.positivePnlLiquidationFee,\n      )\n      .accounts({\n        group: group.publicKey,\n        oracle: params.oracle ?? perpMarket.oracle,\n        admin: (this.program.provider as AnchorProvider).wallet.publicKey,\n        perpMarket: perpMarket.publicKey,\n      })\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async perpCloseMarket(\n    group: Group,\n    perpMarketIndex: PerpMarketIndex,\n  ): Promise<TransactionSignature> {\n    const perpMarket = group.getPerpMarketByMarketIndex(perpMarketIndex);\n\n    const ix = await this.program.methods\n      .perpCloseMarket()\n      .accounts({\n        group: group.publicKey,\n        admin: (this.program.provider as AnchorProvider).wallet.publicKey,\n        perpMarket: perpMarket.publicKey,\n        bids: perpMarket.bids,\n        asks: perpMarket.asks,\n        eventQueue: perpMarket.eventQueue,\n        solDestination: (this.program.provider as AnchorProvider).wallet\n          .publicKey,\n      })\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async perpGetMarkets(group: Group): Promise<PerpMarket[]> {\n    const bumpfbuf = Buffer.alloc(1);\n    bumpfbuf.writeUInt8(255);\n\n    const filters: MemcmpFilter[] = [\n      {\n        memcmp: {\n          bytes: group.publicKey.toBase58(),\n          offset: 8,\n        },\n      },\n    ];\n\n    return (await this.program.account.perpMarket.all(filters)).map((tuple) =>\n      PerpMarket.from(tuple.publicKey, tuple.account),\n    );\n  }\n\n  public async perpDeactivatePositionIx(\n    group: Group,\n    mangoAccount: MangoAccount,\n    perpMarketIndex: PerpMarketIndex,\n  ): Promise<TransactionInstruction> {\n    const perpMarket = group.getPerpMarketByMarketIndex(perpMarketIndex);\n    const healthRemainingAccounts: PublicKey[] =\n      this.buildHealthRemainingAccounts(\n        AccountRetriever.Fixed,\n        group,\n        [mangoAccount],\n        [],\n        [],\n      );\n    return await this.program.methods\n      .perpDeactivatePosition()\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        perpMarket: perpMarket.publicKey,\n        owner: (this.program.provider as AnchorProvider).wallet.publicKey,\n      })\n      .remainingAccounts(\n        healthRemainingAccounts.map(\n          (pk) =>\n            ({ pubkey: pk, isWritable: false, isSigner: false } as AccountMeta),\n        ),\n      )\n      .instruction();\n  }\n\n  public async perpDeactivatePosition(\n    group: Group,\n    mangoAccount: MangoAccount,\n    perpMarketIndex: PerpMarketIndex,\n  ): Promise<TransactionSignature> {\n    const ix = await this.perpDeactivatePositionIx(\n      group,\n      mangoAccount,\n      perpMarketIndex,\n    );\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  // perpPlaceOrder ix returns an optional, custom order id,\n  // but, since we use a customer tx sender, this method\n  // doesn't return it\n  public async perpPlaceOrder(\n    group: Group,\n    mangoAccount: MangoAccount,\n    perpMarketIndex: PerpMarketIndex,\n    side: PerpOrderSide,\n    price: number,\n    quantity: number,\n    maxQuoteQuantity?: number,\n    clientOrderId?: number,\n    orderType?: PerpOrderType,\n    reduceOnly?: boolean,\n    expiryTimestamp?: number,\n    limit?: number,\n  ): Promise<TransactionSignature> {\n    const ix = await this.perpPlaceOrderIx(\n      group,\n      mangoAccount,\n      perpMarketIndex,\n      side,\n      price,\n      quantity,\n      maxQuoteQuantity,\n      clientOrderId,\n      orderType,\n      reduceOnly,\n      expiryTimestamp,\n      limit,\n    );\n\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async perpPlaceOrderIx(\n    group: Group,\n    mangoAccount: MangoAccount,\n    perpMarketIndex: PerpMarketIndex,\n    side: PerpOrderSide,\n    price: number,\n    quantity: number,\n    maxQuoteQuantity?: number,\n    clientOrderId?: number,\n    orderType?: PerpOrderType,\n    reduceOnly?: boolean,\n    expiryTimestamp?: number,\n    limit?: number,\n  ): Promise<TransactionInstruction> {\n    const perpMarket = group.getPerpMarketByMarketIndex(perpMarketIndex);\n    const healthRemainingAccounts: PublicKey[] =\n      this.buildHealthRemainingAccounts(\n        AccountRetriever.Fixed,\n        group,\n        [mangoAccount],\n        // Settlement token bank, because a position for it may be created\n        [group.getFirstBankByTokenIndex(0 as TokenIndex)],\n        [perpMarket],\n      );\n    return await this.program.methods\n      .perpPlaceOrder(\n        side,\n        perpMarket.uiPriceToLots(price),\n        perpMarket.uiBaseToLots(quantity),\n        maxQuoteQuantity\n          ? perpMarket.uiQuoteToLots(maxQuoteQuantity)\n          : I64_MAX_BN,\n        new BN(clientOrderId ? clientOrderId : Date.now()),\n        orderType ? orderType : PerpOrderType.limit,\n        reduceOnly ? reduceOnly : false,\n        new BN(expiryTimestamp ? expiryTimestamp : 0),\n        limit ? limit : 10,\n      )\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        perpMarket: perpMarket.publicKey,\n        bids: perpMarket.bids,\n        asks: perpMarket.asks,\n        eventQueue: perpMarket.eventQueue,\n        oracle: perpMarket.oracle,\n        owner: (this.program.provider as AnchorProvider).wallet.publicKey,\n      })\n      .remainingAccounts(\n        healthRemainingAccounts.map(\n          (pk) =>\n            ({ pubkey: pk, isWritable: false, isSigner: false } as AccountMeta),\n        ),\n      )\n      .instruction();\n  }\n\n  public async perpPlaceOrderPegged(\n    group: Group,\n    mangoAccount: MangoAccount,\n    perpMarketIndex: PerpMarketIndex,\n    side: PerpOrderSide,\n    priceOffset: number,\n    pegLimit: number,\n    quantity: number,\n    maxQuoteQuantity?: number,\n    clientOrderId?: number,\n    orderType?: PerpOrderType,\n    reduceOnly?: boolean,\n    expiryTimestamp?: number,\n    limit?: number,\n  ): Promise<TransactionSignature> {\n    const ix = await this.perpPlaceOrderPeggedIx(\n      group,\n      mangoAccount,\n      perpMarketIndex,\n      side,\n      priceOffset,\n      pegLimit,\n      quantity,\n      maxQuoteQuantity,\n      clientOrderId,\n      orderType,\n      reduceOnly,\n      expiryTimestamp,\n      limit,\n    );\n\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async perpPlaceOrderPeggedIx(\n    group: Group,\n    mangoAccount: MangoAccount,\n    perpMarketIndex: PerpMarketIndex,\n    side: PerpOrderSide,\n    priceOffset: number,\n    pegLimit: number,\n    quantity: number,\n    maxQuoteQuantity?: number,\n    clientOrderId?: number,\n    orderType?: PerpOrderType,\n    reduceOnly?: boolean,\n    expiryTimestamp?: number,\n    limit?: number,\n  ): Promise<TransactionInstruction> {\n    const perpMarket = group.getPerpMarketByMarketIndex(perpMarketIndex);\n    const healthRemainingAccounts: PublicKey[] =\n      this.buildHealthRemainingAccounts(\n        AccountRetriever.Fixed,\n        group,\n        [mangoAccount],\n        // Settlement token bank, because a position for it may be created\n        [group.getFirstBankByTokenIndex(0 as TokenIndex)],\n        [perpMarket],\n      );\n    return await this.program.methods\n      .perpPlaceOrderPegged(\n        side,\n        perpMarket.uiPriceToLots(priceOffset),\n        perpMarket.uiPriceToLots(pegLimit),\n        perpMarket.uiBaseToLots(quantity),\n        maxQuoteQuantity\n          ? perpMarket.uiQuoteToLots(maxQuoteQuantity)\n          : I64_MAX_BN,\n        new BN(clientOrderId ?? Date.now()),\n        orderType ? orderType : PerpOrderType.limit,\n        reduceOnly ? reduceOnly : false,\n        new BN(expiryTimestamp ?? 0),\n        limit ? limit : 10,\n        -1,\n      )\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        perpMarket: perpMarket.publicKey,\n        bids: perpMarket.bids,\n        asks: perpMarket.asks,\n        eventQueue: perpMarket.eventQueue,\n        oracle: perpMarket.oracle,\n        owner: (this.program.provider as AnchorProvider).wallet.publicKey,\n      })\n      .remainingAccounts(\n        healthRemainingAccounts.map(\n          (pk) =>\n            ({ pubkey: pk, isWritable: false, isSigner: false } as AccountMeta),\n        ),\n      )\n      .instruction();\n  }\n\n  public async perpCancelOrderIx(\n    group: Group,\n    mangoAccount: MangoAccount,\n    perpMarketIndex: PerpMarketIndex,\n    orderId: BN,\n  ): Promise<TransactionInstruction> {\n    const perpMarket = group.getPerpMarketByMarketIndex(perpMarketIndex);\n    return await this.program.methods\n      .perpCancelOrder(new BN(orderId))\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        owner: (this.program.provider as AnchorProvider).wallet.publicKey,\n        perpMarket: perpMarket.publicKey,\n        bids: perpMarket.bids,\n        asks: perpMarket.asks,\n      })\n      .instruction();\n  }\n\n  public async perpCancelOrder(\n    group: Group,\n    mangoAccount: MangoAccount,\n    perpMarketIndex: PerpMarketIndex,\n    orderId: BN,\n  ): Promise<TransactionSignature> {\n    const ix = await this.perpCancelOrderIx(\n      group,\n      mangoAccount,\n      perpMarketIndex,\n      orderId,\n    );\n\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async perpCancelAllOrders(\n    group: Group,\n    mangoAccount: MangoAccount,\n    perpMarketIndex: PerpMarketIndex,\n    limit: number,\n  ): Promise<TransactionSignature> {\n    const ix = await this.perpCancelAllOrdersIx(\n      group,\n      mangoAccount,\n      perpMarketIndex,\n      limit,\n    );\n\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async perpCancelAllOrdersIx(\n    group: Group,\n    mangoAccount: MangoAccount,\n    perpMarketIndex: PerpMarketIndex,\n    limit: number,\n  ): Promise<TransactionInstruction> {\n    const perpMarket = group.getPerpMarketByMarketIndex(perpMarketIndex);\n    return await this.program.methods\n      .perpCancelAllOrders(limit)\n      .accounts({\n        group: group.publicKey,\n        account: mangoAccount.publicKey,\n        perpMarket: perpMarket.publicKey,\n        bids: perpMarket.bids,\n        asks: perpMarket.asks,\n        owner: (this.program.provider as AnchorProvider).wallet.publicKey,\n      })\n      .instruction();\n  }\n\n  async perpSettlePnl(\n    group: Group,\n    profitableAccount: MangoAccount,\n    unprofitableAccount: MangoAccount,\n    settler: MangoAccount,\n    perpMarketIndex: PerpMarketIndex,\n  ): Promise<TransactionSignature> {\n    const perpMarket = group.getPerpMarketByMarketIndex(perpMarketIndex);\n    const healthRemainingAccounts: PublicKey[] =\n      this.buildHealthRemainingAccounts(\n        AccountRetriever.Scanning,\n        group,\n        [profitableAccount, unprofitableAccount],\n        [group.getFirstBankByTokenIndex(0 as TokenIndex)],\n        [perpMarket],\n      );\n    const bank = group.banksMapByTokenIndex.get(0 as TokenIndex)![0];\n    const ix = await this.program.methods\n      .perpSettlePnl()\n      .accounts({\n        group: group.publicKey,\n        accountA: profitableAccount.publicKey,\n        accountB: unprofitableAccount.publicKey,\n        perpMarket: perpMarket.publicKey,\n        oracle: perpMarket.oracle,\n        settleOracle: bank.oracle,\n        settleBank: bank.publicKey,\n        settler: settler.publicKey,\n        settlerOwner: (this.program.provider as AnchorProvider).wallet\n          .publicKey,\n      })\n      .remainingAccounts(\n        healthRemainingAccounts.map(\n          (pk) =>\n            ({ pubkey: pk, isWritable: false, isSigner: false } as AccountMeta),\n        ),\n      )\n      .instruction();\n\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  async perpSettleFees(\n    group: Group,\n    account: MangoAccount,\n    perpMarketIndex: PerpMarketIndex,\n    maxSettleAmount: BN,\n  ): Promise<TransactionSignature> {\n    const perpMarket = group.getPerpMarketByMarketIndex(perpMarketIndex);\n    const healthRemainingAccounts: PublicKey[] =\n      this.buildHealthRemainingAccounts(\n        AccountRetriever.Fixed,\n        group,\n        [account], // Account must be unprofitable\n        [group.getFirstBankByTokenIndex(0 as TokenIndex)],\n        [perpMarket],\n      );\n    const bank = group.banksMapByTokenIndex.get(0 as TokenIndex)![0];\n    const ix = await this.program.methods\n      .perpSettleFees(maxSettleAmount)\n      .accounts({\n        group: group.publicKey,\n        account: account.publicKey,\n        perpMarket: perpMarket.publicKey,\n        oracle: perpMarket.oracle,\n        settleOracle: bank.oracle,\n        settleBank: bank.publicKey,\n      })\n      .remainingAccounts(\n        healthRemainingAccounts.map(\n          (pk) =>\n            ({ pubkey: pk, isWritable: false, isSigner: false } as AccountMeta),\n        ),\n      )\n      .instruction();\n\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async perpConsumeEvents(\n    group: Group,\n    perpMarketIndex: PerpMarketIndex,\n    accounts: PublicKey[],\n    limit: number,\n  ): Promise<TransactionSignature> {\n    const perpMarket = group.getPerpMarketByMarketIndex(perpMarketIndex);\n    const ix = await this.program.methods\n      .perpConsumeEvents(new BN(limit))\n      .accounts({\n        group: group.publicKey,\n        perpMarket: perpMarket.publicKey,\n        eventQueue: perpMarket.eventQueue,\n      })\n      .remainingAccounts(\n        accounts.map(\n          (pk) =>\n            ({ pubkey: pk, isWritable: true, isSigner: false } as AccountMeta),\n        ),\n      )\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async perpConsumeAllEvents(\n    group: Group,\n    perpMarketIndex: PerpMarketIndex,\n  ): Promise<void> {\n    const limit = 8;\n    const perpMarket = group.getPerpMarketByMarketIndex(perpMarketIndex);\n    const eventQueue = await perpMarket.loadEventQueue(this);\n    const unconsumedEvents = eventQueue.getUnconsumedEvents();\n    while (unconsumedEvents.length > 0) {\n      const events = unconsumedEvents.splice(0, limit);\n      const accounts = events\n        .map((ev) => {\n          switch (ev.eventType) {\n            case PerpEventQueue.FILL_EVENT_TYPE: {\n              const fill = <FillEvent>ev;\n              return [fill.maker, fill.taker];\n            }\n            case PerpEventQueue.OUT_EVENT_TYPE: {\n              const out = <OutEvent>ev;\n              return [out.owner];\n            }\n            case PerpEventQueue.LIQUIDATE_EVENT_TYPE:\n              return [];\n            default:\n              throw new Error(`Unknown event with eventType ${ev.eventType}!`);\n          }\n        })\n        .flat();\n\n      await this.perpConsumeEvents(group, perpMarketIndex, accounts, limit);\n    }\n  }\n\n  public async marginTrade({\n    group,\n    mangoAccount,\n    inputMintPk,\n    amountIn,\n    outputMintPk,\n    userDefinedInstructions,\n    userDefinedAlts = [],\n    // margin trade is a general function\n    // set flash_loan_type to FlashLoanType.swap if you desire the transaction to be recorded as a swap\n    flashLoanType,\n  }: {\n    group: Group;\n    mangoAccount: MangoAccount;\n    inputMintPk: PublicKey;\n    amountIn: number;\n    outputMintPk: PublicKey;\n    userDefinedInstructions: TransactionInstruction[];\n    userDefinedAlts: AddressLookupTableAccount[];\n    flashLoanType: FlashLoanType;\n  }): Promise<TransactionSignature> {\n    const inputBank: Bank = group.getFirstBankByMint(inputMintPk);\n    const outputBank: Bank = group.getFirstBankByMint(outputMintPk);\n\n    const healthRemainingAccounts: PublicKey[] =\n      this.buildHealthRemainingAccounts(\n        AccountRetriever.Fixed,\n        group,\n        [mangoAccount],\n        [inputBank, outputBank],\n        [],\n      );\n    const parsedHealthAccounts = healthRemainingAccounts.map(\n      (pk) =>\n        ({\n          pubkey: pk,\n          isWritable: false,\n          isSigner: false,\n        } as AccountMeta),\n    );\n\n    /*\n     * Find or create associated token accounts\n     */\n    const inputTokenAccountPk = await getAssociatedTokenAddress(\n      inputBank.mint,\n      mangoAccount.owner,\n    );\n    const inputTokenAccExists =\n      await this.program.provider.connection.getAccountInfo(\n        inputTokenAccountPk,\n      );\n    const preInstructions: TransactionInstruction[] = [];\n    if (!inputTokenAccExists) {\n      preInstructions.push(\n        await createAssociatedTokenAccountIdempotentInstruction(\n          mangoAccount.owner,\n          mangoAccount.owner,\n          inputBank.mint,\n        ),\n      );\n    }\n\n    const outputTokenAccountPk = await getAssociatedTokenAddress(\n      outputBank.mint,\n      mangoAccount.owner,\n    );\n    const outputTokenAccExists =\n      await this.program.provider.connection.getAccountInfo(\n        outputTokenAccountPk,\n      );\n    if (!outputTokenAccExists) {\n      preInstructions.push(\n        await createAssociatedTokenAccountIdempotentInstruction(\n          mangoAccount.owner,\n          mangoAccount.owner,\n          outputBank.mint,\n        ),\n      );\n    }\n\n    const inputBankAccount = {\n      pubkey: inputBank.publicKey,\n      isWritable: true,\n      isSigner: false,\n    };\n    const outputBankAccount = {\n      pubkey: outputBank.publicKey,\n      isWritable: true,\n      isSigner: false,\n    };\n    const inputBankVault = {\n      pubkey: inputBank.vault,\n      isWritable: true,\n      isSigner: false,\n    };\n    const outputBankVault = {\n      pubkey: outputBank.vault,\n      isWritable: true,\n      isSigner: false,\n    };\n    const inputATA = {\n      pubkey: inputTokenAccountPk,\n      isWritable: true,\n      isSigner: false,\n    };\n    const outputATA = {\n      pubkey: outputTokenAccountPk,\n      isWritable: false,\n      isSigner: false,\n    };\n    const groupAM = {\n      pubkey: group.publicKey,\n      isWritable: false,\n      isSigner: false,\n    };\n\n    const flashLoanEndIx = await this.program.methods\n      .flashLoanEnd(flashLoanType)\n      .accounts({\n        account: mangoAccount.publicKey,\n      })\n      .remainingAccounts([\n        ...parsedHealthAccounts,\n        inputBankVault,\n        outputBankVault,\n        inputATA,\n        {\n          isWritable: true,\n          pubkey: outputTokenAccountPk,\n          isSigner: false,\n        },\n        groupAM,\n      ])\n      .instruction();\n\n    const flashLoanBeginIx = await this.program.methods\n      .flashLoanBegin([\n        toNative(amountIn, inputBank.mintDecimals),\n        new BN(\n          0,\n        ) /* we don't care about borrowing the target amount, this is just a dummy */,\n      ])\n      .accounts({\n        account: mangoAccount.publicKey,\n        owner: (this.program.provider as AnchorProvider).wallet.publicKey,\n        instructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n      })\n      .remainingAccounts([\n        inputBankAccount,\n        outputBankAccount,\n        inputBankVault,\n        outputBankVault,\n        inputATA,\n        outputATA,\n        groupAM,\n      ])\n      .instruction();\n\n    return await this.sendAndConfirmTransactionForGroup(\n      group,\n      [\n        ...preInstructions,\n        flashLoanBeginIx,\n        ...userDefinedInstructions.filter((ix) => ix.keys.length > 2),\n        flashLoanEndIx,\n      ],\n      { alts: [...group.addressLookupTablesList, ...userDefinedAlts] },\n    );\n  }\n\n  public async updateIndexAndRate(\n    group: Group,\n    mintPk: PublicKey,\n  ): Promise<TransactionSignature> {\n    const bank = group.getFirstBankByMint(mintPk);\n    const mintInfo = group.mintInfosMapByMint.get(mintPk.toString())!;\n\n    const ix = await this.program.methods\n      .tokenUpdateIndexAndRate()\n      .accounts({\n        group: group.publicKey,\n        mintInfo: mintInfo.publicKey,\n        oracle: mintInfo.oracle,\n        instructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n      })\n      .remainingAccounts([\n        {\n          pubkey: bank.publicKey,\n          isWritable: true,\n          isSigner: false,\n        } as AccountMeta,\n      ])\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  /// liquidations\n\n  public async liqTokenWithToken(\n    group: Group,\n    liqor: MangoAccount,\n    liqee: MangoAccount,\n    assetMintPk: PublicKey,\n    liabMintPk: PublicKey,\n    maxLiabTransfer: number,\n  ): Promise<TransactionSignature> {\n    const assetBank: Bank = group.getFirstBankByMint(assetMintPk);\n    const liabBank: Bank = group.getFirstBankByMint(liabMintPk);\n\n    const healthRemainingAccounts: PublicKey[] =\n      this.buildHealthRemainingAccounts(\n        AccountRetriever.Scanning,\n        group,\n        [liqor, liqee],\n        [assetBank, liabBank],\n        [],\n      );\n\n    const parsedHealthAccounts = healthRemainingAccounts.map(\n      (pk) =>\n        ({\n          pubkey: pk,\n          isWritable:\n            pk.equals(assetBank.publicKey) || pk.equals(liabBank.publicKey)\n              ? true\n              : false,\n          isSigner: false,\n        } as AccountMeta),\n    );\n\n    const ix = await this.program.methods\n      .liqTokenWithToken(assetBank.tokenIndex, liabBank.tokenIndex, {\n        val: I80F48.fromNumber(maxLiabTransfer).getData(),\n      })\n      .accounts({\n        group: group.publicKey,\n        liqor: liqor.publicKey,\n        liqee: liqee.publicKey,\n        liqorOwner: liqor.owner,\n      })\n      .remainingAccounts(parsedHealthAccounts)\n      .instruction();\n\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async altSet(\n    group: Group,\n    addressLookupTable: PublicKey,\n    index: number,\n  ): Promise<TransactionSignature> {\n    const ix = await this.program.methods\n      .altSet(index)\n      .accounts({\n        group: group.publicKey,\n        admin: (this.program.provider as AnchorProvider).wallet.publicKey,\n        addressLookupTable,\n      })\n      .instruction();\n\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async altExtend(\n    group: Group,\n    addressLookupTable: PublicKey,\n    index: number,\n    pks: PublicKey[],\n  ): Promise<TransactionSignature> {\n    const ix = await this.program.methods\n      .altExtend(index, pks)\n      .accounts({\n        group: group.publicKey,\n        admin: (this.program.provider as AnchorProvider).wallet.publicKey,\n        payer: (this.program.provider as AnchorProvider).wallet.publicKey,\n        addressLookupTable,\n      })\n      .instruction();\n    return await this.sendAndConfirmTransactionForGroup(group, [ix]);\n  }\n\n  public async healthRegionBeginIx(\n    group: Group,\n    account: MangoAccount,\n    banks: Bank[] = [],\n    perpMarkets: PerpMarket[] = [],\n  ): Promise<TransactionInstruction> {\n    const healthRemainingAccounts: PublicKey[] =\n      this.buildHealthRemainingAccounts(\n        AccountRetriever.Fixed,\n        group,\n        [account],\n        [...banks],\n        [...perpMarkets],\n      );\n    const parsedHealthAccounts = healthRemainingAccounts.map(\n      (pk) =>\n        ({\n          pubkey: pk,\n          isWritable: false,\n          isSigner: false,\n        } as AccountMeta),\n    );\n\n    return await this.program.methods\n      .healthRegionBegin()\n      .accounts({\n        group: group.publicKey,\n        account: account.publicKey,\n        instructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n      })\n      .remainingAccounts(parsedHealthAccounts)\n      .instruction();\n  }\n\n  public async healthRegionEndIx(\n    group: Group,\n    account: MangoAccount,\n    banks: Bank[] = [],\n    perpMarkets: PerpMarket[] = [],\n  ): Promise<TransactionInstruction> {\n    const healthRemainingAccounts: PublicKey[] =\n      this.buildHealthRemainingAccounts(\n        AccountRetriever.Fixed,\n        group,\n        [account],\n        [...banks],\n        [...perpMarkets],\n      );\n    const parsedHealthAccounts = healthRemainingAccounts.map(\n      (pk) =>\n        ({\n          pubkey: pk,\n          isWritable: false,\n          isSigner: false,\n        } as AccountMeta),\n    );\n\n    return await this.program.methods\n      .healthRegionEnd()\n      .accounts({ account: account.publicKey })\n      .remainingAccounts(parsedHealthAccounts)\n      .instruction();\n  }\n\n  /// static\n\n  static connect(\n    provider: Provider,\n    cluster: Cluster,\n    programId: PublicKey,\n    opts?: MangoClientOptions,\n  ): MangoClient {\n    const idl = IDL;\n\n    return new MangoClient(\n      new Program<MangoV4>(idl as MangoV4, programId, provider),\n      programId,\n      cluster,\n      opts,\n    );\n  }\n\n  static connectForGroupName(\n    provider: Provider,\n    groupName: string,\n  ): MangoClient {\n    const idl = IDL;\n\n    const id = Id.fromIdsByName(groupName);\n\n    return new MangoClient(\n      new Program<MangoV4>(\n        idl as MangoV4,\n        new PublicKey(id.mangoProgramId),\n        provider,\n      ),\n      new PublicKey(id.mangoProgramId),\n      id.cluster,\n    );\n  }\n\n  public buildHealthRemainingAccounts(\n    retriever: AccountRetriever,\n    group: Group,\n    mangoAccounts: MangoAccount[],\n    banks: Bank[] = [],\n    perpMarkets: PerpMarket[] = [],\n    openOrdersForMarket: [Serum3Market, PublicKey][] = [],\n  ): PublicKey[] {\n    if (retriever === AccountRetriever.Fixed) {\n      return this.buildFixedAccountRetrieverHealthAccounts(\n        group,\n        mangoAccounts[0],\n        banks,\n        perpMarkets,\n        openOrdersForMarket,\n      );\n    } else {\n      return this.buildScanningAccountRetrieverHealthAccounts(\n        group,\n        mangoAccounts,\n        banks,\n        perpMarkets,\n      );\n    }\n  }\n\n  private buildFixedAccountRetrieverHealthAccounts(\n    group: Group,\n    mangoAccount: MangoAccount,\n    // Banks and perpMarkets for whom positions don't exist on mango account,\n    // but user would potentially open new positions.\n    banks: Bank[],\n    perpMarkets: PerpMarket[],\n    openOrdersForMarket: [Serum3Market, PublicKey][],\n  ): PublicKey[] {\n    const healthRemainingAccounts: PublicKey[] = [];\n\n    const tokenPositionIndices = mangoAccount.tokens.map((t) => t.tokenIndex);\n    for (const bank of banks) {\n      const tokenPositionExists =\n        tokenPositionIndices.indexOf(bank.tokenIndex) > -1;\n      if (!tokenPositionExists) {\n        const inactiveTokenPosition = tokenPositionIndices.findIndex(\n          (index) => index === TokenPosition.TokenIndexUnset,\n        );\n        if (inactiveTokenPosition != -1) {\n          tokenPositionIndices[inactiveTokenPosition] = bank.tokenIndex;\n        }\n      }\n    }\n    const mintInfos = tokenPositionIndices\n      .filter((tokenIndex) => tokenIndex !== TokenPosition.TokenIndexUnset)\n      .map((tokenIndex) => group.mintInfosMapByTokenIndex.get(tokenIndex)!);\n    healthRemainingAccounts.push(\n      ...mintInfos.map((mintInfo) => mintInfo.firstBank()),\n    );\n    healthRemainingAccounts.push(\n      ...mintInfos.map((mintInfo) => mintInfo.oracle),\n    );\n\n    // insert any extra perp markets in the free perp position slots\n    const perpPositionIndices = mangoAccount.perps.map((p) => p.marketIndex);\n    for (const perpMarket of perpMarkets) {\n      const perpPositionExists =\n        perpPositionIndices.indexOf(perpMarket.perpMarketIndex) > -1;\n      if (!perpPositionExists) {\n        const inactivePerpPosition = perpPositionIndices.findIndex(\n          (perpIdx) => perpIdx === PerpPosition.PerpMarketIndexUnset,\n        );\n        if (inactivePerpPosition != -1) {\n          perpPositionIndices[inactivePerpPosition] =\n            perpMarket.perpMarketIndex;\n        }\n      }\n    }\n\n    const allPerpMarkets = perpPositionIndices\n      .filter((perpIdx) => perpIdx !== PerpPosition.PerpMarketIndexUnset)\n      .map((perpIdx) => group.getPerpMarketByMarketIndex(perpIdx)!);\n    healthRemainingAccounts.push(\n      ...allPerpMarkets.map((perp) => perp.publicKey),\n    );\n    healthRemainingAccounts.push(...allPerpMarkets.map((perp) => perp.oracle));\n\n    // insert any extra open orders accounts in the cooresponding free serum market slot\n    const serumPositionIndices = mangoAccount.serum3.map((s) => ({\n      marketIndex: s.marketIndex,\n      openOrders: s.openOrders,\n    }));\n    for (const [serum3Market, openOrderPk] of openOrdersForMarket) {\n      const ooPositionExists =\n        serumPositionIndices.findIndex(\n          (i) => i.marketIndex === serum3Market.marketIndex,\n        ) > -1;\n      if (!ooPositionExists) {\n        const inactiveSerumPosition = serumPositionIndices.findIndex(\n          (serumPos) =>\n            serumPos.marketIndex === Serum3Orders.Serum3MarketIndexUnset,\n        );\n        if (inactiveSerumPosition != -1) {\n          serumPositionIndices[inactiveSerumPosition].marketIndex =\n            serum3Market.marketIndex;\n          serumPositionIndices[inactiveSerumPosition].openOrders = openOrderPk;\n        }\n      }\n    }\n\n    healthRemainingAccounts.push(\n      ...serumPositionIndices\n        .filter(\n          (serumPosition) =>\n            serumPosition.marketIndex !== Serum3Orders.Serum3MarketIndexUnset,\n        )\n        .map((serumPosition) => serumPosition.openOrders),\n    );\n\n    // debugHealthAccounts(group, mangoAccount, healthRemainingAccounts);\n\n    return healthRemainingAccounts;\n  }\n\n  private buildScanningAccountRetrieverHealthAccounts(\n    group: Group,\n    mangoAccounts: MangoAccount[],\n    banks: Bank[],\n    perpMarkets: PerpMarket[],\n  ): PublicKey[] {\n    const healthRemainingAccounts: PublicKey[] = [];\n\n    let tokenIndices: TokenIndex[] = [];\n    for (const mangoAccount of mangoAccounts) {\n      tokenIndices.push(\n        ...mangoAccount.tokens\n          .filter((token) => token.tokenIndex !== 65535)\n          .map((token) => token.tokenIndex),\n      );\n    }\n    tokenIndices = [...new Set(tokenIndices)];\n\n    if (banks?.length) {\n      for (const bank of banks) {\n        tokenIndices.push(bank.tokenIndex);\n      }\n    }\n    const mintInfos = [...new Set(tokenIndices)].map(\n      (tokenIndex) => group.mintInfosMapByTokenIndex.get(tokenIndex)!,\n    );\n    healthRemainingAccounts.push(\n      ...mintInfos.map((mintInfo) => mintInfo.firstBank()),\n    );\n    healthRemainingAccounts.push(\n      ...mintInfos.map((mintInfo) => mintInfo.oracle),\n    );\n\n    const perpIndices: PerpMarketIndex[] = [];\n    for (const mangoAccount of mangoAccounts) {\n      perpIndices.push(\n        ...mangoAccount.perps\n          .filter((perp) => perp.marketIndex !== 65535)\n          .map((perp) => perp.marketIndex),\n      );\n    }\n    perpIndices.push(...perpMarkets.map((perp) => perp.perpMarketIndex));\n\n    const allPerpMarkets = [...new Set(perpIndices)].map(\n      (marketIndex) => group.findPerpMarket(marketIndex)!,\n    );\n\n    // Add perp accounts\n    healthRemainingAccounts.push(...allPerpMarkets.map((p) => p.publicKey));\n    // Add oracle for each perp\n    healthRemainingAccounts.push(...allPerpMarkets.map((p) => p.oracle));\n\n    for (const mangoAccount of mangoAccounts) {\n      healthRemainingAccounts.push(\n        ...mangoAccount.serum3\n          .filter((serum3Account) => serum3Account.marketIndex !== 65535)\n          .map((serum3Account) => serum3Account.openOrders),\n      );\n    }\n\n    return healthRemainingAccounts;\n  }\n\n  public async modifyPerpOrder(\n    group: Group,\n    mangoAccount: MangoAccount,\n    perpMarketIndex: PerpMarketIndex,\n    orderId: BN,\n    side: PerpOrderSide,\n    price: number,\n    quantity: number,\n    maxQuoteQuantity?: number,\n    clientOrderId?: number,\n    orderType?: PerpOrderType,\n    reduceOnly?: boolean,\n    expiryTimestamp?: number,\n    limit?: number,\n  ): Promise<TransactionSignature> {\n    const transactionInstructions: TransactionInstruction[] = [];\n    const [cancelOrderIx, placeOrderIx] = await Promise.all([\n      this.perpCancelOrderIx(group, mangoAccount, perpMarketIndex, orderId),\n      this.perpPlaceOrderIx(\n        group,\n        mangoAccount,\n        perpMarketIndex,\n        side,\n        price,\n        quantity,\n        maxQuoteQuantity,\n        clientOrderId,\n        orderType,\n        reduceOnly,\n        expiryTimestamp,\n        limit,\n      ),\n    ]);\n    transactionInstructions.push(cancelOrderIx, placeOrderIx);\n\n    return await this.sendAndConfirmTransactionForGroup(\n      group,\n      transactionInstructions,\n    );\n  }\n  public async modifySerum3Order(\n    group: Group,\n    orderId: BN,\n    mangoAccount: MangoAccount,\n    externalMarketPk: PublicKey,\n    side: Serum3Side,\n    price: number,\n    size: number,\n    selfTradeBehavior: Serum3SelfTradeBehavior,\n    orderType: Serum3OrderType,\n    clientOrderId: number,\n    limit: number,\n  ): Promise<TransactionSignature> {\n    const transactionInstructions: TransactionInstruction[] = [];\n    const [cancelOrderIx, settleIx, placeOrderIx] = await Promise.all([\n      this.serum3CancelOrderIx(\n        group,\n        mangoAccount,\n        externalMarketPk,\n        side,\n        orderId,\n      ),\n      this.serum3SettleFundsIx(group, mangoAccount, externalMarketPk),\n      this.serum3PlaceOrderIx(\n        group,\n        mangoAccount,\n        externalMarketPk,\n        side,\n        price,\n        size,\n        selfTradeBehavior,\n        orderType,\n        clientOrderId,\n        limit,\n      ),\n    ]);\n    transactionInstructions.push(cancelOrderIx, settleIx, ...placeOrderIx);\n\n    return await this.sendAndConfirmTransactionForGroup(\n      group,\n      transactionInstructions,\n    );\n  }\n}\n"],"mappings":"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","names":["AccountRetriever","ix"]}