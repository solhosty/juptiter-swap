{"version":3,"sources":["../src/index.ts","../src/tokenFaucet.ts","../src/oracles/pythClient.ts","../src/constants/numericConstants.ts","../src/oracles/switchboardClient.ts","../src/wallet.ts","../src/types.ts","../src/constants/perpMarkets.ts","../src/addresses/pda.ts","../src/accounts/fetch.ts","../src/accounts/types.ts","../src/accounts/webSocketDriftClientAccountSubscriber.ts","../src/accounts/utils.ts","../src/accounts/webSocketAccountSubscriber.ts","../src/oracles/quoteAssetOracleClient.ts","../src/factory/oracleClient.ts","../src/oracles/oracleClientCache.ts","../src/accounts/bulkAccountLoader.ts","../src/util/promiseTimeout.ts","../src/accounts/bulkUserSubscription.ts","../src/accounts/bulkUserStatsSubscription.ts","../src/accounts/pollingDriftClientAccountSubscriber.ts","../src/accounts/pollingOracleAccountSubscriber.ts","../src/accounts/pollingTokenAccountSubscriber.ts","../src/token/index.ts","../src/accounts/pollingUserAccountSubscriber.ts","../src/accounts/pollingUserStatsAccountSubscriber.ts","../src/adminClient.ts","../src/userName.ts","../src/math/utils.ts","../src/driftClient.ts","../src/tx/utils.ts","../src/math/amm.ts","../src/assert/assert.ts","../src/math/repeg.ts","../src/math/oracles.ts","../src/math/margin.ts","../src/math/market.ts","../src/math/spotBalance.ts","../src/math/position.ts","../src/tx/retryTxSender.ts","../src/accounts/webSocketUserAccountSubscriber.ts","../src/math/spotPosition.ts","../src/user.ts","../src/constants/spotMarkets.ts","../src/config.ts","../src/userStats.ts","../src/accounts/webSocketUserStatsAccountSubsriber.ts","../src/math/trade.ts","../src/factory/bigNum.ts","../src/events/types.ts","../src/events/txEventCache.ts","../src/events/eventList.ts","../src/events/fetchLogs.ts","../src/events/pollingLogProvider.ts","../src/events/webSocketLogProvider.ts","../src/events/eventSubscriber.ts","../src/events/sort.ts","../src/math/auction.ts","../src/math/spotMarket.ts","../src/math/conversion.ts","../src/math/exchangeStatus.ts","../src/math/funding.ts","../src/math/orders.ts","../src/math/insurance.ts","../src/orderParams.ts","../src/slot/SlotSubscriber.ts","../src/serum/serumSubscriber.ts","../src/serum/serumFulfillmentConfigMap.ts","../src/util/computeUnits.ts","../src/util/tps.ts","../src/dlob/DLOBNode.ts","../src/dlob/NodeList.ts","../src/dlob/DLOB.ts","../src/dlob/DLOBOrders.ts","../src/userMap/userMap.ts","../src/userMap/userStatsMap.ts"],"names":["PublicKey","BN","Program","AnchorProvider","program","TradeSide","anchor","chunk","EventEmitter","SYSVAR_RENT_PUBKEY","TWO","TOKEN_PROGRAM_ID","bs58","ASSOCIATED_TOKEN_PROGRAM_ID","Token","Transaction","Keypair","LAMPORTS_PER_SOL","ComputeBudgetProgram","amm","assert","sign","market","order","Node","ONE","bestGenerator","UserMap"],"mappings":"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","sourcesContent":["import { BN } from '@project-serum/anchor';\nimport { PublicKey } from '@solana/web3.js';\nimport pyth from '@pythnetwork/client';\n\nexport * from './tokenFaucet';\nexport * from './oracles/types';\nexport * from './oracles/pythClient';\nexport * from './oracles/switchboardClient';\nexport * from './types';\nexport * from './constants/perpMarkets';\nexport * from './accounts/fetch';\nexport * from './accounts/webSocketDriftClientAccountSubscriber';\nexport * from './accounts/bulkAccountLoader';\nexport * from './accounts/bulkUserSubscription';\nexport * from './accounts/bulkUserStatsSubscription';\nexport * from './accounts/pollingDriftClientAccountSubscriber';\nexport * from './accounts/pollingOracleAccountSubscriber';\nexport * from './accounts/pollingTokenAccountSubscriber';\nexport * from './accounts/pollingUserAccountSubscriber';\nexport * from './accounts/pollingUserStatsAccountSubscriber';\nexport * from './accounts/types';\nexport * from './addresses/pda';\nexport * from './adminClient';\nexport * from './user';\nexport * from './userConfig';\nexport * from './userStats';\nexport * from './userStatsConfig';\nexport * from './driftClient';\nexport * from './factory/oracleClient';\nexport * from './factory/bigNum';\nexport * from './events/types';\nexport * from './events/eventSubscriber';\nexport * from './events/fetchLogs';\nexport * from './math/auction';\nexport * from './math/spotMarket';\nexport * from './math/conversion';\nexport * from './math/exchangeStatus';\nexport * from './math/funding';\nexport * from './math/market';\nexport * from './math/position';\nexport * from './math/oracles';\nexport * from './math/amm';\nexport * from './math/trade';\nexport * from './math/orders';\nexport * from './math/repeg';\nexport * from './math/margin';\nexport * from './math/insurance';\nexport * from './orderParams';\nexport * from './slot/SlotSubscriber';\nexport * from './wallet';\nexport * from './types';\nexport * from './math/utils';\nexport * from './config';\nexport * from './constants/numericConstants';\nexport * from './serum/serumSubscriber';\nexport * from './serum/serumFulfillmentConfigMap';\nexport * from './tx/retryTxSender';\nexport * from './util/computeUnits';\nexport * from './util/tps';\nexport * from './util/promiseTimeout';\nexport * from './math/spotBalance';\nexport * from './constants/spotMarkets';\nexport * from './driftClientConfig';\nexport * from './dlob/DLOB';\nexport * from './dlob/DLOBNode';\nexport * from './dlob/DLOBOrders';\nexport * from './dlob/NodeList';\nexport * from './userMap/userMap';\nexport * from './userMap/userStatsMap';\n\nexport { BN, PublicKey, pyth };\n","import * as anchor from '@project-serum/anchor';\nimport { AnchorProvider, Idl, Program } from '@project-serum/anchor';\nimport {\n\tAccountInfo,\n\tASSOCIATED_TOKEN_PROGRAM_ID,\n\tToken,\n\tTOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport {\n\tConfirmOptions,\n\tConnection,\n\tPublicKey,\n\tSYSVAR_RENT_PUBKEY,\n\tTransaction,\n\tTransactionInstruction,\n\tTransactionSignature,\n} from '@solana/web3.js';\nimport { BN } from '.';\nimport tokenFaucet from './idl/token_faucet.json';\nimport { IWallet } from './types';\n\nexport class TokenFaucet {\n\tconnection: Connection;\n\twallet: IWallet;\n\tpublic program: Program;\n\tprovider: AnchorProvider;\n\tmint: PublicKey;\n\topts?: ConfirmOptions;\n\n\tpublic constructor(\n\t\tconnection: Connection,\n\t\twallet: IWallet,\n\t\tprogramId: PublicKey,\n\t\tmint: PublicKey,\n\t\topts?: ConfirmOptions\n\t) {\n\t\tthis.connection = connection;\n\t\tthis.wallet = wallet;\n\t\tthis.opts = opts || AnchorProvider.defaultOptions();\n\t\tconst provider = new AnchorProvider(connection, wallet, this.opts);\n\t\tthis.provider = provider;\n\t\tthis.program = new Program(tokenFaucet as Idl, programId, provider);\n\t\tthis.mint = mint;\n\t}\n\n\tpublic async getFaucetConfigPublicKeyAndNonce(): Promise<\n\t\t[PublicKey, number]\n\t> {\n\t\treturn anchor.web3.PublicKey.findProgramAddress(\n\t\t\t[\n\t\t\t\tBuffer.from(anchor.utils.bytes.utf8.encode('faucet_config')),\n\t\t\t\tthis.mint.toBuffer(),\n\t\t\t],\n\t\t\tthis.program.programId\n\t\t);\n\t}\n\n\tpublic async getMintAuthority(): Promise<PublicKey> {\n\t\treturn (\n\t\t\tawait anchor.web3.PublicKey.findProgramAddress(\n\t\t\t\t[\n\t\t\t\t\tBuffer.from(anchor.utils.bytes.utf8.encode('mint_authority')),\n\t\t\t\t\tthis.mint.toBuffer(),\n\t\t\t\t],\n\t\t\t\tthis.program.programId\n\t\t\t)\n\t\t)[0];\n\t}\n\n\tpublic async getFaucetConfigPublicKey(): Promise<PublicKey> {\n\t\treturn (await this.getFaucetConfigPublicKeyAndNonce())[0];\n\t}\n\n\tpublic async initialize(): Promise<TransactionSignature> {\n\t\tconst [faucetConfigPublicKey] =\n\t\t\tawait this.getFaucetConfigPublicKeyAndNonce();\n\t\treturn await this.program.rpc.initialize({\n\t\t\taccounts: {\n\t\t\t\tfaucetConfig: faucetConfigPublicKey,\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tmintAccount: this.mint,\n\t\t\t\trent: SYSVAR_RENT_PUBKEY,\n\t\t\t\tsystemProgram: anchor.web3.SystemProgram.programId,\n\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async fetchState(): Promise<any> {\n\t\treturn await this.program.account.faucetConfig.fetch(\n\t\t\tawait this.getFaucetConfigPublicKey()\n\t\t);\n\t}\n\n\tprivate async mintToUserIx(userTokenAccount: PublicKey, amount: BN) {\n\t\treturn this.program.instruction.mintToUser(amount, {\n\t\t\taccounts: {\n\t\t\t\tfaucetConfig: await this.getFaucetConfigPublicKey(),\n\t\t\t\tmintAccount: this.mint,\n\t\t\t\tuserTokenAccount,\n\t\t\t\tmintAuthority: await this.getMintAuthority(),\n\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async mintToUser(\n\t\tuserTokenAccount: PublicKey,\n\t\tamount: BN\n\t): Promise<TransactionSignature> {\n\t\tconst mintIx = await this.mintToUserIx(userTokenAccount, amount);\n\n\t\tconst tx = new Transaction().add(mintIx);\n\n\t\tconst txSig = await this.program.provider.sendAndConfirm(tx, [], this.opts);\n\n\t\treturn txSig;\n\t}\n\n\tpublic async transferMintAuthority(): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.transferMintAuthority({\n\t\t\taccounts: {\n\t\t\t\tfaucetConfig: await this.getFaucetConfigPublicKey(),\n\t\t\t\tmintAccount: this.mint,\n\t\t\t\tmintAuthority: await this.getMintAuthority(),\n\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async createAssociatedTokenAccountAndMintTo(\n\t\tuserPublicKey: PublicKey,\n\t\tamount: BN\n\t): Promise<[PublicKey, TransactionSignature]> {\n\t\tconst tx = new Transaction();\n\n\t\tconst [associatedTokenPublicKey, createAssociatedAccountIx, mintToTx] =\n\t\t\tawait this.createAssociatedTokenAccountAndMintToInstructions(\n\t\t\t\tuserPublicKey,\n\t\t\t\tamount\n\t\t\t);\n\n\t\tlet associatedTokenAccountExists = false;\n\n\t\ttry {\n\t\t\tconst assosciatedTokenAccount = await this.connection.getAccountInfo(\n\t\t\t\tassociatedTokenPublicKey\n\t\t\t);\n\n\t\t\tassociatedTokenAccountExists = !!assosciatedTokenAccount;\n\t\t} catch (e) {\n\t\t\t// token account doesn't exist\n\t\t\tassociatedTokenAccountExists = false;\n\t\t}\n\n\t\tconst skipAccountCreation = associatedTokenAccountExists;\n\n\t\tif (!skipAccountCreation) tx.add(createAssociatedAccountIx);\n\n\t\ttx.add(mintToTx);\n\n\t\tconst txSig = await this.program.provider.sendAndConfirm(tx, [], this.opts);\n\t\treturn [associatedTokenPublicKey, txSig];\n\t}\n\n\tpublic async createAssociatedTokenAccountAndMintToInstructions(\n\t\tuserPublicKey: PublicKey,\n\t\tamount: BN\n\t): Promise<[PublicKey, TransactionInstruction, TransactionInstruction]> {\n\t\tconst state: any = await this.fetchState();\n\n\t\tconst associateTokenPublicKey = await this.getAssosciatedMockUSDMintAddress(\n\t\t\t{ userPubKey: userPublicKey }\n\t\t);\n\n\t\tconst createAssociatedAccountIx =\n\t\t\tToken.createAssociatedTokenAccountInstruction(\n\t\t\t\tASSOCIATED_TOKEN_PROGRAM_ID,\n\t\t\t\tTOKEN_PROGRAM_ID,\n\t\t\t\tstate.mint,\n\t\t\t\tassociateTokenPublicKey,\n\t\t\t\tuserPublicKey,\n\t\t\t\tthis.wallet.publicKey\n\t\t\t);\n\n\t\tconst mintToIx = await this.mintToUserIx(associateTokenPublicKey, amount);\n\n\t\treturn [associateTokenPublicKey, createAssociatedAccountIx, mintToIx];\n\t}\n\n\tpublic async getAssosciatedMockUSDMintAddress(props: {\n\t\tuserPubKey: PublicKey;\n\t}): Promise<anchor.web3.PublicKey> {\n\t\tconst state: any = await this.fetchState();\n\n\t\treturn Token.getAssociatedTokenAddress(\n\t\t\tASSOCIATED_TOKEN_PROGRAM_ID,\n\t\t\tTOKEN_PROGRAM_ID,\n\t\t\tstate.mint,\n\t\t\tprops.userPubKey\n\t\t);\n\t}\n\n\tpublic async getTokenAccountInfo(props: {\n\t\tuserPubKey: PublicKey;\n\t}): Promise<AccountInfo> {\n\t\tconst assosciatedKey = await this.getAssosciatedMockUSDMintAddress(props);\n\n\t\tconst state: any = await this.fetchState();\n\n\t\tconst token = new Token(\n\t\t\tthis.connection,\n\t\t\tstate.mint,\n\t\t\tTOKEN_PROGRAM_ID,\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\tthis.provider.payer\n\t\t);\n\n\t\treturn await token.getAccountInfo(assosciatedKey);\n\t}\n\n\tpublic async subscribeToTokenAccount(props: {\n\t\tuserPubKey: PublicKey;\n\t\tcallback: (accountInfo: AccountInfo) => void;\n\t}): Promise<boolean> {\n\t\ttry {\n\t\t\tconst tokenAccountKey = await this.getAssosciatedMockUSDMintAddress(\n\t\t\t\tprops\n\t\t\t);\n\n\t\t\tprops.callback(await this.getTokenAccountInfo(props));\n\n\t\t\t// Couldn't find a way to do it using anchor framework subscription, someone on serum discord recommended this way\n\t\t\tthis.connection.onAccountChange(\n\t\t\t\ttokenAccountKey,\n\t\t\t\tasync (\n\t\t\t\t\t_accountInfo /* accountInfo is a buffer which we don't know how to deserialize */\n\t\t\t\t) => {\n\t\t\t\t\tprops.callback(await this.getTokenAccountInfo(props));\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n","import { parsePriceData } from '@pythnetwork/client';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { OracleClient, OraclePriceData } from './types';\nimport { BN } from '@project-serum/anchor';\nimport { PRICE_PRECISION, TEN } from '../constants/numericConstants';\n\nexport class PythClient implements OracleClient {\n\tprivate connection: Connection;\n\n\tpublic constructor(connection: Connection) {\n\t\tthis.connection = connection;\n\t}\n\n\tpublic async getOraclePriceData(\n\t\tpricePublicKey: PublicKey\n\t): Promise<OraclePriceData> {\n\t\tconst accountInfo = await this.connection.getAccountInfo(pricePublicKey);\n\t\treturn this.getOraclePriceDataFromBuffer(accountInfo.data);\n\t}\n\n\tpublic getOraclePriceDataFromBuffer(buffer: Buffer): OraclePriceData {\n\t\tconst priceData = parsePriceData(buffer);\n\t\treturn {\n\t\t\tprice: convertPythPrice(priceData.aggregate.price, priceData.exponent),\n\t\t\tslot: new BN(priceData.lastSlot.toString()),\n\t\t\tconfidence: convertPythPrice(priceData.confidence, priceData.exponent),\n\t\t\ttwap: convertPythPrice(priceData.twap.value, priceData.exponent),\n\t\t\ttwapConfidence: convertPythPrice(\n\t\t\t\tpriceData.twac.value,\n\t\t\t\tpriceData.exponent\n\t\t\t),\n\t\t\thasSufficientNumberOfDataPoints: true,\n\t\t};\n\t}\n}\n\nexport function convertPythPrice(price: number, exponent: number): BN {\n\texponent = Math.abs(exponent);\n\tconst pythPrecision = TEN.pow(new BN(exponent).abs());\n\treturn new BN(price * Math.pow(10, exponent))\n\t\t.mul(PRICE_PRECISION)\n\t\t.div(pythPrecision);\n}\n","import { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { BN } from '../';\n\nexport const ZERO = new BN(0);\nexport const ONE = new BN(1);\nexport const TWO = new BN(2);\nexport const THREE = new BN(3);\nexport const FOUR = new BN(4);\nexport const FIVE = new BN(5);\nexport const SIX = new BN(6);\nexport const SEVEN = new BN(7);\nexport const EIGHT = new BN(8);\nexport const NINE = new BN(9);\nexport const TEN = new BN(10);\nexport const TEN_THOUSAND = new BN(10000);\nexport const BN_MAX = new BN(Number.MAX_SAFE_INTEGER);\nexport const TEN_MILLION = TEN_THOUSAND.mul(TEN_THOUSAND);\n\nexport const MAX_LEVERAGE = new BN(5);\n\nexport const PERCENTAGE_PRECISION_EXP = new BN(6);\nexport const PERCENTAGE_PRECISION = new BN(10).pow(PERCENTAGE_PRECISION_EXP);\nexport const CONCENTRATION_PRECISION = PERCENTAGE_PRECISION;\n\nexport const QUOTE_PRECISION_EXP = new BN(6);\nexport const FUNDING_RATE_BUFFER_PRECISION_EXP = new BN(3);\nexport const PRICE_PRECISION_EXP = new BN(6);\nexport const FUNDING_RATE_PRECISION_EXP = PRICE_PRECISION_EXP.add(\n\tFUNDING_RATE_BUFFER_PRECISION_EXP\n);\nexport const PEG_PRECISION_EXP = new BN(6);\nexport const AMM_RESERVE_PRECISION_EXP = new BN(9);\n\nexport const SPOT_MARKET_RATE_PRECISION_EXP = new BN(6);\nexport const SPOT_MARKET_RATE_PRECISION = new BN(10).pow(\n\tSPOT_MARKET_RATE_PRECISION_EXP\n);\n\nexport const SPOT_MARKET_CUMULATIVE_INTEREST_PRECISION_EXP = new BN(10);\nexport const SPOT_MARKET_CUMULATIVE_INTEREST_PRECISION = new BN(10).pow(\n\tSPOT_MARKET_CUMULATIVE_INTEREST_PRECISION_EXP\n);\n\nexport const SPOT_MARKET_UTILIZATION_PRECISION_EXP = new BN(6);\nexport const SPOT_MARKET_UTILIZATION_PRECISION = new BN(10).pow(\n\tSPOT_MARKET_UTILIZATION_PRECISION_EXP\n);\n\nexport const SPOT_MARKET_WEIGHT_PRECISION = new BN(10000);\nexport const SPOT_MARKET_BALANCE_PRECISION_EXP = new BN(9);\nexport const SPOT_MARKET_BALANCE_PRECISION = new BN(10).pow(\n\tSPOT_MARKET_BALANCE_PRECISION_EXP\n);\nexport const SPOT_MARKET_IMF_PRECISION_EXP = new BN(6);\n\nexport const SPOT_MARKET_IMF_PRECISION = new BN(10).pow(\n\tSPOT_MARKET_IMF_PRECISION_EXP\n);\nexport const LIQUIDATION_FEE_PRECISION = new BN(1000000);\n\nexport const QUOTE_PRECISION = new BN(10).pow(QUOTE_PRECISION_EXP);\nexport const PRICE_PRECISION = new BN(10).pow(PRICE_PRECISION_EXP);\nexport const FUNDING_RATE_PRECISION = new BN(10).pow(\n\tFUNDING_RATE_PRECISION_EXP\n);\nexport const FUNDING_RATE_BUFFER_PRECISION = new BN(10).pow(\n\tFUNDING_RATE_BUFFER_PRECISION_EXP\n);\nexport const PEG_PRECISION = new BN(10).pow(PEG_PRECISION_EXP);\n\nexport const AMM_RESERVE_PRECISION = new BN(10).pow(AMM_RESERVE_PRECISION_EXP);\n\nexport const BASE_PRECISION = AMM_RESERVE_PRECISION;\nexport const BASE_PRECISION_EXP = AMM_RESERVE_PRECISION_EXP;\n\nexport const AMM_TO_QUOTE_PRECISION_RATIO =\n\tAMM_RESERVE_PRECISION.div(QUOTE_PRECISION); // 10^3\nexport const PRICE_DIV_PEG = PRICE_PRECISION.div(PEG_PRECISION); //10^1\nexport const PRICE_TO_QUOTE_PRECISION = PRICE_PRECISION.div(QUOTE_PRECISION); // 10^1\nexport const AMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO =\n\tAMM_RESERVE_PRECISION.mul(PEG_PRECISION).div(QUOTE_PRECISION); // 10^9\nexport const MARGIN_PRECISION = TEN_THOUSAND;\nexport const BID_ASK_SPREAD_PRECISION = new BN(1000000); // 10^6\nexport const LIQUIDATION_PCT_PRECISION = TEN_THOUSAND;\n\nexport const ONE_YEAR = new BN(31536000);\n\nexport const QUOTE_SPOT_MARKET_INDEX = 0;\n\nexport const LAMPORTS_PRECISION = new BN(LAMPORTS_PER_SOL);\nexport const LAMPORTS_EXP = new BN(Math.log10(LAMPORTS_PER_SOL));\n\nexport const OPEN_ORDER_MARGIN_REQUIREMENT = QUOTE_PRECISION.div(new BN(100));\n\nexport const DEFAULT_REVENUE_SINCE_LAST_FUNDING_SPREAD_RETREAT = new BN(\n\t-25\n).mul(QUOTE_PRECISION);\n","import { SwitchboardDecimal } from '@switchboard-xyz/switchboard-v2';\nimport { Connection, Keypair, PublicKey } from '@solana/web3.js';\nimport { BN, Program, Idl, AnchorProvider } from '@project-serum/anchor';\nimport { PRICE_PRECISION, TEN } from '../constants/numericConstants';\nimport { OracleClient, OraclePriceData } from './types';\nimport { Wallet } from '../wallet';\nimport switchboardV2Idl from '../idl/switchboard_v2.json';\n\nlet program: Program | undefined;\n\nexport class SwitchboardClient implements OracleClient {\n\tconnection: Connection;\n\n\tpublic constructor(connection: Connection) {\n\t\tthis.connection = connection;\n\t}\n\n\tpublic async getOraclePriceData(\n\t\tpricePublicKey: PublicKey\n\t): Promise<OraclePriceData> {\n\t\tconst accountInfo = await this.connection.getAccountInfo(pricePublicKey);\n\t\treturn this.getOraclePriceDataFromBuffer(accountInfo.data);\n\t}\n\n\tpublic getOraclePriceDataFromBuffer(buffer: Buffer): OraclePriceData {\n\t\tconst program = this.getProgram();\n\n\t\tconst aggregatorAccountData =\n\t\t\tprogram.account.aggregatorAccountData.coder.accounts.decode(\n\t\t\t\t'AggregatorAccountData',\n\t\t\t\tbuffer\n\t\t\t);\n\t\tconst price = convertSwitchboardDecimal(\n\t\t\taggregatorAccountData.latestConfirmedRound.result as SwitchboardDecimal\n\t\t);\n\n\t\tconst confidence = convertSwitchboardDecimal(\n\t\t\taggregatorAccountData.latestConfirmedRound\n\t\t\t\t.stdDeviation as SwitchboardDecimal\n\t\t);\n\n\t\tconst hasSufficientNumberOfDataPoints =\n\t\t\taggregatorAccountData.latestConfirmedRound.numSuccess >=\n\t\t\taggregatorAccountData.minOracleResults;\n\n\t\tconst slot: BN = aggregatorAccountData.latestConfirmedRound.roundOpenSlot;\n\t\treturn {\n\t\t\tprice,\n\t\t\tslot,\n\t\t\tconfidence,\n\t\t\thasSufficientNumberOfDataPoints,\n\t\t};\n\t}\n\n\tpublic getProgram(): Program {\n\t\tif (program) {\n\t\t\treturn program;\n\t\t}\n\n\t\tprogram = getSwitchboardProgram(this.connection);\n\t\treturn program;\n\t}\n}\n\nfunction getSwitchboardProgram(connection: Connection): Program {\n\tconst DEFAULT_KEYPAIR = Keypair.fromSeed(new Uint8Array(32).fill(1));\n\tconst programId = PublicKey.default;\n\tconst wallet = new Wallet(DEFAULT_KEYPAIR);\n\tconst provider = new AnchorProvider(connection, wallet, {});\n\n\treturn new Program(switchboardV2Idl as Idl, programId, provider);\n}\n\nfunction convertSwitchboardDecimal(switchboardDecimal: SwitchboardDecimal): BN {\n\tconst switchboardPrecision = TEN.pow(new BN(switchboardDecimal.scale));\n\treturn switchboardDecimal.mantissa\n\t\t.mul(PRICE_PRECISION)\n\t\t.div(switchboardPrecision);\n}\n","import { Keypair, PublicKey, Transaction } from '@solana/web3.js';\nimport { IWallet } from './types';\n\nexport class Wallet implements IWallet {\n\tconstructor(readonly payer: Keypair) {}\n\n\tasync signTransaction(tx: Transaction): Promise<Transaction> {\n\t\ttx.partialSign(this.payer);\n\t\treturn tx;\n\t}\n\n\tasync signAllTransactions(txs: Transaction[]): Promise<Transaction[]> {\n\t\treturn txs.map((t) => {\n\t\t\tt.partialSign(this.payer);\n\t\t\treturn t;\n\t\t});\n\t}\n\n\tget publicKey(): PublicKey {\n\t\treturn this.payer.publicKey;\n\t}\n}\n","import { PublicKey, Transaction } from '@solana/web3.js';\nimport { BN, ZERO } from '.';\n\n// # Utility Types / Enums / Constants\n\nexport class ExchangeStatus {\n\tstatic readonly ACTIVE = { active: {} };\n\tstatic readonly FUNDING_PAUSED = { fundingPaused: {} };\n\tstatic readonly AMM_PAUSED = { ammPaused: {} };\n\tstatic readonly FILL_PAUSED = { fillPaused: {} };\n\tstatic readonly LIQ_PAUSED = { liqPaused: {} };\n\tstatic readonly WITHDRAW_PAUSED = { withdrawPaused: {} };\n\tstatic readonly PAUSED = { paused: {} };\n}\n\nexport class MarketStatus {\n\tstatic readonly INITIALIZED = { initialized: {} };\n\tstatic readonly ACTIVE = { active: {} };\n\tstatic readonly FUNDING_PAUSED = { fundingPaused: {} };\n\tstatic readonly AMM_PAUSED = { ammPaused: {} };\n\tstatic readonly FILL_PAUSED = { fillPaused: {} };\n\tstatic readonly WITHDRAW_PAUSED = { withdrawPaused: {} };\n\tstatic readonly REDUCE_ONLY = { reduceOnly: {} };\n\tstatic readonly SETTLEMENT = { settlement: {} };\n\tstatic readonly DELISTED = { delisted: {} };\n}\n\nexport class UserStatus {\n\tstatic readonly ACTIVE = { active: {} };\n\tstatic readonly BEING_LIQUIDATED = { beingLiquidated: {} };\n\tstatic readonly BANKRUPT = { bankrupt: {} };\n}\n\nexport class ContractType {\n\tstatic readonly PERPETUAL = { perpetual: {} };\n\tstatic readonly FUTURE = { future: {} };\n}\n\nexport class ContractTier {\n\tstatic readonly A = { a: {} };\n\tstatic readonly B = { b: {} };\n\tstatic readonly C = { c: {} };\n\tstatic readonly SPECULATIVE = { speculative: {} };\n\tstatic readonly ISOLATED = { isolated: {} };\n}\n\nexport class AssetTier {\n\tstatic readonly COLLATERAL = { collateral: {} };\n\tstatic readonly PROTECTED = { protected: {} };\n\tstatic readonly CROSS = { cross: {} };\n\tstatic readonly ISOLATED = { isolated: {} };\n\tstatic readonly UNLISTED = { unlisted: {} };\n}\n\nexport class SwapDirection {\n\tstatic readonly ADD = { add: {} };\n\tstatic readonly REMOVE = { remove: {} };\n}\n\nexport class SpotBalanceType {\n\tstatic readonly DEPOSIT = { deposit: {} };\n\tstatic readonly BORROW = { borrow: {} };\n}\n\nexport class PositionDirection {\n\tstatic readonly LONG = { long: {} };\n\tstatic readonly SHORT = { short: {} };\n}\n\nexport class DepositDirection {\n\tstatic readonly DEPOSIT = { deposit: {} };\n\tstatic readonly WITHDRAW = { withdraw: {} };\n}\n\nexport class OracleSource {\n\tstatic readonly PYTH = { pyth: {} };\n\tstatic readonly SWITCHBOARD = { switchboard: {} };\n\tstatic readonly QUOTE_ASSET = { quoteAsset: {} };\n}\n\nexport class OrderType {\n\tstatic readonly LIMIT = { limit: {} };\n\tstatic readonly TRIGGER_MARKET = { triggerMarket: {} };\n\tstatic readonly TRIGGER_LIMIT = { triggerLimit: {} };\n\tstatic readonly MARKET = { market: {} };\n\tstatic readonly ORACLE = { oracle: {} };\n}\n\nexport declare type MarketTypeStr = 'perp' | 'spot';\nexport class MarketType {\n\tstatic readonly SPOT = { spot: {} };\n\tstatic readonly PERP = { perp: {} };\n}\n\nexport class OrderStatus {\n\tstatic readonly INIT = { init: {} };\n\tstatic readonly OPEN = { open: {} };\n}\n\nexport class OrderAction {\n\tstatic readonly PLACE = { place: {} };\n\tstatic readonly CANCEL = { cancel: {} };\n\tstatic readonly EXPIRE = { expire: {} };\n\tstatic readonly FILL = { fill: {} };\n\tstatic readonly TRIGGER = { trigger: {} };\n}\n\nexport class OrderActionExplanation {\n\tstatic readonly NONE = { none: {} };\n\tstatic readonly INSUFFICIENT_FREE_COLLATERAL = {\n\t\tinsufficientFreeCollateral: {},\n\t};\n\tstatic readonly ORACLE_PRICE_BREACHED_LIMIT_PRICE = {\n\t\toraclePriceBreachedLimitPrice: {},\n\t};\n\tstatic readonly MARKET_ORDER_FILLED_TO_LIMIT_PRICE = {\n\t\tmarketOrderFilledToLimitPrice: {},\n\t};\n\tstatic readonly ORDER_EXPIRED = {\n\t\torderExpired: {},\n\t};\n\tstatic readonly LIQUIDATION = {\n\t\tliquidation: {},\n\t};\n\tstatic readonly ORDER_FILLED_WITH_AMM = {\n\t\torderFilledWithAmm: {},\n\t};\n\tstatic readonly ORDER_FILLED_WITH_AMM_JIT = {\n\t\torderFilledWithAmmJit: {},\n\t};\n\tstatic readonly ORDER_FILLED_WITH_MATCH = {\n\t\torderFilledWithMatch: {},\n\t};\n\tstatic readonly ORDER_FILLED_WITH_MATCH_JIT = {\n\t\torderFilledWithMatchJit: {},\n\t};\n\tstatic readonly MARKET_EXPIRED = {\n\t\tmarketExpired: {},\n\t};\n\tstatic readonly RISK_INCREASING_ORDER = {\n\t\triskingIncreasingOrder: {},\n\t};\n\tstatic readonly ORDER_FILLED_WITH_SERUM = {\n\t\torderFillWithSerum: {},\n\t};\n\tstatic readonly REDUCE_ONLY_ORDER_INCREASED_POSITION = {\n\t\treduceOnlyOrderIncreasedPosition: {},\n\t};\n}\n\nexport class OrderTriggerCondition {\n\tstatic readonly ABOVE = { above: {} };\n\tstatic readonly BELOW = { below: {} };\n\tstatic readonly TRIGGERED_ABOVE = { triggeredAbove: {} }; // above condition has been triggered\n\tstatic readonly TRIGGERED_BELOW = { triggeredBelow: {} }; // below condition has been triggered\n}\n\nexport class SpotFulfillmentType {\n\tstatic readonly SERUM_v3 = { serumV3: {} };\n}\n\nexport class SpotFulfillmentStatus {\n\tstatic readonly ENABLED = { enabled: {} };\n\tstatic readonly DISABLED = { disabled: {} };\n}\n\nexport class DepositExplanation {\n\tstatic readonly NONE = { none: {} };\n\tstatic readonly TRANSFER = { transfer: {} };\n}\n\nexport class SettlePnlExplanation {\n\tstatic readonly NONE = { none: {} };\n\tstatic readonly EXPIRED_POSITION = { expiredPosition: {} };\n}\n\nexport class SpotFulfillmentConfigStatus {\n\tstatic readonly ENABLED = { enabled: {} };\n\tstatic readonly DISABLED = { disabled: {} };\n}\n\nexport class StakeAction {\n\tstatic readonly STAKE = { stake: {} };\n\tstatic readonly UNSTAKE_REQUEST = { unstakeRequest: {} };\n\tstatic readonly UNSTAKE_CANCEL_REQUEST = { unstakeCancelRequest: {} };\n\tstatic readonly UNSTAKE = { unstake: {} };\n}\n\nexport function isVariant(object: unknown, type: string) {\n\treturn object.hasOwnProperty(type);\n}\n\nexport function isOneOfVariant(object: unknown, types: string[]) {\n\treturn types.reduce((result, type) => {\n\t\treturn result || object.hasOwnProperty(type);\n\t}, false);\n}\n\nexport function getVariant(object: unknown): string {\n\treturn Object.keys(object)[0];\n}\n\nexport enum TradeSide {\n\tNone = 0,\n\tBuy = 1,\n\tSell = 2,\n}\n\nexport type CandleResolution =\n\t| '1'\n\t| '5'\n\t| '15'\n\t| '60'\n\t| '240'\n\t| 'D'\n\t| 'W'\n\t| 'M';\n\nexport type NewUserRecord = {\n\tts: BN;\n\tuserAuthority: PublicKey;\n\tuser: PublicKey;\n\tsubAccount: number;\n\tname: number[];\n\treferrer: PublicKey;\n};\n\nexport type DepositRecord = {\n\tts: BN;\n\tuserAuthority: PublicKey;\n\tuser: PublicKey;\n\tdirection: {\n\t\tdeposit?: any;\n\t\twithdraw?: any;\n\t};\n\tmarketIndex: number;\n\tamount: BN;\n\toraclePrice: BN;\n\tmarketDepositBalance: BN;\n\tmarketWithdrawBalance: BN;\n\tmarketCumulativeDepositInterest: BN;\n\tmarketCumulativeBorrowInterest: BN;\n\ttotalDepositsAfter: BN;\n\ttotalWithdrawsAfter: BN;\n\tdepositRecordId: BN;\n\texplanation: DepositExplanation;\n\ttransferUser?: PublicKey;\n};\n\nexport type SpotInterestRecord = {\n\tts: BN;\n\tmarketIndex: number;\n\tdepositBalance: BN;\n\tcumulativeDepositInterest: BN;\n\tborrowBalance: BN;\n\tcumulativeBorrowInterest: BN;\n\toptimalUtilization: number;\n\toptimalBorrowRate: number;\n\tmaxBorrowRate: number;\n};\n\nexport type CurveRecord = {\n\tts: BN;\n\trecordId: BN;\n\tmarketIndex: number;\n\tpegMultiplierBefore: BN;\n\tbaseAssetReserveBefore: BN;\n\tquoteAssetReserveBefore: BN;\n\tsqrtKBefore: BN;\n\tpegMultiplierAfter: BN;\n\tbaseAssetReserveAfter: BN;\n\tquoteAssetReserveAfter: BN;\n\tsqrtKAfter: BN;\n\tbaseAssetAmountLong: BN;\n\tbaseAssetAmountShort: BN;\n\tbaseAssetAmountWithAmm: BN;\n\ttotalFee: BN;\n\ttotalFeeMinusDistributions: BN;\n\tadjustmentCost: BN;\n\tnumberOfUsers: BN;\n\toraclePrice: BN;\n\tfillRecord: BN;\n};\n\nexport declare type InsuranceFundRecord = {\n\tts: BN;\n\tspotMarketIndex: number;\n\tperpMarketIndex: number;\n\tuserIfFactor: number;\n\ttotalIfFactor: number;\n\tvaultAmountBefore: BN;\n\tinsuranceVaultAmountBefore: BN;\n\ttotalIfSharesBefore: BN;\n\ttotalIfSharesAfter: BN;\n\tamount: BN;\n};\n\nexport declare type InsuranceFundStakeRecord = {\n\tts: BN;\n\tuserAuthority: PublicKey;\n\taction: StakeAction;\n\tamount: BN;\n\tmarketIndex: number;\n\tinsuranceVaultAmountBefore: BN;\n\tifSharesBefore: BN;\n\tuserIfSharesBefore: BN;\n\ttotalIfSharesBefore: BN;\n\tifSharesAfter: BN;\n\tuserIfSharesAfter: BN;\n\ttotalIfSharesAfter: BN;\n};\n\nexport type LPRecord = {\n\tts: BN;\n\tuser: PublicKey;\n\taction: LPAction;\n\tnShares: BN;\n\tmarketIndex: number;\n\tdeltaBaseAssetAmount: BN;\n\tdeltaQuoteAssetAmount: BN;\n\tpnl: BN;\n};\n\nexport class LPAction {\n\tstatic readonly ADD_LIQUIDITY = { addLiquidity: {} };\n\tstatic readonly REMOVE_LIQUIDITY = { removeLiquidity: {} };\n\tstatic readonly SETTLE_LIQUIDITY = { settleLiquidity: {} };\n}\n\nexport type FundingRateRecord = {\n\tts: BN;\n\trecordId: BN;\n\tmarketIndex: number;\n\tfundingRate: BN;\n\tfundingRateLong: BN;\n\tfundingRateShort: BN;\n\tcumulativeFundingRateLong: BN;\n\tcumulativeFundingRateShort: BN;\n\toraclePriceTwap: BN;\n\tmarkPriceTwap: BN;\n\tperiodRevenue: BN;\n\tbaseAssetAmountWithAmm: BN;\n\tbaseAssetAmountWithUnsettledLp: BN;\n};\n\nexport type FundingPaymentRecord = {\n\tts: BN;\n\tuserAuthority: PublicKey;\n\tuser: PublicKey;\n\tmarketIndex: number;\n\tfundingPayment: BN;\n\tbaseAssetAmount: BN;\n\tuserLastCumulativeFunding: BN;\n\tammCumulativeFundingLong: BN;\n\tammCumulativeFundingShort: BN;\n};\n\nexport type LiquidationRecord = {\n\tts: BN;\n\tuser: PublicKey;\n\tliquidator: PublicKey;\n\tliquidationType: LiquidationType;\n\tmarginRequirement: BN;\n\ttotalCollateral: BN;\n\tmarginFreed: BN;\n\tliquidationId: number;\n\tbankrupt: boolean;\n\tcanceledOrderIds: BN[];\n\tliquidatePerp: LiquidatePerpRecord;\n\tliquidateSpot: LiquidateSpotRecord;\n\tliquidateBorrowForPerpPnl: LiquidateBorrowForPerpPnlRecord;\n\tliquidatePerpPnlForDeposit: LiquidatePerpPnlForDepositRecord;\n\tperpBankruptcy: PerpBankruptcyRecord;\n\tspotBankruptcy: SpotBankruptcyRecord;\n};\n\nexport class LiquidationType {\n\tstatic readonly LIQUIDATE_PERP = { liquidatePerp: {} };\n\tstatic readonly LIQUIDATE_BORROW_FOR_PERP_PNL = {\n\t\tliquidateBorrowForPerpPnl: {},\n\t};\n\tstatic readonly LIQUIDATE_PERP_PNL_FOR_DEPOSIT = {\n\t\tliquidatePerpPnlForDeposit: {},\n\t};\n\tstatic readonly PERP_BANKRUPTCY = {\n\t\tperpBankruptcy: {},\n\t};\n\tstatic readonly BORROW_BANKRUPTCY = {\n\t\tborrowBankruptcy: {},\n\t};\n\tstatic readonly LIQUIDATE_SPOT = {\n\t\tliquidateSpot: {},\n\t};\n}\n\nexport type LiquidatePerpRecord = {\n\tmarketIndex: number;\n\toraclePrice: BN;\n\tbaseAssetAmount: BN;\n\tquoteAssetAmount: BN;\n\tlpShares: BN;\n\tuserOrderId: BN;\n\tliquidatorOrderId: BN;\n\tfillRecordId: BN;\n\tliquidatorFee: BN;\n\tifFee: BN;\n};\n\nexport type LiquidateSpotRecord = {\n\tassetMarketIndex: number;\n\tassetPrice: BN;\n\tassetTransfer: BN;\n\tliabilityMarketIndex: number;\n\tliabilityPrice: BN;\n\tliabilityTransfer: BN;\n\tifFee: BN;\n};\n\nexport type LiquidateBorrowForPerpPnlRecord = {\n\tperpMarketIndex: number;\n\tmarketOraclePrice: BN;\n\tpnlTransfer: BN;\n\tliabilityMarketIndex: number;\n\tliabilityPrice: BN;\n\tliabilityTransfer: BN;\n};\n\nexport type LiquidatePerpPnlForDepositRecord = {\n\tperpMarketIndex: number;\n\tmarketOraclePrice: BN;\n\tpnlTransfer: BN;\n\tassetMarketIndex: number;\n\tassetPrice: BN;\n\tassetTransfer: BN;\n};\n\nexport type PerpBankruptcyRecord = {\n\tmarketIndex: number;\n\tpnl: BN;\n\tifPayment: BN;\n\tclawbackUser: PublicKey | null;\n\tclawbackUserPayment: BN | null;\n\tcumulativeFundingRateDelta: BN;\n};\n\nexport type SpotBankruptcyRecord = {\n\tmarketIndex: number;\n\tborrowAmount: BN;\n\tcumulativeDepositInterestDelta: BN;\n\tifPayment: BN;\n};\n\nexport type SettlePnlRecord = {\n\tts: BN;\n\tuser: PublicKey;\n\tmarketIndex: number;\n\tpnl: BN;\n\tbaseAssetAmount: BN;\n\tquoteAssetAmountAfter: BN;\n\tquoteEntryAmount: BN;\n\tsettlePrice: BN;\n\texplanation: SettlePnlExplanation;\n};\n\nexport type OrderRecord = {\n\tts: BN;\n\tuser: PublicKey;\n\torder: Order;\n};\n\nexport type OrderActionRecord = {\n\tts: BN;\n\taction: OrderAction;\n\tactionExplanation: OrderActionExplanation;\n\tmarketIndex: number;\n\tmarketType: MarketType;\n\tfiller: PublicKey | null;\n\tfillerReward: BN | null;\n\tfillRecordId: BN | null;\n\tbaseAssetAmountFilled: BN | null;\n\tquoteAssetAmountFilled: BN | null;\n\ttakerFee: BN | null;\n\tmakerFee: BN | null;\n\treferrerReward: number | null;\n\tquoteAssetAmountSurplus: BN | null;\n\tspotFulfillmentMethodFee: BN | null;\n\ttaker: PublicKey | null;\n\ttakerOrderId: number | null;\n\ttakerOrderDirection: PositionDirection | null;\n\ttakerOrderBaseAssetAmount: BN | null;\n\ttakerOrderCumulativeBaseAssetAmountFilled: BN | null;\n\ttakerOrderCumulativeQuoteAssetAmountFilled: BN | null;\n\tmaker: PublicKey | null;\n\tmakerOrderId: number | null;\n\tmakerOrderDirection: PositionDirection | null;\n\tmakerOrderBaseAssetAmount: BN | null;\n\tmakerOrderCumulativeBaseAssetAmountFilled: BN | null;\n\tmakerOrderCumulativeQuoteAssetAmountFilled: BN | null;\n\toraclePrice: BN;\n};\n\nexport type StateAccount = {\n\tadmin: PublicKey;\n\texchangeStatus: ExchangeStatus;\n\twhitelistMint: PublicKey;\n\tdiscountMint: PublicKey;\n\toracleGuardRails: OracleGuardRails;\n\tnumberOfAuthorities: BN;\n\tnumberOfSubAccounts: BN;\n\tnumberOfMarkets: number;\n\tnumberOfSpotMarkets: number;\n\tminPerpAuctionDuration: number;\n\tdefaultMarketOrderTimeInForce: number;\n\tdefaultSpotAuctionDuration: number;\n\tliquidationMarginBufferRatio: number;\n\tsettlementDuration: number;\n\tsigner: PublicKey;\n\tsignerNonce: number;\n\tsrmVault: PublicKey;\n\tperpFeeStructure: FeeStructure;\n\tspotFeeStructure: FeeStructure;\n\tlpCooldownTime: BN;\n\tinitialPctToLiquidate: number;\n\tliquidationDuration: number;\n};\n\nexport type PerpMarketAccount = {\n\tstatus: MarketStatus;\n\tcontractType: ContractType;\n\tcontractTier: ContractTier;\n\texpiryTs: BN;\n\texpiryPrice: BN;\n\tmarketIndex: number;\n\tpubkey: PublicKey;\n\tname: number[];\n\tamm: AMM;\n\tnumberOfUsersWithBase: number;\n\tnumberOfUsers: number;\n\tmarginRatioInitial: number;\n\tmarginRatioMaintenance: number;\n\tnextFillRecordId: BN;\n\tnextFundingRateRecordId: BN;\n\tnextCurveRecordId: BN;\n\tpnlPool: PoolBalance;\n\tliquidatorFee: number;\n\tifLiquidationFee: number;\n\timfFactor: number;\n\tunrealizedPnlImfFactor: number;\n\tunrealizedPnlMaxImbalance: BN;\n\tunrealizedPnlInitialAssetWeight: number;\n\tunrealizedPnlMaintenanceAssetWeight: number;\n\tinsuranceClaim: {\n\t\trevenueWithdrawSinceLastSettle: BN;\n\t\tmaxRevenueWithdrawPerPeriod: BN;\n\t\tlastRevenueWithdrawTs: BN;\n\t\tquoteSettledInsurance: BN;\n\t\tquoteMaxInsurance: BN;\n\t};\n};\n\nexport type HistoricalOracleData = {\n\tlastOraclePrice: BN;\n\tlastOracleDelay: BN;\n\tlastOracleConf: BN;\n\tlastOraclePriceTwap: BN;\n\tlastOraclePriceTwap5Min: BN;\n\tlastOraclePriceTwapTs: BN;\n};\n\nexport type HistoricalIndexData = {\n\tlastIndexBidPrice: BN;\n\tlastIndexAskPrice: BN;\n\tlastIndexPriceTwap: BN;\n\tlastIndexPriceTwap5Min: BN;\n\tlastIndexPriceTwapTs: BN;\n};\n\nexport type SpotMarketAccount = {\n\tstatus: MarketStatus;\n\tassetTier: AssetTier;\n\n\tmarketIndex: number;\n\tpubkey: PublicKey;\n\tmint: PublicKey;\n\tvault: PublicKey;\n\n\toracle: PublicKey;\n\toracleSource: OracleSource;\n\thistoricalOracleData: HistoricalOracleData;\n\thistoricalIndexData: HistoricalIndexData;\n\n\tinsuranceFund: {\n\t\tvault: PublicKey;\n\t\ttotalShares: BN;\n\t\tuserShares: BN;\n\t\tsharesBase: BN;\n\t\tunstakingPeriod: BN;\n\t\tlastRevenueSettleTs: BN;\n\t\trevenueSettlePeriod: BN;\n\t\ttotalFactor: number;\n\t\tuserFactor: number;\n\t};\n\n\trevenuePool: PoolBalance;\n\n\tifLiquidationFee: number;\n\n\tdecimals: number;\n\toptimalUtilization: number;\n\toptimalBorrowRate: number;\n\tmaxBorrowRate: number;\n\tcumulativeDepositInterest: BN;\n\tcumulativeBorrowInterest: BN;\n\ttotalSocialLoss: BN;\n\ttotalQuoteSocialLoss: BN;\n\tdepositBalance: BN;\n\tborrowBalance: BN;\n\tmaxTokenDeposits: BN;\n\n\tlastInterestTs: BN;\n\tlastTwapTs: BN;\n\tinitialAssetWeight: number;\n\tmaintenanceAssetWeight: number;\n\tinitialLiabilityWeight: number;\n\tmaintenanceLiabilityWeight: number;\n\tliquidatorFee: number;\n\timfFactor: number;\n\n\twithdrawGuardThreshold: BN;\n\tdepositTokenTwap: BN;\n\tborrowTokenTwap: BN;\n\tutilizationTwap: BN;\n\tnextDepositRecordId: BN;\n\n\torderStepSize: BN;\n\torderTickSize: BN;\n\tnextFillRecordId: BN;\n\tspotFeePool: PoolBalance;\n\ttotalSpotFee: BN;\n\n\tordersEnabled: boolean;\n};\n\nexport type PoolBalance = {\n\tscaledBalance: BN;\n\tmarketIndex: number;\n};\n\nexport type AMM = {\n\tbaseAssetReserve: BN;\n\tsqrtK: BN;\n\tcumulativeFundingRate: BN;\n\tlastFundingRate: BN;\n\tlastFundingRateTs: BN;\n\tlastMarkPriceTwap: BN;\n\tlastMarkPriceTwap5Min: BN;\n\tlastMarkPriceTwapTs: BN;\n\tlastTradeTs: BN;\n\n\toracle: PublicKey;\n\toracleSource: OracleSource;\n\thistoricalOracleData: HistoricalOracleData;\n\n\tlastOracleReservePriceSpreadPct: BN;\n\tlastOracleConfPct: BN;\n\n\tfundingPeriod: BN;\n\tquoteAssetReserve: BN;\n\tpegMultiplier: BN;\n\tcumulativeFundingRateLong: BN;\n\tcumulativeFundingRateShort: BN;\n\tlast24hAvgFundingRate: BN;\n\tlastFundingRateShort: BN;\n\tlastFundingRateLong: BN;\n\n\ttotalLiquidationFee: BN;\n\ttotalFeeMinusDistributions: BN;\n\ttotalFeeWithdrawn: BN;\n\ttotalFee: BN;\n\tuserLpShares: BN;\n\tbaseAssetAmountWithUnsettledLp: BN;\n\torderStepSize: BN;\n\torderTickSize: BN;\n\tmaxFillReserveFraction: number;\n\tmaxSlippageRatio: number;\n\tbaseSpread: number;\n\tcurveUpdateIntensity: number;\n\tbaseAssetAmountWithAmm: BN;\n\tbaseAssetAmountLong: BN;\n\tbaseAssetAmountShort: BN;\n\tquoteAssetAmount: BN;\n\tterminalQuoteAssetReserve: BN;\n\tconcentrationCoef: BN;\n\tfeePool: PoolBalance;\n\ttotalExchangeFee: BN;\n\ttotalMmFee: BN;\n\tnetRevenueSinceLastFunding: BN;\n\tlastUpdateSlot: BN;\n\tlastOracleNormalisedPrice: BN;\n\tlastOracleValid: boolean;\n\tlastBidPriceTwap: BN;\n\tlastAskPriceTwap: BN;\n\tlongSpread: number;\n\tshortSpread: number;\n\tmaxSpread: number;\n\n\tbaseAssetAmountPerLp: BN;\n\tquoteAssetAmountPerLp: BN;\n\n\tammJitIntensity: number;\n\tmaxOpenInterest: BN;\n\tmaxBaseAssetReserve: BN;\n\tminBaseAssetReserve: BN;\n\ttotalSocialLoss: BN;\n\n\tquoteBreakEvenAmountLong: BN;\n\tquoteBreakEvenAmountShort: BN;\n\tquoteEntryAmountLong: BN;\n\tquoteEntryAmountShort: BN;\n\n\tmarkStd: BN;\n\toracleStd: BN;\n\tlongIntensityCount: number;\n\tlongIntensityVolume: BN;\n\tshortIntensityCount: number;\n\tshortIntensityVolume: BN;\n\tvolume24H: BN;\n\tminOrderSize: BN;\n\tmaxPositionSize: BN;\n\n\tbidBaseAssetReserve: BN;\n\tbidQuoteAssetReserve: BN;\n\taskBaseAssetReserve: BN;\n\taskQuoteAssetReserve: BN;\n};\n\n// # User Account Types\nexport type PerpPosition = {\n\tbaseAssetAmount: BN;\n\tlastCumulativeFundingRate: BN;\n\tmarketIndex: number;\n\tquoteAssetAmount: BN;\n\tquoteEntryAmount: BN;\n\tquoteBreakEvenAmount: BN;\n\topenOrders: number;\n\topenBids: BN;\n\topenAsks: BN;\n\tsettledPnl: BN;\n\tlpShares: BN;\n\tremainderBaseAssetAmount: number;\n\tlastBaseAssetAmountPerLp: BN;\n\tlastQuoteAssetAmountPerLp: BN;\n};\n\nexport type UserStatsAccount = {\n\tnumberOfSubAccounts: number;\n\tnumberOfSubAccountsCreated: number;\n\tmakerVolume30D: BN;\n\ttakerVolume30D: BN;\n\tfillerVolume30D: BN;\n\tlastMakerVolume30DTs: BN;\n\tlastTakerVolume30DTs: BN;\n\tlastFillerVolume30DTs: BN;\n\tfees: {\n\t\ttotalFeePaid: BN;\n\t\ttotalFeeRebate: BN;\n\t\ttotalTokenDiscount: BN;\n\t\ttotalRefereeDiscount: BN;\n\t\ttotalReferrerReward: BN;\n\t\tcurrent_epoch_referrer_reward: BN;\n\t};\n\treferrer: PublicKey;\n\tisReferrer: boolean;\n\tauthority: PublicKey;\n\tifStakedQuoteAssetAmount: BN;\n};\n\nexport type UserAccount = {\n\tauthority: PublicKey;\n\tdelegate: PublicKey;\n\tname: number[];\n\tsubAccountId: number;\n\tspotPositions: SpotPosition[];\n\tperpPositions: PerpPosition[];\n\torders: Order[];\n\tstatus: UserStatus;\n\tnextLiquidationId: number;\n\tnextOrderId: number;\n\tmaxMarginRatio: number;\n\tlastAddPerpLpSharesTs: BN;\n\tsettledPerpPnl: BN;\n\ttotalDeposits: BN;\n\ttotalWithdraws: BN;\n\ttotalSocialLoss: BN;\n\tcumulativePerpFunding: BN;\n\tliquidationMarginFreed: BN;\n\tliquidationStartSlot: BN;\n\tisMarginTradingEnabled: boolean;\n};\n\nexport type SpotPosition = {\n\tmarketIndex: number;\n\tbalanceType: SpotBalanceType;\n\tscaledBalance: BN;\n\topenOrders: number;\n\topenBids: BN;\n\topenAsks: BN;\n\tcumulativeDeposits: BN;\n};\n\nexport type Order = {\n\tstatus: OrderStatus;\n\torderType: OrderType;\n\tmarketType: MarketType;\n\tslot: BN;\n\torderId: number;\n\tuserOrderId: number;\n\tmarketIndex: number;\n\tprice: BN;\n\tbaseAssetAmount: BN;\n\tbaseAssetAmountFilled: BN;\n\tquoteAssetAmount: BN;\n\tquoteAssetAmountFilled: BN;\n\tdirection: PositionDirection;\n\treduceOnly: boolean;\n\ttriggerPrice: BN;\n\ttriggerCondition: OrderTriggerCondition;\n\texistingPositionDirection: PositionDirection;\n\tpostOnly: boolean;\n\timmediateOrCancel: boolean;\n\toraclePriceOffset: number;\n\tauctionDuration: number;\n\tauctionStartPrice: BN;\n\tauctionEndPrice: BN;\n\tmaxTs: BN;\n};\n\nexport type OrderParams = {\n\torderType: OrderType;\n\tmarketType: MarketType;\n\tuserOrderId: number;\n\tdirection: PositionDirection;\n\tbaseAssetAmount: BN;\n\tprice: BN;\n\tmarketIndex: number;\n\treduceOnly: boolean;\n\tpostOnly: boolean;\n\timmediateOrCancel: boolean;\n\ttriggerPrice: BN | null;\n\ttriggerCondition: OrderTriggerCondition;\n\tpositionLimit: BN;\n\toraclePriceOffset: number | null;\n\tauctionDuration: number | null;\n\tmaxTs: BN | null;\n\tauctionStartPrice: BN | null;\n\tauctionEndPrice: BN | null;\n};\n\nexport type NecessaryOrderParams = {\n\torderType: OrderType;\n\tmarketIndex: number;\n\tbaseAssetAmount: BN;\n\tdirection: PositionDirection;\n};\n\nexport type OptionalOrderParams = {\n\t[Property in keyof OrderParams]?: OrderParams[Property];\n} & NecessaryOrderParams;\n\nexport const DefaultOrderParams: OrderParams = {\n\torderType: OrderType.MARKET,\n\tmarketType: MarketType.PERP,\n\tuserOrderId: 0,\n\tdirection: PositionDirection.LONG,\n\tbaseAssetAmount: ZERO,\n\tprice: ZERO,\n\tmarketIndex: 0,\n\treduceOnly: false,\n\tpostOnly: false,\n\timmediateOrCancel: false,\n\ttriggerPrice: null,\n\ttriggerCondition: OrderTriggerCondition.ABOVE,\n\tpositionLimit: ZERO,\n\toraclePriceOffset: null,\n\tauctionDuration: null,\n\tmaxTs: null,\n\tauctionStartPrice: null,\n\tauctionEndPrice: null,\n};\n\nexport type MakerInfo = {\n\tmaker: PublicKey;\n\tmakerStats: PublicKey;\n\tmakerUserAccount: UserAccount;\n\torder: Order;\n};\n\nexport type TakerInfo = {\n\ttaker: PublicKey;\n\ttakerStats: PublicKey;\n\ttakerUserAccount: UserAccount;\n\torder: Order;\n};\n\nexport type ReferrerInfo = {\n\treferrer: PublicKey;\n\treferrerStats: PublicKey;\n};\n\n// # Misc Types\nexport interface IWallet {\n\tsignTransaction(tx: Transaction): Promise<Transaction>;\n\tsignAllTransactions(txs: Transaction[]): Promise<Transaction[]>;\n\tpublicKey: PublicKey;\n}\n\nexport type FeeStructure = {\n\tfeeTiers: FeeTier[];\n\tmakerRebateNumerator: BN;\n\tmakerRebateDenominator: BN;\n\tfillerRewardStructure: OrderFillerRewardStructure;\n\tflatFillerFee: BN;\n\treferrerRewardEpochUpperBound: BN;\n};\n\nexport type FeeTier = {\n\tfeeNumerator: number;\n\tfeeDenominator: number;\n\tmakerRebateNumerator: number;\n\tmakerRebateDenominator: number;\n\treferrerRewardNumerator: number;\n\treferrerRewardDenominator: number;\n\trefereeFeeNumerator: number;\n\trefereeFeeDenominator: number;\n};\n\nexport type OrderFillerRewardStructure = {\n\trewardNumerator: BN;\n\trewardDenominator: BN;\n\ttimeBasedRewardLowerBound: BN;\n};\n\nexport type OracleGuardRails = {\n\tpriceDivergence: {\n\t\tmarkOracleDivergenceNumerator: BN;\n\t\tmarkOracleDivergenceDenominator: BN;\n\t};\n\tvalidity: {\n\t\tslotsBeforeStaleForAmm: BN;\n\t\tslotsBeforeStaleForMargin: BN;\n\t\tconfidenceIntervalMaxSize: BN;\n\t\ttooVolatileRatio: BN;\n\t};\n};\n\nexport type MarginCategory = 'Initial' | 'Maintenance';\n\nexport type InsuranceFundStake = {\n\tmarketIndex: number;\n\tauthority: PublicKey;\n\n\tifShares: BN;\n\tifBase: BN;\n\n\tlastWithdrawRequestShares: BN;\n\tlastWithdrawRequestValue: BN;\n\tlastWithdrawRequestTs: BN;\n};\n\nexport type SerumV3FulfillmentConfigAccount = {\n\tfulfillmentType: SpotFulfillmentType;\n\tstatus: SpotFulfillmentStatus;\n\tpubkey: PublicKey;\n\tmarketIndex: number;\n\tserumProgramId: PublicKey;\n\tserumMarket: PublicKey;\n\tserumRequestQueue: PublicKey;\n\tserumEventQueue: PublicKey;\n\tserumBids: PublicKey;\n\tserumAsks: PublicKey;\n\tserumBaseVault: PublicKey;\n\tserumQuoteVault: PublicKey;\n\tserumOpenOrders: PublicKey;\n\tserumSignerNonce: BN;\n};\n","import { OracleSource } from '../';\nimport { DriftEnv } from '../';\nimport { PublicKey } from '@solana/web3.js';\n\nexport type PerpMarketConfig = {\n\tfullName?: string;\n\tcategory?: string[];\n\tsymbol: string;\n\tbaseAssetSymbol: string;\n\tmarketIndex: number;\n\tlaunchTs: number;\n\toracle: PublicKey;\n\toracleSource: OracleSource;\n};\n\nexport const DevnetPerpMarkets: PerpMarketConfig[] = [\n\t{\n\t\tfullName: 'Solana',\n\t\tcategory: ['L1', 'Infra'],\n\t\tsymbol: 'SOL-PERP',\n\t\tbaseAssetSymbol: 'SOL',\n\t\tmarketIndex: 0,\n\t\toracle: new PublicKey('J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix'),\n\t\tlaunchTs: 1655751353000,\n\t\toracleSource: OracleSource.PYTH,\n\t},\n\t{\n\t\tfullName: 'Bitcoin',\n\t\tcategory: ['L1', 'Payment'],\n\t\tsymbol: 'BTC-PERP',\n\t\tbaseAssetSymbol: 'BTC',\n\t\tmarketIndex: 1,\n\t\toracle: new PublicKey('HovQMDrbAgAYPCmHVSrezcSmkMtXSSUsLDFANExrZh2J'),\n\t\tlaunchTs: 1655751353000,\n\t\toracleSource: OracleSource.PYTH,\n\t},\n\t{\n\t\tfullName: 'Ethereum',\n\t\tcategory: ['L1', 'Infra'],\n\t\tsymbol: 'ETH-PERP',\n\t\tbaseAssetSymbol: 'ETH',\n\t\tmarketIndex: 2,\n\t\toracle: new PublicKey('EdVCmQ9FSPcVe5YySXDPCRmc8aDQLKJ9xvYBMZPie1Vw'),\n\t\tlaunchTs: 1637691133472,\n\t\toracleSource: OracleSource.PYTH,\n\t},\n];\n\nexport const MainnetPerpMarkets: PerpMarketConfig[] = [\n\t{\n\t\tfullName: 'Solana',\n\t\tcategory: ['L1', 'Infra'],\n\t\tsymbol: 'SOL-PERP',\n\t\tbaseAssetSymbol: 'SOL',\n\t\tmarketIndex: 0,\n\t\toracle: new PublicKey('H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG'),\n\t\tlaunchTs: 1667560505000,\n\t\toracleSource: OracleSource.PYTH,\n\t},\n\t{\n\t\tfullName: 'Bitcoin',\n\t\tcategory: ['L1', 'Payment'],\n\t\tsymbol: 'BTC-PERP',\n\t\tbaseAssetSymbol: 'BTC',\n\t\tmarketIndex: 1,\n\t\toracle: new PublicKey('GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU'),\n\t\tlaunchTs: 1670347281000,\n\t\toracleSource: OracleSource.PYTH,\n\t},\n\t{\n\t\tfullName: 'Ethereum',\n\t\tcategory: ['L1', 'Infra'],\n\t\tsymbol: 'ETH-PERP',\n\t\tbaseAssetSymbol: 'ETH',\n\t\tmarketIndex: 2,\n\t\toracle: new PublicKey('JBu1AL4obBcCMqKBBxhpWCNUt136ijcuMZLFvTP7iWdB'),\n\t\tlaunchTs: 1670347281000,\n\t\toracleSource: OracleSource.PYTH,\n\t},\n];\n\nexport const PerpMarkets: { [key in DriftEnv]: PerpMarketConfig[] } = {\n\tdevnet: DevnetPerpMarkets,\n\t'mainnet-beta': MainnetPerpMarkets,\n};\n","import { PublicKey } from '@solana/web3.js';\nimport * as anchor from '@project-serum/anchor';\nimport { BN } from '@project-serum/anchor';\n\nexport async function getDriftStateAccountPublicKeyAndNonce(\n\tprogramId: PublicKey\n): Promise<[PublicKey, number]> {\n\treturn PublicKey.findProgramAddress(\n\t\t[Buffer.from(anchor.utils.bytes.utf8.encode('drift_state'))],\n\t\tprogramId\n\t);\n}\n\nexport async function getDriftStateAccountPublicKey(\n\tprogramId: PublicKey\n): Promise<PublicKey> {\n\treturn (await getDriftStateAccountPublicKeyAndNonce(programId))[0];\n}\n\nexport async function getUserAccountPublicKeyAndNonce(\n\tprogramId: PublicKey,\n\tauthority: PublicKey,\n\tsubAccountId = 0\n): Promise<[PublicKey, number]> {\n\treturn PublicKey.findProgramAddress(\n\t\t[\n\t\t\tBuffer.from(anchor.utils.bytes.utf8.encode('user')),\n\t\t\tauthority.toBuffer(),\n\t\t\tnew anchor.BN(subAccountId).toArrayLike(Buffer, 'le', 2),\n\t\t],\n\t\tprogramId\n\t);\n}\n\nexport async function getUserAccountPublicKey(\n\tprogramId: PublicKey,\n\tauthority: PublicKey,\n\tsubAccountId = 0\n): Promise<PublicKey> {\n\treturn (\n\t\tawait getUserAccountPublicKeyAndNonce(programId, authority, subAccountId)\n\t)[0];\n}\n\nexport function getUserAccountPublicKeySync(\n\tprogramId: PublicKey,\n\tauthority: PublicKey,\n\tsubAccountId = 0\n): PublicKey {\n\treturn PublicKey.findProgramAddressSync(\n\t\t[\n\t\t\tBuffer.from(anchor.utils.bytes.utf8.encode('user')),\n\t\t\tauthority.toBuffer(),\n\t\t\tnew anchor.BN(subAccountId).toArrayLike(Buffer, 'le', 2),\n\t\t],\n\t\tprogramId\n\t)[0];\n}\n\nexport function getUserStatsAccountPublicKey(\n\tprogramId: PublicKey,\n\tauthority: PublicKey\n): PublicKey {\n\treturn PublicKey.findProgramAddressSync(\n\t\t[\n\t\t\tBuffer.from(anchor.utils.bytes.utf8.encode('user_stats')),\n\t\t\tauthority.toBuffer(),\n\t\t],\n\t\tprogramId\n\t)[0];\n}\n\nexport async function getPerpMarketPublicKey(\n\tprogramId: PublicKey,\n\tmarketIndex: number\n): Promise<PublicKey> {\n\treturn (\n\t\tawait PublicKey.findProgramAddress(\n\t\t\t[\n\t\t\t\tBuffer.from(anchor.utils.bytes.utf8.encode('perp_market')),\n\t\t\t\tnew anchor.BN(marketIndex).toArrayLike(Buffer, 'le', 2),\n\t\t\t],\n\t\t\tprogramId\n\t\t)\n\t)[0];\n}\n\nexport async function getSpotMarketPublicKey(\n\tprogramId: PublicKey,\n\tmarketIndex: number\n): Promise<PublicKey> {\n\treturn (\n\t\tawait PublicKey.findProgramAddress(\n\t\t\t[\n\t\t\t\tBuffer.from(anchor.utils.bytes.utf8.encode('spot_market')),\n\t\t\t\tnew anchor.BN(marketIndex).toArrayLike(Buffer, 'le', 2),\n\t\t\t],\n\t\t\tprogramId\n\t\t)\n\t)[0];\n}\n\nexport async function getSpotMarketVaultPublicKey(\n\tprogramId: PublicKey,\n\tmarketIndex: number\n): Promise<PublicKey> {\n\treturn (\n\t\tawait PublicKey.findProgramAddress(\n\t\t\t[\n\t\t\t\tBuffer.from(anchor.utils.bytes.utf8.encode('spot_market_vault')),\n\t\t\t\tnew anchor.BN(marketIndex).toArrayLike(Buffer, 'le', 2),\n\t\t\t],\n\t\t\tprogramId\n\t\t)\n\t)[0];\n}\n\nexport async function getInsuranceFundVaultPublicKey(\n\tprogramId: PublicKey,\n\tmarketIndex: number\n): Promise<PublicKey> {\n\treturn (\n\t\tawait PublicKey.findProgramAddress(\n\t\t\t[\n\t\t\t\tBuffer.from(anchor.utils.bytes.utf8.encode('insurance_fund_vault')),\n\t\t\t\tnew anchor.BN(marketIndex).toArrayLike(Buffer, 'le', 2),\n\t\t\t],\n\t\t\tprogramId\n\t\t)\n\t)[0];\n}\n\nexport function getInsuranceFundStakeAccountPublicKey(\n\tprogramId: PublicKey,\n\tauthority: PublicKey,\n\tmarketIndex: number\n): PublicKey {\n\treturn PublicKey.findProgramAddressSync(\n\t\t[\n\t\t\tBuffer.from(anchor.utils.bytes.utf8.encode('insurance_fund_stake')),\n\t\t\tauthority.toBuffer(),\n\t\t\tnew anchor.BN(marketIndex).toArrayLike(Buffer, 'le', 2),\n\t\t],\n\t\tprogramId\n\t)[0];\n}\n\nexport function getDriftSignerPublicKey(programId: PublicKey): PublicKey {\n\treturn PublicKey.findProgramAddressSync(\n\t\t[Buffer.from(anchor.utils.bytes.utf8.encode('drift_signer'))],\n\t\tprogramId\n\t)[0];\n}\n\nexport function getSerumOpenOrdersPublicKey(\n\tprogramId: PublicKey,\n\tmarket: PublicKey\n): PublicKey {\n\treturn PublicKey.findProgramAddressSync(\n\t\t[\n\t\t\tBuffer.from(anchor.utils.bytes.utf8.encode('serum_open_orders')),\n\t\t\tmarket.toBuffer(),\n\t\t],\n\t\tprogramId\n\t)[0];\n}\n\nexport function getSerumSignerPublicKey(\n\tprogramId: PublicKey,\n\tmarket: PublicKey,\n\tnonce: BN\n): PublicKey {\n\treturn anchor.web3.PublicKey.createProgramAddressSync(\n\t\t[market.toBuffer(), nonce.toArrayLike(Buffer, 'le', 8)],\n\t\tprogramId\n\t);\n}\n\nexport function getSerumFulfillmentConfigPublicKey(\n\tprogramId: PublicKey,\n\tmarket: PublicKey\n): PublicKey {\n\treturn PublicKey.findProgramAddressSync(\n\t\t[\n\t\t\tBuffer.from(anchor.utils.bytes.utf8.encode('serum_fulfillment_config')),\n\t\t\tmarket.toBuffer(),\n\t\t],\n\t\tprogramId\n\t)[0];\n}\n","import { Connection, PublicKey } from '@solana/web3.js';\nimport { UserAccount, UserStatsAccount } from '../types';\nimport {\n\tgetUserAccountPublicKey,\n\tgetUserStatsAccountPublicKey,\n} from '../addresses/pda';\nimport { Program } from '@project-serum/anchor';\n\nexport async function fetchUserAccounts(\n\tconnection: Connection,\n\tprogram: Program,\n\tauthority: PublicKey,\n\tlimit = 8\n): Promise<(UserAccount | undefined)[]> {\n\tconst userAccountPublicKeys = new Array<PublicKey>();\n\tfor (let i = 0; i < limit; i++) {\n\t\tuserAccountPublicKeys.push(\n\t\t\tawait getUserAccountPublicKey(program.programId, authority, i)\n\t\t);\n\t}\n\n\tconst accountInfos = await connection.getMultipleAccountsInfo(\n\t\tuserAccountPublicKeys,\n\t\t'confirmed'\n\t);\n\n\treturn accountInfos.map((accountInfo) => {\n\t\tif (!accountInfo) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn program.account.user.coder.accounts.decode(\n\t\t\t'User',\n\t\t\taccountInfo.data\n\t\t) as UserAccount;\n\t});\n}\n\nexport async function fetchUserStatsAccount(\n\tconnection: Connection,\n\tprogram: Program,\n\tauthority: PublicKey\n): Promise<UserStatsAccount | undefined> {\n\tconst userStatsPublicKey = getUserStatsAccountPublicKey(\n\t\tprogram.programId,\n\t\tauthority\n\t);\n\tconst accountInfo = await connection.getAccountInfo(\n\t\tuserStatsPublicKey,\n\t\t'confirmed'\n\t);\n\n\treturn accountInfo\n\t\t? (program.account.user.coder.accounts.decode(\n\t\t\t\t'UserStats',\n\t\t\t\taccountInfo.data\n\t\t  ) as UserStatsAccount)\n\t\t: undefined;\n}\n","import {\n\tSpotMarketAccount,\n\tPerpMarketAccount,\n\tOracleSource,\n\tStateAccount,\n\tUserAccount,\n\tUserStatsAccount,\n} from '../types';\nimport StrictEventEmitter from 'strict-event-emitter-types';\nimport { EventEmitter } from 'events';\nimport { PublicKey } from '@solana/web3.js';\nimport { AccountInfo } from '@solana/spl-token';\nimport { OracleInfo, OraclePriceData } from '..';\n\nexport interface AccountSubscriber<T> {\n\tdataAndSlot?: DataAndSlot<T>;\n\tsubscribe(onChange: (data: T) => void): Promise<void>;\n\tfetch(): Promise<void>;\n\tunsubscribe(): Promise<void>;\n}\n\nexport class NotSubscribedError extends Error {\n\tname = 'NotSubscribedError';\n}\n\nexport interface DriftClientAccountEvents {\n\tstateAccountUpdate: (payload: StateAccount) => void;\n\tperpMarketAccountUpdate: (payload: PerpMarketAccount) => void;\n\tspotMarketAccountUpdate: (payload: SpotMarketAccount) => void;\n\toraclePriceUpdate: (publicKey: PublicKey, data: OraclePriceData) => void;\n\tuserAccountUpdate: (payload: UserAccount) => void;\n\tupdate: void;\n\terror: (e: Error) => void;\n}\n\nexport interface DriftClientAccountSubscriber {\n\teventEmitter: StrictEventEmitter<EventEmitter, DriftClientAccountEvents>;\n\tisSubscribed: boolean;\n\n\tsubscribe(): Promise<boolean>;\n\tfetch(): Promise<void>;\n\tunsubscribe(): Promise<void>;\n\n\taddPerpMarket(marketIndex: number): Promise<boolean>;\n\taddSpotMarket(marketIndex: number): Promise<boolean>;\n\taddOracle(oracleInfo: OracleInfo): Promise<boolean>;\n\n\tgetStateAccountAndSlot(): DataAndSlot<StateAccount>;\n\tgetMarketAccountAndSlot(\n\t\tmarketIndex: number\n\t): DataAndSlot<PerpMarketAccount> | undefined;\n\tgetMarketAccountsAndSlots(): DataAndSlot<PerpMarketAccount>[];\n\tgetSpotMarketAccountAndSlot(\n\t\tmarketIndex: number\n\t): DataAndSlot<SpotMarketAccount> | undefined;\n\tgetSpotMarketAccountsAndSlots(): DataAndSlot<SpotMarketAccount>[];\n\tgetOraclePriceDataAndSlot(\n\t\toraclePublicKey: PublicKey\n\t): DataAndSlot<OraclePriceData> | undefined;\n}\n\nexport interface UserAccountEvents {\n\tuserAccountUpdate: (payload: UserAccount) => void;\n\tupdate: void;\n\terror: (e: Error) => void;\n}\n\nexport interface UserAccountSubscriber {\n\teventEmitter: StrictEventEmitter<EventEmitter, UserAccountEvents>;\n\tisSubscribed: boolean;\n\n\tsubscribe(): Promise<boolean>;\n\tfetch(): Promise<void>;\n\tunsubscribe(): Promise<void>;\n\n\tgetUserAccountAndSlot(): DataAndSlot<UserAccount>;\n}\n\nexport interface TokenAccountEvents {\n\ttokenAccountUpdate: (payload: AccountInfo) => void;\n\tupdate: void;\n\terror: (e: Error) => void;\n}\n\nexport interface TokenAccountSubscriber {\n\teventEmitter: StrictEventEmitter<EventEmitter, TokenAccountEvents>;\n\tisSubscribed: boolean;\n\n\tsubscribe(): Promise<boolean>;\n\tfetch(): Promise<void>;\n\tunsubscribe(): Promise<void>;\n\n\tgetTokenAccountAndSlot(): DataAndSlot<AccountInfo>;\n}\n\nexport interface OracleEvents {\n\toracleUpdate: (payload: OraclePriceData) => void;\n\tupdate: void;\n\terror: (e: Error) => void;\n}\n\nexport interface OracleAccountSubscriber {\n\teventEmitter: StrictEventEmitter<EventEmitter, OracleEvents>;\n\tisSubscribed: boolean;\n\n\tsubscribe(): Promise<boolean>;\n\tfetch(): Promise<void>;\n\tunsubscribe(): Promise<void>;\n\n\tgetOraclePriceData(): DataAndSlot<OraclePriceData>;\n}\n\nexport type AccountToPoll = {\n\tkey: string;\n\tpublicKey: PublicKey;\n\teventType: string;\n\tcallbackId?: string;\n\tmapKey?: number;\n};\n\nexport type OraclesToPoll = {\n\tpublicKey: PublicKey;\n\tsource: OracleSource;\n\tcallbackId?: string;\n};\n\nexport type BufferAndSlot = {\n\tslot: number;\n\tbuffer: Buffer | undefined;\n};\n\nexport type DataAndSlot<T> = {\n\tdata: T;\n\tslot: number;\n};\n\nexport interface UserStatsAccountEvents {\n\tuserStatsAccountUpdate: (payload: UserStatsAccount) => void;\n\tupdate: void;\n\terror: (e: Error) => void;\n}\n\nexport interface UserStatsAccountSubscriber {\n\teventEmitter: StrictEventEmitter<EventEmitter, UserStatsAccountEvents>;\n\tisSubscribed: boolean;\n\n\tsubscribe(): Promise<boolean>;\n\tfetch(): Promise<void>;\n\tunsubscribe(): Promise<void>;\n\n\tgetUserStatsAccountAndSlot(): DataAndSlot<UserStatsAccount>;\n}\n","import {\n\tDriftClientAccountSubscriber,\n\tDriftClientAccountEvents,\n\tDataAndSlot,\n} from './types';\nimport { AccountSubscriber, NotSubscribedError } from './types';\nimport { SpotMarketAccount, PerpMarketAccount, StateAccount } from '../types';\nimport { Program } from '@project-serum/anchor';\nimport StrictEventEmitter from 'strict-event-emitter-types';\nimport { EventEmitter } from 'events';\nimport {\n\tgetDriftStateAccountPublicKey,\n\tgetSpotMarketPublicKey,\n\tgetPerpMarketPublicKey,\n} from '../addresses/pda';\nimport { WebSocketAccountSubscriber } from './webSocketAccountSubscriber';\nimport { PublicKey } from '@solana/web3.js';\nimport { OracleInfo, OraclePriceData } from '../oracles/types';\nimport { OracleClientCache } from '../oracles/oracleClientCache';\nimport * as Buffer from 'buffer';\nimport { QUOTE_ORACLE_PRICE_DATA } from '../oracles/quoteAssetOracleClient';\n\nexport class WebSocketDriftClientAccountSubscriber\n\timplements DriftClientAccountSubscriber\n{\n\tisSubscribed: boolean;\n\tprogram: Program;\n\tperpMarketIndexes: number[];\n\tspotMarketIndexes: number[];\n\toracleInfos: OracleInfo[];\n\toracleClientCache = new OracleClientCache();\n\n\teventEmitter: StrictEventEmitter<EventEmitter, DriftClientAccountEvents>;\n\tstateAccountSubscriber?: AccountSubscriber<StateAccount>;\n\tperpMarketAccountSubscribers = new Map<\n\t\tnumber,\n\t\tAccountSubscriber<PerpMarketAccount>\n\t>();\n\tspotMarketAccountSubscribers = new Map<\n\t\tnumber,\n\t\tAccountSubscriber<SpotMarketAccount>\n\t>();\n\toracleSubscribers = new Map<string, AccountSubscriber<OraclePriceData>>();\n\n\tprivate isSubscribing = false;\n\tprivate subscriptionPromise: Promise<boolean>;\n\tprivate subscriptionPromiseResolver: (val: boolean) => void;\n\n\tpublic constructor(\n\t\tprogram: Program,\n\t\tperpMarketIndexes: number[],\n\t\tspotMarketIndexes: number[],\n\t\toracleInfos: OracleInfo[]\n\t) {\n\t\tthis.isSubscribed = false;\n\t\tthis.program = program;\n\t\tthis.eventEmitter = new EventEmitter();\n\t\tthis.perpMarketIndexes = perpMarketIndexes;\n\t\tthis.spotMarketIndexes = spotMarketIndexes;\n\t\tthis.oracleInfos = oracleInfos;\n\t}\n\n\tpublic async subscribe(): Promise<boolean> {\n\t\tif (this.isSubscribed) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.isSubscribing) {\n\t\t\treturn await this.subscriptionPromise;\n\t\t}\n\n\t\tthis.isSubscribing = true;\n\n\t\tthis.subscriptionPromise = new Promise((res) => {\n\t\t\tthis.subscriptionPromiseResolver = res;\n\t\t});\n\n\t\tconst statePublicKey = await getDriftStateAccountPublicKey(\n\t\t\tthis.program.programId\n\t\t);\n\n\t\t// create and activate main state account subscription\n\t\tthis.stateAccountSubscriber = new WebSocketAccountSubscriber(\n\t\t\t'state',\n\t\t\tthis.program,\n\t\t\tstatePublicKey\n\t\t);\n\t\tawait this.stateAccountSubscriber.subscribe((data: StateAccount) => {\n\t\t\tthis.eventEmitter.emit('stateAccountUpdate', data);\n\t\t\tthis.eventEmitter.emit('update');\n\t\t});\n\n\t\t// subscribe to market accounts\n\t\tawait this.subscribeToPerpMarketAccounts();\n\n\t\t// subscribe to spot market accounts\n\t\tawait this.subscribeToSpotMarketAccounts();\n\n\t\t// subscribe to oracles\n\t\tawait this.subscribeToOracles();\n\n\t\tthis.eventEmitter.emit('update');\n\n\t\tthis.isSubscribing = false;\n\t\tthis.isSubscribed = true;\n\t\tthis.subscriptionPromiseResolver(true);\n\n\t\treturn true;\n\t}\n\n\tasync subscribeToPerpMarketAccounts(): Promise<boolean> {\n\t\tfor (const marketIndex of this.perpMarketIndexes) {\n\t\t\tawait this.subscribeToPerpMarketAccount(marketIndex);\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync subscribeToPerpMarketAccount(marketIndex: number): Promise<boolean> {\n\t\tconst perpMarketPublicKey = await getPerpMarketPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tmarketIndex\n\t\t);\n\t\tconst accountSubscriber = new WebSocketAccountSubscriber<PerpMarketAccount>(\n\t\t\t'perpMarket',\n\t\t\tthis.program,\n\t\t\tperpMarketPublicKey\n\t\t);\n\t\tawait accountSubscriber.subscribe((data: PerpMarketAccount) => {\n\t\t\tthis.eventEmitter.emit('perpMarketAccountUpdate', data);\n\t\t\tthis.eventEmitter.emit('update');\n\t\t});\n\t\tthis.perpMarketAccountSubscribers.set(marketIndex, accountSubscriber);\n\t\treturn true;\n\t}\n\n\tasync subscribeToSpotMarketAccounts(): Promise<boolean> {\n\t\tfor (const marketIndex of this.spotMarketIndexes) {\n\t\t\tawait this.subscribeToSpotMarketAccount(marketIndex);\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync subscribeToSpotMarketAccount(marketIndex: number): Promise<boolean> {\n\t\tconst marketPublicKey = await getSpotMarketPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tmarketIndex\n\t\t);\n\t\tconst accountSubscriber = new WebSocketAccountSubscriber<SpotMarketAccount>(\n\t\t\t'spotMarket',\n\t\t\tthis.program,\n\t\t\tmarketPublicKey\n\t\t);\n\t\tawait accountSubscriber.subscribe((data: SpotMarketAccount) => {\n\t\t\tthis.eventEmitter.emit('spotMarketAccountUpdate', data);\n\t\t\tthis.eventEmitter.emit('update');\n\t\t});\n\t\tthis.spotMarketAccountSubscribers.set(marketIndex, accountSubscriber);\n\t\treturn true;\n\t}\n\n\tasync subscribeToOracles(): Promise<boolean> {\n\t\tfor (const oracleInfo of this.oracleInfos) {\n\t\t\tif (!oracleInfo.publicKey.equals(PublicKey.default)) {\n\t\t\t\tawait this.subscribeToOracle(oracleInfo);\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync subscribeToOracle(oracleInfo: OracleInfo): Promise<boolean> {\n\t\tconst client = this.oracleClientCache.get(\n\t\t\toracleInfo.source,\n\t\t\tthis.program.provider.connection\n\t\t);\n\t\tconst accountSubscriber = new WebSocketAccountSubscriber<OraclePriceData>(\n\t\t\t'oracle',\n\t\t\tthis.program,\n\t\t\toracleInfo.publicKey,\n\t\t\t(buffer: Buffer) => {\n\t\t\t\treturn client.getOraclePriceDataFromBuffer(buffer);\n\t\t\t}\n\t\t);\n\n\t\tawait accountSubscriber.subscribe((data: OraclePriceData) => {\n\t\t\tthis.eventEmitter.emit('oraclePriceUpdate', oracleInfo.publicKey, data);\n\t\t\tthis.eventEmitter.emit('update');\n\t\t});\n\n\t\tthis.oracleSubscribers.set(\n\t\t\toracleInfo.publicKey.toString(),\n\t\t\taccountSubscriber\n\t\t);\n\t\treturn true;\n\t}\n\n\tasync unsubscribeFromMarketAccounts(): Promise<void> {\n\t\tfor (const accountSubscriber of this.perpMarketAccountSubscribers.values()) {\n\t\t\tawait accountSubscriber.unsubscribe();\n\t\t}\n\t}\n\n\tasync unsubscribeFromSpotMarketAccounts(): Promise<void> {\n\t\tfor (const accountSubscriber of this.spotMarketAccountSubscribers.values()) {\n\t\t\tawait accountSubscriber.unsubscribe();\n\t\t}\n\t}\n\n\tasync unsubscribeFromOracles(): Promise<void> {\n\t\tfor (const accountSubscriber of this.oracleSubscribers.values()) {\n\t\t\tawait accountSubscriber.unsubscribe();\n\t\t}\n\t}\n\n\tpublic async fetch(): Promise<void> {\n\t\tif (!this.isSubscribed) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst promises = [this.stateAccountSubscriber.fetch()]\n\t\t\t.concat(\n\t\t\t\tArray.from(this.perpMarketAccountSubscribers.values()).map(\n\t\t\t\t\t(subscriber) => subscriber.fetch()\n\t\t\t\t)\n\t\t\t)\n\t\t\t.concat(\n\t\t\t\tArray.from(this.spotMarketAccountSubscribers.values()).map(\n\t\t\t\t\t(subscriber) => subscriber.fetch()\n\t\t\t\t)\n\t\t\t);\n\n\t\tawait Promise.all(promises);\n\t}\n\n\tpublic async unsubscribe(): Promise<void> {\n\t\tif (!this.isSubscribed) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.stateAccountSubscriber.unsubscribe();\n\n\t\tawait this.unsubscribeFromMarketAccounts();\n\t\tawait this.unsubscribeFromSpotMarketAccounts();\n\t\tawait this.unsubscribeFromOracles();\n\n\t\tthis.isSubscribed = false;\n\t}\n\n\tasync addSpotMarket(marketIndex: number): Promise<boolean> {\n\t\tif (this.spotMarketAccountSubscribers.has(marketIndex)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this.subscribeToSpotMarketAccount(marketIndex);\n\t}\n\n\tasync addPerpMarket(marketIndex: number): Promise<boolean> {\n\t\tif (this.perpMarketAccountSubscribers.has(marketIndex)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this.subscribeToPerpMarketAccount(marketIndex);\n\t}\n\n\tasync addOracle(oracleInfo: OracleInfo): Promise<boolean> {\n\t\tif (this.oracleSubscribers.has(oracleInfo.publicKey.toString())) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (oracleInfo.publicKey.equals(PublicKey.default)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.subscribeToOracle(oracleInfo);\n\t}\n\n\tassertIsSubscribed(): void {\n\t\tif (!this.isSubscribed) {\n\t\t\tthrow new NotSubscribedError(\n\t\t\t\t'You must call `subscribe` before using this function'\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic getStateAccountAndSlot(): DataAndSlot<StateAccount> {\n\t\tthis.assertIsSubscribed();\n\t\treturn this.stateAccountSubscriber.dataAndSlot;\n\t}\n\n\tpublic getMarketAccountAndSlot(\n\t\tmarketIndex: number\n\t): DataAndSlot<PerpMarketAccount> | undefined {\n\t\tthis.assertIsSubscribed();\n\t\treturn this.perpMarketAccountSubscribers.get(marketIndex).dataAndSlot;\n\t}\n\n\tpublic getMarketAccountsAndSlots(): DataAndSlot<PerpMarketAccount>[] {\n\t\treturn Array.from(this.perpMarketAccountSubscribers.values()).map(\n\t\t\t(subscriber) => subscriber.dataAndSlot\n\t\t);\n\t}\n\n\tpublic getSpotMarketAccountAndSlot(\n\t\tmarketIndex: number\n\t): DataAndSlot<SpotMarketAccount> | undefined {\n\t\tthis.assertIsSubscribed();\n\t\treturn this.spotMarketAccountSubscribers.get(marketIndex).dataAndSlot;\n\t}\n\n\tpublic getSpotMarketAccountsAndSlots(): DataAndSlot<SpotMarketAccount>[] {\n\t\treturn Array.from(this.spotMarketAccountSubscribers.values()).map(\n\t\t\t(subscriber) => subscriber.dataAndSlot\n\t\t);\n\t}\n\n\tpublic getOraclePriceDataAndSlot(\n\t\toraclePublicKey: PublicKey\n\t): DataAndSlot<OraclePriceData> | undefined {\n\t\tthis.assertIsSubscribed();\n\t\tif (oraclePublicKey.equals(PublicKey.default)) {\n\t\t\treturn {\n\t\t\t\tdata: QUOTE_ORACLE_PRICE_DATA,\n\t\t\t\tslot: 0,\n\t\t\t};\n\t\t}\n\t\treturn this.oracleSubscribers.get(oraclePublicKey.toString()).dataAndSlot;\n\t}\n}\n","export function capitalize(value: string): string {\n\treturn value[0].toUpperCase() + value.slice(1);\n}\n","import { DataAndSlot, BufferAndSlot, AccountSubscriber } from './types';\nimport { AnchorProvider, Program } from '@project-serum/anchor';\nimport { AccountInfo, Context, PublicKey } from '@solana/web3.js';\nimport { capitalize } from './utils';\nimport * as Buffer from 'buffer';\n\nexport class WebSocketAccountSubscriber<T> implements AccountSubscriber<T> {\n\tdataAndSlot?: DataAndSlot<T>;\n\tbufferAndSlot?: BufferAndSlot;\n\taccountName: string;\n\tprogram: Program;\n\taccountPublicKey: PublicKey;\n\tdecodeBufferFn: (buffer: Buffer) => T;\n\tonChange: (data: T) => void;\n\tlistenerId?: number;\n\n\tpublic constructor(\n\t\taccountName: string,\n\t\tprogram: Program,\n\t\taccountPublicKey: PublicKey,\n\t\tdecodeBuffer?: (buffer: Buffer) => T\n\t) {\n\t\tthis.accountName = accountName;\n\t\tthis.program = program;\n\t\tthis.accountPublicKey = accountPublicKey;\n\t\tthis.decodeBufferFn = decodeBuffer;\n\t}\n\n\tasync subscribe(onChange: (data: T) => void): Promise<void> {\n\t\tif (this.listenerId) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.onChange = onChange;\n\t\tawait this.fetch();\n\n\t\tthis.listenerId = this.program.provider.connection.onAccountChange(\n\t\t\tthis.accountPublicKey,\n\t\t\t(accountInfo, context) => {\n\t\t\t\tthis.handleRpcResponse(context, accountInfo);\n\t\t\t},\n\t\t\t(this.program.provider as AnchorProvider).opts.commitment\n\t\t);\n\t}\n\n\tasync fetch(): Promise<void> {\n\t\tconst rpcResponse =\n\t\t\tawait this.program.provider.connection.getAccountInfoAndContext(\n\t\t\t\tthis.accountPublicKey,\n\t\t\t\t(this.program.provider as AnchorProvider).opts.commitment\n\t\t\t);\n\t\tthis.handleRpcResponse(rpcResponse.context, rpcResponse?.value);\n\t}\n\n\thandleRpcResponse(context: Context, accountInfo?: AccountInfo<Buffer>): void {\n\t\tconst newSlot = context.slot;\n\t\tlet newBuffer: Buffer | undefined = undefined;\n\t\tif (accountInfo) {\n\t\t\tnewBuffer = accountInfo.data;\n\t\t}\n\n\t\tif (!this.bufferAndSlot) {\n\t\t\tthis.bufferAndSlot = {\n\t\t\t\tbuffer: newBuffer,\n\t\t\t\tslot: newSlot,\n\t\t\t};\n\t\t\tif (newBuffer) {\n\t\t\t\tconst account = this.decodeBuffer(newBuffer);\n\t\t\t\tthis.dataAndSlot = {\n\t\t\t\t\tdata: account,\n\t\t\t\t\tslot: newSlot,\n\t\t\t\t};\n\t\t\t\tthis.onChange(account);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (newSlot <= this.bufferAndSlot.slot) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldBuffer = this.bufferAndSlot.buffer;\n\t\tif (newBuffer && (!oldBuffer || !newBuffer.equals(oldBuffer))) {\n\t\t\tthis.bufferAndSlot = {\n\t\t\t\tbuffer: newBuffer,\n\t\t\t\tslot: newSlot,\n\t\t\t};\n\t\t\tconst account = this.decodeBuffer(newBuffer);\n\t\t\tthis.dataAndSlot = {\n\t\t\t\tdata: account,\n\t\t\t\tslot: newSlot,\n\t\t\t};\n\t\t\tthis.onChange(account);\n\t\t}\n\t}\n\n\tdecodeBuffer(buffer: Buffer): T {\n\t\tif (this.decodeBufferFn) {\n\t\t\treturn this.decodeBufferFn(buffer);\n\t\t} else {\n\t\t\treturn this.program.account[this.accountName].coder.accounts.decode(\n\t\t\t\tcapitalize(this.accountName),\n\t\t\t\tbuffer\n\t\t\t);\n\t\t}\n\t}\n\n\tunsubscribe(): Promise<void> {\n\t\tif (this.listenerId) {\n\t\t\tconst promise =\n\t\t\t\tthis.program.provider.connection.removeAccountChangeListener(\n\t\t\t\t\tthis.listenerId\n\t\t\t\t);\n\t\t\tthis.listenerId = undefined;\n\t\t\treturn promise;\n\t\t}\n\t}\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { OracleClient, OraclePriceData } from './types';\nimport { BN } from '@project-serum/anchor';\nimport { PRICE_PRECISION } from '../constants/numericConstants';\n\nexport const QUOTE_ORACLE_PRICE_DATA: OraclePriceData = {\n\tprice: PRICE_PRECISION,\n\tslot: new BN(0),\n\tconfidence: new BN(1),\n\thasSufficientNumberOfDataPoints: true,\n};\n\nexport class QuoteAssetOracleClient implements OracleClient {\n\tpublic constructor() {}\n\n\tpublic async getOraclePriceData(\n\t\t_pricePublicKey: PublicKey\n\t): Promise<OraclePriceData> {\n\t\treturn Promise.resolve(QUOTE_ORACLE_PRICE_DATA);\n\t}\n\n\tpublic getOraclePriceDataFromBuffer(_buffer: Buffer): OraclePriceData {\n\t\treturn QUOTE_ORACLE_PRICE_DATA;\n\t}\n}\n","import { isVariant, OracleSource } from '../types';\nimport { Connection } from '@solana/web3.js';\nimport { OracleClient } from '../oracles/types';\nimport { PythClient } from '../oracles/pythClient';\nimport { SwitchboardClient } from '../oracles/switchboardClient';\nimport { QuoteAssetOracleClient } from '../oracles/quoteAssetOracleClient';\n\nexport function getOracleClient(\n\toracleSource: OracleSource,\n\tconnection: Connection\n): OracleClient {\n\tif (isVariant(oracleSource, 'pyth')) {\n\t\treturn new PythClient(connection);\n\t}\n\n\tif (isVariant(oracleSource, 'switchboard')) {\n\t\treturn new SwitchboardClient(connection);\n\t}\n\n\tif (isVariant(oracleSource, 'quoteAsset')) {\n\t\treturn new QuoteAssetOracleClient();\n\t}\n\n\tthrow new Error(`Unknown oracle source ${oracleSource}`);\n}\n","import { OracleClient } from './types';\nimport { OracleSource } from '../types';\nimport { getOracleClient } from '../factory/oracleClient';\nimport { Connection } from '@solana/web3.js';\n\nexport class OracleClientCache {\n\tcache = new Map<string, OracleClient>();\n\tpublic constructor() {}\n\n\tpublic get(oracleSource: OracleSource, connection: Connection) {\n\t\tconst key = Object.keys(oracleSource)[0];\n\t\tif (this.cache.has(key)) {\n\t\t\treturn this.cache.get(key);\n\t\t}\n\n\t\tconst client = getOracleClient(oracleSource, connection);\n\t\tthis.cache.set(key, client);\n\t\treturn client;\n\t}\n}\n","import { Commitment, Connection, PublicKey } from '@solana/web3.js';\nimport { v4 as uuidv4 } from 'uuid';\nimport { BufferAndSlot } from './types';\nimport { promiseTimeout } from '../util/promiseTimeout';\n\ntype AccountToLoad = {\n\tpublicKey: PublicKey;\n\tcallbacks: Map<string, (buffer: Buffer, slot: number) => void>;\n};\n\nconst GET_MULTIPLE_ACCOUNTS_CHUNK_SIZE = 99;\n\nconst oneMinute = 60 * 1000;\n\nexport class BulkAccountLoader {\n\tconnection: Connection;\n\tcommitment: Commitment;\n\tpollingFrequency: number;\n\taccountsToLoad = new Map<string, AccountToLoad>();\n\tbufferAndSlotMap = new Map<string, BufferAndSlot>();\n\terrorCallbacks = new Map<string, (e) => void>();\n\tintervalId?: NodeJS.Timer;\n\t// to handle clients spamming load\n\tloadPromise?: Promise<void>;\n\tloadPromiseResolver: () => void;\n\tlastTimeLoadingPromiseCleared = Date.now();\n\tmostRecentSlot = 0;\n\n\tpublic constructor(\n\t\tconnection: Connection,\n\t\tcommitment: Commitment,\n\t\tpollingFrequency: number\n\t) {\n\t\tthis.connection = connection;\n\t\tthis.commitment = commitment;\n\t\tthis.pollingFrequency = pollingFrequency;\n\t}\n\n\tpublic async addAccount(\n\t\tpublicKey: PublicKey,\n\t\tcallback: (buffer: Buffer, slot: number) => void\n\t): Promise<string> {\n\t\tconst existingSize = this.accountsToLoad.size;\n\n\t\tconst callbackId = uuidv4();\n\t\tconst existingAccountToLoad = this.accountsToLoad.get(publicKey.toString());\n\t\tif (existingAccountToLoad) {\n\t\t\texistingAccountToLoad.callbacks.set(callbackId, callback);\n\t\t} else {\n\t\t\tconst callbacks = new Map<\n\t\t\t\tstring,\n\t\t\t\t(buffer: Buffer, slot: number) => void\n\t\t\t>();\n\t\t\tcallbacks.set(callbackId, callback);\n\t\t\tconst newAccountToLoad = {\n\t\t\t\tpublicKey,\n\t\t\t\tcallbacks,\n\t\t\t};\n\t\t\tthis.accountsToLoad.set(publicKey.toString(), newAccountToLoad);\n\t\t}\n\n\t\tif (existingSize === 0) {\n\t\t\tthis.startPolling();\n\t\t}\n\n\t\t// resolve the current loadPromise in case client wants to call load\n\t\tawait this.loadPromise;\n\n\t\treturn callbackId;\n\t}\n\n\tpublic removeAccount(publicKey: PublicKey, callbackId: string): void {\n\t\tconst existingAccountToLoad = this.accountsToLoad.get(publicKey.toString());\n\t\tif (existingAccountToLoad) {\n\t\t\texistingAccountToLoad.callbacks.delete(callbackId);\n\t\t\tif (existingAccountToLoad.callbacks.size === 0) {\n\t\t\t\tthis.accountsToLoad.delete(existingAccountToLoad.publicKey.toString());\n\t\t\t}\n\t\t}\n\n\t\tif (this.accountsToLoad.size === 0) {\n\t\t\tthis.stopPolling();\n\t\t}\n\t}\n\n\tpublic addErrorCallbacks(callback: (error: Error) => void): string {\n\t\tconst callbackId = uuidv4();\n\t\tthis.errorCallbacks.set(callbackId, callback);\n\t\treturn callbackId;\n\t}\n\n\tpublic removeErrorCallbacks(callbackId: string): void {\n\t\tthis.errorCallbacks.delete(callbackId);\n\t}\n\n\tchunks<T>(array: readonly T[], size: number): T[][] {\n\t\treturn new Array(Math.ceil(array.length / size))\n\t\t\t.fill(null)\n\t\t\t.map((_, index) => index * size)\n\t\t\t.map((begin) => array.slice(begin, begin + size));\n\t}\n\n\tpublic async load(): Promise<void> {\n\t\tif (this.loadPromise) {\n\t\t\tconst now = Date.now();\n\t\t\tif (now - this.lastTimeLoadingPromiseCleared > oneMinute) {\n\t\t\t\tthis.loadPromise = undefined;\n\t\t\t} else {\n\t\t\t\treturn this.loadPromise;\n\t\t\t}\n\t\t}\n\n\t\tthis.loadPromise = new Promise((resolver) => {\n\t\t\tthis.loadPromiseResolver = resolver;\n\t\t});\n\t\tthis.lastTimeLoadingPromiseCleared = Date.now();\n\n\t\ttry {\n\t\t\tconst chunks = this.chunks(\n\t\t\t\tArray.from(this.accountsToLoad.values()),\n\t\t\t\tGET_MULTIPLE_ACCOUNTS_CHUNK_SIZE\n\t\t\t);\n\n\t\t\tawait Promise.all(\n\t\t\t\tchunks.map((chunk) => {\n\t\t\t\t\treturn this.loadChunk(chunk);\n\t\t\t\t})\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tconsole.error(`Error in bulkAccountLoader.load()`);\n\t\t\tconsole.error(e);\n\t\t\tfor (const [_, callback] of this.errorCallbacks) {\n\t\t\t\tcallback(e);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.loadPromiseResolver();\n\t\t\tthis.loadPromise = undefined;\n\t\t}\n\t}\n\n\tasync loadChunk(accountsToLoad: AccountToLoad[]): Promise<void> {\n\t\tif (accountsToLoad.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst args = [\n\t\t\taccountsToLoad.map((accountToLoad) => {\n\t\t\t\treturn accountToLoad.publicKey.toBase58();\n\t\t\t}),\n\t\t\t{ commitment: this.commitment },\n\t\t];\n\n\t\tconst rpcResponse: any | null = await promiseTimeout(\n\t\t\t// @ts-ignore\n\t\t\tthis.connection._rpcRequest('getMultipleAccounts', args),\n\t\t\t10 * 1000 // 30 second timeout\n\t\t);\n\n\t\tif (rpcResponse === null) {\n\t\t\tthis.log('request to rpc timed out');\n\t\t\treturn;\n\t\t}\n\n\t\tconst newSlot = rpcResponse.result.context.slot;\n\n\t\tif (newSlot > this.mostRecentSlot) {\n\t\t\tthis.mostRecentSlot = newSlot;\n\t\t}\n\n\t\tfor (const i in accountsToLoad) {\n\t\t\tconst accountToLoad = accountsToLoad[i];\n\t\t\tconst key = accountToLoad.publicKey.toString();\n\t\t\tconst oldRPCResponse = this.bufferAndSlotMap.get(key);\n\n\t\t\tlet newBuffer: Buffer | undefined = undefined;\n\t\t\tif (rpcResponse.result.value[i]) {\n\t\t\t\tconst raw: string = rpcResponse.result.value[i].data[0];\n\t\t\t\tconst dataType = rpcResponse.result.value[i].data[1];\n\t\t\t\tnewBuffer = Buffer.from(raw, dataType);\n\t\t\t}\n\n\t\t\tif (!oldRPCResponse) {\n\t\t\t\tthis.bufferAndSlotMap.set(key, {\n\t\t\t\t\tslot: newSlot,\n\t\t\t\t\tbuffer: newBuffer,\n\t\t\t\t});\n\t\t\t\tthis.handleAccountCallbacks(accountToLoad, newBuffer, newSlot);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (newSlot <= oldRPCResponse.slot) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst oldBuffer = oldRPCResponse.buffer;\n\t\t\tif (newBuffer && (!oldBuffer || !newBuffer.equals(oldBuffer))) {\n\t\t\t\tthis.bufferAndSlotMap.set(key, {\n\t\t\t\t\tslot: newSlot,\n\t\t\t\t\tbuffer: newBuffer,\n\t\t\t\t});\n\t\t\t\tthis.handleAccountCallbacks(accountToLoad, newBuffer, newSlot);\n\t\t\t}\n\t\t}\n\t}\n\n\thandleAccountCallbacks(\n\t\taccountToLoad: AccountToLoad,\n\t\tbuffer: Buffer,\n\t\tslot: number\n\t): void {\n\t\tfor (const [_, callback] of accountToLoad.callbacks) {\n\t\t\tcallback(buffer, slot);\n\t\t}\n\t}\n\n\tpublic getBufferAndSlot(publicKey: PublicKey): BufferAndSlot | undefined {\n\t\treturn this.bufferAndSlotMap.get(publicKey.toString());\n\t}\n\n\tpublic startPolling(): void {\n\t\tif (this.intervalId) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.pollingFrequency !== 0)\n\t\t\tthis.intervalId = setInterval(\n\t\t\t\tthis.load.bind(this),\n\t\t\t\tthis.pollingFrequency\n\t\t\t);\n\t}\n\n\tpublic stopPolling(): void {\n\t\tif (this.intervalId) {\n\t\t\tclearInterval(this.intervalId);\n\t\t\tthis.intervalId = undefined;\n\t\t}\n\t}\n\n\tpublic log(msg: string): void {\n\t\tconsole.log(msg);\n\t}\n\n\tpublic updatePollingFrequency(pollingFrequency: number): void {\n\t\tthis.stopPolling();\n\t\tthis.pollingFrequency = pollingFrequency;\n\t\tif (this.accountsToLoad.size > 0) {\n\t\t\tthis.startPolling();\n\t\t}\n\t}\n}\n","export function promiseTimeout<T>(\n\tpromise: Promise<T>,\n\ttimeoutMs: number\n): Promise<T | null> {\n\tlet timeoutId: ReturnType<typeof setTimeout>;\n\tconst timeoutPromise: Promise<null> = new Promise((resolve) => {\n\t\ttimeoutId = setTimeout(() => resolve(null), timeoutMs);\n\t});\n\n\treturn Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n\t\tclearTimeout(timeoutId);\n\t\treturn result;\n\t});\n}\n","import { User } from '../user';\nimport { BulkAccountLoader } from './bulkAccountLoader';\nimport { PollingUserAccountSubscriber } from './pollingUserAccountSubscriber';\n\n/**\n * @param users\n * @param accountLoader\n */\nexport async function bulkPollingUserSubscribe(\n\tusers: User[],\n\taccountLoader: BulkAccountLoader\n): Promise<void> {\n\tif (users.length === 0) {\n\t\tawait accountLoader.load();\n\t\treturn;\n\t}\n\n\tawait Promise.all(\n\t\tusers.map((user) => {\n\t\t\treturn (\n\t\t\t\tuser.accountSubscriber as PollingUserAccountSubscriber\n\t\t\t).addToAccountLoader();\n\t\t})\n\t);\n\n\tawait accountLoader.load();\n\n\tawait Promise.all(\n\t\tusers.map(async (user) => {\n\t\t\treturn user.subscribe();\n\t\t})\n\t);\n}\n","import { UserStats } from '../userStats';\nimport { BulkAccountLoader } from './bulkAccountLoader';\nimport { PollingUserStatsAccountSubscriber } from './pollingUserStatsAccountSubscriber';\n\n/**\n * @param userStats\n * @param accountLoader\n */\nexport async function bulkPollingUserStatsSubscribe(\n\tuserStats: UserStats[],\n\taccountLoader: BulkAccountLoader\n): Promise<void> {\n\tif (userStats.length === 0) {\n\t\tawait accountLoader.load();\n\t\treturn;\n\t}\n\n\tawait Promise.all(\n\t\tuserStats.map((userStat) => {\n\t\t\treturn (\n\t\t\t\tuserStat.accountSubscriber as PollingUserStatsAccountSubscriber\n\t\t\t).addToAccountLoader();\n\t\t})\n\t);\n\n\tawait accountLoader.load();\n\n\tawait Promise.all(\n\t\tuserStats.map(async (userStat) => {\n\t\t\treturn userStat.subscribe();\n\t\t})\n\t);\n}\n","import {\n\tDataAndSlot,\n\tAccountToPoll,\n\tDriftClientAccountEvents,\n\tDriftClientAccountSubscriber,\n\tNotSubscribedError,\n\tOraclesToPoll,\n} from './types';\nimport { Program } from '@project-serum/anchor';\nimport StrictEventEmitter from 'strict-event-emitter-types';\nimport { EventEmitter } from 'events';\nimport {\n\tSpotMarketAccount,\n\tPerpMarketAccount,\n\tStateAccount,\n\tUserAccount,\n} from '../types';\nimport {\n\tgetDriftStateAccountPublicKey,\n\tgetSpotMarketPublicKey,\n\tgetPerpMarketPublicKey,\n} from '../addresses/pda';\nimport { BulkAccountLoader } from './bulkAccountLoader';\nimport { capitalize } from './utils';\nimport { PublicKey } from '@solana/web3.js';\nimport { OracleInfo, OraclePriceData } from '../oracles/types';\nimport { OracleClientCache } from '../oracles/oracleClientCache';\nimport { QUOTE_ORACLE_PRICE_DATA } from '../oracles/quoteAssetOracleClient';\n\nexport class PollingDriftClientAccountSubscriber\n\timplements DriftClientAccountSubscriber\n{\n\tisSubscribed: boolean;\n\tprogram: Program;\n\tperpMarketIndexes: number[];\n\tspotMarketIndexes: number[];\n\toracleInfos: OracleInfo[];\n\toracleClientCache = new OracleClientCache();\n\n\teventEmitter: StrictEventEmitter<EventEmitter, DriftClientAccountEvents>;\n\n\taccountLoader: BulkAccountLoader;\n\taccountsToPoll = new Map<string, AccountToPoll>();\n\toraclesToPoll = new Map<string, OraclesToPoll>();\n\terrorCallbackId?: string;\n\n\tstate?: DataAndSlot<StateAccount>;\n\tperpMarket = new Map<number, DataAndSlot<PerpMarketAccount>>();\n\tspotMarket = new Map<number, DataAndSlot<SpotMarketAccount>>();\n\toracles = new Map<string, DataAndSlot<OraclePriceData>>();\n\tuser?: DataAndSlot<UserAccount>;\n\n\tprivate isSubscribing = false;\n\tprivate subscriptionPromise: Promise<boolean>;\n\tprivate subscriptionPromiseResolver: (val: boolean) => void;\n\n\tpublic constructor(\n\t\tprogram: Program,\n\t\taccountLoader: BulkAccountLoader,\n\t\tperpMarketIndexes: number[],\n\t\tspotMarketIndexes: number[],\n\t\toracleInfos: OracleInfo[]\n\t) {\n\t\tthis.isSubscribed = false;\n\t\tthis.program = program;\n\t\tthis.eventEmitter = new EventEmitter();\n\t\tthis.accountLoader = accountLoader;\n\t\tthis.perpMarketIndexes = perpMarketIndexes;\n\t\tthis.spotMarketIndexes = spotMarketIndexes;\n\t\tthis.oracleInfos = oracleInfos;\n\t}\n\n\tpublic async subscribe(): Promise<boolean> {\n\t\tif (this.isSubscribed) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.isSubscribing) {\n\t\t\treturn await this.subscriptionPromise;\n\t\t}\n\n\t\tthis.isSubscribing = true;\n\n\t\tthis.subscriptionPromise = new Promise((res) => {\n\t\t\tthis.subscriptionPromiseResolver = res;\n\t\t});\n\n\t\tawait this.updateAccountsToPoll();\n\t\tawait this.updateOraclesToPoll();\n\t\tawait this.addToAccountLoader();\n\n\t\tlet subscriptionSucceeded = false;\n\t\tlet retries = 0;\n\t\twhile (!subscriptionSucceeded && retries < 5) {\n\t\t\tawait this.fetch();\n\t\t\tsubscriptionSucceeded = this.didSubscriptionSucceed();\n\t\t\tretries++;\n\t\t}\n\n\t\tif (subscriptionSucceeded) {\n\t\t\tthis.eventEmitter.emit('update');\n\t\t}\n\n\t\tthis.isSubscribing = false;\n\t\tthis.isSubscribed = subscriptionSucceeded;\n\t\tthis.subscriptionPromiseResolver(subscriptionSucceeded);\n\n\t\treturn subscriptionSucceeded;\n\t}\n\n\tasync updateAccountsToPoll(): Promise<void> {\n\t\tif (this.accountsToPoll.size > 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst statePublicKey = await getDriftStateAccountPublicKey(\n\t\t\tthis.program.programId\n\t\t);\n\n\t\tthis.accountsToPoll.set(statePublicKey.toString(), {\n\t\t\tkey: 'state',\n\t\t\tpublicKey: statePublicKey,\n\t\t\teventType: 'stateAccountUpdate',\n\t\t});\n\n\t\tawait this.updatePerpMarketAccountsToPoll();\n\t\tawait this.updateSpotMarketAccountsToPoll();\n\t}\n\n\tasync updatePerpMarketAccountsToPoll(): Promise<boolean> {\n\t\tfor (const marketIndex of this.perpMarketIndexes) {\n\t\t\tawait this.addPerpMarketAccountToPoll(marketIndex);\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync addPerpMarketAccountToPoll(marketIndex: number): Promise<boolean> {\n\t\tconst perpMarketPublicKey = await getPerpMarketPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tmarketIndex\n\t\t);\n\n\t\tthis.accountsToPoll.set(perpMarketPublicKey.toString(), {\n\t\t\tkey: 'perpMarket',\n\t\t\tpublicKey: perpMarketPublicKey,\n\t\t\teventType: 'perpMarketAccountUpdate',\n\t\t\tmapKey: marketIndex,\n\t\t});\n\n\t\treturn true;\n\t}\n\n\tasync updateSpotMarketAccountsToPoll(): Promise<boolean> {\n\t\tfor (const marketIndex of this.spotMarketIndexes) {\n\t\t\tawait this.addSpotMarketAccountToPoll(marketIndex);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync addSpotMarketAccountToPoll(marketIndex: number): Promise<boolean> {\n\t\tconst marketPublicKey = await getSpotMarketPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tmarketIndex\n\t\t);\n\n\t\tthis.accountsToPoll.set(marketPublicKey.toString(), {\n\t\t\tkey: 'spotMarket',\n\t\t\tpublicKey: marketPublicKey,\n\t\t\teventType: 'spotMarketAccountUpdate',\n\t\t\tmapKey: marketIndex,\n\t\t});\n\t\treturn true;\n\t}\n\n\tupdateOraclesToPoll(): boolean {\n\t\tfor (const oracleInfo of this.oracleInfos) {\n\t\t\tif (!oracleInfo.publicKey.equals(PublicKey.default)) {\n\t\t\t\tthis.addOracleToPoll(oracleInfo);\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\taddOracleToPoll(oracleInfo: OracleInfo): boolean {\n\t\tthis.oraclesToPoll.set(oracleInfo.publicKey.toString(), {\n\t\t\tpublicKey: oracleInfo.publicKey,\n\t\t\tsource: oracleInfo.source,\n\t\t});\n\n\t\treturn true;\n\t}\n\n\tasync addToAccountLoader(): Promise<void> {\n\t\tfor (const [_, accountToPoll] of this.accountsToPoll) {\n\t\t\tawait this.addAccountToAccountLoader(accountToPoll);\n\t\t}\n\n\t\tfor (const [_, oracleToPoll] of this.oraclesToPoll) {\n\t\t\tawait this.addOracleToAccountLoader(oracleToPoll);\n\t\t}\n\n\t\tthis.errorCallbackId = this.accountLoader.addErrorCallbacks((error) => {\n\t\t\tthis.eventEmitter.emit('error', error);\n\t\t});\n\t}\n\n\tasync addAccountToAccountLoader(accountToPoll: AccountToPoll): Promise<void> {\n\t\taccountToPoll.callbackId = await this.accountLoader.addAccount(\n\t\t\taccountToPoll.publicKey,\n\t\t\t(buffer: Buffer, slot: number) => {\n\t\t\t\tif (!buffer) return;\n\n\t\t\t\tconst account = this.program.account[\n\t\t\t\t\taccountToPoll.key\n\t\t\t\t].coder.accounts.decode(capitalize(accountToPoll.key), buffer);\n\t\t\t\tconst dataAndSlot = {\n\t\t\t\t\tdata: account,\n\t\t\t\t\tslot,\n\t\t\t\t};\n\t\t\t\tif (accountToPoll.mapKey != undefined) {\n\t\t\t\t\tthis[accountToPoll.key].set(accountToPoll.mapKey, dataAndSlot);\n\t\t\t\t} else {\n\t\t\t\t\tthis[accountToPoll.key] = dataAndSlot;\n\t\t\t\t}\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tthis.eventEmitter.emit(accountToPoll.eventType, account);\n\t\t\t\tthis.eventEmitter.emit('update');\n\n\t\t\t\tif (!this.isSubscribed) {\n\t\t\t\t\tthis.isSubscribed = this.didSubscriptionSucceed();\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n\tasync addOracleToAccountLoader(oracleToPoll: OraclesToPoll): Promise<void> {\n\t\tconst oracleClient = this.oracleClientCache.get(\n\t\t\toracleToPoll.source,\n\t\t\tthis.program.provider.connection\n\t\t);\n\n\t\toracleToPoll.callbackId = await this.accountLoader.addAccount(\n\t\t\toracleToPoll.publicKey,\n\t\t\t(buffer: Buffer, slot: number) => {\n\t\t\t\tif (!buffer) return;\n\n\t\t\t\tconst oraclePriceData =\n\t\t\t\t\toracleClient.getOraclePriceDataFromBuffer(buffer);\n\t\t\t\tconst dataAndSlot = {\n\t\t\t\t\tdata: oraclePriceData,\n\t\t\t\t\tslot,\n\t\t\t\t};\n\n\t\t\t\tthis.oracles.set(oracleToPoll.publicKey.toString(), dataAndSlot);\n\n\t\t\t\tthis.eventEmitter.emit(\n\t\t\t\t\t'oraclePriceUpdate',\n\t\t\t\t\toracleToPoll.publicKey,\n\t\t\t\t\toraclePriceData\n\t\t\t\t);\n\t\t\t\tthis.eventEmitter.emit('update');\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async fetch(): Promise<void> {\n\t\tawait this.accountLoader.load();\n\t\tfor (const [_, accountToPoll] of this.accountsToPoll) {\n\t\t\tconst { buffer, slot } = this.accountLoader.getBufferAndSlot(\n\t\t\t\taccountToPoll.publicKey\n\t\t\t);\n\t\t\tif (buffer) {\n\t\t\t\tconst account = this.program.account[\n\t\t\t\t\taccountToPoll.key\n\t\t\t\t].coder.accounts.decode(capitalize(accountToPoll.key), buffer);\n\n\t\t\t\tif (accountToPoll.mapKey != undefined) {\n\t\t\t\t\tthis[accountToPoll.key].set(accountToPoll.mapKey, {\n\t\t\t\t\t\tdata: account,\n\t\t\t\t\t\tslot,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis[accountToPoll.key] = {\n\t\t\t\t\t\tdata: account,\n\t\t\t\t\t\tslot,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const [_, oracleToPoll] of this.oraclesToPoll) {\n\t\t\tconst { buffer, slot } = this.accountLoader.getBufferAndSlot(\n\t\t\t\toracleToPoll.publicKey\n\t\t\t);\n\t\t\tif (buffer) {\n\t\t\t\tconst oracleClient = this.oracleClientCache.get(\n\t\t\t\t\toracleToPoll.source,\n\t\t\t\t\tthis.program.provider.connection\n\t\t\t\t);\n\t\t\t\tconst oraclePriceData =\n\t\t\t\t\toracleClient.getOraclePriceDataFromBuffer(buffer);\n\t\t\t\tthis.oracles.set(oracleToPoll.publicKey.toString(), {\n\t\t\t\t\tdata: oraclePriceData,\n\t\t\t\t\tslot,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tdidSubscriptionSucceed(): boolean {\n\t\tif (this.state) return true;\n\n\t\treturn false;\n\t}\n\n\tpublic async unsubscribe(): Promise<void> {\n\t\tfor (const [_, accountToPoll] of this.accountsToPoll) {\n\t\t\tthis.accountLoader.removeAccount(\n\t\t\t\taccountToPoll.publicKey,\n\t\t\t\taccountToPoll.callbackId\n\t\t\t);\n\t\t}\n\n\t\tfor (const [_, oracleToPoll] of this.oraclesToPoll) {\n\t\t\tthis.accountLoader.removeAccount(\n\t\t\t\toracleToPoll.publicKey,\n\t\t\t\toracleToPoll.callbackId\n\t\t\t);\n\t\t}\n\n\t\tthis.accountLoader.removeErrorCallbacks(this.errorCallbackId);\n\t\tthis.errorCallbackId = undefined;\n\n\t\tthis.accountsToPoll.clear();\n\t\tthis.oraclesToPoll.clear();\n\t\tthis.isSubscribed = false;\n\t}\n\n\tasync addSpotMarket(marketIndex: number): Promise<boolean> {\n\t\tawait this.addSpotMarketAccountToPoll(marketIndex);\n\t\tconst accountToPoll = this.accountsToPoll.get(marketIndex.toString());\n\t\tawait this.addAccountToAccountLoader(accountToPoll);\n\t\treturn true;\n\t}\n\n\tasync addPerpMarket(marketIndex: number): Promise<boolean> {\n\t\tawait this.addPerpMarketAccountToPoll(marketIndex);\n\t\tconst accountToPoll = this.accountsToPoll.get(marketIndex.toString());\n\t\tawait this.addAccountToAccountLoader(accountToPoll);\n\t\treturn true;\n\t}\n\n\tasync addOracle(oracleInfo: OracleInfo): Promise<boolean> {\n\t\tif (oracleInfo.publicKey.equals(PublicKey.default)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tthis.addOracleToPoll(oracleInfo);\n\t\tconst oracleToPoll = this.oraclesToPoll.get(\n\t\t\toracleInfo.publicKey.toString()\n\t\t);\n\t\tawait this.addOracleToAccountLoader(oracleToPoll);\n\t\treturn true;\n\t}\n\n\tassertIsSubscribed(): void {\n\t\tif (!this.isSubscribed) {\n\t\t\tthrow new NotSubscribedError(\n\t\t\t\t'You must call `subscribe` before using this function'\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic getStateAccountAndSlot(): DataAndSlot<StateAccount> {\n\t\tthis.assertIsSubscribed();\n\t\treturn this.state;\n\t}\n\n\tpublic getMarketAccountAndSlot(\n\t\tmarketIndex: number\n\t): DataAndSlot<PerpMarketAccount> | undefined {\n\t\treturn this.perpMarket.get(marketIndex);\n\t}\n\n\tpublic getMarketAccountsAndSlots(): DataAndSlot<PerpMarketAccount>[] {\n\t\treturn Array.from(this.perpMarket.values());\n\t}\n\n\tpublic getSpotMarketAccountAndSlot(\n\t\tmarketIndex: number\n\t): DataAndSlot<SpotMarketAccount> | undefined {\n\t\treturn this.spotMarket.get(marketIndex);\n\t}\n\n\tpublic getSpotMarketAccountsAndSlots(): DataAndSlot<SpotMarketAccount>[] {\n\t\treturn Array.from(this.spotMarket.values());\n\t}\n\n\tpublic getOraclePriceDataAndSlot(\n\t\toraclePublicKey: PublicKey\n\t): DataAndSlot<OraclePriceData> | undefined {\n\t\tthis.assertIsSubscribed();\n\t\tif (oraclePublicKey.equals(PublicKey.default)) {\n\t\t\treturn {\n\t\t\t\tdata: QUOTE_ORACLE_PRICE_DATA,\n\t\t\t\tslot: 0,\n\t\t\t};\n\t\t}\n\n\t\treturn this.oracles.get(oraclePublicKey.toString());\n\t}\n}\n","import {\n\tDataAndSlot,\n\tNotSubscribedError,\n\tOracleEvents,\n\tOracleAccountSubscriber,\n} from './types';\nimport { Program } from '@project-serum/anchor';\nimport StrictEventEmitter from 'strict-event-emitter-types';\nimport { EventEmitter } from 'events';\nimport { PublicKey } from '@solana/web3.js';\nimport { BulkAccountLoader } from './bulkAccountLoader';\nimport { OracleClient, OraclePriceData } from '../oracles/types';\n\nexport class PollingOracleAccountSubscriber implements OracleAccountSubscriber {\n\tisSubscribed: boolean;\n\tprogram: Program;\n\teventEmitter: StrictEventEmitter<EventEmitter, OracleEvents>;\n\tpublicKey: PublicKey;\n\n\taccountLoader: BulkAccountLoader;\n\toracleClient: OracleClient;\n\tcallbackId?: string;\n\terrorCallbackId?: string;\n\n\toraclePriceData?: DataAndSlot<OraclePriceData>;\n\n\tpublic constructor(\n\t\tpublicKey: PublicKey,\n\t\toracleClient: OracleClient,\n\t\taccountLoader: BulkAccountLoader\n\t) {\n\t\tthis.isSubscribed = false;\n\t\tthis.publicKey = publicKey;\n\t\tthis.oracleClient = oracleClient;\n\t\tthis.accountLoader = accountLoader;\n\t\tthis.eventEmitter = new EventEmitter();\n\t}\n\n\tasync subscribe(): Promise<boolean> {\n\t\tif (this.isSubscribed) {\n\t\t\treturn true;\n\t\t}\n\n\t\tawait this.addToAccountLoader();\n\n\t\tlet subscriptionSucceeded = false;\n\t\tlet retries = 0;\n\t\twhile (!subscriptionSucceeded && retries < 5) {\n\t\t\tawait this.fetch();\n\t\t\tsubscriptionSucceeded = this.didSubscriptionSucceed();\n\t\t\tretries++;\n\t\t}\n\n\t\tif (subscriptionSucceeded) {\n\t\t\tthis.eventEmitter.emit('update');\n\t\t}\n\n\t\tthis.isSubscribed = subscriptionSucceeded;\n\t\treturn subscriptionSucceeded;\n\t}\n\n\tasync addToAccountLoader(): Promise<void> {\n\t\tif (this.callbackId) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.callbackId = await this.accountLoader.addAccount(\n\t\t\tthis.publicKey,\n\t\t\tasync (buffer, slot) => {\n\t\t\t\tconst oraclePriceData =\n\t\t\t\t\tawait this.oracleClient.getOraclePriceDataFromBuffer(buffer);\n\t\t\t\tthis.oraclePriceData = { data: oraclePriceData, slot };\n\t\t\t\t// @ts-ignore\n\t\t\t\tthis.eventEmitter.emit('oracleUpdate', oraclePriceData);\n\t\t\t\tthis.eventEmitter.emit('update');\n\t\t\t}\n\t\t);\n\n\t\tthis.errorCallbackId = this.accountLoader.addErrorCallbacks((error) => {\n\t\t\tthis.eventEmitter.emit('error', error);\n\t\t});\n\t}\n\n\tasync fetch(): Promise<void> {\n\t\tawait this.accountLoader.load();\n\t\tconst { buffer, slot } = this.accountLoader.getBufferAndSlot(\n\t\t\tthis.publicKey\n\t\t);\n\t\tthis.oraclePriceData = {\n\t\t\tdata: await this.oracleClient.getOraclePriceDataFromBuffer(buffer),\n\t\t\tslot,\n\t\t};\n\t}\n\n\tasync unsubscribe(): Promise<void> {\n\t\tif (!this.isSubscribed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.accountLoader.removeAccount(this.publicKey, this.callbackId);\n\t\tthis.callbackId = undefined;\n\n\t\tthis.accountLoader.removeErrorCallbacks(this.errorCallbackId);\n\t\tthis.errorCallbackId = undefined;\n\n\t\tthis.isSubscribed = false;\n\t}\n\n\tassertIsSubscribed(): void {\n\t\tif (!this.isSubscribed) {\n\t\t\tthrow new NotSubscribedError(\n\t\t\t\t'You must call `subscribe` before using this function'\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic getOraclePriceData(): DataAndSlot<OraclePriceData> {\n\t\tthis.assertIsSubscribed();\n\t\treturn this.oraclePriceData;\n\t}\n\n\tdidSubscriptionSucceed(): boolean {\n\t\treturn !!this.oraclePriceData;\n\t}\n}\n","import {\n\tDataAndSlot,\n\tNotSubscribedError,\n\tTokenAccountEvents,\n\tTokenAccountSubscriber,\n} from './types';\nimport { Program } from '@project-serum/anchor';\nimport StrictEventEmitter from 'strict-event-emitter-types';\nimport { EventEmitter } from 'events';\nimport { PublicKey } from '@solana/web3.js';\nimport { BulkAccountLoader } from './bulkAccountLoader';\nimport { AccountInfo } from '@solana/spl-token';\nimport { parseTokenAccount } from '../token';\n\nexport class PollingTokenAccountSubscriber implements TokenAccountSubscriber {\n\tisSubscribed: boolean;\n\tprogram: Program;\n\teventEmitter: StrictEventEmitter<EventEmitter, TokenAccountEvents>;\n\tpublicKey: PublicKey;\n\n\taccountLoader: BulkAccountLoader;\n\tcallbackId?: string;\n\terrorCallbackId?: string;\n\n\ttokenAccountAndSlot?: DataAndSlot<AccountInfo>;\n\n\tpublic constructor(publicKey: PublicKey, accountLoader: BulkAccountLoader) {\n\t\tthis.isSubscribed = false;\n\t\tthis.publicKey = publicKey;\n\t\tthis.accountLoader = accountLoader;\n\t\tthis.eventEmitter = new EventEmitter();\n\t}\n\n\tasync subscribe(): Promise<boolean> {\n\t\tif (this.isSubscribed) {\n\t\t\treturn true;\n\t\t}\n\n\t\tawait this.addToAccountLoader();\n\t\tlet subscriptionSucceeded = false;\n\t\tlet retries = 0;\n\t\twhile (!subscriptionSucceeded && retries < 5) {\n\t\t\tawait this.fetch();\n\t\t\tsubscriptionSucceeded = this.didSubscriptionSucceed();\n\t\t\tretries++;\n\t\t}\n\n\t\tif (subscriptionSucceeded) {\n\t\t\tthis.eventEmitter.emit('update');\n\t\t}\n\n\t\tthis.isSubscribed = subscriptionSucceeded;\n\t\treturn subscriptionSucceeded;\n\t}\n\n\tasync addToAccountLoader(): Promise<void> {\n\t\tif (this.callbackId) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.callbackId = await this.accountLoader.addAccount(\n\t\t\tthis.publicKey,\n\t\t\t(buffer, slot: number) => {\n\t\t\t\tconst tokenAccount = parseTokenAccount(buffer);\n\t\t\t\tthis.tokenAccountAndSlot = { data: tokenAccount, slot };\n\t\t\t\t// @ts-ignore\n\t\t\t\tthis.eventEmitter.emit('tokenAccountUpdate', tokenAccount);\n\t\t\t\tthis.eventEmitter.emit('update');\n\t\t\t}\n\t\t);\n\n\t\tthis.errorCallbackId = this.accountLoader.addErrorCallbacks((error) => {\n\t\t\tthis.eventEmitter.emit('error', error);\n\t\t});\n\t}\n\n\tasync fetch(): Promise<void> {\n\t\tawait this.accountLoader.load();\n\t\tconst { buffer, slot } = this.accountLoader.getBufferAndSlot(\n\t\t\tthis.publicKey\n\t\t);\n\t\tthis.tokenAccountAndSlot = { data: parseTokenAccount(buffer), slot };\n\t}\n\n\tasync unsubscribe(): Promise<void> {\n\t\tif (!this.isSubscribed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.accountLoader.removeAccount(this.publicKey, this.callbackId);\n\t\tthis.callbackId = undefined;\n\n\t\tthis.accountLoader.removeErrorCallbacks(this.errorCallbackId);\n\t\tthis.errorCallbackId = undefined;\n\n\t\tthis.isSubscribed = false;\n\t}\n\n\tassertIsSubscribed(): void {\n\t\tif (!this.isSubscribed) {\n\t\t\tthrow new NotSubscribedError(\n\t\t\t\t'You must call `subscribe` before using this function'\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic getTokenAccountAndSlot(): DataAndSlot<AccountInfo> {\n\t\tthis.assertIsSubscribed();\n\t\treturn this.tokenAccountAndSlot;\n\t}\n\n\tdidSubscriptionSucceed(): boolean {\n\t\treturn !!this.tokenAccountAndSlot;\n\t}\n}\n","import { AccountInfo, AccountLayout, u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\n\nexport function parseTokenAccount(data: Buffer): AccountInfo {\n\tconst accountInfo = AccountLayout.decode(data);\n\taccountInfo.mint = new PublicKey(accountInfo.mint);\n\taccountInfo.owner = new PublicKey(accountInfo.owner);\n\taccountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n\tif (accountInfo.delegateOption === 0) {\n\t\taccountInfo.delegate = null;\n\t\t// eslint-disable-next-line new-cap\n\t\taccountInfo.delegatedAmount = new u64(0);\n\t} else {\n\t\taccountInfo.delegate = new PublicKey(accountInfo.delegate);\n\t\taccountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n\t}\n\n\taccountInfo.isInitialized = accountInfo.state !== 0;\n\taccountInfo.isFrozen = accountInfo.state === 2;\n\n\tif (accountInfo.isNativeOption === 1) {\n\t\taccountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n\t\taccountInfo.isNative = true;\n\t} else {\n\t\taccountInfo.rentExemptReserve = null;\n\t\taccountInfo.isNative = false;\n\t}\n\n\tif (accountInfo.closeAuthorityOption === 0) {\n\t\taccountInfo.closeAuthority = null;\n\t} else {\n\t\taccountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n\t}\n\n\treturn accountInfo;\n}\n","import {\n\tDataAndSlot,\n\tAccountToPoll,\n\tNotSubscribedError,\n\tUserAccountEvents,\n\tUserAccountSubscriber,\n} from './types';\nimport { Program } from '@project-serum/anchor';\nimport StrictEventEmitter from 'strict-event-emitter-types';\nimport { EventEmitter } from 'events';\nimport { PublicKey } from '@solana/web3.js';\nimport { UserAccount } from '../types';\nimport { BulkAccountLoader } from './bulkAccountLoader';\nimport { capitalize } from './utils';\n\nexport class PollingUserAccountSubscriber implements UserAccountSubscriber {\n\tisSubscribed: boolean;\n\tprogram: Program;\n\teventEmitter: StrictEventEmitter<EventEmitter, UserAccountEvents>;\n\tuserAccountPublicKey: PublicKey;\n\n\taccountLoader: BulkAccountLoader;\n\taccountsToPoll = new Map<string, AccountToPoll>();\n\terrorCallbackId?: string;\n\n\tuser?: DataAndSlot<UserAccount>;\n\n\tpublic constructor(\n\t\tprogram: Program,\n\t\tuserAccountPublicKey: PublicKey,\n\t\taccountLoader: BulkAccountLoader\n\t) {\n\t\tthis.isSubscribed = false;\n\t\tthis.program = program;\n\t\tthis.accountLoader = accountLoader;\n\t\tthis.eventEmitter = new EventEmitter();\n\t\tthis.userAccountPublicKey = userAccountPublicKey;\n\t}\n\n\tasync subscribe(): Promise<boolean> {\n\t\tif (this.isSubscribed) {\n\t\t\treturn true;\n\t\t}\n\n\t\tawait this.addToAccountLoader();\n\n\t\tawait this.fetchIfUnloaded();\n\t\tif (this.doAccountsExist()) {\n\t\t\tthis.eventEmitter.emit('update');\n\t\t}\n\n\t\tthis.isSubscribed = true;\n\t\treturn true;\n\t}\n\n\tasync addToAccountLoader(): Promise<void> {\n\t\tif (this.accountsToPoll.size > 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.accountsToPoll.set(this.userAccountPublicKey.toString(), {\n\t\t\tkey: 'user',\n\t\t\tpublicKey: this.userAccountPublicKey,\n\t\t\teventType: 'userAccountUpdate',\n\t\t});\n\n\t\tfor (const [_, accountToPoll] of this.accountsToPoll) {\n\t\t\taccountToPoll.callbackId = await this.accountLoader.addAccount(\n\t\t\t\taccountToPoll.publicKey,\n\t\t\t\t(buffer, slot) => {\n\t\t\t\t\tif (!buffer) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst account = this.program.account[\n\t\t\t\t\t\taccountToPoll.key\n\t\t\t\t\t].coder.accounts.decode(capitalize(accountToPoll.key), buffer);\n\t\t\t\t\tthis[accountToPoll.key] = { data: account, slot };\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tthis.eventEmitter.emit(accountToPoll.eventType, account);\n\t\t\t\t\tthis.eventEmitter.emit('update');\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tthis.errorCallbackId = this.accountLoader.addErrorCallbacks((error) => {\n\t\t\tthis.eventEmitter.emit('error', error);\n\t\t});\n\t}\n\n\tasync fetchIfUnloaded(): Promise<void> {\n\t\tlet shouldFetch = false;\n\t\tfor (const [_, accountToPoll] of this.accountsToPoll) {\n\t\t\tif (this[accountToPoll.key] === undefined) {\n\t\t\t\tshouldFetch = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (shouldFetch) {\n\t\t\tawait this.fetch();\n\t\t}\n\t}\n\n\tasync fetch(): Promise<void> {\n\t\tawait this.accountLoader.load();\n\t\tfor (const [_, accountToPoll] of this.accountsToPoll) {\n\t\t\tconst { buffer, slot } = this.accountLoader.getBufferAndSlot(\n\t\t\t\taccountToPoll.publicKey\n\t\t\t);\n\t\t\tif (buffer) {\n\t\t\t\tconst account = this.program.account[\n\t\t\t\t\taccountToPoll.key\n\t\t\t\t].coder.accounts.decode(capitalize(accountToPoll.key), buffer);\n\t\t\t\tthis[accountToPoll.key] = { data: account, slot };\n\t\t\t}\n\t\t}\n\t}\n\n\tdoAccountsExist(): boolean {\n\t\tlet success = true;\n\t\tfor (const [_, accountToPoll] of this.accountsToPoll) {\n\t\t\tif (!this[accountToPoll.key]) {\n\t\t\t\tsuccess = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn success;\n\t}\n\n\tasync unsubscribe(): Promise<void> {\n\t\tif (!this.isSubscribed) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const [_, accountToPoll] of this.accountsToPoll) {\n\t\t\tthis.accountLoader.removeAccount(\n\t\t\t\taccountToPoll.publicKey,\n\t\t\t\taccountToPoll.callbackId\n\t\t\t);\n\t\t}\n\n\t\tthis.accountLoader.removeErrorCallbacks(this.errorCallbackId);\n\t\tthis.errorCallbackId = undefined;\n\n\t\tthis.accountsToPoll.clear();\n\n\t\tthis.isSubscribed = false;\n\t}\n\n\tassertIsSubscribed(): void {\n\t\tif (!this.isSubscribed) {\n\t\t\tthrow new NotSubscribedError(\n\t\t\t\t'You must call `subscribe` before using this function'\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic getUserAccountAndSlot(): DataAndSlot<UserAccount> {\n\t\tthis.assertIsSubscribed();\n\t\treturn this.user;\n\t}\n}\n","import {\n\tDataAndSlot,\n\tAccountToPoll,\n\tNotSubscribedError,\n\tUserStatsAccountSubscriber,\n\tUserStatsAccountEvents,\n} from './types';\nimport { Program } from '@project-serum/anchor';\nimport StrictEventEmitter from 'strict-event-emitter-types';\nimport { EventEmitter } from 'events';\nimport { PublicKey } from '@solana/web3.js';\nimport { UserStatsAccount } from '../types';\nimport { BulkAccountLoader } from './bulkAccountLoader';\nimport { capitalize } from './utils';\n\nexport class PollingUserStatsAccountSubscriber\n\timplements UserStatsAccountSubscriber\n{\n\tisSubscribed: boolean;\n\tprogram: Program;\n\teventEmitter: StrictEventEmitter<EventEmitter, UserStatsAccountEvents>;\n\tuserStatsAccountPublicKey: PublicKey;\n\n\taccountLoader: BulkAccountLoader;\n\taccountsToPoll = new Map<string, AccountToPoll>();\n\terrorCallbackId?: string;\n\n\tuserStats?: DataAndSlot<UserStatsAccount>;\n\n\tpublic constructor(\n\t\tprogram: Program,\n\t\tuserStatsAccountPublicKey: PublicKey,\n\t\taccountLoader: BulkAccountLoader\n\t) {\n\t\tthis.isSubscribed = false;\n\t\tthis.program = program;\n\t\tthis.accountLoader = accountLoader;\n\t\tthis.eventEmitter = new EventEmitter();\n\t\tthis.userStatsAccountPublicKey = userStatsAccountPublicKey;\n\t}\n\n\tasync subscribe(): Promise<boolean> {\n\t\tif (this.isSubscribed) {\n\t\t\treturn true;\n\t\t}\n\n\t\tawait this.addToAccountLoader();\n\n\t\tawait this.fetchIfUnloaded();\n\n\t\tif (this.doAccountsExist()) {\n\t\t\tthis.eventEmitter.emit('update');\n\t\t}\n\n\t\tthis.isSubscribed = true;\n\t\treturn true;\n\t}\n\n\tasync addToAccountLoader(): Promise<void> {\n\t\tif (this.accountsToPoll.size > 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.accountsToPoll.set(this.userStatsAccountPublicKey.toString(), {\n\t\t\tkey: 'userStats',\n\t\t\tpublicKey: this.userStatsAccountPublicKey,\n\t\t\teventType: 'userStatsAccountUpdate',\n\t\t});\n\n\t\tfor (const [_, accountToPoll] of this.accountsToPoll) {\n\t\t\taccountToPoll.callbackId = await this.accountLoader.addAccount(\n\t\t\t\taccountToPoll.publicKey,\n\t\t\t\t(buffer, slot) => {\n\t\t\t\t\tif (!buffer) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst account = this.program.account[\n\t\t\t\t\t\taccountToPoll.key\n\t\t\t\t\t].coder.accounts.decode(capitalize(accountToPoll.key), buffer);\n\t\t\t\t\tthis[accountToPoll.key] = { data: account, slot };\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tthis.eventEmitter.emit(accountToPoll.eventType, account);\n\t\t\t\t\tthis.eventEmitter.emit('update');\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tthis.errorCallbackId = this.accountLoader.addErrorCallbacks((error) => {\n\t\t\tthis.eventEmitter.emit('error', error);\n\t\t});\n\t}\n\n\tasync fetchIfUnloaded(): Promise<void> {\n\t\tlet shouldFetch = false;\n\t\tfor (const [_, accountToPoll] of this.accountsToPoll) {\n\t\t\tif (this[accountToPoll.key] === undefined) {\n\t\t\t\tshouldFetch = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (shouldFetch) {\n\t\t\tawait this.fetch();\n\t\t}\n\t}\n\n\tasync fetch(): Promise<void> {\n\t\tawait this.accountLoader.load();\n\t\tfor (const [_, accountToPoll] of this.accountsToPoll) {\n\t\t\tconst { buffer, slot } = this.accountLoader.getBufferAndSlot(\n\t\t\t\taccountToPoll.publicKey\n\t\t\t);\n\t\t\tif (buffer) {\n\t\t\t\tconst account = this.program.account[\n\t\t\t\t\taccountToPoll.key\n\t\t\t\t].coder.accounts.decode(capitalize(accountToPoll.key), buffer);\n\t\t\t\tthis[accountToPoll.key] = { data: account, slot };\n\t\t\t}\n\t\t}\n\t}\n\n\tdoAccountsExist(): boolean {\n\t\tlet success = true;\n\t\tfor (const [_, accountToPoll] of this.accountsToPoll) {\n\t\t\tif (!this[accountToPoll.key]) {\n\t\t\t\tsuccess = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn success;\n\t}\n\n\tasync unsubscribe(): Promise<void> {\n\t\tfor (const [_, accountToPoll] of this.accountsToPoll) {\n\t\t\tthis.accountLoader.removeAccount(\n\t\t\t\taccountToPoll.publicKey,\n\t\t\t\taccountToPoll.callbackId\n\t\t\t);\n\t\t}\n\n\t\tthis.accountLoader.removeErrorCallbacks(this.errorCallbackId);\n\t\tthis.errorCallbackId = undefined;\n\n\t\tthis.accountsToPoll.clear();\n\n\t\tthis.isSubscribed = false;\n\t}\n\n\tassertIsSubscribed(): void {\n\t\tif (!this.isSubscribed) {\n\t\t\tthrow new NotSubscribedError(\n\t\t\t\t'You must call `subscribe` before using this function'\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic getUserStatsAccountAndSlot(): DataAndSlot<UserStatsAccount> {\n\t\tthis.assertIsSubscribed();\n\t\treturn this.userStats;\n\t}\n}\n","import {\n\tPublicKey,\n\tSYSVAR_RENT_PUBKEY,\n\tTransactionSignature,\n} from '@solana/web3.js';\nimport {\n\tFeeStructure,\n\tOracleGuardRails,\n\tOracleSource,\n\tExchangeStatus,\n\tMarketStatus,\n\tContractTier,\n\tAssetTier,\n\tSpotFulfillmentConfigStatus,\n} from './types';\nimport { DEFAULT_MARKET_NAME, encodeName } from './userName';\nimport { BN } from '@project-serum/anchor';\nimport * as anchor from '@project-serum/anchor';\nimport {\n\tgetDriftStateAccountPublicKeyAndNonce,\n\tgetSpotMarketPublicKey,\n\tgetSpotMarketVaultPublicKey,\n\tgetPerpMarketPublicKey,\n\tgetInsuranceFundVaultPublicKey,\n\tgetSerumOpenOrdersPublicKey,\n\tgetSerumFulfillmentConfigPublicKey,\n} from './addresses/pda';\nimport { squareRootBN } from './math/utils';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { DriftClient } from './driftClient';\nimport { PEG_PRECISION } from './constants/numericConstants';\nimport { calculateTargetPriceTrade } from './math/trade';\nimport { calculateAmmReservesAfterSwap, getSwapDirection } from './math/amm';\n\nexport class AdminClient extends DriftClient {\n\tpublic async initialize(\n\t\tusdcMint: PublicKey,\n\t\t_adminControlsPrices: boolean\n\t): Promise<[TransactionSignature]> {\n\t\tconst stateAccountRPCResponse = await this.connection.getParsedAccountInfo(\n\t\t\tawait this.getStatePublicKey()\n\t\t);\n\t\tif (stateAccountRPCResponse.value !== null) {\n\t\t\tthrow new Error('Clearing house already initialized');\n\t\t}\n\n\t\tconst [driftStatePublicKey] = await getDriftStateAccountPublicKeyAndNonce(\n\t\t\tthis.program.programId\n\t\t);\n\n\t\tconst initializeTx = await this.program.transaction.initialize({\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: driftStatePublicKey,\n\t\t\t\tquoteAssetMint: usdcMint,\n\t\t\t\trent: SYSVAR_RENT_PUBKEY,\n\t\t\t\tdriftSigner: this.getSignerPublicKey(),\n\t\t\t\tsystemProgram: anchor.web3.SystemProgram.programId,\n\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t},\n\t\t});\n\n\t\tconst { txSig: initializeTxSig } = await this.txSender.send(\n\t\t\tinitializeTx,\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\n\t\treturn [initializeTxSig];\n\t}\n\n\tpublic async initializeSpotMarket(\n\t\tmint: PublicKey,\n\t\toptimalUtilization: number,\n\t\toptimalRate: number,\n\t\tmaxRate: number,\n\t\toracle: PublicKey,\n\t\toracleSource: OracleSource,\n\t\tinitialAssetWeight: number,\n\t\tmaintenanceAssetWeight: number,\n\t\tinitialLiabilityWeight: number,\n\t\tmaintenanceLiabilityWeight: number,\n\t\timfFactor = 0,\n\t\tliquidatorFee = 0,\n\t\tactiveStatus = true,\n\t\tname = DEFAULT_MARKET_NAME\n\t): Promise<TransactionSignature> {\n\t\tconst spotMarketIndex = this.getStateAccount().numberOfSpotMarkets;\n\t\tconst spotMarket = await getSpotMarketPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tspotMarketIndex\n\t\t);\n\n\t\tconst spotMarketVault = await getSpotMarketVaultPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tspotMarketIndex\n\t\t);\n\n\t\tconst insuranceFundVault = await getInsuranceFundVaultPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tspotMarketIndex\n\t\t);\n\n\t\tconst nameBuffer = encodeName(name);\n\t\tconst initializeTx = await this.program.transaction.initializeSpotMarket(\n\t\t\toptimalUtilization,\n\t\t\toptimalRate,\n\t\t\tmaxRate,\n\t\t\toracleSource,\n\t\t\tinitialAssetWeight,\n\t\t\tmaintenanceAssetWeight,\n\t\t\tinitialLiabilityWeight,\n\t\t\tmaintenanceLiabilityWeight,\n\t\t\timfFactor,\n\t\t\tliquidatorFee,\n\t\t\tactiveStatus,\n\t\t\tnameBuffer,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tspotMarket,\n\t\t\t\t\tspotMarketVault,\n\t\t\t\t\tinsuranceFundVault,\n\t\t\t\t\tdriftSigner: this.getSignerPublicKey(),\n\t\t\t\t\tspotMarketMint: mint,\n\t\t\t\t\toracle,\n\t\t\t\t\trent: SYSVAR_RENT_PUBKEY,\n\t\t\t\t\tsystemProgram: anchor.web3.SystemProgram.programId,\n\t\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\n\t\tconst { txSig } = await this.txSender.send(initializeTx, [], this.opts);\n\n\t\tawait this.accountSubscriber.addSpotMarket(spotMarketIndex);\n\t\tawait this.accountSubscriber.addOracle({\n\t\t\tsource: oracleSource,\n\t\t\tpublicKey: oracle,\n\t\t});\n\n\t\treturn txSig;\n\t}\n\n\tpublic async initializeSerumFulfillmentConfig(\n\t\tmarketIndex: number,\n\t\tserumMarket: PublicKey,\n\t\tserumProgram: PublicKey\n\t): Promise<TransactionSignature> {\n\t\tconst serumOpenOrders = getSerumOpenOrdersPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tserumMarket\n\t\t);\n\n\t\tconst serumFulfillmentConfig = getSerumFulfillmentConfigPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tserumMarket\n\t\t);\n\n\t\treturn await this.program.rpc.initializeSerumFulfillmentConfig(\n\t\t\tmarketIndex,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tbaseSpotMarket: this.getSpotMarketAccount(marketIndex).pubkey,\n\t\t\t\t\tquoteSpotMarket: this.getQuoteSpotMarketAccount().pubkey,\n\t\t\t\t\tdriftSigner: this.getSignerPublicKey(),\n\t\t\t\t\tserumProgram,\n\t\t\t\t\tserumMarket,\n\t\t\t\t\tserumOpenOrders,\n\t\t\t\t\trent: SYSVAR_RENT_PUBKEY,\n\t\t\t\t\tsystemProgram: anchor.web3.SystemProgram.programId,\n\t\t\t\t\tserumFulfillmentConfig,\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async initializePerpMarket(\n\t\tpriceOracle: PublicKey,\n\t\tbaseAssetReserve: BN,\n\t\tquoteAssetReserve: BN,\n\t\tperiodicity: BN,\n\t\tpegMultiplier: BN = PEG_PRECISION,\n\t\toracleSource: OracleSource = OracleSource.PYTH,\n\t\tmarginRatioInitial = 2000,\n\t\tmarginRatioMaintenance = 500,\n\t\tliquidatorFee = 0,\n\t\tactiveStatus = true,\n\t\tname = DEFAULT_MARKET_NAME\n\t): Promise<TransactionSignature> {\n\t\tconst perpMarketPublicKey = await getPerpMarketPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tthis.getStateAccount().numberOfMarkets\n\t\t);\n\n\t\tconst nameBuffer = encodeName(name);\n\t\tconst initializeMarketTx =\n\t\t\tawait this.program.transaction.initializePerpMarket(\n\t\t\t\tbaseAssetReserve,\n\t\t\t\tquoteAssetReserve,\n\t\t\t\tperiodicity,\n\t\t\t\tpegMultiplier,\n\t\t\t\toracleSource,\n\t\t\t\tmarginRatioInitial,\n\t\t\t\tmarginRatioMaintenance,\n\t\t\t\tliquidatorFee,\n\t\t\t\tactiveStatus,\n\t\t\t\tnameBuffer,\n\t\t\t\t{\n\t\t\t\t\taccounts: {\n\t\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\t\toracle: priceOracle,\n\t\t\t\t\t\tperpMarket: perpMarketPublicKey,\n\t\t\t\t\t\trent: SYSVAR_RENT_PUBKEY,\n\t\t\t\t\t\tsystemProgram: anchor.web3.SystemProgram.programId,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t);\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\tinitializeMarketTx,\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\n\t\tawait this.accountSubscriber.addPerpMarket(\n\t\t\tthis.getStateAccount().numberOfMarkets\n\t\t);\n\t\tawait this.accountSubscriber.addOracle({\n\t\t\tsource: oracleSource,\n\t\t\tpublicKey: priceOracle,\n\t\t});\n\n\t\treturn txSig;\n\t}\n\n\tpublic async moveAmmPrice(\n\t\tperpMarketIndex: number,\n\t\tbaseAssetReserve: BN,\n\t\tquoteAssetReserve: BN,\n\t\tsqrtK?: BN\n\t): Promise<TransactionSignature> {\n\t\tconst marketPublicKey = await getPerpMarketPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tperpMarketIndex\n\t\t);\n\n\t\tif (sqrtK == undefined) {\n\t\t\tsqrtK = squareRootBN(baseAssetReserve.mul(quoteAssetReserve));\n\t\t}\n\n\t\treturn await this.program.rpc.moveAmmPrice(\n\t\t\tbaseAssetReserve,\n\t\t\tquoteAssetReserve,\n\t\t\tsqrtK,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tperpMarket: marketPublicKey,\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateK(\n\t\tperpMarketIndex: number,\n\t\tsqrtK: BN\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateK(sqrtK, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tperpMarketIndex\n\t\t\t\t),\n\t\t\t\toracle: this.getPerpMarketAccount(perpMarketIndex).amm.oracle,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updatePerpMarketConcentrationScale(\n\t\tperpMarketIndex: number,\n\t\tconcentrationScale: BN\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updatePerpMarketConcentrationCoef(\n\t\t\tconcentrationScale,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tperpMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async moveAmmToPrice(\n\t\tperpMarketIndex: number,\n\t\ttargetPrice: BN\n\t): Promise<TransactionSignature> {\n\t\tconst perpMarket = this.getPerpMarketAccount(perpMarketIndex);\n\n\t\tconst [direction, tradeSize, _] = calculateTargetPriceTrade(\n\t\t\tperpMarket,\n\t\t\ttargetPrice,\n\t\t\tnew BN(1000),\n\t\t\t'quote',\n\t\t\tundefined //todo\n\t\t);\n\n\t\tconst [newQuoteAssetAmount, newBaseAssetAmount] =\n\t\t\tcalculateAmmReservesAfterSwap(\n\t\t\t\tperpMarket.amm,\n\t\t\t\t'quote',\n\t\t\t\ttradeSize,\n\t\t\t\tgetSwapDirection('quote', direction)\n\t\t\t);\n\n\t\tconst perpMarketPublicKey = await getPerpMarketPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tperpMarketIndex\n\t\t);\n\n\t\treturn await this.program.rpc.moveAmmPrice(\n\t\t\tnewBaseAssetAmount,\n\t\t\tnewQuoteAssetAmount,\n\t\t\tperpMarket.amm.sqrtK,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tperpMarket: perpMarketPublicKey,\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async repegAmmCurve(\n\t\tnewPeg: BN,\n\t\tperpMarketIndex: number\n\t): Promise<TransactionSignature> {\n\t\tconst perpMarketPublicKey = await getPerpMarketPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tperpMarketIndex\n\t\t);\n\t\tconst ammData = this.getPerpMarketAccount(perpMarketIndex).amm;\n\n\t\treturn await this.program.rpc.repegAmmCurve(newPeg, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\toracle: ammData.oracle,\n\t\t\t\tperpMarket: perpMarketPublicKey,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updatePerpMarketAmmOracleTwap(\n\t\tperpMarketIndex: number\n\t): Promise<TransactionSignature> {\n\t\tconst ammData = this.getPerpMarketAccount(perpMarketIndex).amm;\n\t\tconst perpMarketPublicKey = await getPerpMarketPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tperpMarketIndex\n\t\t);\n\n\t\treturn await this.program.rpc.updatePerpMarketAmmOracleTwap({\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\toracle: ammData.oracle,\n\t\t\t\tperpMarket: perpMarketPublicKey,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async resetPerpMarketAmmOracleTwap(\n\t\tperpMarketIndex: number\n\t): Promise<TransactionSignature> {\n\t\tconst ammData = this.getPerpMarketAccount(perpMarketIndex).amm;\n\t\tconst perpMarketPublicKey = await getPerpMarketPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tperpMarketIndex\n\t\t);\n\n\t\treturn await this.program.rpc.resetPerpMarketAmmOracleTwap({\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\toracle: ammData.oracle,\n\t\t\t\tperpMarket: perpMarketPublicKey,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async depositIntoPerpMarketFeePool(\n\t\tperpMarketIndex: number,\n\t\tamount: BN,\n\t\tsourceVault: PublicKey\n\t): Promise<TransactionSignature> {\n\t\tconst spotMarket = this.getQuoteSpotMarketAccount();\n\n\t\treturn await this.program.rpc.depositIntoPerpMarketFeePool(amount, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tperpMarketIndex\n\t\t\t\t),\n\t\t\t\tsourceVault,\n\t\t\t\tdriftSigner: this.getSignerPublicKey(),\n\t\t\t\tquoteSpotMarket: spotMarket.pubkey,\n\t\t\t\tspotMarketVault: spotMarket.vault,\n\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateAdmin(admin: PublicKey): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateAdmin(admin, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updatePerpMarketCurveUpdateIntensity(\n\t\tperpMarketIndex: number,\n\t\tcurveUpdateIntensity: number\n\t): Promise<TransactionSignature> {\n\t\t// assert(curveUpdateIntensity >= 0 && curveUpdateIntensity <= 100);\n\t\t// assert(Number.isInteger(curveUpdateIntensity));\n\n\t\treturn await this.program.rpc.updatePerpMarketCurveUpdateIntensity(\n\t\t\tcurveUpdateIntensity,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tperpMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updatePerpMarketMarginRatio(\n\t\tperpMarketIndex: number,\n\t\tmarginRatioInitial: number,\n\t\tmarginRatioMaintenance: number\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updatePerpMarketMarginRatio(\n\t\t\tmarginRatioInitial,\n\t\t\tmarginRatioMaintenance,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tperpMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updatePerpMarketImfFactor(\n\t\tperpMarketIndex: number,\n\t\timfFactor: number,\n\t\tunrealizedPnlImfFactor: number\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updatePerpMarketImfFactor(\n\t\t\timfFactor,\n\t\t\tunrealizedPnlImfFactor,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tperpMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updatePerpMarketBaseSpread(\n\t\tperpMarketIndex: number,\n\t\tbaseSpread: number\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updatePerpMarketBaseSpread(baseSpread, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tperpMarketIndex\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateAmmJitIntensity(\n\t\tperpMarketIndex: number,\n\t\tammJitIntensity: number\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateAmmJitIntensity(ammJitIntensity, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tperpMarketIndex\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updatePerpMarketName(\n\t\tperpMarketIndex: number,\n\t\tname: string\n\t): Promise<TransactionSignature> {\n\t\tconst nameBuffer = encodeName(name);\n\n\t\treturn await this.program.rpc.updatePerpMarketName(nameBuffer, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tperpMarketIndex\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateSpotMarketName(\n\t\tspotMarketIndex: number,\n\t\tname: string\n\t): Promise<TransactionSignature> {\n\t\tconst nameBuffer = encodeName(name);\n\n\t\treturn await this.program.rpc.updateSpotMarketName(nameBuffer, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tspotMarket: await getSpotMarketPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tspotMarketIndex\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updatePerpMarketMaxSpread(\n\t\tperpMarketIndex: number,\n\t\tmaxSpread: number\n\t): Promise<TransactionSignature> {\n\t\tconst perpMarketPublicKey = await getPerpMarketPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tperpMarketIndex\n\t\t);\n\n\t\treturn await this.program.rpc.updatePerpMarketMaxSpread(maxSpread, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tperpMarket: perpMarketPublicKey,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updatePerpFeeStructure(\n\t\tfeeStructure: FeeStructure\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updatePerpFeeStructure(feeStructure, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateSpotFeeStructure(\n\t\tfeeStructure: FeeStructure\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateSpotFeeStructure(feeStructure, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateInitialPctToLiquidate(\n\t\tinitialPctToLiquidate: number\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateInitialPctToLiquidate(\n\t\t\tinitialPctToLiquidate,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateLiquidationDuration(\n\t\tliquidationDuration: number\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateLiquidationDuration(\n\t\t\tliquidationDuration,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateOracleGuardRails(\n\t\toracleGuardRails: OracleGuardRails\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateOracleGuardRails(oracleGuardRails, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateStateSettlementDuration(\n\t\tsettlementDuration: number\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateStateSettlementDuration(\n\t\t\tsettlementDuration,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateWithdrawGuardThreshold(\n\t\tspotMarketIndex: number,\n\t\twithdrawGuardThreshold: BN\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateWithdrawGuardThreshold(\n\t\t\twithdrawGuardThreshold,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tspotMarket: await getSpotMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tspotMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateSpotMarketIfFactor(\n\t\tspotMarketIndex: number,\n\t\tuserIfFactor: BN,\n\t\ttotalIfFactor: BN\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateSpotMarketIfFactor(\n\t\t\tspotMarketIndex,\n\t\t\tuserIfFactor,\n\t\t\ttotalIfFactor,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tspotMarket: await getSpotMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tspotMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateSpotMarketRevenueSettlePeriod(\n\t\tspotMarketIndex: number,\n\t\trevenueSettlePeriod: BN\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateSpotMarketRevenueSettlePeriod(\n\t\t\trevenueSettlePeriod,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tspotMarket: await getSpotMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tspotMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateSpotMarketMaxTokenDeposits(\n\t\tspotMarketIndex: number,\n\t\tmaxTokenDeposits: BN\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateSpotMarketMaxTokenDeposits(\n\t\t\tmaxTokenDeposits,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tspotMarket: await getSpotMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tspotMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateInsuranceFundUnstakingPeriod(\n\t\tspotMarketIndex: number,\n\t\tinsuranceWithdrawEscrowPeriod: BN\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateInsuranceFundUnstakingPeriod(\n\t\t\tinsuranceWithdrawEscrowPeriod,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tspotMarket: await getSpotMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tspotMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateLpCooldownTime(\n\t\tcooldownTime: BN\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateLpCooldownTime(cooldownTime, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updatePerpMarketOracle(\n\t\tperpMarketIndex: number,\n\t\toracle: PublicKey,\n\t\toracleSource: OracleSource\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updatePerpMarketOracle(oracle, oracleSource, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tperpMarketIndex\n\t\t\t\t),\n\t\t\t\toracle: oracle,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updatePerpMarketStepSizeAndTickSize(\n\t\tperpMarketIndex: number,\n\t\tstepSize: BN,\n\t\ttickSize: BN\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updatePerpMarketStepSizeAndTickSize(\n\t\t\tstepSize,\n\t\t\ttickSize,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tperpMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updatePerpMarketMinOrderSize(\n\t\tperpMarketIndex: number,\n\t\torderSize: BN\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updatePerpMarketMinOrderSize(orderSize, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tperpMarketIndex\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateSpotMarketStepSizeAndTickSize(\n\t\tspotMarketIndex: number,\n\t\tstepSize: BN,\n\t\ttickSize: BN\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateSpotMarketStepSizeAndTickSize(\n\t\t\tstepSize,\n\t\t\ttickSize,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tspotMarket: await getSpotMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tspotMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateSpotMarketMinOrderSize(\n\t\tspotMarketIndex: number,\n\t\torderSize: BN\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateSpotMarketMinOrderSize(orderSize, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tspotMarket: await getSpotMarketPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tspotMarketIndex\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updatePerpMarketExpiry(\n\t\tperpMarketIndex: number,\n\t\texpiryTs: BN\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updatePerpMarketExpiry(expiryTs, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tperpMarketIndex\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateSpotMarketOracle(\n\t\tspotMarketIndex: number,\n\t\toracle: PublicKey,\n\t\toracleSource: OracleSource\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateSpotMarketOracle(oracle, oracleSource, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tspotMarket: await getSpotMarketPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tspotMarketIndex\n\t\t\t\t),\n\t\t\t\toracle: oracle,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateSpotMarketOrdersEnabled(\n\t\tspotMarketIndex: number,\n\t\tordersEnabled: boolean\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateSpotMarketOrdersEnabled(ordersEnabled, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tspotMarket: await getSpotMarketPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tspotMarketIndex\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateSerumFulfillmentConfigStatus(\n\t\tserumFulfillmentConfig: PublicKey,\n\t\tstatus: SpotFulfillmentConfigStatus\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateSerumFulfillmentConfigStatus(status, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tserumFulfillmentConfig,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateSpotMarketExpiry(\n\t\tspotMarketIndex: number,\n\t\texpiryTs: BN\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateSpotMarketExpiry(expiryTs, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tspotMarket: await getSpotMarketPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tspotMarketIndex\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateWhitelistMint(\n\t\twhitelistMint?: PublicKey\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateWhitelistMint(whitelistMint, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateDiscountMint(\n\t\tdiscountMint: PublicKey\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateDiscountMint(discountMint, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateSpotMarketMarginWeights(\n\t\tspotMarketIndex: number,\n\t\tinitialAssetWeight: number,\n\t\tmaintenanceAssetWeight: number,\n\t\tinitialLiabilityWeight: number,\n\t\tmaintenanceLiabilityWeight: number,\n\t\timfFactor = 0\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateSpotMarketMarginWeights(\n\t\t\tinitialAssetWeight,\n\t\t\tmaintenanceAssetWeight,\n\t\t\tinitialLiabilityWeight,\n\t\t\tmaintenanceLiabilityWeight,\n\t\t\timfFactor,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tspotMarket: await getSpotMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tspotMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateSpotMarketBorrowRate(\n\t\tspotMarketIndex: number,\n\t\toptimalUtilization: number,\n\t\toptimalBorrowRate: number,\n\t\toptimalMaxRate: number\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateSpotMarketBorrowRate(\n\t\t\toptimalUtilization,\n\t\t\toptimalBorrowRate,\n\t\t\toptimalMaxRate,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tspotMarket: await getSpotMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tspotMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateSpotMarketAssetTier(\n\t\tspotMarketIndex: number,\n\t\tassetTier: AssetTier\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateSpotMarketAssetTier(assetTier, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tspotMarket: await getSpotMarketPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tspotMarketIndex\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateSpotMarketStatus(\n\t\tspotMarketIndex: number,\n\t\tmarketStatus: MarketStatus\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateSpotMarketStatus(marketStatus, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tspotMarket: await getSpotMarketPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tspotMarketIndex\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updatePerpMarketStatus(\n\t\tperpMarketIndex: number,\n\t\tmarketStatus: MarketStatus\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updatePerpMarketStatus(marketStatus, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tperpMarketIndex\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updatePerpMarketContractTier(\n\t\tperpMarketIndex: number,\n\t\tcontractTier: ContractTier\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updatePerpMarketContractTier(contractTier, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tperpMarketIndex\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateExchangeStatus(\n\t\texchangeStatus: ExchangeStatus\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateExchangeStatus(exchangeStatus, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updatePerpAuctionDuration(\n\t\tminDuration: BN | number\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updatePerpAuctionDuration(\n\t\t\ttypeof minDuration === 'number' ? minDuration : minDuration.toNumber(),\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateSpotAuctionDuration(\n\t\tdefaultAuctionDuration: number\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateSpotAuctionDuration(\n\t\t\tdefaultAuctionDuration,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updatePerpMarketMaxFillReserveFraction(\n\t\tperpMarketIndex: number,\n\t\tmaxBaseAssetAmountRatio: number\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updatePerpMarketMaxFillReserveFraction(\n\t\t\tmaxBaseAssetAmountRatio,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tperpMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateMaxSlippageRatio(\n\t\tperpMarketIndex: number,\n\t\tmaxSlippageRatio: number\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateMaxSlippageRatio(maxSlippageRatio, {\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tperpMarket: this.getPerpMarketAccount(perpMarketIndex).pubkey,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updatePerpMarketUnrealizedAssetWeight(\n\t\tperpMarketIndex: number,\n\t\tunrealizedInitialAssetWeight: number,\n\t\tunrealizedMaintenanceAssetWeight: number\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updatePerpMarketUnrealizedAssetWeight(\n\t\t\tunrealizedInitialAssetWeight,\n\t\t\tunrealizedMaintenanceAssetWeight,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tperpMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updatePerpMarketMaxImbalances(\n\t\tperpMarketIndex: number,\n\t\tunrealizedMaxImbalance: BN,\n\t\tmaxRevenueWithdrawPerPeriod: BN,\n\t\tquoteMaxInsurance: BN\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updatePerpMarketMaxImbalances(\n\t\t\tunrealizedMaxImbalance,\n\t\t\tmaxRevenueWithdrawPerPeriod,\n\t\t\tquoteMaxInsurance,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tperpMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updatePerpMarketMaxOpenInterest(\n\t\tperpMarketIndex: number,\n\t\tmaxOpenInterest: BN\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updatePerpMarketMaxOpenInterest(\n\t\t\tmaxOpenInterest,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tperpMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateSerumVault(\n\t\tsrmVault: PublicKey\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateSerumVault({\n\t\t\taccounts: {\n\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tsrmVault: srmVault,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updatePerpMarketLiquidationFee(\n\t\tperpMarketIndex: number,\n\t\tliquidatorFee: number,\n\t\tifLiquidationFee: number\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updatePerpMarketLiquidationFee(\n\t\t\tliquidatorFee,\n\t\t\tifLiquidationFee,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tperpMarket: await getPerpMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tperpMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateSpotMarketLiquidationFee(\n\t\tspotMarketIndex: number,\n\t\tliquidatorFee: number,\n\t\tifLiquidationFee: number\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateSpotMarketLiquidationFee(\n\t\t\tliquidatorFee,\n\t\t\tifLiquidationFee,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tspotMarket: await getSpotMarketPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tspotMarketIndex\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n}\n","export const MAX_NAME_LENGTH = 32;\n\nexport const DEFAULT_USER_NAME = 'Main Account';\nexport const DEFAULT_MARKET_NAME = 'Default Market Name';\n\nexport function encodeName(name: string): number[] {\n\tif (name.length > MAX_NAME_LENGTH) {\n\t\tthrow Error(`Name (${name}) longer than 32 characters`);\n\t}\n\n\tconst buffer = Buffer.alloc(32);\n\tbuffer.fill(name);\n\tbuffer.fill(' ', name.length);\n\n\treturn Array(...buffer);\n}\n\nexport function decodeName(bytes: number[]): string {\n\tconst buffer = Buffer.from(bytes);\n\treturn buffer.toString('utf8').trim();\n}\n","import { BN } from '../';\n\nexport function clampBN(x: BN, min: BN, max: BN): BN {\n\treturn BN.max(min, BN.min(x, max));\n}\n\nexport const squareRootBN = (n, closeness = new BN(1)): BN => {\n\t// Assuming the sqrt of n as n only\n\tlet x = n;\n\n\t// The closed guess will be stored in the root\n\tlet root;\n\n\t// To count the number of iterations\n\tlet count = 0;\n\tconst TWO = new BN(2);\n\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\twhile (count < Number.MAX_SAFE_INTEGER) {\n\t\tcount++;\n\n\t\t// Calculate more closed x\n\t\troot = x.add(n.div(x)).div(TWO);\n\n\t\t// Check for closeness\n\t\tif (x.sub(root).abs().lte(closeness)) break;\n\n\t\t// Update root\n\t\tx = root;\n\t}\n\n\treturn root;\n};\n","import { AnchorProvider, BN, Idl, Program } from '@project-serum/anchor';\nimport bs58 from 'bs58';\nimport {\n\tASSOCIATED_TOKEN_PROGRAM_ID,\n\tToken,\n\tTOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport {\n\tStateAccount,\n\tIWallet,\n\tPositionDirection,\n\tUserAccount,\n\tPerpMarketAccount,\n\tOrderParams,\n\tOrder,\n\tSpotMarketAccount,\n\tSpotPosition,\n\tMakerInfo,\n\tTakerInfo,\n\tOptionalOrderParams,\n\tDefaultOrderParams,\n\tOrderType,\n\tReferrerInfo,\n\tMarketType,\n\tSerumV3FulfillmentConfigAccount,\n\tisVariant,\n} from './types';\nimport * as anchor from '@project-serum/anchor';\nimport driftIDL from './idl/drift.json';\n\nimport {\n\tConnection,\n\tPublicKey,\n\tTransactionSignature,\n\tConfirmOptions,\n\tTransaction,\n\tTransactionInstruction,\n\tAccountMeta,\n\tKeypair,\n\tLAMPORTS_PER_SOL,\n\tSigner,\n\tSystemProgram,\n\tComputeBudgetProgram,\n} from '@solana/web3.js';\n\nimport { TokenFaucet } from './tokenFaucet';\nimport { EventEmitter } from 'events';\nimport StrictEventEmitter from 'strict-event-emitter-types';\nimport {\n\tgetDriftSignerPublicKey,\n\tgetDriftStateAccountPublicKey,\n\tgetInsuranceFundStakeAccountPublicKey,\n\tgetPerpMarketPublicKey,\n\tgetSerumFulfillmentConfigPublicKey,\n\tgetSerumSignerPublicKey,\n\tgetSpotMarketPublicKey,\n\tgetUserAccountPublicKey,\n\tgetUserAccountPublicKeySync,\n\tgetUserStatsAccountPublicKey,\n} from './addresses/pda';\nimport {\n\tDriftClientAccountSubscriber,\n\tDriftClientAccountEvents,\n\tDataAndSlot,\n} from './accounts/types';\nimport { TxSender } from './tx/types';\nimport { wrapInTx } from './tx/utils';\nimport { QUOTE_SPOT_MARKET_INDEX, ZERO } from './constants/numericConstants';\nimport { findDirectionToClose, positionIsAvailable } from './math/position';\nimport { getTokenAmount } from './math/spotBalance';\nimport { DEFAULT_USER_NAME, encodeName } from './userName';\nimport { OraclePriceData } from './oracles/types';\nimport { DriftClientConfig } from './driftClientConfig';\nimport { PollingDriftClientAccountSubscriber } from './accounts/pollingDriftClientAccountSubscriber';\nimport { WebSocketDriftClientAccountSubscriber } from './accounts/webSocketDriftClientAccountSubscriber';\nimport { RetryTxSender } from './tx/retryTxSender';\nimport { User } from './user';\nimport { UserSubscriptionConfig } from './userConfig';\nimport { getMarketsAndOraclesForSubscription } from './config';\nimport { WRAPPED_SOL_MINT } from './constants/spotMarkets';\nimport { UserStats } from './userStats';\nimport { isSpotPositionAvailable } from './math/spotPosition';\n\ntype RemainingAccountParams = {\n\tuserAccounts: UserAccount[];\n\twritablePerpMarketIndexes?: number[];\n\twritableSpotMarketIndexes?: number[];\n\treadablePerpMarketIndex?: number;\n\treadableSpotMarketIndexes?: number[];\n\tuseMarketLastSlotCache?: boolean;\n};\n\n/**\n * # DriftClient\n * This class is the main way to interact with Drift Protocol. It allows you to subscribe to the various accounts where the Market's state is stored, as well as: opening positions, liquidating, settling funding, depositing & withdrawing, and more.\n */\nexport class DriftClient {\n\tconnection: Connection;\n\twallet: IWallet;\n\tpublic program: Program;\n\tprovider: AnchorProvider;\n\topts?: ConfirmOptions;\n\tusers = new Map<number, User>();\n\tuserStats?: UserStats;\n\tactiveSubAccountId: number;\n\tuserAccountSubscriptionConfig: UserSubscriptionConfig;\n\taccountSubscriber: DriftClientAccountSubscriber;\n\teventEmitter: StrictEventEmitter<EventEmitter, DriftClientAccountEvents>;\n\t_isSubscribed = false;\n\ttxSender: TxSender;\n\tperpMarketLastSlotCache = new Map<number, number>();\n\tspotMarketLastSlotCache = new Map<number, number>();\n\tauthority: PublicKey;\n\n\tpublic get isSubscribed() {\n\t\treturn this._isSubscribed && this.accountSubscriber.isSubscribed;\n\t}\n\n\tpublic set isSubscribed(val: boolean) {\n\t\tthis._isSubscribed = val;\n\t}\n\n\tpublic constructor(config: DriftClientConfig) {\n\t\tthis.connection = config.connection;\n\t\tthis.wallet = config.wallet;\n\t\tthis.opts = config.opts || AnchorProvider.defaultOptions();\n\t\tthis.provider = new AnchorProvider(\n\t\t\tconfig.connection,\n\t\t\tconfig.wallet,\n\t\t\tthis.opts\n\t\t);\n\t\tthis.program = new Program(\n\t\t\tdriftIDL as Idl,\n\t\t\tconfig.programID,\n\t\t\tthis.provider\n\t\t);\n\n\t\tthis.authority = config.authority ?? this.wallet.publicKey;\n\t\tconst subAccountIds = config.subAccountIds ?? [0];\n\t\tthis.activeSubAccountId = config.activeSubAccountId ?? subAccountIds[0];\n\t\tthis.userAccountSubscriptionConfig =\n\t\t\tconfig.accountSubscription?.type === 'polling'\n\t\t\t\t? {\n\t\t\t\t\t\ttype: 'polling',\n\t\t\t\t\t\taccountLoader: config.accountSubscription.accountLoader,\n\t\t\t\t  }\n\t\t\t\t: {\n\t\t\t\t\t\ttype: 'websocket',\n\t\t\t\t  };\n\t\tthis.createUsers(subAccountIds, this.userAccountSubscriptionConfig);\n\t\tif (config.userStats) {\n\t\t\tthis.userStats = new UserStats({\n\t\t\t\tdriftClient: this,\n\t\t\t\tuserStatsAccountPublicKey: getUserStatsAccountPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tthis.authority\n\t\t\t\t),\n\t\t\t\taccountSubscription: this.userAccountSubscriptionConfig,\n\t\t\t});\n\t\t}\n\n\t\tlet perpMarketIndexes = config.perpMarketIndexes;\n\t\tlet spotMarketIndexes = config.spotMarketIndexes;\n\t\tlet oracleInfos = config.oracleInfos;\n\t\tif (config.env) {\n\t\t\tconst {\n\t\t\t\tperpMarketIndexes: envPerpMarketIndexes,\n\t\t\t\tspotMarketIndexes: envSpotMarketIndexes,\n\t\t\t\toracleInfos: envOralceInfos,\n\t\t\t} = getMarketsAndOraclesForSubscription(config.env);\n\t\t\tperpMarketIndexes = perpMarketIndexes\n\t\t\t\t? perpMarketIndexes\n\t\t\t\t: envPerpMarketIndexes;\n\t\t\tspotMarketIndexes = spotMarketIndexes\n\t\t\t\t? spotMarketIndexes\n\t\t\t\t: envSpotMarketIndexes;\n\t\t\toracleInfos = oracleInfos ? oracleInfos : envOralceInfos;\n\t\t}\n\n\t\tif (config.accountSubscription?.type === 'polling') {\n\t\t\tthis.accountSubscriber = new PollingDriftClientAccountSubscriber(\n\t\t\t\tthis.program,\n\t\t\t\tconfig.accountSubscription.accountLoader,\n\t\t\t\tperpMarketIndexes ?? [],\n\t\t\t\tspotMarketIndexes ?? [],\n\t\t\t\toracleInfos ?? []\n\t\t\t);\n\t\t} else {\n\t\t\tthis.accountSubscriber = new WebSocketDriftClientAccountSubscriber(\n\t\t\t\tthis.program,\n\t\t\t\tconfig.perpMarketIndexes ?? [],\n\t\t\t\tconfig.spotMarketIndexes ?? [],\n\t\t\t\tconfig.oracleInfos ?? []\n\t\t\t);\n\t\t}\n\t\tthis.eventEmitter = this.accountSubscriber.eventEmitter;\n\t\tthis.txSender = new RetryTxSender(\n\t\t\tthis.provider,\n\t\t\tconfig.txSenderConfig?.timeout,\n\t\t\tconfig.txSenderConfig?.retrySleep,\n\t\t\tconfig.txSenderConfig?.additionalConnections\n\t\t);\n\t}\n\n\tcreateUsers(\n\t\tsubAccountIds: number[],\n\t\taccountSubscriptionConfig: UserSubscriptionConfig\n\t): void {\n\t\tfor (const subAccountId of subAccountIds) {\n\t\t\tconst user = this.createUser(subAccountId, accountSubscriptionConfig);\n\t\t\tthis.users.set(subAccountId, user);\n\t\t}\n\t}\n\n\tcreateUser(\n\t\tsubAccountId: number,\n\t\taccountSubscriptionConfig: UserSubscriptionConfig\n\t): User {\n\t\tconst userAccountPublicKey = getUserAccountPublicKeySync(\n\t\t\tthis.program.programId,\n\t\t\tthis.authority,\n\t\t\tsubAccountId\n\t\t);\n\n\t\treturn new User({\n\t\t\tdriftClient: this,\n\t\t\tuserAccountPublicKey,\n\t\t\taccountSubscription: accountSubscriptionConfig,\n\t\t});\n\t}\n\n\tpublic async subscribe(): Promise<boolean> {\n\t\tlet subscribePromises = this.subscribeUsers().concat(\n\t\t\tthis.accountSubscriber.subscribe()\n\t\t);\n\t\tif (this.userStats !== undefined) {\n\t\t\tsubscribePromises = subscribePromises.concat(this.userStats.subscribe());\n\t\t}\n\t\tthis.isSubscribed = (await Promise.all(subscribePromises)).reduce(\n\t\t\t(success, prevSuccess) => success && prevSuccess\n\t\t);\n\t\treturn this.isSubscribed;\n\t}\n\n\tsubscribeUsers(): Promise<boolean>[] {\n\t\treturn [...this.users.values()].map((user) => user.subscribe());\n\t}\n\n\t/**\n\t *\tForces the accountSubscriber to fetch account updates from rpc\n\t */\n\tpublic async fetchAccounts(): Promise<void> {\n\t\tlet promises = [...this.users.values()]\n\t\t\t.map((user) => user.fetchAccounts())\n\t\t\t.concat(this.accountSubscriber.fetch());\n\t\tif (this.userStats) {\n\t\t\tpromises = promises.concat(this.userStats.fetchAccounts());\n\t\t}\n\t\tawait Promise.all(promises);\n\t}\n\n\tpublic async unsubscribe(): Promise<void> {\n\t\tlet unsubscribePromises = this.unsubscribeUsers().concat(\n\t\t\tthis.accountSubscriber.unsubscribe()\n\t\t);\n\t\tif (this.userStats !== undefined) {\n\t\t\tunsubscribePromises = unsubscribePromises.concat(\n\t\t\t\tthis.userStats.unsubscribe()\n\t\t\t);\n\t\t}\n\t\tawait Promise.all(unsubscribePromises);\n\t\tthis.isSubscribed = false;\n\t}\n\n\tunsubscribeUsers(): Promise<void>[] {\n\t\treturn [...this.users.values()].map((user) => user.unsubscribe());\n\t}\n\n\tstatePublicKey?: PublicKey;\n\tpublic async getStatePublicKey(): Promise<PublicKey> {\n\t\tif (this.statePublicKey) {\n\t\t\treturn this.statePublicKey;\n\t\t}\n\t\tthis.statePublicKey = await getDriftStateAccountPublicKey(\n\t\t\tthis.program.programId\n\t\t);\n\t\treturn this.statePublicKey;\n\t}\n\n\tsignerPublicKey?: PublicKey;\n\tpublic getSignerPublicKey(): PublicKey {\n\t\tif (this.signerPublicKey) {\n\t\t\treturn this.signerPublicKey;\n\t\t}\n\t\tthis.signerPublicKey = getDriftSignerPublicKey(this.program.programId);\n\t\treturn this.signerPublicKey;\n\t}\n\n\tpublic getStateAccount(): StateAccount {\n\t\treturn this.accountSubscriber.getStateAccountAndSlot().data;\n\t}\n\n\t/**\n\t * Forces a fetch to rpc before returning accounts. Useful for anchor tests.\n\t */\n\tpublic async forceGetStateAccount(): Promise<StateAccount> {\n\t\tawait this.accountSubscriber.fetch();\n\t\treturn this.accountSubscriber.getStateAccountAndSlot().data;\n\t}\n\n\tpublic getPerpMarketAccount(\n\t\tmarketIndex: number\n\t): PerpMarketAccount | undefined {\n\t\treturn this.accountSubscriber.getMarketAccountAndSlot(marketIndex)?.data;\n\t}\n\n\t/**\n\t * Forces a fetch to rpc before returning accounts. Useful for anchor tests.\n\t * @param marketIndex\n\t */\n\tpublic async forceGetPerpMarketAccount(\n\t\tmarketIndex: number\n\t): Promise<PerpMarketAccount | undefined> {\n\t\tawait this.accountSubscriber.fetch();\n\t\treturn this.accountSubscriber.getMarketAccountAndSlot(marketIndex)?.data;\n\t}\n\n\tpublic getPerpMarketAccounts(): PerpMarketAccount[] {\n\t\treturn this.accountSubscriber\n\t\t\t.getMarketAccountsAndSlots()\n\t\t\t.map((value) => value.data);\n\t}\n\n\tpublic getSpotMarketAccount(\n\t\tmarketIndex: number\n\t): SpotMarketAccount | undefined {\n\t\treturn this.accountSubscriber.getSpotMarketAccountAndSlot(marketIndex).data;\n\t}\n\n\t/**\n\t * Forces a fetch to rpc before returning accounts. Useful for anchor tests.\n\t * @param marketIndex\n\t */\n\tpublic async forceGetSpotMarketAccount(\n\t\tmarketIndex: number\n\t): Promise<SpotMarketAccount | undefined> {\n\t\tawait this.accountSubscriber.fetch();\n\t\treturn this.accountSubscriber.getSpotMarketAccountAndSlot(marketIndex).data;\n\t}\n\n\tpublic getSpotMarketAccounts(): SpotMarketAccount[] {\n\t\treturn this.accountSubscriber\n\t\t\t.getSpotMarketAccountsAndSlots()\n\t\t\t.map((value) => value.data);\n\t}\n\n\tpublic getQuoteSpotMarketAccount(): SpotMarketAccount {\n\t\treturn this.accountSubscriber.getSpotMarketAccountAndSlot(\n\t\t\tQUOTE_SPOT_MARKET_INDEX\n\t\t).data;\n\t}\n\n\tpublic getOraclePriceDataAndSlot(\n\t\toraclePublicKey: PublicKey\n\t): DataAndSlot<OraclePriceData> | undefined {\n\t\treturn this.accountSubscriber.getOraclePriceDataAndSlot(oraclePublicKey);\n\t}\n\n\tpublic async getSerumV3FulfillmentConfig(\n\t\tserumMarket: PublicKey\n\t): Promise<SerumV3FulfillmentConfigAccount> {\n\t\tconst address = await getSerumFulfillmentConfigPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tserumMarket\n\t\t);\n\t\treturn (await this.program.account.serumV3FulfillmentConfig.fetch(\n\t\t\taddress\n\t\t)) as SerumV3FulfillmentConfigAccount;\n\t}\n\n\t/**\n\t * Update the wallet to use for drift transactions and linked user account\n\t * @param newWallet\n\t * @param subAccountIds\n\t * @param activeSubAccountId\n\t */\n\tpublic async updateWallet(\n\t\tnewWallet: IWallet,\n\t\tsubAccountIds = [0],\n\t\tactiveSubAccountId = 0\n\t): Promise<void> {\n\t\tconst newProvider = new AnchorProvider(\n\t\t\tthis.connection,\n\t\t\tnewWallet,\n\t\t\tthis.opts\n\t\t);\n\t\tconst newProgram = new Program(\n\t\t\tdriftIDL as Idl,\n\t\t\tthis.program.programId,\n\t\t\tnewProvider\n\t\t);\n\n\t\t// Update provider for txSender with new wallet details\n\t\tthis.txSender.provider = newProvider;\n\n\t\tthis.wallet = newWallet;\n\t\tthis.provider = newProvider;\n\t\tthis.program = newProgram;\n\t\tthis.authority = newWallet.publicKey;\n\n\t\tif (this.isSubscribed) {\n\t\t\tawait Promise.all(this.unsubscribeUsers());\n\n\t\t\tif (this.userStats) {\n\t\t\t\tawait this.userStats.unsubscribe();\n\n\t\t\t\tthis.userStats = new UserStats({\n\t\t\t\t\tdriftClient: this,\n\t\t\t\t\tuserStatsAccountPublicKey: getUserStatsAccountPublicKey(\n\t\t\t\t\t\tthis.program.programId,\n\t\t\t\t\t\tthis.authority\n\t\t\t\t\t),\n\t\t\t\t\taccountSubscription: this.userAccountSubscriptionConfig,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tthis.users.clear();\n\t\tthis.createUsers(subAccountIds, this.userAccountSubscriptionConfig);\n\t\tif (this.isSubscribed) {\n\t\t\tawait Promise.all(this.subscribeUsers());\n\n\t\t\tif (this.userStats) {\n\t\t\t\tawait this.userStats.subscribe();\n\t\t\t}\n\t\t}\n\n\t\tthis.activeSubAccountId = activeSubAccountId;\n\t\tthis.userStatsAccountPublicKey = undefined;\n\t}\n\n\tpublic async switchActiveUser(subAccountId: number): Promise<void> {\n\t\tthis.activeSubAccountId = subAccountId;\n\t}\n\n\tpublic async addUser(subAccountId: number): Promise<void> {\n\t\tif (this.users.has(subAccountId)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst user = this.createUser(\n\t\t\tsubAccountId,\n\t\t\tthis.userAccountSubscriptionConfig\n\t\t);\n\t\tawait user.subscribe();\n\t\tthis.users.set(subAccountId, user);\n\t}\n\n\tpublic async initializeUserAccount(\n\t\tsubAccountId = 0,\n\t\tname = DEFAULT_USER_NAME,\n\t\treferrerInfo?: ReferrerInfo\n\t): Promise<[TransactionSignature, PublicKey]> {\n\t\tconst [userAccountPublicKey, initializeUserAccountIx] =\n\t\t\tawait this.getInitializeUserInstructions(\n\t\t\t\tsubAccountId,\n\t\t\t\tname,\n\t\t\t\treferrerInfo\n\t\t\t);\n\n\t\tconst tx = new Transaction();\n\t\tif (subAccountId === 0) {\n\t\t\tif (\n\t\t\t\t!(await this.checkIfAccountExists(this.getUserStatsAccountPublicKey()))\n\t\t\t) {\n\t\t\t\ttx.add(await this.getInitializeUserStatsIx());\n\t\t\t}\n\t\t}\n\t\ttx.add(initializeUserAccountIx);\n\t\tconst { txSig } = await this.txSender.send(tx, [], this.opts);\n\t\treturn [txSig, userAccountPublicKey];\n\t}\n\n\tasync getInitializeUserInstructions(\n\t\tsubAccountId = 0,\n\t\tname = DEFAULT_USER_NAME,\n\t\treferrerInfo?: ReferrerInfo\n\t): Promise<[PublicKey, TransactionInstruction]> {\n\t\tconst userAccountPublicKey = await getUserAccountPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tthis.wallet.publicKey,\n\t\t\tsubAccountId\n\t\t);\n\n\t\tconst remainingAccounts = new Array<AccountMeta>();\n\t\tif (referrerInfo !== undefined) {\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: referrerInfo.referrer,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: referrerInfo.referrerStats,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t}\n\n\t\tconst state = this.getStateAccount();\n\t\tif (!state.whitelistMint.equals(PublicKey.default)) {\n\t\t\tconst associatedTokenPublicKey = await Token.getAssociatedTokenAddress(\n\t\t\t\tASSOCIATED_TOKEN_PROGRAM_ID,\n\t\t\t\tTOKEN_PROGRAM_ID,\n\t\t\t\tstate.whitelistMint,\n\t\t\t\tthis.wallet.publicKey\n\t\t\t);\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: associatedTokenPublicKey,\n\t\t\t\tisWritable: false,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t}\n\n\t\tconst nameBuffer = encodeName(name);\n\t\tconst initializeUserAccountIx =\n\t\t\tawait this.program.instruction.initializeUser(subAccountId, nameBuffer, {\n\t\t\t\taccounts: {\n\t\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\t\tuserStats: this.getUserStatsAccountPublicKey(),\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t\tpayer: this.wallet.publicKey,\n\t\t\t\t\trent: anchor.web3.SYSVAR_RENT_PUBKEY,\n\t\t\t\t\tsystemProgram: anchor.web3.SystemProgram.programId,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t},\n\t\t\t\tremainingAccounts,\n\t\t\t});\n\n\t\treturn [userAccountPublicKey, initializeUserAccountIx];\n\t}\n\n\tasync getInitializeUserStatsIx(): Promise<TransactionInstruction> {\n\t\treturn await this.program.instruction.initializeUserStats({\n\t\t\taccounts: {\n\t\t\t\tuserStats: this.getUserStatsAccountPublicKey(),\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\tpayer: this.wallet.publicKey,\n\t\t\t\trent: anchor.web3.SYSVAR_RENT_PUBKEY,\n\t\t\t\tsystemProgram: anchor.web3.SystemProgram.programId,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateUserName(\n\t\tname: string,\n\t\tsubAccountId = 0\n\t): Promise<TransactionSignature> {\n\t\tconst userAccountPublicKey = getUserAccountPublicKeySync(\n\t\t\tthis.program.programId,\n\t\t\tthis.wallet.publicKey,\n\t\t\tsubAccountId\n\t\t);\n\n\t\tconst nameBuffer = encodeName(name);\n\t\treturn await this.program.rpc.updateUserName(subAccountId, nameBuffer, {\n\t\t\taccounts: {\n\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async updateUserCustomMarginRatio(\n\t\tmarginRatio: number,\n\t\tsubAccountId = 0\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateUserCustomMarginRatio(\n\t\t\tsubAccountId,\n\t\t\tmarginRatio,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tuser: await this.getUserAccountPublicKey(),\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateUserMarginTradingEnabled(\n\t\tmarginTradingEnabled: boolean,\n\t\tsubAccountId = 0\n\t): Promise<TransactionSignature> {\n\t\tconst userAccountPublicKey = getUserAccountPublicKeySync(\n\t\t\tthis.program.programId,\n\t\t\tthis.wallet.publicKey,\n\t\t\tsubAccountId\n\t\t);\n\t\treturn await this.program.rpc.updateUserMarginTradingEnabled(\n\t\t\tsubAccountId,\n\t\t\tmarginTradingEnabled,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async updateUserDelegate(\n\t\tdelegate: PublicKey,\n\t\tsubAccountId = 0\n\t): Promise<TransactionSignature> {\n\t\treturn await this.program.rpc.updateUserDelegate(subAccountId, delegate, {\n\t\t\taccounts: {\n\t\t\t\tuser: await this.getUserAccountPublicKey(),\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async getUserAccountsForDelegate(\n\t\tdelegate: PublicKey\n\t): Promise<UserAccount[]> {\n\t\tconst programAccounts = await this.program.account.user.all([\n\t\t\t{\n\t\t\t\tmemcmp: {\n\t\t\t\t\toffset: 40,\n\t\t\t\t\t/** data to match, as base-58 encoded string and limited to less than 129 bytes */\n\t\t\t\t\tbytes: bs58.encode(delegate.toBuffer()),\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\n\t\treturn programAccounts.map(\n\t\t\t(programAccount) => programAccount.account as UserAccount\n\t\t);\n\t}\n\n\tpublic async getUserAccountsForAuthority(\n\t\tauthority: PublicKey\n\t): Promise<UserAccount[]> {\n\t\tconst programAccounts = await this.program.account.user.all([\n\t\t\t{\n\t\t\t\tmemcmp: {\n\t\t\t\t\toffset: 8,\n\t\t\t\t\t/** data to match, as base-58 encoded string and limited to less than 129 bytes */\n\t\t\t\t\tbytes: bs58.encode(authority.toBuffer()),\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\n\t\treturn programAccounts.map(\n\t\t\t(programAccount) => programAccount.account as UserAccount\n\t\t);\n\t}\n\n\tpublic async deleteUser(subAccountId = 0): Promise<TransactionSignature> {\n\t\tconst userAccountPublicKey = getUserAccountPublicKeySync(\n\t\t\tthis.program.programId,\n\t\t\tthis.wallet.publicKey,\n\t\t\tsubAccountId\n\t\t);\n\n\t\tconst txSig = await this.program.rpc.deleteUser({\n\t\t\taccounts: {\n\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\tuserStats: this.getUserStatsAccountPublicKey(),\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t},\n\t\t});\n\n\t\tawait this.users.get(subAccountId)?.unsubscribe();\n\t\tthis.users.delete(subAccountId);\n\n\t\treturn txSig;\n\t}\n\n\tpublic getUser(subAccountId?: number): User {\n\t\tsubAccountId = subAccountId ?? this.activeSubAccountId;\n\t\tif (!this.users.has(subAccountId)) {\n\t\t\tthrow new Error(`Clearing House has no user for user id ${subAccountId}`);\n\t\t}\n\t\treturn this.users.get(subAccountId);\n\t}\n\n\tpublic getUsers(): User[] {\n\t\treturn [...this.users.values()];\n\t}\n\n\tpublic getUserStats(): UserStats {\n\t\treturn this.userStats;\n\t}\n\n\tuserStatsAccountPublicKey: PublicKey;\n\tpublic getUserStatsAccountPublicKey(): PublicKey {\n\t\tif (this.userStatsAccountPublicKey) {\n\t\t\treturn this.userStatsAccountPublicKey;\n\t\t}\n\n\t\tthis.userStatsAccountPublicKey = getUserStatsAccountPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tthis.authority\n\t\t);\n\t\treturn this.userStatsAccountPublicKey;\n\t}\n\n\tpublic async getUserAccountPublicKey(): Promise<PublicKey> {\n\t\treturn this.getUser().userAccountPublicKey;\n\t}\n\n\tpublic getUserAccount(subAccountId?: number): UserAccount | undefined {\n\t\treturn this.getUser(subAccountId).getUserAccount();\n\t}\n\n\t/**\n\t * Forces a fetch to rpc before returning accounts. Useful for anchor tests.\n\t * @param subAccountId\n\t */\n\tpublic async forceGetUserAccount(\n\t\tsubAccountId?: number\n\t): Promise<UserAccount | undefined> {\n\t\tawait this.getUser(subAccountId).fetchAccounts();\n\t\treturn this.getUser(subAccountId).getUserAccount();\n\t}\n\n\tpublic getUserAccountAndSlot(\n\t\tsubAccountId?: number\n\t): DataAndSlot<UserAccount> | undefined {\n\t\treturn this.getUser(subAccountId).getUserAccountAndSlot();\n\t}\n\n\tpublic getSpotPosition(marketIndex: number): SpotPosition | undefined {\n\t\treturn this.getUserAccount().spotPositions.find(\n\t\t\t(spotPosition) => spotPosition.marketIndex === marketIndex\n\t\t);\n\t}\n\n\tpublic getQuoteAssetTokenAmount(): BN {\n\t\tconst spotMarket = this.getSpotMarketAccount(QUOTE_SPOT_MARKET_INDEX);\n\t\tconst spotPosition = this.getSpotPosition(QUOTE_SPOT_MARKET_INDEX);\n\t\treturn getTokenAmount(\n\t\t\tspotPosition.scaledBalance,\n\t\t\tspotMarket,\n\t\t\tspotPosition.balanceType\n\t\t);\n\t}\n\n\tpublic getTokenAmount(marketIndex: number): BN {\n\t\tconst spotPosition = this.getSpotPosition(marketIndex);\n\t\tif (spotPosition === undefined) {\n\t\t\treturn ZERO;\n\t\t}\n\t\tconst spotMarket = this.getSpotMarketAccount(marketIndex);\n\t\treturn getTokenAmount(\n\t\t\tspotPosition.scaledBalance,\n\t\t\tspotMarket,\n\t\t\tspotPosition.balanceType\n\t\t);\n\t}\n\n\tgetRemainingAccounts(params: RemainingAccountParams): AccountMeta[] {\n\t\tconst { oracleAccountMap, spotMarketAccountMap, perpMarketAccountMap } =\n\t\t\tthis.getRemainingAccountMapsForUsers(params.userAccounts);\n\n\t\tif (params.useMarketLastSlotCache) {\n\t\t\tconst lastUserSlot = this.getUserAccountAndSlot()?.slot;\n\t\t\tfor (const [\n\t\t\t\tmarketIndex,\n\t\t\t\tslot,\n\t\t\t] of this.perpMarketLastSlotCache.entries()) {\n\t\t\t\t// if cache has more recent slot than user positions account slot, add market to remaining accounts\n\t\t\t\t// otherwise remove from slot\n\t\t\t\tif (slot > lastUserSlot) {\n\t\t\t\t\tconst marketAccount = this.getPerpMarketAccount(marketIndex);\n\t\t\t\t\tperpMarketAccountMap.set(marketIndex, {\n\t\t\t\t\t\tpubkey: marketAccount.pubkey,\n\t\t\t\t\t\tisSigner: false,\n\t\t\t\t\t\tisWritable: false,\n\t\t\t\t\t});\n\t\t\t\t\toracleAccountMap.set(marketAccount.amm.oracle.toString(), {\n\t\t\t\t\t\tpubkey: marketAccount.amm.oracle,\n\t\t\t\t\t\tisSigner: false,\n\t\t\t\t\t\tisWritable: false,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.perpMarketLastSlotCache.delete(marketIndex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const [\n\t\t\t\tmarketIndex,\n\t\t\t\tslot,\n\t\t\t] of this.spotMarketLastSlotCache.entries()) {\n\t\t\t\t// if cache has more recent slot than user positions account slot, add market to remaining accounts\n\t\t\t\t// otherwise remove from slot\n\t\t\t\tif (slot > lastUserSlot) {\n\t\t\t\t\tconst marketAccount = this.getSpotMarketAccount(marketIndex);\n\t\t\t\t\tspotMarketAccountMap.set(marketIndex, {\n\t\t\t\t\t\tpubkey: marketAccount.pubkey,\n\t\t\t\t\t\tisSigner: false,\n\t\t\t\t\t\tisWritable: false,\n\t\t\t\t\t});\n\t\t\t\t\tif (!marketAccount.oracle.equals(PublicKey.default)) {\n\t\t\t\t\t\toracleAccountMap.set(marketAccount.oracle.toString(), {\n\t\t\t\t\t\t\tpubkey: marketAccount.oracle,\n\t\t\t\t\t\t\tisSigner: false,\n\t\t\t\t\t\t\tisWritable: false,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.spotMarketLastSlotCache.delete(marketIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (params.readablePerpMarketIndex !== undefined) {\n\t\t\tconst marketAccount = this.getPerpMarketAccount(\n\t\t\t\tparams.readablePerpMarketIndex\n\t\t\t);\n\t\t\tperpMarketAccountMap.set(params.readablePerpMarketIndex, {\n\t\t\t\tpubkey: marketAccount.pubkey,\n\t\t\t\tisSigner: false,\n\t\t\t\tisWritable: false,\n\t\t\t});\n\t\t\toracleAccountMap.set(marketAccount.amm.oracle.toString(), {\n\t\t\t\tpubkey: marketAccount.amm.oracle,\n\t\t\t\tisSigner: false,\n\t\t\t\tisWritable: false,\n\t\t\t});\n\t\t}\n\n\t\tif (params.writablePerpMarketIndexes !== undefined) {\n\t\t\tfor (const writablePerpMarketIndex of params.writablePerpMarketIndexes) {\n\t\t\t\tconst marketAccount = this.getPerpMarketAccount(\n\t\t\t\t\twritablePerpMarketIndex\n\t\t\t\t);\n\t\t\t\tperpMarketAccountMap.set(writablePerpMarketIndex, {\n\t\t\t\t\tpubkey: marketAccount.pubkey,\n\t\t\t\t\tisSigner: false,\n\t\t\t\t\tisWritable: true,\n\t\t\t\t});\n\t\t\t\toracleAccountMap.set(marketAccount.amm.oracle.toString(), {\n\t\t\t\t\tpubkey: marketAccount.amm.oracle,\n\t\t\t\t\tisSigner: false,\n\t\t\t\t\tisWritable: false,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (params.readableSpotMarketIndexes !== undefined) {\n\t\t\tfor (const readableSpotMarketIndex of params.readableSpotMarketIndexes) {\n\t\t\t\tconst spotMarketAccount = this.getSpotMarketAccount(\n\t\t\t\t\treadableSpotMarketIndex\n\t\t\t\t);\n\t\t\t\tspotMarketAccountMap.set(readableSpotMarketIndex, {\n\t\t\t\t\tpubkey: spotMarketAccount.pubkey,\n\t\t\t\t\tisSigner: false,\n\t\t\t\t\tisWritable: false,\n\t\t\t\t});\n\t\t\t\tif (spotMarketAccount.marketIndex !== 0) {\n\t\t\t\t\toracleAccountMap.set(spotMarketAccount.oracle.toString(), {\n\t\t\t\t\t\tpubkey: spotMarketAccount.oracle,\n\t\t\t\t\t\tisSigner: false,\n\t\t\t\t\t\tisWritable: false,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (params.writableSpotMarketIndexes !== undefined) {\n\t\t\tfor (const writableSpotMarketIndex of params.writableSpotMarketIndexes) {\n\t\t\t\tconst spotMarketAccount = this.getSpotMarketAccount(\n\t\t\t\t\twritableSpotMarketIndex\n\t\t\t\t);\n\t\t\t\tspotMarketAccountMap.set(spotMarketAccount.marketIndex, {\n\t\t\t\t\tpubkey: spotMarketAccount.pubkey,\n\t\t\t\t\tisSigner: false,\n\t\t\t\t\tisWritable: true,\n\t\t\t\t});\n\t\t\t\tif (!spotMarketAccount.oracle.equals(PublicKey.default)) {\n\t\t\t\t\toracleAccountMap.set(spotMarketAccount.oracle.toString(), {\n\t\t\t\t\t\tpubkey: spotMarketAccount.oracle,\n\t\t\t\t\t\tisSigner: false,\n\t\t\t\t\t\tisWritable: false,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn [\n\t\t\t...oracleAccountMap.values(),\n\t\t\t...spotMarketAccountMap.values(),\n\t\t\t...perpMarketAccountMap.values(),\n\t\t];\n\t}\n\n\tgetRemainingAccountMapsForUsers(userAccounts: UserAccount[]): {\n\t\toracleAccountMap: Map<string, AccountMeta>;\n\t\tspotMarketAccountMap: Map<number, AccountMeta>;\n\t\tperpMarketAccountMap: Map<number, AccountMeta>;\n\t} {\n\t\tconst oracleAccountMap = new Map<string, AccountMeta>();\n\t\tconst spotMarketAccountMap = new Map<number, AccountMeta>();\n\t\tconst perpMarketAccountMap = new Map<number, AccountMeta>();\n\n\t\tfor (const userAccount of userAccounts) {\n\t\t\tfor (const spotPosition of userAccount.spotPositions) {\n\t\t\t\tif (!isSpotPositionAvailable(spotPosition)) {\n\t\t\t\t\tconst spotMarket = this.getSpotMarketAccount(\n\t\t\t\t\t\tspotPosition.marketIndex\n\t\t\t\t\t);\n\t\t\t\t\tspotMarketAccountMap.set(spotPosition.marketIndex, {\n\t\t\t\t\t\tpubkey: spotMarket.pubkey,\n\t\t\t\t\t\tisSigner: false,\n\t\t\t\t\t\tisWritable: false,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!spotMarket.oracle.equals(PublicKey.default)) {\n\t\t\t\t\t\toracleAccountMap.set(spotMarket.oracle.toString(), {\n\t\t\t\t\t\t\tpubkey: spotMarket.oracle,\n\t\t\t\t\t\t\tisSigner: false,\n\t\t\t\t\t\t\tisWritable: false,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!spotPosition.openAsks.eq(ZERO) ||\n\t\t\t\t\t\t!spotPosition.openBids.eq(ZERO)\n\t\t\t\t\t) {\n\t\t\t\t\t\tspotMarketAccountMap.set(QUOTE_SPOT_MARKET_INDEX, {\n\t\t\t\t\t\t\tpubkey: this.getQuoteSpotMarketAccount().pubkey,\n\t\t\t\t\t\t\tisSigner: false,\n\t\t\t\t\t\t\tisWritable: false,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const position of userAccount.perpPositions) {\n\t\t\t\tif (!positionIsAvailable(position)) {\n\t\t\t\t\tconst market = this.getPerpMarketAccount(position.marketIndex);\n\t\t\t\t\tperpMarketAccountMap.set(position.marketIndex, {\n\t\t\t\t\t\tpubkey: market.pubkey,\n\t\t\t\t\t\tisWritable: false,\n\t\t\t\t\t\tisSigner: false,\n\t\t\t\t\t});\n\t\t\t\t\toracleAccountMap.set(market.amm.oracle.toString(), {\n\t\t\t\t\t\tpubkey: market.amm.oracle,\n\t\t\t\t\t\tisWritable: false,\n\t\t\t\t\t\tisSigner: false,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\toracleAccountMap,\n\t\t\tspotMarketAccountMap,\n\t\t\tperpMarketAccountMap,\n\t\t};\n\t}\n\n\tpublic getOrder(orderId: number): Order | undefined {\n\t\treturn this.getUserAccount()?.orders.find(\n\t\t\t(order) => order.orderId === orderId\n\t\t);\n\t}\n\n\tpublic getOrderByUserId(userOrderId: number): Order | undefined {\n\t\treturn this.getUserAccount()?.orders.find(\n\t\t\t(order) => order.userOrderId === userOrderId\n\t\t);\n\t}\n\n\tpublic async deposit(\n\t\tamount: BN,\n\t\tmarketIndex: number,\n\t\tcollateralAccountPublicKey: PublicKey,\n\t\tsubAccountId?: number,\n\t\treduceOnly = false\n\t): Promise<TransactionSignature> {\n\t\tconst tx = new Transaction();\n\t\ttx.add(\n\t\t\tComputeBudgetProgram.requestUnits({\n\t\t\t\tunits: 600_000,\n\t\t\t\tadditionalFee: 0,\n\t\t\t})\n\t\t);\n\n\t\tconst additionalSigners: Array<Signer> = [];\n\n\t\tconst spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n\n\t\tconst isSolMarket = spotMarketAccount.mint.equals(WRAPPED_SOL_MINT);\n\n\t\tconst authority = this.authority;\n\n\t\tconst createWSOLTokenAccount =\n\t\t\tisSolMarket && collateralAccountPublicKey.equals(authority);\n\n\t\tif (createWSOLTokenAccount) {\n\t\t\tconst { ixs, signers, pubkey } =\n\t\t\t\tawait this.getWrappedSolAccountCreationIxs(amount, true);\n\n\t\t\tcollateralAccountPublicKey = pubkey;\n\n\t\t\tixs.forEach((ix) => {\n\t\t\t\ttx.add(ix);\n\t\t\t});\n\n\t\t\tsigners.forEach((signer) => additionalSigners.push(signer));\n\t\t}\n\n\t\tconst depositCollateralIx = await this.getDepositInstruction(\n\t\t\tamount,\n\t\t\tmarketIndex,\n\t\t\tcollateralAccountPublicKey,\n\t\t\tsubAccountId,\n\t\t\treduceOnly,\n\t\t\ttrue\n\t\t);\n\n\t\ttx.add(depositCollateralIx);\n\n\t\t// Close the wrapped sol account at the end of the transaction\n\t\tif (createWSOLTokenAccount) {\n\t\t\ttx.add(\n\t\t\t\tToken.createCloseAccountInstruction(\n\t\t\t\t\tTOKEN_PROGRAM_ID,\n\t\t\t\t\tcollateralAccountPublicKey,\n\t\t\t\t\tauthority,\n\t\t\t\t\tauthority,\n\t\t\t\t\t[]\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tconst { txSig, slot } = await this.txSender.send(\n\t\t\ttx,\n\t\t\tadditionalSigners,\n\t\t\tthis.opts\n\t\t);\n\t\tthis.spotMarketLastSlotCache.set(marketIndex, slot);\n\t\treturn txSig;\n\t}\n\n\tasync getDepositInstruction(\n\t\tamount: BN,\n\t\tmarketIndex: number,\n\t\tuserTokenAccount: PublicKey,\n\t\tsubAccountId?: number,\n\t\treduceOnly = false,\n\t\tuserInitialized = true\n\t): Promise<TransactionInstruction> {\n\t\tconst userAccountPublicKey = subAccountId\n\t\t\t? await getUserAccountPublicKey(\n\t\t\t\t\tthis.program.programId,\n\t\t\t\t\tthis.authority,\n\t\t\t\t\tsubAccountId\n\t\t\t  )\n\t\t\t: await this.getUserAccountPublicKey();\n\n\t\tlet remainingAccounts = [];\n\t\tif (userInitialized) {\n\t\t\tremainingAccounts = this.getRemainingAccounts({\n\t\t\t\tuserAccounts: [this.getUserAccount()],\n\t\t\t\tuseMarketLastSlotCache: true,\n\t\t\t\twritableSpotMarketIndexes: [marketIndex],\n\t\t\t});\n\t\t} else {\n\t\t\tremainingAccounts = this.getRemainingAccounts({\n\t\t\t\tuserAccounts: [],\n\t\t\t\twritableSpotMarketIndexes: [marketIndex],\n\t\t\t});\n\t\t}\n\n\t\tconst spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n\n\t\treturn await this.program.instruction.deposit(\n\t\t\tmarketIndex,\n\t\t\tamount,\n\t\t\treduceOnly,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tspotMarket: spotMarketAccount.pubkey,\n\t\t\t\t\tspotMarketVault: spotMarketAccount.vault,\n\t\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\t\tuserStats: this.getUserStatsAccountPublicKey(),\n\t\t\t\t\tuserTokenAccount: userTokenAccount,\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t\t},\n\t\t\t\tremainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate async checkIfAccountExists(account: PublicKey): Promise<boolean> {\n\t\ttry {\n\t\t\tconst accountInfo = await this.connection.getAccountInfo(account);\n\t\t\treturn accountInfo != null;\n\t\t} catch (e) {\n\t\t\t// Doesn't already exist\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate async getWrappedSolAccountCreationIxs(\n\t\tamount: BN,\n\t\tisDeposit?: boolean\n\t): Promise<{\n\t\tixs: anchor.web3.TransactionInstruction[];\n\t\tsigners: Signer[];\n\t\tpubkey: PublicKey;\n\t}> {\n\t\tconst wrappedSolAccount = new Keypair();\n\n\t\tconst result = {\n\t\t\tixs: [],\n\t\t\tsigners: [],\n\t\t\tpubkey: wrappedSolAccount.publicKey,\n\t\t};\n\n\t\tconst rentSpaceLamports = new BN(LAMPORTS_PER_SOL / 100);\n\n\t\tconst lamports = isDeposit\n\t\t\t? amount.add(rentSpaceLamports)\n\t\t\t: rentSpaceLamports;\n\n\t\tconst authority = this.wallet.publicKey;\n\n\t\tresult.ixs.push(\n\t\t\tSystemProgram.createAccount({\n\t\t\t\tfromPubkey: authority,\n\t\t\t\tnewAccountPubkey: wrappedSolAccount.publicKey,\n\t\t\t\tlamports: lamports.toNumber(),\n\t\t\t\tspace: 165,\n\t\t\t\tprogramId: TOKEN_PROGRAM_ID,\n\t\t\t})\n\t\t);\n\n\t\tresult.ixs.push(\n\t\t\tToken.createInitAccountInstruction(\n\t\t\t\tTOKEN_PROGRAM_ID,\n\t\t\t\tWRAPPED_SOL_MINT,\n\t\t\t\twrappedSolAccount.publicKey,\n\t\t\t\tauthority\n\t\t\t)\n\t\t);\n\n\t\tresult.signers.push(wrappedSolAccount);\n\n\t\treturn result;\n\t}\n\n\tpublic getAssociatedTokenAccountCreationIx(\n\t\ttokenMintAddress: PublicKey,\n\t\tassociatedTokenAddress: PublicKey\n\t): anchor.web3.TransactionInstruction {\n\t\tconst createAssociatedAccountIx =\n\t\t\tToken.createAssociatedTokenAccountInstruction(\n\t\t\t\tASSOCIATED_TOKEN_PROGRAM_ID,\n\t\t\t\tTOKEN_PROGRAM_ID,\n\t\t\t\ttokenMintAddress,\n\t\t\t\tassociatedTokenAddress,\n\t\t\t\tthis.wallet.publicKey,\n\t\t\t\tthis.wallet.publicKey\n\t\t\t);\n\n\t\treturn createAssociatedAccountIx;\n\t}\n\n\t/**\n\t * Creates the Clearing House User account for a user, and deposits some initial collateral\n\t * @param amount\n\t * @param userTokenAccount\n\t * @param marketIndex\n\t * @param subAccountId\n\t * @param name\n\t * @param fromSubAccountId\n\t * @returns\n\t */\n\tpublic async initializeUserAccountAndDepositCollateral(\n\t\tamount: BN,\n\t\tuserTokenAccount: PublicKey,\n\t\tmarketIndex = 0,\n\t\tsubAccountId = 0,\n\t\tname = DEFAULT_USER_NAME,\n\t\tfromSubAccountId?: number,\n\t\treferrerInfo?: ReferrerInfo\n\t): Promise<[TransactionSignature, PublicKey]> {\n\t\tconst [userAccountPublicKey, initializeUserAccountIx] =\n\t\t\tawait this.getInitializeUserInstructions(\n\t\t\t\tsubAccountId,\n\t\t\t\tname,\n\t\t\t\treferrerInfo\n\t\t\t);\n\n\t\tconst additionalSigners: Array<Signer> = [];\n\n\t\tconst spotMarket = this.getSpotMarketAccount(marketIndex);\n\n\t\tconst isSolMarket = spotMarket.mint.equals(WRAPPED_SOL_MINT);\n\n\t\tconst tx = new Transaction();\n\n\t\tconst authority = this.wallet.publicKey;\n\n\t\tconst createWSOLTokenAccount =\n\t\t\tisSolMarket && userTokenAccount.equals(authority);\n\n\t\tif (createWSOLTokenAccount) {\n\t\t\tconst {\n\t\t\t\tixs: startIxs,\n\t\t\t\tsigners,\n\t\t\t\tpubkey,\n\t\t\t} = await this.getWrappedSolAccountCreationIxs(amount, true);\n\n\t\t\tuserTokenAccount = pubkey;\n\n\t\t\tstartIxs.forEach((ix) => {\n\t\t\t\ttx.add(ix);\n\t\t\t});\n\n\t\t\tsigners.forEach((signer) => additionalSigners.push(signer));\n\t\t}\n\n\t\tconst depositCollateralIx =\n\t\t\tfromSubAccountId != null\n\t\t\t\t? await this.getTransferDepositIx(\n\t\t\t\t\t\tamount,\n\t\t\t\t\t\tmarketIndex,\n\t\t\t\t\t\tfromSubAccountId,\n\t\t\t\t\t\tsubAccountId\n\t\t\t\t  )\n\t\t\t\t: await this.getDepositInstruction(\n\t\t\t\t\t\tamount,\n\t\t\t\t\t\tmarketIndex,\n\t\t\t\t\t\tuserTokenAccount,\n\t\t\t\t\t\tsubAccountId,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tfalse\n\t\t\t\t  );\n\n\t\tif (subAccountId === 0) {\n\t\t\tif (\n\t\t\t\t!(await this.checkIfAccountExists(this.getUserStatsAccountPublicKey()))\n\t\t\t) {\n\t\t\t\ttx.add(await this.getInitializeUserStatsIx());\n\t\t\t}\n\t\t}\n\t\ttx.add(initializeUserAccountIx).add(depositCollateralIx);\n\n\t\t// Close the wrapped sol account at the end of the transaction\n\t\tif (createWSOLTokenAccount) {\n\t\t\ttx.add(\n\t\t\t\tToken.createCloseAccountInstruction(\n\t\t\t\t\tTOKEN_PROGRAM_ID,\n\t\t\t\t\tuserTokenAccount,\n\t\t\t\t\tauthority,\n\t\t\t\t\tauthority,\n\t\t\t\t\t[]\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tconst { txSig, slot } = await this.txSender.send(\n\t\t\ttx,\n\t\t\tadditionalSigners,\n\t\t\tthis.opts\n\t\t);\n\t\tthis.spotMarketLastSlotCache.set(marketIndex, slot);\n\t\treturn [txSig, userAccountPublicKey];\n\t}\n\n\tpublic async initializeUserAccountForDevnet(\n\t\tsubAccountId = 0,\n\t\tname = DEFAULT_USER_NAME,\n\t\tmarketIndex: number,\n\t\ttokenFaucet: TokenFaucet,\n\t\tamount: BN,\n\t\treferrerInfo?: ReferrerInfo\n\t): Promise<[TransactionSignature, PublicKey]> {\n\t\tconst [associateTokenPublicKey, createAssociatedAccountIx, mintToIx] =\n\t\t\tawait tokenFaucet.createAssociatedTokenAccountAndMintToInstructions(\n\t\t\t\tthis.wallet.publicKey,\n\t\t\t\tamount\n\t\t\t);\n\n\t\tconst [userAccountPublicKey, initializeUserAccountIx] =\n\t\t\tawait this.getInitializeUserInstructions(\n\t\t\t\tsubAccountId,\n\t\t\t\tname,\n\t\t\t\treferrerInfo\n\t\t\t);\n\n\t\tconst depositCollateralIx = await this.getDepositInstruction(\n\t\t\tamount,\n\t\t\tmarketIndex,\n\t\t\tassociateTokenPublicKey,\n\t\t\tsubAccountId,\n\t\t\tfalse,\n\t\t\tfalse\n\t\t);\n\n\t\tconst tx = new Transaction().add(createAssociatedAccountIx).add(mintToIx);\n\n\t\tif (subAccountId === 0) {\n\t\t\tif (\n\t\t\t\t!(await this.checkIfAccountExists(this.getUserStatsAccountPublicKey()))\n\t\t\t) {\n\t\t\t\ttx.add(await this.getInitializeUserStatsIx());\n\t\t\t}\n\t\t}\n\t\ttx.add(initializeUserAccountIx).add(depositCollateralIx);\n\n\t\tconst txSig = await this.program.provider.sendAndConfirm(tx, []);\n\n\t\treturn [txSig, userAccountPublicKey];\n\t}\n\n\tpublic async withdraw(\n\t\tamount: BN,\n\t\tmarketIndex: number,\n\t\tuserTokenAccount: PublicKey,\n\t\treduceOnly = false\n\t): Promise<TransactionSignature> {\n\t\tconst tx = new Transaction();\n\t\ttx.add(\n\t\t\tComputeBudgetProgram.requestUnits({\n\t\t\t\tunits: 600_000,\n\t\t\t\tadditionalFee: 0,\n\t\t\t})\n\t\t);\n\n\t\tconst additionalSigners: Array<Signer> = [];\n\n\t\tconst spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n\n\t\tconst isSolMarket = spotMarketAccount.mint.equals(WRAPPED_SOL_MINT);\n\n\t\tconst authority = this.wallet.publicKey;\n\n\t\tconst createWSOLTokenAccount =\n\t\t\tisSolMarket && userTokenAccount.equals(authority);\n\n\t\tif (createWSOLTokenAccount) {\n\t\t\tconst { ixs, signers, pubkey } =\n\t\t\t\tawait this.getWrappedSolAccountCreationIxs(amount, false);\n\n\t\t\tuserTokenAccount = pubkey;\n\n\t\t\tixs.forEach((ix) => {\n\t\t\t\ttx.add(ix);\n\t\t\t});\n\n\t\t\tsigners.forEach((signer) => additionalSigners.push(signer));\n\t\t} else {\n\t\t\tconst accountExists = await this.checkIfAccountExists(userTokenAccount);\n\n\t\t\tif (!accountExists) {\n\t\t\t\tconst createAssociatedTokenAccountIx =\n\t\t\t\t\tthis.getAssociatedTokenAccountCreationIx(\n\t\t\t\t\t\tspotMarketAccount.mint,\n\t\t\t\t\t\tuserTokenAccount\n\t\t\t\t\t);\n\n\t\t\t\ttx.add(createAssociatedTokenAccountIx);\n\t\t\t}\n\t\t}\n\n\t\tconst withdrawCollateral = await this.getWithdrawIx(\n\t\t\tamount,\n\t\t\tspotMarketAccount.marketIndex,\n\t\t\tuserTokenAccount,\n\t\t\treduceOnly\n\t\t);\n\n\t\ttx.add(withdrawCollateral);\n\n\t\t// Close the wrapped sol account at the end of the transaction\n\t\tif (createWSOLTokenAccount) {\n\t\t\ttx.add(\n\t\t\t\tToken.createCloseAccountInstruction(\n\t\t\t\t\tTOKEN_PROGRAM_ID,\n\t\t\t\t\tuserTokenAccount,\n\t\t\t\t\tauthority,\n\t\t\t\t\tauthority,\n\t\t\t\t\t[]\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tconst { txSig, slot } = await this.txSender.send(\n\t\t\ttx,\n\t\t\tadditionalSigners,\n\t\t\tthis.opts\n\t\t);\n\t\tthis.spotMarketLastSlotCache.set(marketIndex, slot);\n\t\treturn txSig;\n\t}\n\n\tpublic async getWithdrawIx(\n\t\tamount: BN,\n\t\tmarketIndex: number,\n\t\tuserTokenAccount: PublicKey,\n\t\treduceOnly = false\n\t): Promise<TransactionInstruction> {\n\t\tconst userAccountPublicKey = await this.getUserAccountPublicKey();\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount()],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\twritableSpotMarketIndexes: [marketIndex],\n\t\t\treadableSpotMarketIndexes: [QUOTE_SPOT_MARKET_INDEX],\n\t\t});\n\n\t\tconst spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n\n\t\treturn await this.program.instruction.withdraw(\n\t\t\tmarketIndex,\n\t\t\tamount,\n\t\t\treduceOnly,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tspotMarket: spotMarketAccount.pubkey,\n\t\t\t\t\tspotMarketVault: spotMarketAccount.vault,\n\t\t\t\t\tdriftSigner: this.getSignerPublicKey(),\n\t\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\t\tuserStats: this.getUserStatsAccountPublicKey(),\n\t\t\t\t\tuserTokenAccount: userTokenAccount,\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t\t},\n\t\t\t\tremainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async transferDeposit(\n\t\tamount: BN,\n\t\tmarketIndex: number,\n\t\tfromSubAccountId: number,\n\t\ttoSubAccountId: number\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig, slot } = await this.txSender.send(\n\t\t\twrapInTx(\n\t\t\t\tawait this.getTransferDepositIx(\n\t\t\t\t\tamount,\n\t\t\t\t\tmarketIndex,\n\t\t\t\t\tfromSubAccountId,\n\t\t\t\t\ttoSubAccountId\n\t\t\t\t)\n\t\t\t),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\tif (\n\t\t\tfromSubAccountId === this.activeSubAccountId ||\n\t\t\ttoSubAccountId === this.activeSubAccountId\n\t\t) {\n\t\t\tthis.spotMarketLastSlotCache.set(marketIndex, slot);\n\t\t}\n\t\treturn txSig;\n\t}\n\n\tpublic async getTransferDepositIx(\n\t\tamount: BN,\n\t\tmarketIndex: number,\n\t\tfromSubAccountId: number,\n\t\ttoSubAccountId: number\n\t): Promise<TransactionInstruction> {\n\t\tconst fromUser = await getUserAccountPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tthis.wallet.publicKey,\n\t\t\tfromSubAccountId\n\t\t);\n\t\tconst toUser = await getUserAccountPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tthis.wallet.publicKey,\n\t\t\ttoSubAccountId\n\t\t);\n\n\t\tlet remainingAccounts;\n\t\tif (this.users.has(fromSubAccountId)) {\n\t\t\tremainingAccounts = this.getRemainingAccounts({\n\t\t\t\tuserAccounts: [this.users.get(fromSubAccountId).getUserAccount()],\n\t\t\t\tuseMarketLastSlotCache: true,\n\t\t\t\twritableSpotMarketIndexes: [marketIndex],\n\t\t\t});\n\t\t} else {\n\t\t\tconst userAccountPublicKey = getUserAccountPublicKeySync(\n\t\t\t\tthis.program.programId,\n\t\t\t\tthis.authority,\n\t\t\t\tfromSubAccountId\n\t\t\t);\n\n\t\t\tconst fromUserAccount = (await this.program.account.user.fetch(\n\t\t\t\tuserAccountPublicKey\n\t\t\t)) as UserAccount;\n\t\t\tremainingAccounts = this.getRemainingAccounts({\n\t\t\t\tuserAccounts: [fromUserAccount],\n\t\t\t\tuseMarketLastSlotCache: true,\n\t\t\t\twritableSpotMarketIndexes: [marketIndex],\n\t\t\t});\n\t\t}\n\n\t\treturn await this.program.instruction.transferDeposit(marketIndex, amount, {\n\t\t\taccounts: {\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\tfromUser,\n\t\t\t\ttoUser,\n\t\t\t\tuserStats: this.getUserStatsAccountPublicKey(),\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tspotMarketVault: this.getSpotMarketAccount(marketIndex).vault,\n\t\t\t},\n\t\t\tremainingAccounts,\n\t\t});\n\t}\n\n\tpublic async updateSpotMarketCumulativeInterest(\n\t\tmarketIndex: number\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(await this.updateSpotMarketCumulativeInterestIx(marketIndex)),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async updateSpotMarketCumulativeInterestIx(\n\t\tmarketIndex: number\n\t): Promise<TransactionInstruction> {\n\t\tconst spotMarket = this.getSpotMarketAccount(marketIndex);\n\t\treturn await this.program.instruction.updateSpotMarketCumulativeInterest({\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tspotMarket: spotMarket.pubkey,\n\t\t\t\toracle: spotMarket.oracle,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async settleLP(\n\t\tsettleeUserAccountPublicKey: PublicKey,\n\t\tmarketIndex: number\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(await this.settleLPIx(settleeUserAccountPublicKey, marketIndex)),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async settleLPIx(\n\t\tsettleeUserAccountPublicKey: PublicKey,\n\t\tmarketIndex: number\n\t): Promise<TransactionInstruction> {\n\t\tconst settleeUserAccount = (await this.program.account.user.fetch(\n\t\t\tsettleeUserAccountPublicKey\n\t\t)) as UserAccount;\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [settleeUserAccount],\n\t\t\twritablePerpMarketIndexes: [marketIndex],\n\t\t});\n\n\t\treturn this.program.instruction.settleLp(marketIndex, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tuser: settleeUserAccountPublicKey,\n\t\t\t},\n\t\t\tremainingAccounts: remainingAccounts,\n\t\t});\n\t}\n\n\tpublic async removePerpLpShares(\n\t\tmarketIndex: number,\n\t\tsharesToBurn?: BN\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(await this.getRemovePerpLpSharesIx(marketIndex, sharesToBurn)),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async removePerpLpSharesInExpiringMarket(\n\t\tmarketIndex: number,\n\t\tuserAccountPublicKey: PublicKey,\n\t\tsharesToBurn?: BN\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(\n\t\t\t\tawait this.getRemovePerpLpSharesInExpiringMarket(\n\t\t\t\t\tmarketIndex,\n\t\t\t\t\tuserAccountPublicKey,\n\t\t\t\t\tsharesToBurn\n\t\t\t\t)\n\t\t\t),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async getRemovePerpLpSharesInExpiringMarket(\n\t\tmarketIndex: number,\n\t\tuserAccountPublicKey: PublicKey,\n\t\tsharesToBurn?: BN\n\t): Promise<TransactionInstruction> {\n\t\tconst userAccount = (await this.program.account.user.fetch(\n\t\t\tuserAccountPublicKey\n\t\t)) as UserAccount;\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [userAccount],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\twritablePerpMarketIndexes: [marketIndex],\n\t\t});\n\n\t\tif (sharesToBurn == undefined) {\n\t\t\tconst perpPosition = userAccount.perpPositions.filter(\n\t\t\t\t(position) => position.marketIndex === marketIndex\n\t\t\t)[0];\n\t\t\tsharesToBurn = perpPosition.lpShares;\n\t\t\tconsole.log('burning lp shares:', sharesToBurn.toString());\n\t\t}\n\n\t\treturn this.program.instruction.removePerpLpSharesInExpiringMarket(\n\t\t\tsharesToBurn,\n\t\t\tmarketIndex,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\t},\n\t\t\t\tremainingAccounts: remainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async getRemovePerpLpSharesIx(\n\t\tmarketIndex: number,\n\t\tsharesToBurn?: BN\n\t): Promise<TransactionInstruction> {\n\t\tconst userAccountPublicKey = await this.getUserAccountPublicKey();\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount()],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\twritablePerpMarketIndexes: [marketIndex],\n\t\t});\n\n\t\tif (sharesToBurn == undefined) {\n\t\t\tconst userAccount = this.getUserAccount();\n\t\t\tconst perpPosition = userAccount.perpPositions.filter(\n\t\t\t\t(position) => position.marketIndex === marketIndex\n\t\t\t)[0];\n\t\t\tsharesToBurn = perpPosition.lpShares;\n\t\t\tconsole.log('burning lp shares:', sharesToBurn.toString());\n\t\t}\n\n\t\treturn this.program.instruction.removePerpLpShares(\n\t\t\tsharesToBurn,\n\t\t\tmarketIndex,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t},\n\t\t\t\tremainingAccounts: remainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async addPerpLpShares(\n\t\tamount: BN,\n\t\tmarketIndex: number\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig, slot } = await this.txSender.send(\n\t\t\twrapInTx(await this.getAddPerpLpSharesIx(amount, marketIndex)),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\tthis.perpMarketLastSlotCache.set(marketIndex, slot);\n\t\treturn txSig;\n\t}\n\n\tpublic async getAddPerpLpSharesIx(\n\t\tamount: BN,\n\t\tmarketIndex: number\n\t): Promise<TransactionInstruction> {\n\t\tconst userAccountPublicKey = await this.getUserAccountPublicKey();\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount()],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\twritablePerpMarketIndexes: [marketIndex],\n\t\t});\n\n\t\treturn this.program.instruction.addPerpLpShares(amount, marketIndex, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t},\n\t\t\tremainingAccounts: remainingAccounts,\n\t\t});\n\t}\n\n\tpublic async openPosition(\n\t\tdirection: PositionDirection,\n\t\tamount: BN,\n\t\tmarketIndex: number,\n\t\tlimitPrice?: BN\n\t): Promise<TransactionSignature> {\n\t\treturn await this.placeAndTakePerpOrder({\n\t\t\torderType: OrderType.MARKET,\n\t\t\tmarketIndex,\n\t\t\tdirection,\n\t\t\tbaseAssetAmount: amount,\n\t\t\tprice: limitPrice,\n\t\t});\n\t}\n\n\tpublic async sendSignedTx(tx: Transaction): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(tx, undefined, this.opts, true);\n\n\t\treturn txSig;\n\t}\n\n\t/**\n\t * Sends a market order and returns a signed tx which can fill the order against the vamm, which the caller can use to fill their own order if required.\n\t * @param orderParams\n\t * @param userAccountPublicKey\n\t * @param userAccount\n\t * @param makerInfo\n\t * @returns\n\t */\n\tpublic async sendMarketOrderAndGetSignedFillTx(\n\t\torderParams: OptionalOrderParams,\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuserAccount: UserAccount,\n\t\tmakerInfo?: MakerInfo\n\t): Promise<{ txSig: TransactionSignature; signedFillTx: Transaction }> {\n\t\tconst marketIndex = orderParams.marketIndex;\n\t\tconst orderId = userAccount.nextOrderId;\n\n\t\tconst marketOrderTx = wrapInTx(await this.getPlacePerpOrderIx(orderParams));\n\t\tconst fillTx = wrapInTx(\n\t\t\tawait this.getFillPerpOrderIx(\n\t\t\t\tuserAccountPublicKey,\n\t\t\t\tuserAccount,\n\t\t\t\t{\n\t\t\t\t\torderId,\n\t\t\t\t\tmarketIndex,\n\t\t\t\t},\n\t\t\t\tmakerInfo\n\t\t\t)\n\t\t);\n\n\t\t// Apply the latest blockhash to the txs so that we can sign before sending them\n\t\tconst currentBlockHash = (\n\t\t\tawait this.connection.getLatestBlockhash('finalized')\n\t\t).blockhash;\n\t\tmarketOrderTx.recentBlockhash = currentBlockHash;\n\t\tfillTx.recentBlockhash = currentBlockHash;\n\n\t\tmarketOrderTx.feePayer = userAccount.authority;\n\t\tfillTx.feePayer = userAccount.authority;\n\n\t\tconst [signedMarketOrderTx, signedFillTx] =\n\t\t\tawait this.provider.wallet.signAllTransactions([marketOrderTx, fillTx]);\n\n\t\tconst { txSig, slot } = await this.txSender.send(\n\t\t\tsignedMarketOrderTx,\n\t\t\t[],\n\t\t\tthis.opts,\n\t\t\ttrue\n\t\t);\n\n\t\tthis.perpMarketLastSlotCache.set(orderParams.marketIndex, slot);\n\n\t\treturn { txSig, signedFillTx };\n\t}\n\n\tpublic async placePerpOrder(\n\t\torderParams: OptionalOrderParams\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig, slot } = await this.txSender.send(\n\t\t\twrapInTx(await this.getPlacePerpOrderIx(orderParams)),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\tthis.perpMarketLastSlotCache.set(orderParams.marketIndex, slot);\n\t\treturn txSig;\n\t}\n\n\tgetOrderParams(\n\t\toptionalOrderParams: OptionalOrderParams,\n\t\tmarketType: MarketType\n\t): OrderParams {\n\t\treturn Object.assign({}, DefaultOrderParams, optionalOrderParams, {\n\t\t\tmarketType,\n\t\t});\n\t}\n\n\tpublic async getPlacePerpOrderIx(\n\t\torderParams: OptionalOrderParams\n\t): Promise<TransactionInstruction> {\n\t\torderParams = this.getOrderParams(orderParams, MarketType.PERP);\n\t\tconst userAccountPublicKey = await this.getUserAccountPublicKey();\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount()],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\treadablePerpMarketIndex: orderParams.marketIndex,\n\t\t});\n\n\t\treturn await this.program.instruction.placePerpOrder(orderParams, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\tuserStats: this.getUserStatsAccountPublicKey(),\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t},\n\t\t\tremainingAccounts,\n\t\t});\n\t}\n\n\tpublic async updateAMMs(\n\t\tmarketIndexes: number[]\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(await this.getUpdateAMMsIx(marketIndexes)),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async getUpdateAMMsIx(\n\t\tmarketIndexes: number[]\n\t): Promise<TransactionInstruction> {\n\t\tfor (let i = marketIndexes.length; i < 5; i++) {\n\t\t\tmarketIndexes.push(100);\n\t\t}\n\t\tconst marketAccountInfos = [];\n\t\tconst oracleAccountInfos = [];\n\t\tfor (const marketIndex of marketIndexes) {\n\t\t\tif (marketIndex !== 100) {\n\t\t\t\tconst market = this.getPerpMarketAccount(marketIndex);\n\t\t\t\tmarketAccountInfos.push({\n\t\t\t\t\tpubkey: market.pubkey,\n\t\t\t\t\tisWritable: true,\n\t\t\t\t\tisSigner: false,\n\t\t\t\t});\n\t\t\t\toracleAccountInfos.push({\n\t\t\t\t\tpubkey: market.amm.oracle,\n\t\t\t\t\tisWritable: false,\n\t\t\t\t\tisSigner: false,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tconst remainingAccounts = oracleAccountInfos.concat(marketAccountInfos);\n\n\t\treturn await this.program.instruction.updateAmms(marketIndexes, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t},\n\t\t\tremainingAccounts,\n\t\t});\n\t}\n\n\tpublic async settleExpiredMarket(\n\t\tmarketIndex: number\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(await this.getSettleExpiredMarketIx(marketIndex)),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async getSettleExpiredMarketIx(\n\t\tmarketIndex: number\n\t): Promise<TransactionInstruction> {\n\t\tconst marketAccountInfos = [];\n\t\tconst oracleAccountInfos = [];\n\t\tconst spotMarketAccountInfos = [];\n\t\tconst market = this.getPerpMarketAccount(marketIndex);\n\t\tmarketAccountInfos.push({\n\t\t\tpubkey: market.pubkey,\n\t\t\tisWritable: true,\n\t\t\tisSigner: false,\n\t\t});\n\t\toracleAccountInfos.push({\n\t\t\tpubkey: market.amm.oracle,\n\t\t\tisWritable: false,\n\t\t\tisSigner: false,\n\t\t});\n\n\t\tspotMarketAccountInfos.push({\n\t\t\tpubkey: this.getSpotMarketAccount(QUOTE_SPOT_MARKET_INDEX).pubkey,\n\t\t\tisSigner: false,\n\t\t\tisWritable: true,\n\t\t});\n\n\t\tconst remainingAccounts = oracleAccountInfos\n\t\t\t.concat(spotMarketAccountInfos)\n\t\t\t.concat(marketAccountInfos);\n\n\t\treturn await this.program.instruction.settleExpiredMarket(marketIndex, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t},\n\t\t\tremainingAccounts,\n\t\t});\n\t}\n\n\tpublic async settleExpiredMarketPoolsToRevenuePool(\n\t\tperpMarketIndex: number\n\t): Promise<TransactionSignature> {\n\t\tconst perpMarketPublicKey = await getPerpMarketPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tperpMarketIndex\n\t\t);\n\n\t\tconst spotMarketPublicKey = await getSpotMarketPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tQUOTE_SPOT_MARKET_INDEX\n\t\t);\n\n\t\tconst ix =\n\t\t\tawait this.program.instruction.settleExpiredMarketPoolsToRevenuePool({\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tadmin: this.wallet.publicKey,\n\t\t\t\t\tspotMarket: spotMarketPublicKey,\n\t\t\t\t\tperpMarket: perpMarketPublicKey,\n\t\t\t\t},\n\t\t\t});\n\n\t\tconst { txSig } = await this.txSender.send(wrapInTx(ix), [], this.opts);\n\n\t\treturn txSig;\n\t}\n\n\tpublic async cancelOrder(orderId?: number): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(await this.getCancelOrderIx(orderId)),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async getCancelOrderIx(\n\t\torderId?: number\n\t): Promise<TransactionInstruction> {\n\t\tconst userAccountPublicKey = await this.getUserAccountPublicKey();\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount()],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t});\n\n\t\treturn await this.program.instruction.cancelOrder(orderId ?? null, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t},\n\t\t\tremainingAccounts,\n\t\t});\n\t}\n\n\tpublic async cancelOrderByUserId(\n\t\tuserOrderId: number\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(await this.getCancelOrderByUserIdIx(userOrderId)),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async getCancelOrderByUserIdIx(\n\t\tuserOrderId: number\n\t): Promise<TransactionInstruction> {\n\t\tconst userAccountPublicKey = await this.getUserAccountPublicKey();\n\n\t\tconst order = this.getOrderByUserId(userOrderId);\n\t\tconst oracle = this.getPerpMarketAccount(order.marketIndex).amm.oracle;\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount()],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t});\n\n\t\treturn await this.program.instruction.cancelOrderByUserId(userOrderId, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\toracle,\n\t\t\t},\n\t\t\tremainingAccounts,\n\t\t});\n\t}\n\n\tpublic async cancelOrders(\n\t\tmarketType?: MarketType,\n\t\tmarketIndex?: number,\n\t\tdirection?: PositionDirection\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(\n\t\t\t\tawait this.getCancelOrdersIx(marketType, marketIndex, direction)\n\t\t\t),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async getCancelOrdersIx(\n\t\tmarketType: MarketType | null,\n\t\tmarketIndex: number | null,\n\t\tdirection: PositionDirection | null\n\t): Promise<TransactionInstruction> {\n\t\tconst userAccountPublicKey = await this.getUserAccountPublicKey();\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount()],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t});\n\n\t\treturn await this.program.instruction.cancelOrders(\n\t\t\tmarketType ?? null,\n\t\t\tmarketIndex ?? null,\n\t\t\tdirection ?? null,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t},\n\t\t\t\tremainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async fillPerpOrder(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuser: UserAccount,\n\t\torder?: Pick<Order, 'marketIndex' | 'orderId'>,\n\t\tmakerInfo?: MakerInfo,\n\t\treferrerInfo?: ReferrerInfo\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(\n\t\t\t\tawait this.getFillPerpOrderIx(\n\t\t\t\t\tuserAccountPublicKey,\n\t\t\t\t\tuser,\n\t\t\t\t\torder,\n\t\t\t\t\tmakerInfo,\n\t\t\t\t\treferrerInfo\n\t\t\t\t)\n\t\t\t),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async getFillPerpOrderIx(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuserAccount: UserAccount,\n\t\torder: Pick<Order, 'marketIndex' | 'orderId'>,\n\t\tmakerInfo?: MakerInfo,\n\t\treferrerInfo?: ReferrerInfo\n\t): Promise<TransactionInstruction> {\n\t\tconst userStatsPublicKey = getUserStatsAccountPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tuserAccount.authority\n\t\t);\n\n\t\tconst fillerPublicKey = await this.getUserAccountPublicKey();\n\t\tconst fillerStatsPublicKey = this.getUserStatsAccountPublicKey();\n\n\t\tconst marketIndex = order\n\t\t\t? order.marketIndex\n\t\t\t: userAccount.orders.find(\n\t\t\t\t\t(order) => order.orderId === userAccount.nextOrderId - 1\n\t\t\t  ).marketIndex;\n\n\t\tconst userAccounts = [userAccount];\n\t\tif (makerInfo !== undefined) {\n\t\t\tuserAccounts.push(makerInfo.makerUserAccount);\n\t\t}\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts,\n\t\t\twritablePerpMarketIndexes: [marketIndex],\n\t\t});\n\n\t\tif (makerInfo) {\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: makerInfo.maker,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: makerInfo.makerStats,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t}\n\n\t\tif (referrerInfo) {\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: referrerInfo.referrer,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: referrerInfo.referrerStats,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t}\n\n\t\tconst orderId = order.orderId;\n\t\tconst makerOrderId = makerInfo ? makerInfo.order.orderId : null;\n\n\t\treturn await this.program.instruction.fillPerpOrder(orderId, makerOrderId, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tfiller: fillerPublicKey,\n\t\t\t\tfillerStats: fillerStatsPublicKey,\n\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\tuserStats: userStatsPublicKey,\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t},\n\t\t\tremainingAccounts,\n\t\t});\n\t}\n\n\tpublic async placeSpotOrder(\n\t\torderParams: OptionalOrderParams\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig, slot } = await this.txSender.send(\n\t\t\twrapInTx(await this.getPlaceSpotOrderIx(orderParams)),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\tthis.spotMarketLastSlotCache.set(orderParams.marketIndex, slot);\n\t\tthis.spotMarketLastSlotCache.set(QUOTE_SPOT_MARKET_INDEX, slot);\n\t\treturn txSig;\n\t}\n\n\tpublic async getPlaceSpotOrderIx(\n\t\torderParams: OptionalOrderParams\n\t): Promise<TransactionInstruction> {\n\t\torderParams = this.getOrderParams(orderParams, MarketType.SPOT);\n\t\tconst userAccountPublicKey = await this.getUserAccountPublicKey();\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount()],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\treadableSpotMarketIndexes: [\n\t\t\t\torderParams.marketIndex,\n\t\t\t\tQUOTE_SPOT_MARKET_INDEX,\n\t\t\t],\n\t\t});\n\n\t\treturn await this.program.instruction.placeSpotOrder(orderParams, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\tuserStats: this.getUserStatsAccountPublicKey(),\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t},\n\t\t\tremainingAccounts,\n\t\t});\n\t}\n\n\tpublic async fillSpotOrder(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuser: UserAccount,\n\t\torder?: Order,\n\t\tfulfillmentConfig?: SerumV3FulfillmentConfigAccount,\n\t\tmakerInfo?: MakerInfo,\n\t\treferrerInfo?: ReferrerInfo\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(\n\t\t\t\tawait this.getFillSpotOrderIx(\n\t\t\t\t\tuserAccountPublicKey,\n\t\t\t\t\tuser,\n\t\t\t\t\torder,\n\t\t\t\t\tfulfillmentConfig,\n\t\t\t\t\tmakerInfo,\n\t\t\t\t\treferrerInfo\n\t\t\t\t)\n\t\t\t),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async getFillSpotOrderIx(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuserAccount: UserAccount,\n\t\torder?: Order,\n\t\tfulfillmentConfig?: SerumV3FulfillmentConfigAccount,\n\t\tmakerInfo?: MakerInfo,\n\t\treferrerInfo?: ReferrerInfo\n\t): Promise<TransactionInstruction> {\n\t\tconst userStatsPublicKey = getUserStatsAccountPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tuserAccount.authority\n\t\t);\n\n\t\tconst fillerPublicKey = await this.getUserAccountPublicKey();\n\t\tconst fillerStatsPublicKey = this.getUserStatsAccountPublicKey();\n\n\t\tconst marketIndex = order\n\t\t\t? order.marketIndex\n\t\t\t: userAccount.orders.find(\n\t\t\t\t\t(order) => order.orderId === userAccount.nextOrderId - 1\n\t\t\t  ).marketIndex;\n\n\t\tconst userAccounts = [userAccount];\n\t\tif (makerInfo !== undefined) {\n\t\t\tuserAccounts.push(makerInfo.makerUserAccount);\n\t\t}\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts,\n\t\t\twritableSpotMarketIndexes: [marketIndex, QUOTE_SPOT_MARKET_INDEX],\n\t\t});\n\n\t\tif (makerInfo) {\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: makerInfo.maker,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: makerInfo.makerStats,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t}\n\n\t\tif (referrerInfo) {\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: referrerInfo.referrer,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: referrerInfo.referrerStats,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t}\n\n\t\tconst orderId = order.orderId;\n\t\tconst makerOrderId = makerInfo ? makerInfo.order.orderId : null;\n\n\t\tthis.addSpotFulfillmentAccounts(\n\t\t\tmarketIndex,\n\t\t\tremainingAccounts,\n\t\t\tfulfillmentConfig\n\t\t);\n\n\t\treturn await this.program.instruction.fillSpotOrder(\n\t\t\torderId,\n\t\t\tfulfillmentConfig ? fulfillmentConfig.fulfillmentType : null,\n\t\t\tmakerOrderId,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tfiller: fillerPublicKey,\n\t\t\t\t\tfillerStats: fillerStatsPublicKey,\n\t\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\t\tuserStats: userStatsPublicKey,\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t},\n\t\t\t\tremainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n\n\taddSpotFulfillmentAccounts(\n\t\tmarketIndex: number,\n\t\tremainingAccounts: AccountMeta[],\n\t\tfulfillmentConfig?: SerumV3FulfillmentConfigAccount\n\t) {\n\t\tif (fulfillmentConfig) {\n\t\t\tthis.addSerumRemainingAccounts(\n\t\t\t\tmarketIndex,\n\t\t\t\tremainingAccounts,\n\t\t\t\tfulfillmentConfig\n\t\t\t);\n\t\t} else {\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: this.getSpotMarketAccount(marketIndex).vault,\n\t\t\t\tisWritable: false,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: this.getQuoteSpotMarketAccount().vault,\n\t\t\t\tisWritable: false,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t}\n\t}\n\n\taddSerumRemainingAccounts(\n\t\tmarketIndex: number,\n\t\tremainingAccounts: AccountMeta[],\n\t\tfulfillmentConfig: SerumV3FulfillmentConfigAccount\n\t) {\n\t\tremainingAccounts.push({\n\t\t\tpubkey: fulfillmentConfig.pubkey,\n\t\t\tisWritable: false,\n\t\t\tisSigner: false,\n\t\t});\n\t\tremainingAccounts.push({\n\t\t\tpubkey: fulfillmentConfig.serumProgramId,\n\t\t\tisWritable: false,\n\t\t\tisSigner: false,\n\t\t});\n\t\tremainingAccounts.push({\n\t\t\tpubkey: fulfillmentConfig.serumMarket,\n\t\t\tisWritable: true,\n\t\t\tisSigner: false,\n\t\t});\n\t\tremainingAccounts.push({\n\t\t\tpubkey: fulfillmentConfig.serumRequestQueue,\n\t\t\tisWritable: true,\n\t\t\tisSigner: false,\n\t\t});\n\t\tremainingAccounts.push({\n\t\t\tpubkey: fulfillmentConfig.serumEventQueue,\n\t\t\tisWritable: true,\n\t\t\tisSigner: false,\n\t\t});\n\t\tremainingAccounts.push({\n\t\t\tpubkey: fulfillmentConfig.serumBids,\n\t\t\tisWritable: true,\n\t\t\tisSigner: false,\n\t\t});\n\t\tremainingAccounts.push({\n\t\t\tpubkey: fulfillmentConfig.serumAsks,\n\t\t\tisWritable: true,\n\t\t\tisSigner: false,\n\t\t});\n\t\tremainingAccounts.push({\n\t\t\tpubkey: fulfillmentConfig.serumBaseVault,\n\t\t\tisWritable: true,\n\t\t\tisSigner: false,\n\t\t});\n\t\tremainingAccounts.push({\n\t\t\tpubkey: fulfillmentConfig.serumQuoteVault,\n\t\t\tisWritable: true,\n\t\t\tisSigner: false,\n\t\t});\n\t\tremainingAccounts.push({\n\t\t\tpubkey: fulfillmentConfig.serumOpenOrders,\n\t\t\tisWritable: true,\n\t\t\tisSigner: false,\n\t\t});\n\t\tremainingAccounts.push({\n\t\t\tpubkey: getSerumSignerPublicKey(\n\t\t\t\tfulfillmentConfig.serumProgramId,\n\t\t\t\tfulfillmentConfig.serumMarket,\n\t\t\t\tfulfillmentConfig.serumSignerNonce\n\t\t\t),\n\t\t\tisWritable: false,\n\t\t\tisSigner: false,\n\t\t});\n\t\tremainingAccounts.push({\n\t\t\tpubkey: this.getSignerPublicKey(),\n\t\t\tisWritable: false,\n\t\t\tisSigner: false,\n\t\t});\n\t\tremainingAccounts.push({\n\t\t\tpubkey: TOKEN_PROGRAM_ID,\n\t\t\tisWritable: false,\n\t\t\tisSigner: false,\n\t\t});\n\t\tremainingAccounts.push({\n\t\t\tpubkey: this.getSpotMarketAccount(marketIndex).vault,\n\t\t\tisWritable: true,\n\t\t\tisSigner: false,\n\t\t});\n\t\tremainingAccounts.push({\n\t\t\tpubkey: this.getQuoteSpotMarketAccount().vault,\n\t\t\tisWritable: true,\n\t\t\tisSigner: false,\n\t\t});\n\t\tremainingAccounts.push({\n\t\t\tpubkey: this.getStateAccount().srmVault,\n\t\t\tisWritable: false,\n\t\t\tisSigner: false,\n\t\t});\n\t}\n\n\tpublic async triggerOrder(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuser: UserAccount,\n\t\torder: Order\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(await this.getTriggerOrderIx(userAccountPublicKey, user, order)),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async getTriggerOrderIx(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuserAccount: UserAccount,\n\t\torder: Order\n\t): Promise<TransactionInstruction> {\n\t\tconst fillerPublicKey = await this.getUserAccountPublicKey();\n\n\t\tlet remainingAccountsParams;\n\t\tif (isVariant(order.marketType, 'perp')) {\n\t\t\tremainingAccountsParams = {\n\t\t\t\tuserAccounts: [userAccount],\n\t\t\t\twritablePerpMarketIndexes: [order.marketIndex],\n\t\t\t};\n\t\t} else {\n\t\t\tremainingAccountsParams = {\n\t\t\t\tuserAccounts: [userAccount],\n\t\t\t\twritableSpotMarketIndexes: [order.marketIndex, QUOTE_SPOT_MARKET_INDEX],\n\t\t\t};\n\t\t}\n\n\t\tconst remainingAccounts = this.getRemainingAccounts(\n\t\t\tremainingAccountsParams\n\t\t);\n\n\t\tconst orderId = order.orderId;\n\t\treturn await this.program.instruction.triggerOrder(orderId, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tfiller: fillerPublicKey,\n\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t},\n\t\t\tremainingAccounts,\n\t\t});\n\t}\n\n\tpublic async forceCancelOrders(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuser: UserAccount\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(await this.getForceCancelOrdersIx(userAccountPublicKey, user)),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async getForceCancelOrdersIx(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuserAccount: UserAccount\n\t): Promise<TransactionInstruction> {\n\t\tconst fillerPublicKey = await this.getUserAccountPublicKey();\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [userAccount],\n\t\t\twritableSpotMarketIndexes: [QUOTE_SPOT_MARKET_INDEX],\n\t\t});\n\n\t\treturn await this.program.instruction.forceCancelOrders({\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tfiller: fillerPublicKey,\n\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t},\n\t\t\tremainingAccounts,\n\t\t});\n\t}\n\n\tpublic async placeAndTakePerpOrder(\n\t\torderParams: OptionalOrderParams,\n\t\tmakerInfo?: MakerInfo,\n\t\treferrerInfo?: ReferrerInfo\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig, slot } = await this.txSender.send(\n\t\t\twrapInTx(\n\t\t\t\tawait this.getPlaceAndTakePerpOrderIx(\n\t\t\t\t\torderParams,\n\t\t\t\t\tmakerInfo,\n\t\t\t\t\treferrerInfo\n\t\t\t\t)\n\t\t\t),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\tthis.perpMarketLastSlotCache.set(orderParams.marketIndex, slot);\n\t\treturn txSig;\n\t}\n\n\tpublic async getPlaceAndTakePerpOrderIx(\n\t\torderParams: OptionalOrderParams,\n\t\tmakerInfo?: MakerInfo,\n\t\treferrerInfo?: ReferrerInfo\n\t): Promise<TransactionInstruction> {\n\t\torderParams = this.getOrderParams(orderParams, MarketType.PERP);\n\t\tconst userStatsPublicKey = await this.getUserStatsAccountPublicKey();\n\t\tconst userAccountPublicKey = await this.getUserAccountPublicKey();\n\n\t\tconst userAccounts = [this.getUserAccount()];\n\t\tif (makerInfo !== undefined) {\n\t\t\tuserAccounts.push(makerInfo.makerUserAccount);\n\t\t}\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts,\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\twritablePerpMarketIndexes: [orderParams.marketIndex],\n\t\t});\n\n\t\tlet makerOrderId = null;\n\t\tif (makerInfo) {\n\t\t\tmakerOrderId = makerInfo.order.orderId;\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: makerInfo.maker,\n\t\t\t\tisSigner: false,\n\t\t\t\tisWritable: true,\n\t\t\t});\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: makerInfo.makerStats,\n\t\t\t\tisSigner: false,\n\t\t\t\tisWritable: true,\n\t\t\t});\n\t\t}\n\n\t\tif (referrerInfo) {\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: referrerInfo.referrer,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: referrerInfo.referrerStats,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t}\n\n\t\treturn await this.program.instruction.placeAndTakePerpOrder(\n\t\t\torderParams,\n\t\t\tmakerOrderId,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\t\tuserStats: userStatsPublicKey,\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t},\n\t\t\t\tremainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async placeAndMakePerpOrder(\n\t\torderParams: OptionalOrderParams,\n\t\ttakerInfo: TakerInfo,\n\t\treferrerInfo?: ReferrerInfo\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig, slot } = await this.txSender.send(\n\t\t\twrapInTx(\n\t\t\t\tawait this.getPlaceAndMakePerpOrderIx(\n\t\t\t\t\torderParams,\n\t\t\t\t\ttakerInfo,\n\t\t\t\t\treferrerInfo\n\t\t\t\t)\n\t\t\t),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\n\t\tthis.perpMarketLastSlotCache.set(orderParams.marketIndex, slot);\n\n\t\treturn txSig;\n\t}\n\n\tpublic async getPlaceAndMakePerpOrderIx(\n\t\torderParams: OptionalOrderParams,\n\t\ttakerInfo: TakerInfo,\n\t\treferrerInfo?: ReferrerInfo\n\t): Promise<TransactionInstruction> {\n\t\torderParams = this.getOrderParams(orderParams, MarketType.PERP);\n\t\tconst userStatsPublicKey = this.getUserStatsAccountPublicKey();\n\t\tconst userAccountPublicKey = await this.getUserAccountPublicKey();\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount(), takerInfo.takerUserAccount],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\twritablePerpMarketIndexes: [orderParams.marketIndex],\n\t\t});\n\n\t\tif (referrerInfo) {\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: referrerInfo.referrer,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: referrerInfo.referrerStats,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t}\n\n\t\tconst takerOrderId = takerInfo.order.orderId;\n\t\treturn await this.program.instruction.placeAndMakePerpOrder(\n\t\t\torderParams,\n\t\t\ttakerOrderId,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\t\tuserStats: userStatsPublicKey,\n\t\t\t\t\ttaker: takerInfo.taker,\n\t\t\t\t\ttakerStats: takerInfo.takerStats,\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t},\n\t\t\t\tremainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async placeAndTakeSpotOrder(\n\t\torderParams: OptionalOrderParams,\n\t\tfulfillmentConfig?: SerumV3FulfillmentConfigAccount,\n\t\tmakerInfo?: MakerInfo,\n\t\treferrerInfo?: ReferrerInfo\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig, slot } = await this.txSender.send(\n\t\t\twrapInTx(\n\t\t\t\tawait this.getPlaceAndTakeSpotOrderIx(\n\t\t\t\t\torderParams,\n\t\t\t\t\tfulfillmentConfig,\n\t\t\t\t\tmakerInfo,\n\t\t\t\t\treferrerInfo\n\t\t\t\t)\n\t\t\t),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\tthis.spotMarketLastSlotCache.set(orderParams.marketIndex, slot);\n\t\tthis.spotMarketLastSlotCache.set(QUOTE_SPOT_MARKET_INDEX, slot);\n\t\treturn txSig;\n\t}\n\n\tpublic async getPlaceAndTakeSpotOrderIx(\n\t\torderParams: OptionalOrderParams,\n\t\tfulfillmentConfig?: SerumV3FulfillmentConfigAccount,\n\t\tmakerInfo?: MakerInfo,\n\t\treferrerInfo?: ReferrerInfo\n\t): Promise<TransactionInstruction> {\n\t\torderParams = this.getOrderParams(orderParams, MarketType.SPOT);\n\t\tconst userStatsPublicKey = await this.getUserStatsAccountPublicKey();\n\t\tconst userAccountPublicKey = await this.getUserAccountPublicKey();\n\n\t\tconst userAccounts = [this.getUserAccount()];\n\t\tif (makerInfo !== undefined) {\n\t\t\tuserAccounts.push(makerInfo.makerUserAccount);\n\t\t}\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts,\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\twritableSpotMarketIndexes: [\n\t\t\t\torderParams.marketIndex,\n\t\t\t\tQUOTE_SPOT_MARKET_INDEX,\n\t\t\t],\n\t\t});\n\n\t\tlet makerOrderId = null;\n\t\tif (makerInfo) {\n\t\t\tmakerOrderId = makerInfo.order.orderId;\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: makerInfo.maker,\n\t\t\t\tisSigner: false,\n\t\t\t\tisWritable: true,\n\t\t\t});\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: makerInfo.makerStats,\n\t\t\t\tisSigner: false,\n\t\t\t\tisWritable: true,\n\t\t\t});\n\t\t}\n\n\t\tif (referrerInfo) {\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: referrerInfo.referrer,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: referrerInfo.referrerStats,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t}\n\n\t\tthis.addSpotFulfillmentAccounts(\n\t\t\torderParams.marketIndex,\n\t\t\tremainingAccounts,\n\t\t\tfulfillmentConfig\n\t\t);\n\n\t\treturn await this.program.instruction.placeAndTakeSpotOrder(\n\t\t\torderParams,\n\t\t\tfulfillmentConfig ? fulfillmentConfig.fulfillmentType : null,\n\t\t\tmakerOrderId,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\t\tuserStats: userStatsPublicKey,\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t},\n\t\t\t\tremainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async placeAndMakeSpotOrder(\n\t\torderParams: OptionalOrderParams,\n\t\ttakerInfo: TakerInfo,\n\t\tfulfillmentConfig?: SerumV3FulfillmentConfigAccount,\n\t\treferrerInfo?: ReferrerInfo\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig, slot } = await this.txSender.send(\n\t\t\twrapInTx(\n\t\t\t\tawait this.getPlaceAndMakeSpotOrderIx(\n\t\t\t\t\torderParams,\n\t\t\t\t\ttakerInfo,\n\t\t\t\t\tfulfillmentConfig,\n\t\t\t\t\treferrerInfo\n\t\t\t\t)\n\t\t\t),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\tthis.spotMarketLastSlotCache.set(orderParams.marketIndex, slot);\n\t\tthis.spotMarketLastSlotCache.set(QUOTE_SPOT_MARKET_INDEX, slot);\n\t\treturn txSig;\n\t}\n\n\tpublic async getPlaceAndMakeSpotOrderIx(\n\t\torderParams: OptionalOrderParams,\n\t\ttakerInfo: TakerInfo,\n\t\tfulfillmentConfig?: SerumV3FulfillmentConfigAccount,\n\t\treferrerInfo?: ReferrerInfo\n\t): Promise<TransactionInstruction> {\n\t\torderParams = this.getOrderParams(orderParams, MarketType.SPOT);\n\t\tconst userStatsPublicKey = this.getUserStatsAccountPublicKey();\n\t\tconst userAccountPublicKey = await this.getUserAccountPublicKey();\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount(), takerInfo.takerUserAccount],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\twritableSpotMarketIndexes: [\n\t\t\t\torderParams.marketIndex,\n\t\t\t\tQUOTE_SPOT_MARKET_INDEX,\n\t\t\t],\n\t\t});\n\n\t\tif (referrerInfo) {\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: referrerInfo.referrer,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: referrerInfo.referrerStats,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t}\n\n\t\tthis.addSpotFulfillmentAccounts(\n\t\t\torderParams.marketIndex,\n\t\t\tremainingAccounts,\n\t\t\tfulfillmentConfig\n\t\t);\n\n\t\tconst takerOrderId = takerInfo.order.orderId;\n\t\treturn await this.program.instruction.placeAndMakeSpotOrder(\n\t\t\torderParams,\n\t\t\ttakerOrderId,\n\t\t\tfulfillmentConfig ? fulfillmentConfig.fulfillmentType : null,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\t\tuserStats: userStatsPublicKey,\n\t\t\t\t\ttaker: takerInfo.taker,\n\t\t\t\t\ttakerStats: takerInfo.takerStats,\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t},\n\t\t\t\tremainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * Close an entire position. If you want to reduce a position, use the {@link openPosition} method in the opposite direction of the current position.\n\t * @param marketIndex\n\t * @returns\n\t */\n\tpublic async closePosition(\n\t\tmarketIndex: number,\n\t\tlimitPrice?: BN\n\t): Promise<TransactionSignature> {\n\t\tconst userPosition = this.getUser().getPerpPosition(marketIndex);\n\t\tif (!userPosition) {\n\t\t\tthrow Error(`No position in market ${marketIndex.toString()}`);\n\t\t}\n\n\t\treturn await this.placeAndTakePerpOrder({\n\t\t\torderType: OrderType.MARKET,\n\t\t\tmarketIndex,\n\t\t\tdirection: findDirectionToClose(userPosition),\n\t\t\tbaseAssetAmount: userPosition.baseAssetAmount.abs(),\n\t\t\treduceOnly: true,\n\t\t\tprice: limitPrice,\n\t\t});\n\t}\n\n\t/**\n\t * Modifies an open order by closing it and replacing it with a new order.\n\t * @param orderId: The open order to modify\n\t * @param newBaseAmount: The new base amount for the order. One of [newBaseAmount|newLimitPrice|newOraclePriceOffset] must be provided.\n\t * @param newLimitPice: The new limit price for the order. One of [newBaseAmount|newLimitPrice|newOraclePriceOffset] must be provided.\n\t * @param newOraclePriceOffset: The new oracle price offset for the order. One of [newBaseAmount|newLimitPrice|newOraclePriceOffset] must be provided.\n\t * @returns\n\t */\n\tpublic async modifyPerpOrder(\n\t\torderId: number,\n\t\tnewBaseAmount?: BN,\n\t\tnewLimitPrice?: BN,\n\t\tnewOraclePriceOffset?: number\n\t): Promise<TransactionSignature> {\n\t\tif (!newBaseAmount && !newLimitPrice && !newOraclePriceOffset) {\n\t\t\tthrow new Error(\n\t\t\t\t`Must provide newBaseAmount or newLimitPrice or newOraclePriceOffset to modify order`\n\t\t\t);\n\t\t}\n\n\t\tconst openOrder = this.getUser().getOrder(orderId);\n\t\tif (!openOrder) {\n\t\t\tthrow new Error(`No open order with id ${orderId.toString()}`);\n\t\t}\n\t\tconst cancelOrderIx = await this.getCancelOrderIx(orderId);\n\n\t\tconst newOrderParams: OptionalOrderParams = {\n\t\t\torderType: openOrder.orderType,\n\t\t\tmarketType: openOrder.marketType,\n\t\t\tdirection: openOrder.direction,\n\t\t\tbaseAssetAmount: newBaseAmount || openOrder.baseAssetAmount,\n\t\t\tprice: newLimitPrice || openOrder.price,\n\t\t\tmarketIndex: openOrder.marketIndex,\n\t\t\treduceOnly: openOrder.reduceOnly,\n\t\t\tpostOnly: openOrder.postOnly,\n\t\t\timmediateOrCancel: openOrder.immediateOrCancel,\n\t\t\ttriggerPrice: openOrder.triggerPrice,\n\t\t\ttriggerCondition: openOrder.triggerCondition,\n\t\t\toraclePriceOffset: newOraclePriceOffset || openOrder.oraclePriceOffset,\n\t\t\tauctionDuration: openOrder.auctionDuration,\n\t\t\tmaxTs: openOrder.maxTs,\n\t\t\tauctionStartPrice: openOrder.auctionStartPrice,\n\t\t\tauctionEndPrice: openOrder.auctionEndPrice,\n\t\t};\n\t\tconst placeOrderIx = await this.getPlacePerpOrderIx(newOrderParams);\n\n\t\tconst tx = new Transaction();\n\t\ttx.add(\n\t\t\tComputeBudgetProgram.requestUnits({\n\t\t\t\tunits: 1_000_000,\n\t\t\t\tadditionalFee: 0,\n\t\t\t})\n\t\t);\n\t\ttx.add(cancelOrderIx);\n\t\ttx.add(placeOrderIx);\n\t\tconst { txSig, slot } = await this.txSender.send(tx, [], this.opts);\n\t\tthis.perpMarketLastSlotCache.set(newOrderParams.marketIndex, slot);\n\t\treturn txSig;\n\t}\n\n\tpublic async settlePNLs(\n\t\tusers: {\n\t\t\tsettleeUserAccountPublicKey: PublicKey;\n\t\t\tsettleeUserAccount: UserAccount;\n\t\t}[],\n\t\tmarketIndex: number\n\t): Promise<TransactionSignature> {\n\t\tconst ixs = [];\n\t\tfor (const { settleeUserAccountPublicKey, settleeUserAccount } of users) {\n\t\t\tixs.push(\n\t\t\t\tawait this.settlePNLIx(\n\t\t\t\t\tsettleeUserAccountPublicKey,\n\t\t\t\t\tsettleeUserAccount,\n\t\t\t\t\tmarketIndex\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tconst tx = new Transaction()\n\t\t\t.add(\n\t\t\t\tComputeBudgetProgram.requestUnits({\n\t\t\t\t\tunits: 1_000_000,\n\t\t\t\t\tadditionalFee: 0,\n\t\t\t\t})\n\t\t\t)\n\t\t\t.add(...ixs);\n\n\t\tconst { txSig } = await this.txSender.send(tx, [], this.opts);\n\t\treturn txSig;\n\t}\n\n\tpublic async settlePNL(\n\t\tsettleeUserAccountPublicKey: PublicKey,\n\t\tsettleeUserAccount: UserAccount,\n\t\tmarketIndex: number\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(\n\t\t\t\tawait this.settlePNLIx(\n\t\t\t\t\tsettleeUserAccountPublicKey,\n\t\t\t\t\tsettleeUserAccount,\n\t\t\t\t\tmarketIndex\n\t\t\t\t)\n\t\t\t),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async settlePNLIx(\n\t\tsettleeUserAccountPublicKey: PublicKey,\n\t\tsettleeUserAccount: UserAccount,\n\t\tmarketIndex: number\n\t): Promise<TransactionInstruction> {\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [settleeUserAccount],\n\t\t\twritablePerpMarketIndexes: [marketIndex],\n\t\t\twritableSpotMarketIndexes: [QUOTE_SPOT_MARKET_INDEX],\n\t\t});\n\n\t\treturn await this.program.instruction.settlePnl(marketIndex, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\tuser: settleeUserAccountPublicKey,\n\t\t\t\tspotMarketVault: this.getQuoteSpotMarketAccount().vault,\n\t\t\t},\n\t\t\tremainingAccounts: remainingAccounts,\n\t\t});\n\t}\n\n\tpublic async liquidatePerp(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuserAccount: UserAccount,\n\t\tmarketIndex: number,\n\t\tmaxBaseAssetAmount: BN,\n\t\tlimitPrice?: BN\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig, slot } = await this.txSender.send(\n\t\t\twrapInTx(\n\t\t\t\tawait this.getLiquidatePerpIx(\n\t\t\t\t\tuserAccountPublicKey,\n\t\t\t\t\tuserAccount,\n\t\t\t\t\tmarketIndex,\n\t\t\t\t\tmaxBaseAssetAmount,\n\t\t\t\t\tlimitPrice\n\t\t\t\t)\n\t\t\t),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\tthis.perpMarketLastSlotCache.set(marketIndex, slot);\n\t\treturn txSig;\n\t}\n\n\tpublic async getLiquidatePerpIx(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuserAccount: UserAccount,\n\t\tmarketIndex: number,\n\t\tmaxBaseAssetAmount: BN,\n\t\tlimitPrice?: BN\n\t): Promise<TransactionInstruction> {\n\t\tconst userStatsPublicKey = getUserStatsAccountPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tuserAccount.authority\n\t\t);\n\n\t\tconst liquidatorPublicKey = await this.getUserAccountPublicKey();\n\t\tconst liquidatorStatsPublicKey = this.getUserStatsAccountPublicKey();\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount(), userAccount],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\twritablePerpMarketIndexes: [marketIndex],\n\t\t});\n\n\t\treturn await this.program.instruction.liquidatePerp(\n\t\t\tmarketIndex,\n\t\t\tmaxBaseAssetAmount,\n\t\t\tlimitPrice ?? null,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\t\tuserStats: userStatsPublicKey,\n\t\t\t\t\tliquidator: liquidatorPublicKey,\n\t\t\t\t\tliquidatorStats: liquidatorStatsPublicKey,\n\t\t\t\t},\n\t\t\t\tremainingAccounts: remainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async liquidateSpot(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuserAccount: UserAccount,\n\t\tassetMarketIndex: number,\n\t\tliabilityMarketIndex: number,\n\t\tmaxLiabilityTransfer: BN,\n\t\tlimitPrice?: BN\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig, slot } = await this.txSender.send(\n\t\t\twrapInTx(\n\t\t\t\tawait this.getLiquidateSpotIx(\n\t\t\t\t\tuserAccountPublicKey,\n\t\t\t\t\tuserAccount,\n\t\t\t\t\tassetMarketIndex,\n\t\t\t\t\tliabilityMarketIndex,\n\t\t\t\t\tmaxLiabilityTransfer,\n\t\t\t\t\tlimitPrice\n\t\t\t\t)\n\t\t\t),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\tthis.spotMarketLastSlotCache.set(assetMarketIndex, slot);\n\t\tthis.spotMarketLastSlotCache.set(liabilityMarketIndex, slot);\n\t\treturn txSig;\n\t}\n\n\tpublic async getLiquidateSpotIx(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuserAccount: UserAccount,\n\t\tassetMarketIndex: number,\n\t\tliabilityMarketIndex: number,\n\t\tmaxLiabilityTransfer: BN,\n\t\tlimitPrice?: BN\n\t): Promise<TransactionInstruction> {\n\t\tconst userStatsPublicKey = getUserStatsAccountPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tuserAccount.authority\n\t\t);\n\n\t\tconst liquidatorPublicKey = await this.getUserAccountPublicKey();\n\t\tconst liquidatorStatsPublicKey = await this.getUserStatsAccountPublicKey();\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount(), userAccount],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\twritableSpotMarketIndexes: [liabilityMarketIndex, assetMarketIndex],\n\t\t});\n\n\t\treturn await this.program.instruction.liquidateSpot(\n\t\t\tassetMarketIndex,\n\t\t\tliabilityMarketIndex,\n\t\t\tmaxLiabilityTransfer,\n\t\t\tlimitPrice || null,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\t\tuserStats: userStatsPublicKey,\n\t\t\t\t\tliquidator: liquidatorPublicKey,\n\t\t\t\t\tliquidatorStats: liquidatorStatsPublicKey,\n\t\t\t\t},\n\t\t\t\tremainingAccounts: remainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async liquidateBorrowForPerpPnl(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuserAccount: UserAccount,\n\t\tperpMarketIndex: number,\n\t\tliabilityMarketIndex: number,\n\t\tmaxLiabilityTransfer: BN,\n\t\tlimitPrice?: BN\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig, slot } = await this.txSender.send(\n\t\t\twrapInTx(\n\t\t\t\tawait this.getLiquidateBorrowForPerpPnlIx(\n\t\t\t\t\tuserAccountPublicKey,\n\t\t\t\t\tuserAccount,\n\t\t\t\t\tperpMarketIndex,\n\t\t\t\t\tliabilityMarketIndex,\n\t\t\t\t\tmaxLiabilityTransfer,\n\t\t\t\t\tlimitPrice\n\t\t\t\t)\n\t\t\t),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\tthis.perpMarketLastSlotCache.set(perpMarketIndex, slot);\n\t\tthis.spotMarketLastSlotCache.set(liabilityMarketIndex, slot);\n\t\treturn txSig;\n\t}\n\n\tpublic async getLiquidateBorrowForPerpPnlIx(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuserAccount: UserAccount,\n\t\tperpMarketIndex: number,\n\t\tliabilityMarketIndex: number,\n\t\tmaxLiabilityTransfer: BN,\n\t\tlimitPrice?: BN\n\t): Promise<TransactionInstruction> {\n\t\tconst userStatsPublicKey = getUserStatsAccountPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tuserAccount.authority\n\t\t);\n\n\t\tconst liquidatorPublicKey = await this.getUserAccountPublicKey();\n\t\tconst liquidatorStatsPublicKey = await this.getUserStatsAccountPublicKey();\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount(), userAccount],\n\t\t\twritablePerpMarketIndexes: [perpMarketIndex],\n\t\t\twritableSpotMarketIndexes: [liabilityMarketIndex],\n\t\t});\n\n\t\treturn await this.program.instruction.liquidateBorrowForPerpPnl(\n\t\t\tperpMarketIndex,\n\t\t\tliabilityMarketIndex,\n\t\t\tmaxLiabilityTransfer,\n\t\t\tlimitPrice || null,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\t\tuserStats: userStatsPublicKey,\n\t\t\t\t\tliquidator: liquidatorPublicKey,\n\t\t\t\t\tliquidatorStats: liquidatorStatsPublicKey,\n\t\t\t\t},\n\t\t\t\tremainingAccounts: remainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async liquidatePerpPnlForDeposit(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuserAccount: UserAccount,\n\t\tperpMarketIndex: number,\n\t\tassetMarketIndex: number,\n\t\tmaxPnlTransfer: BN,\n\t\tlimitPrice?: BN\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig, slot } = await this.txSender.send(\n\t\t\twrapInTx(\n\t\t\t\tawait this.getLiquidatePerpPnlForDepositIx(\n\t\t\t\t\tuserAccountPublicKey,\n\t\t\t\t\tuserAccount,\n\t\t\t\t\tperpMarketIndex,\n\t\t\t\t\tassetMarketIndex,\n\t\t\t\t\tmaxPnlTransfer,\n\t\t\t\t\tlimitPrice\n\t\t\t\t)\n\t\t\t),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\tthis.perpMarketLastSlotCache.set(perpMarketIndex, slot);\n\t\tthis.spotMarketLastSlotCache.set(assetMarketIndex, slot);\n\t\treturn txSig;\n\t}\n\n\tpublic async getLiquidatePerpPnlForDepositIx(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuserAccount: UserAccount,\n\t\tperpMarketIndex: number,\n\t\tassetMarketIndex: number,\n\t\tmaxPnlTransfer: BN,\n\t\tlimitPrice?: BN\n\t): Promise<TransactionInstruction> {\n\t\tconst userStatsPublicKey = getUserStatsAccountPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tuserAccount.authority\n\t\t);\n\n\t\tconst liquidatorPublicKey = await this.getUserAccountPublicKey();\n\t\tconst liquidatorStatsPublicKey = await this.getUserStatsAccountPublicKey();\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount(), userAccount],\n\t\t\twritablePerpMarketIndexes: [perpMarketIndex],\n\t\t\twritableSpotMarketIndexes: [assetMarketIndex],\n\t\t});\n\n\t\treturn await this.program.instruction.liquidatePerpPnlForDeposit(\n\t\t\tperpMarketIndex,\n\t\t\tassetMarketIndex,\n\t\t\tmaxPnlTransfer,\n\t\t\tlimitPrice || null,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\t\tuserStats: userStatsPublicKey,\n\t\t\t\t\tliquidator: liquidatorPublicKey,\n\t\t\t\t\tliquidatorStats: liquidatorStatsPublicKey,\n\t\t\t\t},\n\t\t\t\tremainingAccounts: remainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async resolvePerpBankruptcy(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuserAccount: UserAccount,\n\t\tmarketIndex: number\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(\n\t\t\t\tawait this.getResolvePerpBankruptcyIx(\n\t\t\t\t\tuserAccountPublicKey,\n\t\t\t\t\tuserAccount,\n\t\t\t\t\tmarketIndex\n\t\t\t\t)\n\t\t\t),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async getResolvePerpBankruptcyIx(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuserAccount: UserAccount,\n\t\tmarketIndex: number\n\t): Promise<TransactionInstruction> {\n\t\tconst userStatsPublicKey = getUserStatsAccountPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tuserAccount.authority\n\t\t);\n\n\t\tconst liquidatorPublicKey = await this.getUserAccountPublicKey();\n\t\tconst liquidatorStatsPublicKey = await this.getUserStatsAccountPublicKey();\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount(), userAccount],\n\t\t\twritablePerpMarketIndexes: [marketIndex],\n\t\t\twritableSpotMarketIndexes: [QUOTE_SPOT_MARKET_INDEX],\n\t\t});\n\n\t\tconst spotMarket = this.getSpotMarketAccount(marketIndex);\n\n\t\treturn await this.program.instruction.resolvePerpBankruptcy(\n\t\t\tQUOTE_SPOT_MARKET_INDEX,\n\t\t\tmarketIndex,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\t\tuserStats: userStatsPublicKey,\n\t\t\t\t\tliquidator: liquidatorPublicKey,\n\t\t\t\t\tliquidatorStats: liquidatorStatsPublicKey,\n\t\t\t\t\tspotMarketVault: spotMarket.vault,\n\t\t\t\t\tinsuranceFundVault: spotMarket.insuranceFund.vault,\n\t\t\t\t\tdriftSigner: this.getSignerPublicKey(),\n\t\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t\t},\n\t\t\t\tremainingAccounts: remainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async resolveSpotBankruptcy(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuserAccount: UserAccount,\n\t\tmarketIndex: number\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(\n\t\t\t\tawait this.getResolveSpotBankruptcyIx(\n\t\t\t\t\tuserAccountPublicKey,\n\t\t\t\t\tuserAccount,\n\t\t\t\t\tmarketIndex\n\t\t\t\t)\n\t\t\t),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async getResolveSpotBankruptcyIx(\n\t\tuserAccountPublicKey: PublicKey,\n\t\tuserAccount: UserAccount,\n\t\tmarketIndex: number\n\t): Promise<TransactionInstruction> {\n\t\tconst userStatsPublicKey = getUserStatsAccountPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tuserAccount.authority\n\t\t);\n\n\t\tconst liquidatorPublicKey = await this.getUserAccountPublicKey();\n\t\tconst liquidatorStatsPublicKey = await this.getUserStatsAccountPublicKey();\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount(), userAccount],\n\t\t\twritableSpotMarketIndexes: [marketIndex],\n\t\t});\n\n\t\tconst spotMarket = this.getSpotMarketAccount(marketIndex);\n\n\t\treturn await this.program.instruction.resolveSpotBankruptcy(marketIndex, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\tuser: userAccountPublicKey,\n\t\t\t\tuserStats: userStatsPublicKey,\n\t\t\t\tliquidatorStats: liquidatorStatsPublicKey,\n\t\t\t\tliquidator: liquidatorPublicKey,\n\t\t\t\tspotMarketVault: spotMarket.vault,\n\t\t\t\tinsuranceFundVault: spotMarket.insuranceFund.vault,\n\t\t\t\tdriftSigner: this.getSignerPublicKey(),\n\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t},\n\t\t\tremainingAccounts: remainingAccounts,\n\t\t});\n\t}\n\n\tpublic async updateFundingRate(\n\t\tperpMarketIndex: number,\n\t\toracle: PublicKey\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(await this.getUpdateFundingRateIx(perpMarketIndex, oracle)),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async getUpdateFundingRateIx(\n\t\tperpMarketIndex: number,\n\t\toracle: PublicKey\n\t): Promise<TransactionInstruction> {\n\t\tconst perpMarketPublicKey = await getPerpMarketPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tperpMarketIndex\n\t\t);\n\t\treturn await this.program.instruction.updateFundingRate(perpMarketIndex, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tperpMarket: perpMarketPublicKey,\n\t\t\t\toracle: oracle,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async settleFundingPayment(\n\t\tuserAccountPublicKey: PublicKey\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(await this.getSettleFundingPaymentIx(userAccountPublicKey)),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async getSettleFundingPaymentIx(\n\t\tuserAccountPublicKey: PublicKey\n\t): Promise<TransactionInstruction> {\n\t\tconst userAccount = (await this.program.account.user.fetch(\n\t\t\tuserAccountPublicKey\n\t\t)) as UserAccount;\n\n\t\tconst writablePerpMarketIndexes = [];\n\t\tfor (const position of userAccount.perpPositions) {\n\t\t\tif (!positionIsAvailable(position)) {\n\t\t\t\twritablePerpMarketIndexes.push(position.marketIndex);\n\t\t\t}\n\t\t}\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [userAccount],\n\t\t\twritablePerpMarketIndexes,\n\t\t});\n\n\t\treturn await this.program.instruction.settleFundingPayment({\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tuser: userAccountPublicKey,\n\t\t\t},\n\t\t\tremainingAccounts,\n\t\t});\n\t}\n\n\tpublic triggerEvent(eventName: keyof DriftClientAccountEvents, data?: any) {\n\t\tthis.eventEmitter.emit(eventName, data);\n\t}\n\n\tpublic getOracleDataForPerpMarket(marketIndex: number): OraclePriceData {\n\t\tconst oracleKey = this.getPerpMarketAccount(marketIndex).amm.oracle;\n\t\tconst oracleData = this.getOraclePriceDataAndSlot(oracleKey).data;\n\n\t\treturn oracleData;\n\t}\n\n\tpublic getOracleDataForSpotMarket(marketIndex: number): OraclePriceData {\n\t\tconst oracleKey = this.getSpotMarketAccount(marketIndex).oracle;\n\t\tconst oracleData = this.getOraclePriceDataAndSlot(oracleKey).data;\n\n\t\treturn oracleData;\n\t}\n\n\tpublic async initializeInsuranceFundStake(\n\t\tmarketIndex: number\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(await this.getInitializeInsuranceFundStakeIx(marketIndex)),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async getInitializeInsuranceFundStakeIx(\n\t\tmarketIndex: number\n\t): Promise<TransactionInstruction> {\n\t\tconst ifStakeAccountPublicKey = getInsuranceFundStakeAccountPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tthis.wallet.publicKey,\n\t\t\tmarketIndex\n\t\t);\n\n\t\treturn await this.program.instruction.initializeInsuranceFundStake(\n\t\t\tmarketIndex,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tinsuranceFundStake: ifStakeAccountPublicKey,\n\t\t\t\t\tspotMarket: this.getSpotMarketAccount(marketIndex).pubkey,\n\t\t\t\t\tuserStats: this.getUserStatsAccountPublicKey(),\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t\tpayer: this.wallet.publicKey,\n\t\t\t\t\trent: anchor.web3.SYSVAR_RENT_PUBKEY,\n\t\t\t\t\tsystemProgram: anchor.web3.SystemProgram.programId,\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async addInsuranceFundStake(\n\t\tmarketIndex: number,\n\t\tamount: BN,\n\t\tcollateralAccountPublicKey: PublicKey\n\t): Promise<TransactionSignature> {\n\t\tconst spotMarket = this.getSpotMarketAccount(marketIndex);\n\t\tconst ifStakeAccountPublicKey = getInsuranceFundStakeAccountPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tthis.wallet.publicKey,\n\t\t\tmarketIndex\n\t\t);\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount()],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\twritableSpotMarketIndexes: [marketIndex],\n\t\t});\n\n\t\treturn await this.program.rpc.addInsuranceFundStake(marketIndex, amount, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tspotMarket: spotMarket.pubkey,\n\t\t\t\tinsuranceFundStake: ifStakeAccountPublicKey,\n\t\t\t\tuserStats: this.getUserStatsAccountPublicKey(),\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\tspotMarketVault: spotMarket.vault,\n\t\t\t\tinsuranceFundVault: spotMarket.insuranceFund.vault,\n\t\t\t\tdriftSigner: this.getSignerPublicKey(),\n\t\t\t\tuserTokenAccount: collateralAccountPublicKey,\n\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t},\n\t\t\tremainingAccounts,\n\t\t});\n\t}\n\n\tpublic async requestRemoveInsuranceFundStake(\n\t\tmarketIndex: number,\n\t\tamount: BN\n\t): Promise<TransactionSignature> {\n\t\tconst spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n\t\tconst ifStakeAccountPublicKey = getInsuranceFundStakeAccountPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tthis.wallet.publicKey,\n\t\t\tmarketIndex\n\t\t);\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount()],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\twritableSpotMarketIndexes: [marketIndex],\n\t\t});\n\n\t\treturn await this.program.rpc.requestRemoveInsuranceFundStake(\n\t\t\tmarketIndex,\n\t\t\tamount,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tspotMarket: spotMarketAccount.pubkey,\n\t\t\t\t\tinsuranceFundStake: ifStakeAccountPublicKey,\n\t\t\t\t\tuserStats: this.getUserStatsAccountPublicKey(),\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t\tinsuranceFundVault: spotMarketAccount.insuranceFund.vault,\n\t\t\t\t},\n\t\t\t\tremainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async cancelRequestRemoveInsuranceFundStake(\n\t\tmarketIndex: number\n\t): Promise<TransactionSignature> {\n\t\tconst spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n\t\tconst ifStakeAccountPublicKey = getInsuranceFundStakeAccountPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tthis.wallet.publicKey,\n\t\t\tmarketIndex\n\t\t);\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount()],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\twritableSpotMarketIndexes: [marketIndex],\n\t\t});\n\n\t\treturn await this.program.rpc.cancelRequestRemoveInsuranceFundStake(\n\t\t\tmarketIndex,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tspotMarket: spotMarketAccount.pubkey,\n\t\t\t\t\tinsuranceFundStake: ifStakeAccountPublicKey,\n\t\t\t\t\tuserStats: this.getUserStatsAccountPublicKey(),\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t\tinsuranceFundVault: spotMarketAccount.insuranceFund.vault,\n\t\t\t\t},\n\t\t\t\tremainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async removeInsuranceFundStake(\n\t\tmarketIndex: number,\n\t\tcollateralAccountPublicKey: PublicKey\n\t): Promise<TransactionSignature> {\n\t\tconst spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n\t\tconst ifStakeAccountPublicKey = getInsuranceFundStakeAccountPublicKey(\n\t\t\tthis.program.programId,\n\t\t\tthis.wallet.publicKey,\n\t\t\tmarketIndex\n\t\t);\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount()],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\twritableSpotMarketIndexes: [marketIndex],\n\t\t});\n\n\t\treturn await this.program.rpc.removeInsuranceFundStake(marketIndex, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tspotMarket: spotMarketAccount.pubkey,\n\t\t\t\tinsuranceFundStake: ifStakeAccountPublicKey,\n\t\t\t\tuserStats: this.getUserStatsAccountPublicKey(),\n\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\tinsuranceFundVault: spotMarketAccount.insuranceFund.vault,\n\t\t\t\tdriftSigner: this.getSignerPublicKey(),\n\t\t\t\tuserTokenAccount: collateralAccountPublicKey,\n\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t},\n\t\t\tremainingAccounts,\n\t\t});\n\t}\n\n\tpublic async settleRevenueToInsuranceFund(\n\t\tmarketIndex: number\n\t): Promise<TransactionSignature> {\n\t\tconst spotMarketAccount = this.getSpotMarketAccount(marketIndex);\n\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount()],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\twritableSpotMarketIndexes: [marketIndex],\n\t\t});\n\n\t\treturn await this.program.rpc.settleRevenueToInsuranceFund(marketIndex, {\n\t\t\taccounts: {\n\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\tspotMarket: spotMarketAccount.pubkey,\n\t\t\t\tspotMarketVault: spotMarketAccount.vault,\n\t\t\t\tdriftSigner: this.getSignerPublicKey(),\n\t\t\t\tinsuranceFundVault: spotMarketAccount.insuranceFund.vault,\n\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t},\n\t\t\tremainingAccounts,\n\t\t});\n\t}\n\n\tpublic async resolvePerpPnlDeficit(\n\t\tspotMarketIndex: number,\n\t\tperpMarketIndex: number\n\t): Promise<TransactionSignature> {\n\t\tconst { txSig } = await this.txSender.send(\n\t\t\twrapInTx(\n\t\t\t\tawait this.getResolvePerpPnlDeficitIx(spotMarketIndex, perpMarketIndex)\n\t\t\t),\n\t\t\t[],\n\t\t\tthis.opts\n\t\t);\n\t\treturn txSig;\n\t}\n\n\tpublic async getResolvePerpPnlDeficitIx(\n\t\tspotMarketIndex: number,\n\t\tperpMarketIndex: number\n\t): Promise<TransactionInstruction> {\n\t\tconst remainingAccounts = this.getRemainingAccounts({\n\t\t\tuserAccounts: [this.getUserAccount()],\n\t\t\tuseMarketLastSlotCache: true,\n\t\t\twritablePerpMarketIndexes: [perpMarketIndex],\n\t\t\twritableSpotMarketIndexes: [spotMarketIndex],\n\t\t});\n\n\t\tconst spotMarket = this.getSpotMarketAccount(spotMarketIndex);\n\n\t\treturn await this.program.instruction.resolvePerpPnlDeficit(\n\t\t\tspotMarketIndex,\n\t\t\tperpMarketIndex,\n\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\tstate: await this.getStatePublicKey(),\n\t\t\t\t\tauthority: this.wallet.publicKey,\n\t\t\t\t\tspotMarketVault: spotMarket.vault,\n\t\t\t\t\tinsuranceFundVault: spotMarket.insuranceFund.vault,\n\t\t\t\t\tdriftSigner: this.getSignerPublicKey(),\n\t\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t\t},\n\t\t\t\tremainingAccounts: remainingAccounts,\n\t\t\t}\n\t\t);\n\t}\n}\n","import {\n\tTransaction,\n\tTransactionInstruction,\n\tComputeBudgetProgram,\n} from '@solana/web3.js';\n\nconst COMPUTE_UNITS_DEFAULT = 200_000;\n\nexport function wrapInTx(\n\tinstruction: TransactionInstruction,\n\tcomputeUnits = 600_000 // TODO, requires less code change\n): Transaction {\n\tconst tx = new Transaction();\n\tif (computeUnits != COMPUTE_UNITS_DEFAULT) {\n\t\ttx.add(\n\t\t\tComputeBudgetProgram.requestUnits({\n\t\t\t\tunits: computeUnits,\n\t\t\t\tadditionalFee: 0,\n\t\t\t})\n\t\t);\n\t}\n\n\treturn tx.add(instruction);\n}\n","import { BN } from '@project-serum/anchor';\nimport {\n\tAMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO,\n\tPRICE_PRECISION,\n\tPEG_PRECISION,\n\tZERO,\n\tBID_ASK_SPREAD_PRECISION,\n\tONE,\n\tAMM_TO_QUOTE_PRECISION_RATIO,\n\tQUOTE_PRECISION,\n\tMARGIN_PRECISION,\n\tPRICE_DIV_PEG,\n\tPERCENTAGE_PRECISION,\n\tBASE_PRECISION,\n\tDEFAULT_REVENUE_SINCE_LAST_FUNDING_SPREAD_RETREAT,\n} from '../constants/numericConstants';\nimport {\n\tAMM,\n\tPositionDirection,\n\tSwapDirection,\n\tPerpMarketAccount,\n\tisVariant,\n} from '../types';\nimport { assert } from '../assert/assert';\nimport { squareRootBN, clampBN, standardizeBaseAssetAmount } from '..';\n\nimport { OraclePriceData } from '../oracles/types';\nimport {\n\tcalculateRepegCost,\n\tcalculateAdjustKCost,\n\tcalculateBudgetedPeg,\n} from './repeg';\n\nimport { calculateLiveOracleStd } from './oracles';\n\nexport function calculatePegFromTargetPrice(\n\ttargetPrice: BN,\n\tbaseAssetReserve: BN,\n\tquoteAssetReserve: BN\n): BN {\n\treturn BN.max(\n\t\ttargetPrice\n\t\t\t.mul(baseAssetReserve)\n\t\t\t.div(quoteAssetReserve)\n\t\t\t.add(PRICE_DIV_PEG.div(new BN(2)))\n\t\t\t.div(PRICE_DIV_PEG),\n\t\tONE\n\t);\n}\n\nexport function calculateOptimalPegAndBudget(\n\tamm: AMM,\n\toraclePriceData: OraclePriceData\n): [BN, BN, BN, boolean] {\n\tconst reservePriceBefore = calculatePrice(\n\t\tamm.baseAssetReserve,\n\t\tamm.quoteAssetReserve,\n\t\tamm.pegMultiplier\n\t);\n\tconst targetPrice = oraclePriceData.price;\n\tconst newPeg = calculatePegFromTargetPrice(\n\t\ttargetPrice,\n\t\tamm.baseAssetReserve,\n\t\tamm.quoteAssetReserve\n\t);\n\tconst prePegCost = calculateRepegCost(amm, newPeg);\n\n\tconst totalFeeLB = amm.totalExchangeFee.div(new BN(2));\n\tconst budget = BN.max(ZERO, amm.totalFeeMinusDistributions.sub(totalFeeLB));\n\tif (budget.lt(prePegCost)) {\n\t\tconst halfMaxPriceSpread = new BN(amm.maxSpread)\n\t\t\t.div(new BN(2))\n\t\t\t.mul(targetPrice)\n\t\t\t.div(BID_ASK_SPREAD_PRECISION);\n\n\t\tlet newTargetPrice: BN;\n\t\tlet newOptimalPeg: BN;\n\t\tlet newBudget: BN;\n\t\tconst targetPriceGap = reservePriceBefore.sub(targetPrice);\n\n\t\tif (targetPriceGap.abs().gt(halfMaxPriceSpread)) {\n\t\t\tconst markAdj = targetPriceGap.abs().sub(halfMaxPriceSpread);\n\n\t\t\tif (targetPriceGap.lt(new BN(0))) {\n\t\t\t\tnewTargetPrice = reservePriceBefore.add(markAdj);\n\t\t\t} else {\n\t\t\t\tnewTargetPrice = reservePriceBefore.sub(markAdj);\n\t\t\t}\n\n\t\t\tnewOptimalPeg = calculatePegFromTargetPrice(\n\t\t\t\tnewTargetPrice,\n\t\t\t\tamm.baseAssetReserve,\n\t\t\t\tamm.quoteAssetReserve\n\t\t\t);\n\n\t\t\tnewBudget = calculateRepegCost(amm, newOptimalPeg);\n\t\t\treturn [newTargetPrice, newOptimalPeg, newBudget, false];\n\t\t}\n\t}\n\n\treturn [targetPrice, newPeg, budget, true];\n}\n\nexport function calculateNewAmm(\n\tamm: AMM,\n\toraclePriceData: OraclePriceData\n): [BN, BN, BN, BN] {\n\tlet pKNumer = new BN(1);\n\tlet pKDenom = new BN(1);\n\n\tconst [targetPrice, _newPeg, budget, checkLowerBound] =\n\t\tcalculateOptimalPegAndBudget(amm, oraclePriceData);\n\tlet prePegCost = calculateRepegCost(amm, _newPeg);\n\tlet newPeg = _newPeg;\n\n\tif (prePegCost.gt(budget) && checkLowerBound) {\n\t\t[pKNumer, pKDenom] = [new BN(999), new BN(1000)];\n\t\tconst deficitMadeup = calculateAdjustKCost(amm, pKNumer, pKDenom);\n\t\tassert(deficitMadeup.lte(new BN(0)));\n\t\tprePegCost = budget.add(deficitMadeup.abs());\n\t\tconst newAmm = Object.assign({}, amm);\n\t\tnewAmm.baseAssetReserve = newAmm.baseAssetReserve.mul(pKNumer).div(pKDenom);\n\t\tnewAmm.sqrtK = newAmm.sqrtK.mul(pKNumer).div(pKDenom);\n\t\tconst invariant = newAmm.sqrtK.mul(newAmm.sqrtK);\n\t\tnewAmm.quoteAssetReserve = invariant.div(newAmm.baseAssetReserve);\n\t\tconst directionToClose = amm.baseAssetAmountWithAmm.gt(ZERO)\n\t\t\t? PositionDirection.SHORT\n\t\t\t: PositionDirection.LONG;\n\n\t\tconst [newQuoteAssetReserve, _newBaseAssetReserve] =\n\t\t\tcalculateAmmReservesAfterSwap(\n\t\t\t\tnewAmm,\n\t\t\t\t'base',\n\t\t\t\tamm.baseAssetAmountWithAmm.abs(),\n\t\t\t\tgetSwapDirection('base', directionToClose)\n\t\t\t);\n\n\t\tnewAmm.terminalQuoteAssetReserve = newQuoteAssetReserve;\n\n\t\tnewPeg = calculateBudgetedPeg(newAmm, prePegCost, targetPrice);\n\t\tprePegCost = calculateRepegCost(newAmm, newPeg);\n\t}\n\n\treturn [prePegCost, pKNumer, pKDenom, newPeg];\n}\n\nexport function calculateUpdatedAMM(\n\tamm: AMM,\n\toraclePriceData: OraclePriceData\n): AMM {\n\tif (amm.curveUpdateIntensity == 0) {\n\t\treturn amm;\n\t}\n\tconst newAmm = Object.assign({}, amm);\n\tconst [prepegCost, pKNumer, pKDenom, newPeg] = calculateNewAmm(\n\t\tamm,\n\t\toraclePriceData\n\t);\n\n\tnewAmm.baseAssetReserve = newAmm.baseAssetReserve.mul(pKNumer).div(pKDenom);\n\tnewAmm.sqrtK = newAmm.sqrtK.mul(pKNumer).div(pKDenom);\n\tconst invariant = newAmm.sqrtK.mul(newAmm.sqrtK);\n\tnewAmm.quoteAssetReserve = invariant.div(newAmm.baseAssetReserve);\n\tnewAmm.pegMultiplier = newPeg;\n\n\tconst directionToClose = amm.baseAssetAmountWithAmm.gt(ZERO)\n\t\t? PositionDirection.SHORT\n\t\t: PositionDirection.LONG;\n\n\tconst [newQuoteAssetReserve, _newBaseAssetReserve] =\n\t\tcalculateAmmReservesAfterSwap(\n\t\t\tnewAmm,\n\t\t\t'base',\n\t\t\tamm.baseAssetAmountWithAmm.abs(),\n\t\t\tgetSwapDirection('base', directionToClose)\n\t\t);\n\n\tnewAmm.terminalQuoteAssetReserve = newQuoteAssetReserve;\n\n\tnewAmm.totalFeeMinusDistributions =\n\t\tnewAmm.totalFeeMinusDistributions.sub(prepegCost);\n\tnewAmm.netRevenueSinceLastFunding =\n\t\tnewAmm.netRevenueSinceLastFunding.sub(prepegCost);\n\n\treturn newAmm;\n}\n\nexport function calculateUpdatedAMMSpreadReserves(\n\tamm: AMM,\n\tdirection: PositionDirection,\n\toraclePriceData: OraclePriceData\n): { baseAssetReserve: BN; quoteAssetReserve: BN; sqrtK: BN; newPeg: BN } {\n\tconst newAmm = calculateUpdatedAMM(amm, oraclePriceData);\n\tconst [shortReserves, longReserves] = calculateSpreadReserves(\n\t\tnewAmm,\n\t\toraclePriceData\n\t);\n\n\tconst dirReserves = isVariant(direction, 'long')\n\t\t? longReserves\n\t\t: shortReserves;\n\n\tconst result = {\n\t\tbaseAssetReserve: dirReserves.baseAssetReserve,\n\t\tquoteAssetReserve: dirReserves.quoteAssetReserve,\n\t\tsqrtK: newAmm.sqrtK,\n\t\tnewPeg: newAmm.pegMultiplier,\n\t};\n\n\treturn result;\n}\n\nexport function calculateBidAskPrice(\n\tamm: AMM,\n\toraclePriceData: OraclePriceData,\n\twithUpdate = true\n): [BN, BN] {\n\tlet newAmm: AMM;\n\tif (withUpdate) {\n\t\tnewAmm = calculateUpdatedAMM(amm, oraclePriceData);\n\t} else {\n\t\tnewAmm = amm;\n\t}\n\n\tconst [bidReserves, askReserves] = calculateSpreadReserves(\n\t\tnewAmm,\n\t\toraclePriceData\n\t);\n\n\tconst askPrice = calculatePrice(\n\t\taskReserves.baseAssetReserve,\n\t\taskReserves.quoteAssetReserve,\n\t\tnewAmm.pegMultiplier\n\t);\n\n\tconst bidPrice = calculatePrice(\n\t\tbidReserves.baseAssetReserve,\n\t\tbidReserves.quoteAssetReserve,\n\t\tnewAmm.pegMultiplier\n\t);\n\n\treturn [bidPrice, askPrice];\n}\n\n/**\n * Calculates a price given an arbitrary base and quote amount (they must have the same precision)\n *\n * @param baseAssetReserves\n * @param quoteAssetReserves\n * @param pegMultiplier\n * @returns price : Precision PRICE_PRECISION\n */\nexport function calculatePrice(\n\tbaseAssetReserves: BN,\n\tquoteAssetReserves: BN,\n\tpegMultiplier: BN\n): BN {\n\tif (baseAssetReserves.abs().lte(ZERO)) {\n\t\treturn new BN(0);\n\t}\n\n\treturn quoteAssetReserves\n\t\t.mul(PRICE_PRECISION)\n\t\t.mul(pegMultiplier)\n\t\t.div(PEG_PRECISION)\n\t\t.div(baseAssetReserves);\n}\n\nexport type AssetType = 'quote' | 'base';\n\n/**\n * Calculates what the amm reserves would be after swapping a quote or base asset amount.\n *\n * @param amm\n * @param inputAssetType\n * @param swapAmount\n * @param swapDirection\n * @returns quoteAssetReserve and baseAssetReserve after swap. : Precision AMM_RESERVE_PRECISION\n */\nexport function calculateAmmReservesAfterSwap(\n\tamm: Pick<\n\t\tAMM,\n\t\t'pegMultiplier' | 'quoteAssetReserve' | 'sqrtK' | 'baseAssetReserve'\n\t>,\n\tinputAssetType: AssetType,\n\tswapAmount: BN,\n\tswapDirection: SwapDirection\n): [BN, BN] {\n\tassert(swapAmount.gte(ZERO), 'swapAmount must be greater than 0');\n\n\tlet newQuoteAssetReserve;\n\tlet newBaseAssetReserve;\n\n\tif (inputAssetType === 'quote') {\n\t\tswapAmount = swapAmount\n\t\t\t.mul(AMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO)\n\t\t\t.div(amm.pegMultiplier);\n\n\t\t[newQuoteAssetReserve, newBaseAssetReserve] = calculateSwapOutput(\n\t\t\tamm.quoteAssetReserve,\n\t\t\tswapAmount,\n\t\t\tswapDirection,\n\t\t\tamm.sqrtK.mul(amm.sqrtK)\n\t\t);\n\t} else {\n\t\t[newBaseAssetReserve, newQuoteAssetReserve] = calculateSwapOutput(\n\t\t\tamm.baseAssetReserve,\n\t\t\tswapAmount,\n\t\t\tswapDirection,\n\t\t\tamm.sqrtK.mul(amm.sqrtK)\n\t\t);\n\t}\n\n\treturn [newQuoteAssetReserve, newBaseAssetReserve];\n}\n\nexport function calculateMarketOpenBidAsk(\n\tbaseAssetReserve: BN,\n\tminBaseAssetReserve: BN,\n\tmaxBaseAssetReserve: BN\n): [BN, BN] {\n\t// open orders\n\tlet openAsks;\n\tif (maxBaseAssetReserve.gt(baseAssetReserve)) {\n\t\topenAsks = maxBaseAssetReserve.sub(baseAssetReserve).mul(new BN(-1));\n\t} else {\n\t\topenAsks = ZERO;\n\t}\n\n\tlet openBids;\n\tif (minBaseAssetReserve.lt(baseAssetReserve)) {\n\t\topenBids = baseAssetReserve.sub(minBaseAssetReserve);\n\t} else {\n\t\topenBids = ZERO;\n\t}\n\treturn [openBids, openAsks];\n}\n\nexport function calculateInventoryScale(\n\tbaseAssetAmountWithAmm: BN,\n\tbaseAssetReserve: BN,\n\tminBaseAssetReserve: BN,\n\tmaxBaseAssetReserve: BN,\n\tdirectionalSpread: number,\n\tmaxSpread: number\n): number {\n\tif (baseAssetAmountWithAmm.eq(ZERO)) {\n\t\treturn 0;\n\t}\n\n\tconst defaultLargeBidAskFactor = BID_ASK_SPREAD_PRECISION.mul(new BN(10));\n\t// inventory skew\n\tconst [openBids, openAsks] = calculateMarketOpenBidAsk(\n\t\tbaseAssetReserve,\n\t\tminBaseAssetReserve,\n\t\tmaxBaseAssetReserve\n\t);\n\n\tconst minSideLiquidity = BN.max(\n\t\tnew BN(1),\n\t\tBN.min(openBids.abs(), openAsks.abs())\n\t);\n\n\tconst inventoryScaleMaxBN = BN.max(\n\t\tdefaultLargeBidAskFactor,\n\t\tnew BN(maxSpread / 2)\n\t\t\t.mul(BID_ASK_SPREAD_PRECISION)\n\t\t\t.div(new BN(Math.max(directionalSpread, 1)))\n\t);\n\n\tconst inventoryScaleBN = baseAssetAmountWithAmm\n\t\t.mul(BN.max(baseAssetAmountWithAmm.abs(), BASE_PRECISION))\n\t\t.div(BASE_PRECISION)\n\t\t.mul(defaultLargeBidAskFactor)\n\t\t.div(minSideLiquidity)\n\t\t.abs();\n\n\tconst inventoryScale =\n\t\tBN.min(inventoryScaleMaxBN, inventoryScaleBN).toNumber() /\n\t\tBID_ASK_SPREAD_PRECISION.toNumber();\n\n\tconst inventoryScaleMax =\n\t\tinventoryScaleMaxBN.toNumber() / BID_ASK_SPREAD_PRECISION.toNumber();\n\tconst inventorySpreadScale = Math.min(inventoryScaleMax, 1 + inventoryScale);\n\n\treturn inventorySpreadScale;\n}\n\nexport function calculateEffectiveLeverage(\n\tbaseSpread: number,\n\tquoteAssetReserve: BN,\n\tterminalQuoteAssetReserve: BN,\n\tpegMultiplier: BN,\n\tnetBaseAssetAmount: BN,\n\treservePrice: BN,\n\ttotalFeeMinusDistributions: BN\n): number {\n\t// vAMM skew\n\tconst netBaseAssetValue = quoteAssetReserve\n\t\t.sub(terminalQuoteAssetReserve)\n\t\t.mul(pegMultiplier)\n\t\t.div(AMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO);\n\n\tconst localBaseAssetValue = netBaseAssetAmount\n\t\t.mul(reservePrice)\n\t\t.div(AMM_TO_QUOTE_PRECISION_RATIO.mul(PRICE_PRECISION));\n\n\tconst effectiveGap = Math.max(\n\t\t0,\n\t\tlocalBaseAssetValue.sub(netBaseAssetValue).toNumber()\n\t);\n\n\tconst effectiveLeverage =\n\t\teffectiveGap / (Math.max(0, totalFeeMinusDistributions.toNumber()) + 1) +\n\t\t1 / QUOTE_PRECISION.toNumber();\n\n\treturn effectiveLeverage;\n}\n\nexport function calculateMaxSpread(marginRatioInitial: number): number {\n\tconst maxTargetSpread: number = new BN(marginRatioInitial)\n\t\t.mul(BID_ASK_SPREAD_PRECISION.div(MARGIN_PRECISION))\n\t\t.toNumber();\n\n\treturn maxTargetSpread;\n}\n\nexport function calculateVolSpreadBN(\n\tlastOracleConfPct: BN,\n\treservePrice: BN,\n\tmarkStd: BN,\n\toracleStd: BN,\n\tlongIntensity: BN,\n\tshortIntensity: BN,\n\tvolume24H: BN\n): [BN, BN] {\n\tconst marketAvgStdPct = markStd\n\t\t.add(oracleStd)\n\t\t.mul(PERCENTAGE_PRECISION)\n\t\t.div(reservePrice)\n\t\t.div(new BN(2));\n\tconst volSpread = BN.max(lastOracleConfPct, marketAvgStdPct.div(new BN(2)));\n\n\tconst clampMin = PERCENTAGE_PRECISION.div(new BN(100));\n\tconst clampMax = PERCENTAGE_PRECISION.mul(new BN(16)).div(new BN(10));\n\n\tconst longVolSpreadFactor = clampBN(\n\t\tlongIntensity.mul(PERCENTAGE_PRECISION).div(BN.max(ONE, volume24H)),\n\t\tclampMin,\n\t\tclampMax\n\t);\n\tconst shortVolSpreadFactor = clampBN(\n\t\tshortIntensity.mul(PERCENTAGE_PRECISION).div(BN.max(ONE, volume24H)),\n\t\tclampMin,\n\t\tclampMax\n\t);\n\n\tconst longVolSpread = BN.max(\n\t\tlastOracleConfPct,\n\t\tvolSpread.mul(longVolSpreadFactor).div(PERCENTAGE_PRECISION)\n\t);\n\tconst shortVolSpread = BN.max(\n\t\tlastOracleConfPct,\n\t\tvolSpread.mul(shortVolSpreadFactor).div(PERCENTAGE_PRECISION)\n\t);\n\n\treturn [longVolSpread, shortVolSpread];\n}\n\nexport function calculateSpreadBN(\n\tbaseSpread: number,\n\tlastOracleReservePriceSpreadPct: BN,\n\tlastOracleConfPct: BN,\n\tmaxSpread: number,\n\tquoteAssetReserve: BN,\n\tterminalQuoteAssetReserve: BN,\n\tpegMultiplier: BN,\n\tbaseAssetAmountWithAmm: BN,\n\treservePrice: BN,\n\ttotalFeeMinusDistributions: BN,\n\tnetRevenueSinceLastFunding: BN,\n\tbaseAssetReserve: BN,\n\tminBaseAssetReserve: BN,\n\tmaxBaseAssetReserve: BN,\n\tmarkStd: BN,\n\toracleStd: BN,\n\tlongIntensity: BN,\n\tshortIntensity: BN,\n\tvolume24H: BN,\n\treturnTerms = false\n) {\n\tassert(Number.isInteger(baseSpread));\n\tassert(Number.isInteger(maxSpread));\n\n\tconst spreadTerms = {\n\t\tlongVolSpread: 0,\n\t\tshortVolSpread: 0,\n\t\tlongSpreadwPS: 0,\n\t\tshortSpreadwPS: 0,\n\t\tmaxTargetSpread: 0,\n\t\tinventorySpreadScale: 0,\n\t\tlongSpreadwInvScale: 0,\n\t\tshortSpreadwInvScale: 0,\n\t\teffectiveLeverage: 0,\n\t\teffectiveLeverageCapped: 0,\n\t\tlongSpreadwEL: 0,\n\t\tshortSpreadwEL: 0,\n\t\trevenueRetreatAmount: 0,\n\t\thalfRevenueRetreatAmount: 0,\n\t\tlongSpreadwRevRetreat: 0,\n\t\tshortSpreadwRevRetreat: 0,\n\t\ttotalSpread: 0,\n\t\tlongSpread: 0,\n\t\tshortSpread: 0,\n\t};\n\n\tconst [longVolSpread, shortVolSpread] = calculateVolSpreadBN(\n\t\tlastOracleConfPct,\n\t\treservePrice,\n\t\tmarkStd,\n\t\toracleStd,\n\t\tlongIntensity,\n\t\tshortIntensity,\n\t\tvolume24H\n\t);\n\n\tspreadTerms.longVolSpread = longVolSpread.toNumber();\n\tspreadTerms.shortVolSpread = shortVolSpread.toNumber();\n\n\tlet longSpread = Math.max(baseSpread / 2, longVolSpread.toNumber());\n\tlet shortSpread = Math.max(baseSpread / 2, shortVolSpread.toNumber());\n\n\tif (lastOracleReservePriceSpreadPct.gt(ZERO)) {\n\t\tshortSpread = Math.max(\n\t\t\tshortSpread,\n\t\t\tlastOracleReservePriceSpreadPct.abs().toNumber() +\n\t\t\t\tshortVolSpread.toNumber()\n\t\t);\n\t} else if (lastOracleReservePriceSpreadPct.lt(ZERO)) {\n\t\tlongSpread = Math.max(\n\t\t\tlongSpread,\n\t\t\tlastOracleReservePriceSpreadPct.abs().toNumber() +\n\t\t\t\tlongVolSpread.toNumber()\n\t\t);\n\t}\n\tspreadTerms.longSpreadwPS = longSpread;\n\tspreadTerms.shortSpreadwPS = shortSpread;\n\n\tconst maxTargetSpread: number = Math.floor(\n\t\tMath.max(maxSpread, lastOracleReservePriceSpreadPct.abs().toNumber())\n\t);\n\n\tconst inventorySpreadScale = calculateInventoryScale(\n\t\tbaseAssetAmountWithAmm,\n\t\tbaseAssetReserve,\n\t\tminBaseAssetReserve,\n\t\tmaxBaseAssetReserve,\n\t\tbaseAssetAmountWithAmm.gt(ZERO) ? longSpread : shortSpread,\n\t\tmaxTargetSpread\n\t);\n\n\tif (baseAssetAmountWithAmm.gt(ZERO)) {\n\t\tlongSpread *= inventorySpreadScale;\n\t} else if (baseAssetAmountWithAmm.lt(ZERO)) {\n\t\tshortSpread *= inventorySpreadScale;\n\t}\n\tspreadTerms.maxTargetSpread = maxTargetSpread;\n\tspreadTerms.inventorySpreadScale = inventorySpreadScale;\n\tspreadTerms.longSpreadwInvScale = longSpread;\n\tspreadTerms.shortSpreadwInvScale = shortSpread;\n\n\tconst MAX_SPREAD_SCALE = 10;\n\tif (totalFeeMinusDistributions.gt(ZERO)) {\n\t\tconst effectiveLeverage = calculateEffectiveLeverage(\n\t\t\tbaseSpread,\n\t\t\tquoteAssetReserve,\n\t\t\tterminalQuoteAssetReserve,\n\t\t\tpegMultiplier,\n\t\t\tbaseAssetAmountWithAmm,\n\t\t\treservePrice,\n\t\t\ttotalFeeMinusDistributions\n\t\t);\n\t\tspreadTerms.effectiveLeverage = effectiveLeverage;\n\n\t\tconst spreadScale = Math.min(MAX_SPREAD_SCALE, 1 + effectiveLeverage);\n\t\tspreadTerms.effectiveLeverageCapped = spreadScale;\n\n\t\tif (baseAssetAmountWithAmm.gt(ZERO)) {\n\t\t\tlongSpread *= spreadScale;\n\t\t\tlongSpread = Math.floor(longSpread);\n\t\t} else {\n\t\t\tshortSpread *= spreadScale;\n\t\t\tshortSpread = Math.floor(shortSpread);\n\t\t}\n\t} else {\n\t\tlongSpread *= MAX_SPREAD_SCALE;\n\t\tshortSpread *= MAX_SPREAD_SCALE;\n\t}\n\n\tspreadTerms.longSpreadwEL = longSpread;\n\tspreadTerms.shortSpreadwEL = shortSpread;\n\n\tif (\n\t\tnetRevenueSinceLastFunding.lt(\n\t\t\tDEFAULT_REVENUE_SINCE_LAST_FUNDING_SPREAD_RETREAT\n\t\t)\n\t) {\n\t\tconst revenueRetreatAmount = Math.min(\n\t\t\tmaxTargetSpread / 10,\n\t\t\tMath.floor(\n\t\t\t\t(baseSpread * netRevenueSinceLastFunding.abs().toNumber()) /\n\t\t\t\t\tDEFAULT_REVENUE_SINCE_LAST_FUNDING_SPREAD_RETREAT.abs().toNumber()\n\t\t\t)\n\t\t);\n\t\tconst halfRevenueRetreatAmount = Math.floor(revenueRetreatAmount / 2);\n\n\t\tspreadTerms.revenueRetreatAmount = revenueRetreatAmount;\n\t\tspreadTerms.halfRevenueRetreatAmount = halfRevenueRetreatAmount;\n\n\t\tif (baseAssetAmountWithAmm.gt(ZERO)) {\n\t\t\tlongSpread += revenueRetreatAmount;\n\t\t\tshortSpread += halfRevenueRetreatAmount;\n\t\t} else if (baseAssetAmountWithAmm.lt(ZERO)) {\n\t\t\tlongSpread += halfRevenueRetreatAmount;\n\t\t\tshortSpread += revenueRetreatAmount;\n\t\t} else {\n\t\t\tlongSpread += halfRevenueRetreatAmount;\n\t\t\tshortSpread += halfRevenueRetreatAmount;\n\t\t}\n\t}\n\n\tspreadTerms.longSpreadwRevRetreat = longSpread;\n\tspreadTerms.shortSpreadwRevRetreat = shortSpread;\n\n\tconst totalSpread = longSpread + shortSpread;\n\tif (totalSpread > maxTargetSpread) {\n\t\tif (longSpread > shortSpread) {\n\t\t\tlongSpread = Math.ceil((longSpread * maxTargetSpread) / totalSpread);\n\t\t\tshortSpread = Math.floor(maxTargetSpread - longSpread);\n\t\t} else {\n\t\t\tshortSpread = Math.ceil((shortSpread * maxTargetSpread) / totalSpread);\n\t\t\tlongSpread = Math.floor(maxTargetSpread - shortSpread);\n\t\t}\n\t}\n\n\tspreadTerms.totalSpread = totalSpread;\n\tspreadTerms.longSpread = longSpread;\n\tspreadTerms.shortSpread = shortSpread;\n\n\tif (returnTerms) {\n\t\treturn spreadTerms;\n\t}\n\treturn [longSpread, shortSpread];\n}\n\nexport function calculateSpread(\n\tamm: AMM,\n\toraclePriceData: OraclePriceData,\n\tnow?: BN\n): [number, number] {\n\tif (amm.baseSpread == 0 || amm.curveUpdateIntensity == 0) {\n\t\treturn [amm.baseSpread / 2, amm.baseSpread / 2];\n\t}\n\n\tconst reservePrice = calculatePrice(\n\t\tamm.baseAssetReserve,\n\t\tamm.quoteAssetReserve,\n\t\tamm.pegMultiplier\n\t);\n\n\tconst targetPrice = oraclePriceData?.price || reservePrice;\n\tconst confInterval = oraclePriceData.confidence || ZERO;\n\tconst targetMarkSpreadPct = reservePrice\n\t\t.sub(targetPrice)\n\t\t.mul(BID_ASK_SPREAD_PRECISION)\n\t\t.div(reservePrice);\n\n\tconst confIntervalPct = confInterval\n\t\t.mul(BID_ASK_SPREAD_PRECISION)\n\t\t.div(reservePrice);\n\n\tnow = now || new BN(new Date().getTime() / 1000); //todo\n\tconst liveOracleStd = calculateLiveOracleStd(amm, oraclePriceData, now);\n\n\tconst spreads = calculateSpreadBN(\n\t\tamm.baseSpread,\n\t\ttargetMarkSpreadPct,\n\t\tconfIntervalPct,\n\t\tamm.maxSpread,\n\t\tamm.quoteAssetReserve,\n\t\tamm.terminalQuoteAssetReserve,\n\t\tamm.pegMultiplier,\n\t\tamm.baseAssetAmountWithAmm,\n\t\treservePrice,\n\t\tamm.totalFeeMinusDistributions,\n\t\tamm.netRevenueSinceLastFunding,\n\t\tamm.baseAssetReserve,\n\t\tamm.minBaseAssetReserve,\n\t\tamm.maxBaseAssetReserve,\n\t\tamm.markStd,\n\t\tliveOracleStd,\n\t\tamm.longIntensityVolume,\n\t\tamm.shortIntensityVolume,\n\t\tamm.volume24H\n\t);\n\tconst longSpread = spreads[0];\n\tconst shortSpread = spreads[1];\n\n\treturn [longSpread, shortSpread];\n}\n\nexport function calculateSpreadReserves(\n\tamm: AMM,\n\toraclePriceData: OraclePriceData,\n\tnow?: BN\n) {\n\tfunction calculateSpreadReserve(\n\t\tspread: number,\n\t\tdirection: PositionDirection,\n\t\tamm: AMM\n\t): {\n\t\tbaseAssetReserve;\n\t\tquoteAssetReserve;\n\t} {\n\t\tif (spread === 0) {\n\t\t\treturn {\n\t\t\t\tbaseAssetReserve: amm.baseAssetReserve,\n\t\t\t\tquoteAssetReserve: amm.quoteAssetReserve,\n\t\t\t};\n\t\t}\n\n\t\tconst quoteAssetReserveDelta = amm.quoteAssetReserve.div(\n\t\t\tBID_ASK_SPREAD_PRECISION.div(new BN(spread / 2))\n\t\t);\n\n\t\tlet quoteAssetReserve;\n\t\tif (isVariant(direction, 'long')) {\n\t\t\tquoteAssetReserve = amm.quoteAssetReserve.add(quoteAssetReserveDelta);\n\t\t} else {\n\t\t\tquoteAssetReserve = amm.quoteAssetReserve.sub(quoteAssetReserveDelta);\n\t\t}\n\n\t\tconst baseAssetReserve = amm.sqrtK.mul(amm.sqrtK).div(quoteAssetReserve);\n\t\treturn {\n\t\t\tbaseAssetReserve,\n\t\t\tquoteAssetReserve,\n\t\t};\n\t}\n\n\tconst [longSpread, shortSpread] = calculateSpread(amm, oraclePriceData, now);\n\tconst askReserves = calculateSpreadReserve(\n\t\tlongSpread,\n\t\tPositionDirection.LONG,\n\t\tamm\n\t);\n\tconst bidReserves = calculateSpreadReserve(\n\t\tshortSpread,\n\t\tPositionDirection.SHORT,\n\t\tamm\n\t);\n\n\treturn [bidReserves, askReserves];\n}\n\n/**\n * Helper function calculating constant product curve output. Agnostic to whether input asset is quote or base\n *\n * @param inputAssetReserve\n * @param swapAmount\n * @param swapDirection\n * @param invariant\n * @returns newInputAssetReserve and newOutputAssetReserve after swap. : Precision AMM_RESERVE_PRECISION\n */\nexport function calculateSwapOutput(\n\tinputAssetReserve: BN,\n\tswapAmount: BN,\n\tswapDirection: SwapDirection,\n\tinvariant: BN\n): [BN, BN] {\n\tlet newInputAssetReserve;\n\tif (swapDirection === SwapDirection.ADD) {\n\t\tnewInputAssetReserve = inputAssetReserve.add(swapAmount);\n\t} else {\n\t\tnewInputAssetReserve = inputAssetReserve.sub(swapAmount);\n\t}\n\tconst newOutputAssetReserve = invariant.div(newInputAssetReserve);\n\treturn [newInputAssetReserve, newOutputAssetReserve];\n}\n\n/**\n * Translate long/shorting quote/base asset into amm operation\n *\n * @param inputAssetType\n * @param positionDirection\n */\nexport function getSwapDirection(\n\tinputAssetType: AssetType,\n\tpositionDirection: PositionDirection\n): SwapDirection {\n\tif (isVariant(positionDirection, 'long') && inputAssetType === 'base') {\n\t\treturn SwapDirection.REMOVE;\n\t}\n\n\tif (isVariant(positionDirection, 'short') && inputAssetType === 'quote') {\n\t\treturn SwapDirection.REMOVE;\n\t}\n\n\treturn SwapDirection.ADD;\n}\n\n/**\n * Helper function calculating terminal price of amm\n *\n * @param market\n * @returns cost : Precision PRICE_PRECISION\n */\nexport function calculateTerminalPrice(market: PerpMarketAccount) {\n\tconst directionToClose = market.amm.baseAssetAmountWithAmm.gt(ZERO)\n\t\t? PositionDirection.SHORT\n\t\t: PositionDirection.LONG;\n\n\tconst [newQuoteAssetReserve, newBaseAssetReserve] =\n\t\tcalculateAmmReservesAfterSwap(\n\t\t\tmarket.amm,\n\t\t\t'base',\n\t\t\tmarket.amm.baseAssetAmountWithAmm.abs(),\n\t\t\tgetSwapDirection('base', directionToClose)\n\t\t);\n\n\tconst terminalPrice = newQuoteAssetReserve\n\t\t.mul(PRICE_PRECISION)\n\t\t.mul(market.amm.pegMultiplier)\n\t\t.div(PEG_PRECISION)\n\t\t.div(newBaseAssetReserve);\n\n\treturn terminalPrice;\n}\n\nexport function calculateMaxBaseAssetAmountToTrade(\n\tamm: AMM,\n\tlimit_price: BN,\n\tdirection: PositionDirection,\n\toraclePriceData?: OraclePriceData,\n\tnow?: BN\n): [BN, PositionDirection] {\n\tconst invariant = amm.sqrtK.mul(amm.sqrtK);\n\n\tconst newBaseAssetReserveSquared = invariant\n\t\t.mul(PRICE_PRECISION)\n\t\t.mul(amm.pegMultiplier)\n\t\t.div(limit_price)\n\t\t.div(PEG_PRECISION);\n\n\tconst newBaseAssetReserve = squareRootBN(newBaseAssetReserveSquared);\n\tconst [shortSpreadReserves, longSpreadReserves] = calculateSpreadReserves(\n\t\tamm,\n\t\toraclePriceData,\n\t\tnow\n\t);\n\n\tconst baseAssetReserveBefore: BN = isVariant(direction, 'long')\n\t\t? longSpreadReserves.baseAssetReserve\n\t\t: shortSpreadReserves.baseAssetReserve;\n\n\tif (newBaseAssetReserve.gt(baseAssetReserveBefore)) {\n\t\treturn [\n\t\t\tnewBaseAssetReserve.sub(baseAssetReserveBefore),\n\t\t\tPositionDirection.SHORT,\n\t\t];\n\t} else if (newBaseAssetReserve.lt(baseAssetReserveBefore)) {\n\t\treturn [\n\t\t\tbaseAssetReserveBefore.sub(newBaseAssetReserve),\n\t\t\tPositionDirection.LONG,\n\t\t];\n\t} else {\n\t\tconsole.log('tradeSize Too Small');\n\t\treturn [new BN(0), PositionDirection.LONG];\n\t}\n}\n\nexport function calculateQuoteAssetAmountSwapped(\n\tquoteAssetReserves: BN,\n\tpegMultiplier: BN,\n\tswapDirection: SwapDirection\n): BN {\n\tif (isVariant(swapDirection, 'remove')) {\n\t\tquoteAssetReserves = quoteAssetReserves.add(ONE);\n\t}\n\n\tlet quoteAssetAmount = quoteAssetReserves\n\t\t.mul(pegMultiplier)\n\t\t.div(AMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO);\n\n\tif (isVariant(swapDirection, 'remove')) {\n\t\tquoteAssetAmount = quoteAssetAmount.add(ONE);\n\t}\n\n\treturn quoteAssetAmount;\n}\n\nexport function calculateMaxBaseAssetAmountFillable(\n\tamm: AMM,\n\torderDirection: PositionDirection\n): BN {\n\tconst maxFillSize = amm.baseAssetReserve.div(\n\t\tnew BN(amm.maxFillReserveFraction)\n\t);\n\tlet maxBaseAssetAmountOnSide: BN;\n\tif (isVariant(orderDirection, 'long')) {\n\t\tmaxBaseAssetAmountOnSide = BN.max(\n\t\t\tZERO,\n\t\t\tamm.baseAssetReserve.sub(amm.minBaseAssetReserve)\n\t\t);\n\t} else {\n\t\tmaxBaseAssetAmountOnSide = BN.max(\n\t\t\tZERO,\n\t\t\tamm.maxBaseAssetReserve.sub(amm.baseAssetReserve)\n\t\t);\n\t}\n\n\treturn standardizeBaseAssetAmount(\n\t\tBN.min(maxFillSize, maxBaseAssetAmountOnSide),\n\t\tamm.orderStepSize\n\t);\n}\n","export function assert(condition: boolean, error?: string): void {\n\tif (!condition) {\n\t\tthrow new Error(error || 'Unspecified AssertionError');\n\t}\n}\n","import { BN } from '@project-serum/anchor';\nimport { assert } from '../assert/assert';\nimport {\n\tPRICE_PRECISION,\n\tAMM_RESERVE_PRECISION,\n\tPEG_PRECISION,\n\tAMM_TO_QUOTE_PRECISION_RATIO,\n\tPRICE_DIV_PEG,\n\tQUOTE_PRECISION,\n\tZERO,\n} from '../constants/numericConstants';\nimport { AMM } from '../types';\n/**\n * Helper function calculating adjust k cost\n * @param amm\n * @param numerator\n * @param denomenator\n * @returns cost : Precision QUOTE_ASSET_PRECISION\n */\nexport function calculateAdjustKCost(\n\tamm: AMM,\n\tnumerator: BN,\n\tdenomenator: BN\n): BN {\n\t// const k = market.amm.sqrtK.mul(market.amm.sqrtK);\n\tconst x = amm.baseAssetReserve;\n\tconst y = amm.quoteAssetReserve;\n\n\tconst d = amm.baseAssetAmountWithAmm;\n\tconst Q = amm.pegMultiplier;\n\n\tconst quoteScale = y.mul(d).mul(Q); //.div(AMM_RESERVE_PRECISION);\n\n\tconst p = numerator.mul(PRICE_PRECISION).div(denomenator);\n\n\tconst cost = quoteScale\n\t\t.div(x.add(d))\n\t\t.sub(\n\t\t\tquoteScale\n\t\t\t\t.mul(p)\n\t\t\t\t.div(PRICE_PRECISION)\n\t\t\t\t.div(x.mul(p).div(PRICE_PRECISION).add(d))\n\t\t)\n\t\t.div(AMM_TO_QUOTE_PRECISION_RATIO)\n\t\t.div(PEG_PRECISION);\n\n\treturn cost.mul(new BN(-1));\n}\n\n/**\n * Helper function calculating adjust pegMultiplier (repeg) cost\n *\n * @param amm\n * @param newPeg\n * @returns cost : Precision QUOTE_ASSET_PRECISION\n */\nexport function calculateRepegCost(amm: AMM, newPeg: BN): BN {\n\tconst dqar = amm.quoteAssetReserve.sub(amm.terminalQuoteAssetReserve);\n\tconst cost = dqar\n\t\t.mul(newPeg.sub(amm.pegMultiplier))\n\t\t.div(AMM_TO_QUOTE_PRECISION_RATIO)\n\t\t.div(PEG_PRECISION);\n\treturn cost;\n}\n\nexport function calculateBudgetedKBN(\n\tx: BN,\n\ty: BN,\n\tbudget: BN,\n\tQ: BN,\n\td: BN\n): [BN, BN] {\n\tassert(Q.gt(new BN(0)));\n\tconst C = budget.mul(new BN(-1));\n\n\tlet dSign = new BN(1);\n\tif (d.lt(new BN(0))) {\n\t\tdSign = new BN(-1);\n\t}\n\tconst pegged_y_d_d = y\n\t\t.mul(d)\n\t\t.mul(d)\n\t\t.mul(Q)\n\t\t.div(AMM_RESERVE_PRECISION)\n\t\t.div(AMM_RESERVE_PRECISION)\n\t\t.div(PEG_PRECISION);\n\n\tconst numer1 = pegged_y_d_d;\n\tconst numer2 = C.mul(d)\n\t\t.div(QUOTE_PRECISION)\n\t\t.mul(x.add(d))\n\t\t.div(AMM_RESERVE_PRECISION)\n\t\t.mul(dSign);\n\n\tconst denom1 = C.mul(x)\n\t\t.mul(x.add(d))\n\t\t.div(AMM_RESERVE_PRECISION)\n\t\t.div(QUOTE_PRECISION);\n\tconst denom2 = pegged_y_d_d;\n\n\t// protocol is spending to increase k\n\tif (C.lt(ZERO)) {\n\t\t// thus denom1 is negative and solution is unstable\n\t\tif (denom1.abs().gt(denom2.abs())) {\n\t\t\tconsole.log('denom1 > denom2', denom1.toString(), denom2.toString());\n\t\t\tconsole.log('budget cost exceeds stable K solution');\n\t\t\treturn [new BN(10000), new BN(1)];\n\t\t}\n\t}\n\n\tconst numerator = numer1.sub(numer2).div(AMM_TO_QUOTE_PRECISION_RATIO);\n\tconst denominator = denom1.add(denom2).div(AMM_TO_QUOTE_PRECISION_RATIO);\n\n\treturn [numerator, denominator];\n}\n\nexport function calculateBudgetedK(amm: AMM, cost: BN): [BN, BN] {\n\t// wolframalpha.com\n\t// (1/(x+d) - p/(x*p+d))*y*d*Q = C solve for p\n\t// p = (d(y*d*Q - C(x+d))) / (C*x(x+d) + y*d*d*Q)\n\n\t// numer\n\t//   =  y*d*d*Q - Cxd - Cdd\n\t//   =  y/x*Q*d*d - Cd - Cd/x\n\t//   = mark      - C/d - C/(x)\n\t//   =  mark/C    - 1/d - 1/x\n\n\t// denom\n\t// = C*x*x + C*x*d + y*d*d*Q\n\t// = x/d**2 + 1 / d + mark/C\n\n\t// todo: assumes k = x * y\n\t// otherwise use: (y(1-p) + (kp^2/(x*p+d)) - k/(x+d)) * Q = C solve for p\n\n\tconst x = amm.baseAssetReserve;\n\tconst y = amm.quoteAssetReserve;\n\n\tconst d = amm.baseAssetAmountWithAmm;\n\tconst Q = amm.pegMultiplier;\n\n\tconst [numerator, denominator] = calculateBudgetedKBN(x, y, cost, Q, d);\n\n\treturn [numerator, denominator];\n}\n\nexport function calculateBudgetedPeg(amm: AMM, cost: BN, targetPrice: BN): BN {\n\t// wolframalpha.com\n\t// (1/(x+d) - p/(x*p+d))*y*d*Q = C solve for p\n\t// p = (d(y*d*Q - C(x+d))) / (C*x(x+d) + y*y*d*Q)\n\n\t// todo: assumes k = x * y\n\t// otherwise use: (y(1-p) + (kp^2/(x*p+d)) - k/(x+d)) * Q = C solve for p\n\tconst targetPeg = targetPrice\n\t\t.mul(amm.baseAssetReserve)\n\t\t.div(amm.quoteAssetReserve)\n\t\t.div(PRICE_DIV_PEG);\n\n\tconst k = amm.sqrtK.mul(amm.sqrtK);\n\tconst x = amm.baseAssetReserve;\n\tconst y = amm.quoteAssetReserve;\n\n\tconst d = amm.baseAssetAmountWithAmm;\n\tconst Q = amm.pegMultiplier;\n\n\tconst C = cost.mul(new BN(-1));\n\n\tconst deltaQuoteAssetReserves = y.sub(k.div(x.add(d)));\n\tconst pegChangeDirection = targetPeg.sub(Q);\n\n\tconst useTargetPeg =\n\t\t(deltaQuoteAssetReserves.lt(ZERO) && pegChangeDirection.gt(ZERO)) ||\n\t\t(deltaQuoteAssetReserves.gt(ZERO) && pegChangeDirection.lt(ZERO));\n\n\tif (deltaQuoteAssetReserves.eq(ZERO) || useTargetPeg) {\n\t\treturn targetPeg;\n\t}\n\n\tconst deltaPegMultiplier = C.mul(PRICE_PRECISION).div(\n\t\tdeltaQuoteAssetReserves.div(AMM_TO_QUOTE_PRECISION_RATIO)\n\t);\n\tconst newPeg = Q.sub(\n\t\tdeltaPegMultiplier.mul(PEG_PRECISION).div(PRICE_PRECISION)\n\t);\n\n\treturn newPeg;\n}\n","import { AMM, OracleGuardRails } from '../types';\nimport { OraclePriceData } from '../oracles/types';\nimport {\n\tBID_ASK_SPREAD_PRECISION,\n\tMARGIN_PRECISION,\n\tPRICE_PRECISION,\n\tONE,\n\tZERO,\n} from '../constants/numericConstants';\nimport { BN, PerpMarketAccount } from '../index';\nimport { assert } from '../assert/assert';\n\nexport function oraclePriceBands(\n\tmarket: PerpMarketAccount,\n\toraclePriceData: OraclePriceData\n): [BN, BN] {\n\tconst maxPercentDiff =\n\t\tmarket.marginRatioInitial - market.marginRatioMaintenance;\n\tconst offset = oraclePriceData.price\n\t\t.mul(new BN(maxPercentDiff))\n\t\t.div(MARGIN_PRECISION);\n\n\tassert(offset.gt(ZERO));\n\n\treturn [oraclePriceData.price.sub(offset), oraclePriceData.price.add(offset)];\n}\n\nexport function isOracleValid(\n\tamm: AMM,\n\toraclePriceData: OraclePriceData,\n\toracleGuardRails: OracleGuardRails,\n\tslot: number\n): boolean {\n\tconst isOraclePriceNonPositive = oraclePriceData.price.lte(ZERO);\n\tconst isOraclePriceTooVolatile =\n\t\toraclePriceData.price\n\t\t\t.div(BN.max(ONE, amm.historicalOracleData.lastOraclePriceTwap))\n\t\t\t.gt(oracleGuardRails.validity.tooVolatileRatio) ||\n\t\tamm.historicalOracleData.lastOraclePriceTwap\n\t\t\t.div(BN.max(ONE, oraclePriceData.price))\n\t\t\t.gt(oracleGuardRails.validity.tooVolatileRatio);\n\n\tconst isConfidenceTooLarge = new BN(amm.baseSpread)\n\t\t.add(BN.max(ONE, oraclePriceData.confidence))\n\t\t.mul(BID_ASK_SPREAD_PRECISION)\n\t\t.div(oraclePriceData.price)\n\t\t.gt(new BN(amm.maxSpread));\n\n\tconst oracleIsStale = oraclePriceData.slot\n\t\t.sub(new BN(slot))\n\t\t.gt(oracleGuardRails.validity.slotsBeforeStaleForAmm);\n\n\treturn !(\n\t\t!oraclePriceData.hasSufficientNumberOfDataPoints ||\n\t\toracleIsStale ||\n\t\tisOraclePriceNonPositive ||\n\t\tisOraclePriceTooVolatile ||\n\t\tisConfidenceTooLarge\n\t);\n}\n\nexport function isOracleTooDivergent(\n\tamm: AMM,\n\toraclePriceData: OraclePriceData,\n\toracleGuardRails: OracleGuardRails,\n\tnow: BN\n): boolean {\n\tconst sinceLastUpdate = now.sub(\n\t\tamm.historicalOracleData.lastOraclePriceTwapTs\n\t);\n\tconst sinceStart = BN.max(ZERO, new BN(60 * 5).sub(sinceLastUpdate));\n\tconst oracleTwap5min = amm.historicalOracleData.lastOraclePriceTwap5Min\n\t\t.mul(sinceStart)\n\t\t.add(oraclePriceData.price)\n\t\t.mul(sinceLastUpdate)\n\t\t.div(sinceStart.add(sinceLastUpdate));\n\n\tconst oracleSpread = oracleTwap5min.sub(oraclePriceData.price);\n\tconst oracleSpreadPct = oracleSpread.mul(PRICE_PRECISION).div(oracleTwap5min);\n\n\tconst tooDivergent = oracleSpreadPct\n\t\t.abs()\n\t\t.gte(\n\t\t\tBID_ASK_SPREAD_PRECISION.mul(\n\t\t\t\toracleGuardRails.priceDivergence.markOracleDivergenceNumerator\n\t\t\t).div(oracleGuardRails.priceDivergence.markOracleDivergenceDenominator)\n\t\t);\n\n\treturn tooDivergent;\n}\n\nexport function calculateLiveOracleTwap(\n\tamm: AMM,\n\toraclePriceData: OraclePriceData,\n\tnow: BN\n): BN {\n\tconst sinceLastUpdate = now.sub(\n\t\tamm.historicalOracleData.lastOraclePriceTwapTs\n\t);\n\tconst sinceStart = BN.max(ZERO, amm.fundingPeriod.sub(sinceLastUpdate));\n\n\tconst clampRange = amm.historicalOracleData.lastOraclePriceTwap.div(\n\t\tnew BN(3)\n\t);\n\n\tconst clampedOraclePrice = BN.min(\n\t\tamm.historicalOracleData.lastOraclePriceTwap.add(clampRange),\n\t\tBN.max(\n\t\t\toraclePriceData.price,\n\t\t\tamm.historicalOracleData.lastOraclePriceTwap.sub(clampRange)\n\t\t)\n\t);\n\n\tconst newOracleTwap = amm.historicalOracleData.lastOraclePriceTwap\n\t\t.mul(sinceStart)\n\t\t.add(clampedOraclePrice.mul(sinceLastUpdate))\n\t\t.div(sinceStart.add(sinceLastUpdate));\n\n\treturn newOracleTwap;\n}\n\nexport function calculateLiveOracleStd(\n\tamm: AMM,\n\toraclePriceData: OraclePriceData,\n\tnow: BN\n): BN {\n\tconst sinceLastUpdate = now.sub(\n\t\tamm.historicalOracleData.lastOraclePriceTwapTs\n\t);\n\tconst sinceStart = BN.max(ZERO, amm.fundingPeriod.sub(sinceLastUpdate));\n\n\tconst liveOracleTwap = calculateLiveOracleTwap(amm, oraclePriceData, now);\n\n\tconst priceDeltaVsTwap = oraclePriceData.price.sub(liveOracleTwap).abs();\n\n\tconst oracleStd = priceDeltaVsTwap.add(\n\t\tamm.oracleStd.mul(sinceStart).div(sinceStart.add(sinceLastUpdate))\n\t);\n\n\treturn oracleStd;\n}\n","import { squareRootBN } from './utils';\nimport {\n\tSPOT_MARKET_WEIGHT_PRECISION,\n\tSPOT_MARKET_IMF_PRECISION,\n\tZERO,\n\tBID_ASK_SPREAD_PRECISION,\n\tAMM_RESERVE_PRECISION,\n} from '../constants/numericConstants';\nimport { BN } from '@project-serum/anchor';\nimport { OraclePriceData } from '../oracles/types';\nimport { PerpMarketAccount, PerpPosition } from '..';\nimport { isVariant } from '../types';\nimport { assert } from '../assert/assert';\n\nexport function calculateSizePremiumLiabilityWeight(\n\tsize: BN, // AMM_RESERVE_PRECISION\n\timfFactor: BN,\n\tliabilityWeight: BN,\n\tprecision: BN\n): BN {\n\tif (imfFactor.eq(ZERO)) {\n\t\treturn liabilityWeight;\n\t}\n\n\tconst sizeSqrt = squareRootBN(size.mul(new BN(10)).add(new BN(1))); //1e9 -> 1e10 -> 1e5\n\n\tconst denom0 = BN.max(new BN(1), SPOT_MARKET_IMF_PRECISION.div(imfFactor));\n\tassert(denom0.gt(ZERO));\n\tconst liabilityWeightNumerator = liabilityWeight.sub(\n\t\tliabilityWeight.div(\n\t\t\tBN.max(new BN(1), SPOT_MARKET_IMF_PRECISION.div(imfFactor))\n\t\t)\n\t);\n\n\tconst denom = new BN(100_000).mul(SPOT_MARKET_IMF_PRECISION).div(precision);\n\tassert(denom.gt(ZERO));\n\n\tconst sizePremiumLiabilityWeight = liabilityWeightNumerator.add(\n\t\tsizeSqrt // 1e5\n\t\t\t.mul(imfFactor)\n\t\t\t.div(denom) // 1e5\n\t);\n\n\tconst maxLiabilityWeight = BN.max(\n\t\tliabilityWeight,\n\t\tsizePremiumLiabilityWeight\n\t);\n\treturn maxLiabilityWeight;\n}\n\nexport function calculateSizeDiscountAssetWeight(\n\tsize: BN, // AMM_RESERVE_PRECISION\n\timfFactor: BN,\n\tassetWeight: BN\n): BN {\n\tif (imfFactor.eq(ZERO)) {\n\t\treturn assetWeight;\n\t}\n\n\tconst sizeSqrt = squareRootBN(size.mul(new BN(10)).add(new BN(1))); //1e9 -> 1e10 -> 1e5\n\tconst imfNumerator = SPOT_MARKET_IMF_PRECISION.add(\n\t\tSPOT_MARKET_IMF_PRECISION.div(new BN(10))\n\t);\n\n\tconst sizeDiscountAssetWeight = imfNumerator\n\t\t.mul(SPOT_MARKET_WEIGHT_PRECISION)\n\t\t.div(\n\t\t\tSPOT_MARKET_IMF_PRECISION.add(\n\t\t\t\tsizeSqrt // 1e5\n\t\t\t\t\t.mul(imfFactor)\n\t\t\t\t\t.div(new BN(100_000)) // 1e5\n\t\t\t)\n\t\t);\n\n\tconst minAssetWeight = BN.min(assetWeight, sizeDiscountAssetWeight);\n\n\treturn minAssetWeight;\n}\n\nexport function calculateOraclePriceForPerpMargin(\n\tperpPosition: PerpPosition,\n\tmarket: PerpMarketAccount,\n\toraclePriceData: OraclePriceData\n): BN {\n\tconst oraclePriceOffset = BN.min(\n\t\tnew BN(market.amm.maxSpread)\n\t\t\t.mul(oraclePriceData.price)\n\t\t\t.div(BID_ASK_SPREAD_PRECISION),\n\t\toraclePriceData.confidence.add(\n\t\t\tnew BN(market.amm.baseSpread)\n\t\t\t\t.mul(oraclePriceData.price)\n\t\t\t\t.div(BID_ASK_SPREAD_PRECISION)\n\t\t)\n\t);\n\n\tlet marginPrice: BN;\n\tif (perpPosition.baseAssetAmount.gt(ZERO)) {\n\t\tmarginPrice = oraclePriceData.price.sub(oraclePriceOffset);\n\t} else {\n\t\tmarginPrice = oraclePriceData.price.add(oraclePriceOffset);\n\t}\n\n\treturn marginPrice;\n}\n\nexport function calculateBaseAssetValueWithOracle(\n\tmarket: PerpMarketAccount,\n\tperpPosition: PerpPosition,\n\toraclePriceData: OraclePriceData\n): BN {\n\tlet price = oraclePriceData.price;\n\tif (isVariant(market.status, 'settlement')) {\n\t\tprice = market.expiryPrice;\n\t}\n\n\treturn perpPosition.baseAssetAmount\n\t\t.abs()\n\t\t.mul(price)\n\t\t.div(AMM_RESERVE_PRECISION);\n}\n\nexport function calculateWorstCaseBaseAssetAmount(\n\tperpPosition: PerpPosition\n): BN {\n\tconst allBids = perpPosition.baseAssetAmount.add(perpPosition.openBids);\n\tconst allAsks = perpPosition.baseAssetAmount.add(perpPosition.openAsks);\n\n\tif (allBids.abs().gt(allAsks.abs())) {\n\t\treturn allBids;\n\t} else {\n\t\treturn allAsks;\n\t}\n}\n","import { BN } from '@project-serum/anchor';\nimport {\n\tPerpMarketAccount,\n\tPositionDirection,\n\tMarginCategory,\n\tSpotMarketAccount,\n\tSpotBalanceType,\n} from '../types';\nimport {\n\tcalculateAmmReservesAfterSwap,\n\tcalculatePrice,\n\tcalculateUpdatedAMMSpreadReserves,\n\tgetSwapDirection,\n\tcalculateUpdatedAMM,\n} from './amm';\nimport {\n\tcalculateSizeDiscountAssetWeight,\n\tcalculateSizePremiumLiabilityWeight,\n} from './margin';\nimport { OraclePriceData } from '../oracles/types';\nimport {\n\tBASE_PRECISION,\n\tMARGIN_PRECISION,\n\tPRICE_TO_QUOTE_PRECISION,\n\tZERO,\n} from '../constants/numericConstants';\nimport { getTokenAmount } from './spotBalance';\n\n/**\n * Calculates market mark price\n *\n * @param market\n * @return markPrice : Precision PRICE_PRECISION\n */\nexport function calculateReservePrice(\n\tmarket: PerpMarketAccount,\n\toraclePriceData: OraclePriceData\n): BN {\n\tconst newAmm = calculateUpdatedAMM(market.amm, oraclePriceData);\n\treturn calculatePrice(\n\t\tnewAmm.baseAssetReserve,\n\t\tnewAmm.quoteAssetReserve,\n\t\tnewAmm.pegMultiplier\n\t);\n}\n\n/**\n * Calculates market bid price\n *\n * @param market\n * @return bidPrice : Precision PRICE_PRECISION\n */\nexport function calculateBidPrice(\n\tmarket: PerpMarketAccount,\n\toraclePriceData: OraclePriceData\n): BN {\n\tconst { baseAssetReserve, quoteAssetReserve, newPeg } =\n\t\tcalculateUpdatedAMMSpreadReserves(\n\t\t\tmarket.amm,\n\t\t\tPositionDirection.SHORT,\n\t\t\toraclePriceData\n\t\t);\n\n\treturn calculatePrice(baseAssetReserve, quoteAssetReserve, newPeg);\n}\n\n/**\n * Calculates market ask price\n *\n * @param market\n * @return askPrice : Precision PRICE_PRECISION\n */\nexport function calculateAskPrice(\n\tmarket: PerpMarketAccount,\n\toraclePriceData: OraclePriceData\n): BN {\n\tconst { baseAssetReserve, quoteAssetReserve, newPeg } =\n\t\tcalculateUpdatedAMMSpreadReserves(\n\t\t\tmarket.amm,\n\t\t\tPositionDirection.LONG,\n\t\t\toraclePriceData\n\t\t);\n\n\treturn calculatePrice(baseAssetReserve, quoteAssetReserve, newPeg);\n}\n\nexport function calculateNewMarketAfterTrade(\n\tbaseAssetAmount: BN,\n\tdirection: PositionDirection,\n\tmarket: PerpMarketAccount\n): PerpMarketAccount {\n\tconst [newQuoteAssetReserve, newBaseAssetReserve] =\n\t\tcalculateAmmReservesAfterSwap(\n\t\t\tmarket.amm,\n\t\t\t'base',\n\t\t\tbaseAssetAmount.abs(),\n\t\t\tgetSwapDirection('base', direction)\n\t\t);\n\n\tconst newAmm = Object.assign({}, market.amm);\n\tconst newMarket = Object.assign({}, market);\n\tnewMarket.amm = newAmm;\n\tnewMarket.amm.quoteAssetReserve = newQuoteAssetReserve;\n\tnewMarket.amm.baseAssetReserve = newBaseAssetReserve;\n\n\treturn newMarket;\n}\n\nexport function calculateOracleReserveSpread(\n\tmarket: PerpMarketAccount,\n\toraclePriceData: OraclePriceData\n): BN {\n\tconst reservePrice = calculateReservePrice(market, oraclePriceData);\n\treturn calculateOracleSpread(reservePrice, oraclePriceData);\n}\n\nexport function calculateOracleSpread(\n\tprice: BN,\n\toraclePriceData: OraclePriceData\n): BN {\n\treturn price.sub(oraclePriceData.price);\n}\n\nexport function calculateMarketMarginRatio(\n\tmarket: PerpMarketAccount,\n\tsize: BN,\n\tmarginCategory: MarginCategory\n): number {\n\tlet marginRatio;\n\tswitch (marginCategory) {\n\t\tcase 'Initial':\n\t\t\tmarginRatio = calculateSizePremiumLiabilityWeight(\n\t\t\t\tsize,\n\t\t\t\tnew BN(market.imfFactor),\n\t\t\t\tnew BN(market.marginRatioInitial),\n\t\t\t\tMARGIN_PRECISION\n\t\t\t).toNumber();\n\t\t\tbreak;\n\t\tcase 'Maintenance':\n\t\t\tmarginRatio = calculateSizePremiumLiabilityWeight(\n\t\t\t\tsize,\n\t\t\t\tnew BN(market.imfFactor),\n\t\t\t\tnew BN(market.marginRatioMaintenance),\n\t\t\t\tMARGIN_PRECISION\n\t\t\t).toNumber();\n\t\t\tbreak;\n\t}\n\n\treturn marginRatio;\n}\n\nexport function calculateUnrealizedAssetWeight(\n\tmarket: PerpMarketAccount,\n\tquoteSpotMarket: SpotMarketAccount,\n\tunrealizedPnl: BN,\n\tmarginCategory: MarginCategory,\n\toraclePriceData: OraclePriceData\n): BN {\n\tlet assetWeight: BN;\n\tswitch (marginCategory) {\n\t\tcase 'Initial':\n\t\t\tassetWeight = new BN(market.unrealizedPnlInitialAssetWeight);\n\n\t\t\tif (market.unrealizedPnlMaxImbalance.gt(ZERO)) {\n\t\t\t\tconst netUnsettledPnl = calculateNetUserPnlImbalance(\n\t\t\t\t\tmarket,\n\t\t\t\t\tquoteSpotMarket,\n\t\t\t\t\toraclePriceData\n\t\t\t\t);\n\t\t\t\tif (netUnsettledPnl.gt(market.unrealizedPnlMaxImbalance)) {\n\t\t\t\t\tassetWeight = assetWeight\n\t\t\t\t\t\t.mul(market.unrealizedPnlMaxImbalance)\n\t\t\t\t\t\t.div(netUnsettledPnl);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassetWeight = calculateSizeDiscountAssetWeight(\n\t\t\t\tunrealizedPnl,\n\t\t\t\tnew BN(market.unrealizedPnlImfFactor),\n\t\t\t\tassetWeight\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'Maintenance':\n\t\t\tassetWeight = new BN(market.unrealizedPnlMaintenanceAssetWeight);\n\t\t\tbreak;\n\t}\n\n\treturn assetWeight;\n}\n\nexport function calculateMarketAvailablePNL(\n\tperpMarket: PerpMarketAccount,\n\tspotMarket: SpotMarketAccount\n): BN {\n\treturn getTokenAmount(\n\t\tperpMarket.pnlPool.scaledBalance,\n\t\tspotMarket,\n\t\tSpotBalanceType.DEPOSIT\n\t);\n}\n\nexport function calculateNetUserPnl(\n\tperpMarket: PerpMarketAccount,\n\toraclePriceData: OraclePriceData\n): BN {\n\tconst netUserPositionValue = perpMarket.amm.baseAssetAmountWithAmm\n\t\t.mul(oraclePriceData.price)\n\t\t.div(BASE_PRECISION)\n\t\t.div(PRICE_TO_QUOTE_PRECISION);\n\n\tconst netUserCostBasis = perpMarket.amm.quoteAssetAmount;\n\n\tconst netUserPnl = netUserPositionValue.add(netUserCostBasis);\n\n\treturn netUserPnl;\n}\n\nexport function calculateNetUserPnlImbalance(\n\tperpMarket: PerpMarketAccount,\n\tspotMarket: SpotMarketAccount,\n\toraclePriceData: OraclePriceData\n): BN {\n\tconst netUserPnl = calculateNetUserPnl(perpMarket, oraclePriceData);\n\n\tconst pnlPool = getTokenAmount(\n\t\tperpMarket.pnlPool.scaledBalance,\n\t\tspotMarket,\n\t\tSpotBalanceType.DEPOSIT\n\t);\n\n\tconst imbalance = netUserPnl.sub(pnlPool);\n\n\treturn imbalance;\n}\n","import {\n\tSpotMarketAccount,\n\tSpotBalanceType,\n\tisVariant,\n\tMarginCategory,\n} from '../types';\nimport { BN } from '@project-serum/anchor';\nimport {\n\tSPOT_MARKET_UTILIZATION_PRECISION,\n\tONE,\n\tTEN,\n\tZERO,\n\tSPOT_MARKET_RATE_PRECISION,\n\tSPOT_MARKET_WEIGHT_PRECISION,\n\tONE_YEAR,\n\tAMM_RESERVE_PRECISION,\n} from '../constants/numericConstants';\nimport {\n\tcalculateSizeDiscountAssetWeight,\n\tcalculateSizePremiumLiabilityWeight,\n} from './margin';\nimport { OraclePriceData } from '../oracles/types';\nimport { PERCENTAGE_PRECISION } from '../constants/numericConstants';\n\nexport function getBalance(\n\ttokenAmount: BN,\n\tspotMarket: SpotMarketAccount,\n\tbalanceType: SpotBalanceType\n): BN {\n\tconst precisionIncrease = TEN.pow(new BN(19 - spotMarket.decimals));\n\n\tconst cumulativeInterest = isVariant(balanceType, 'deposit')\n\t\t? spotMarket.cumulativeDepositInterest\n\t\t: spotMarket.cumulativeBorrowInterest;\n\n\tlet balance = tokenAmount.mul(precisionIncrease).div(cumulativeInterest);\n\n\tif (!balance.eq(ZERO) && isVariant(balanceType, 'borrow')) {\n\t\tbalance = balance.add(ONE);\n\t}\n\n\treturn balance;\n}\n\nexport function getTokenAmount(\n\tbalanceAmount: BN,\n\tspotMarket: SpotMarketAccount,\n\tbalanceType: SpotBalanceType\n): BN {\n\tconst precisionDecrease = TEN.pow(new BN(19 - spotMarket.decimals));\n\n\tconst cumulativeInterest = isVariant(balanceType, 'deposit')\n\t\t? spotMarket.cumulativeDepositInterest\n\t\t: spotMarket.cumulativeBorrowInterest;\n\n\treturn balanceAmount.mul(cumulativeInterest).div(precisionDecrease);\n}\n\nexport function getSignedTokenAmount(\n\ttokenAmount: BN,\n\tbalanceType: SpotBalanceType\n): BN {\n\tif (isVariant(balanceType, 'deposit')) {\n\t\treturn tokenAmount;\n\t} else {\n\t\treturn tokenAmount.abs().neg();\n\t}\n}\n\nexport function getTokenValue(\n\ttokenAmount: BN,\n\tspotDecimals: number,\n\toraclePriceData: OraclePriceData\n): BN {\n\tif (tokenAmount.eq(ZERO)) {\n\t\treturn ZERO;\n\t}\n\n\tconst precisionDecrease = TEN.pow(new BN(spotDecimals));\n\n\treturn tokenAmount.mul(oraclePriceData.price).div(precisionDecrease);\n}\n\nexport function calculateAssetWeight(\n\tbalanceAmount: BN,\n\tspotMarket: SpotMarketAccount,\n\tmarginCategory: MarginCategory\n): BN {\n\tconst sizePrecision = TEN.pow(new BN(spotMarket.decimals));\n\tlet sizeInAmmReservePrecision;\n\tif (sizePrecision.gt(AMM_RESERVE_PRECISION)) {\n\t\tsizeInAmmReservePrecision = balanceAmount.div(\n\t\t\tsizePrecision.div(AMM_RESERVE_PRECISION)\n\t\t);\n\t} else {\n\t\tsizeInAmmReservePrecision = balanceAmount\n\t\t\t.mul(AMM_RESERVE_PRECISION)\n\t\t\t.div(sizePrecision);\n\t}\n\n\tlet assetWeight;\n\n\tswitch (marginCategory) {\n\t\tcase 'Initial':\n\t\t\tassetWeight = calculateSizeDiscountAssetWeight(\n\t\t\t\tsizeInAmmReservePrecision,\n\t\t\t\tnew BN(spotMarket.imfFactor),\n\t\t\t\tnew BN(spotMarket.initialAssetWeight)\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'Maintenance':\n\t\t\tassetWeight = calculateSizeDiscountAssetWeight(\n\t\t\t\tsizeInAmmReservePrecision,\n\t\t\t\tnew BN(spotMarket.imfFactor),\n\t\t\t\tnew BN(spotMarket.maintenanceAssetWeight)\n\t\t\t);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tassetWeight = new BN(spotMarket.initialAssetWeight);\n\t\t\tbreak;\n\t}\n\n\treturn assetWeight;\n}\n\nexport function calculateLiabilityWeight(\n\tbalanceAmount: BN,\n\tspotMarket: SpotMarketAccount,\n\tmarginCategory: MarginCategory\n): BN {\n\tconst sizePrecision = TEN.pow(new BN(spotMarket.decimals));\n\tlet sizeInAmmReservePrecision;\n\tif (sizePrecision.gt(AMM_RESERVE_PRECISION)) {\n\t\tsizeInAmmReservePrecision = balanceAmount.div(\n\t\t\tsizePrecision.div(AMM_RESERVE_PRECISION)\n\t\t);\n\t} else {\n\t\tsizeInAmmReservePrecision = balanceAmount\n\t\t\t.mul(AMM_RESERVE_PRECISION)\n\t\t\t.div(sizePrecision);\n\t}\n\n\tlet assetWeight;\n\n\tswitch (marginCategory) {\n\t\tcase 'Initial':\n\t\t\tassetWeight = calculateSizePremiumLiabilityWeight(\n\t\t\t\tsizeInAmmReservePrecision,\n\t\t\t\tnew BN(spotMarket.imfFactor),\n\t\t\t\tnew BN(spotMarket.initialLiabilityWeight),\n\t\t\t\tSPOT_MARKET_WEIGHT_PRECISION\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'Maintenance':\n\t\t\tassetWeight = calculateSizePremiumLiabilityWeight(\n\t\t\t\tsizeInAmmReservePrecision,\n\t\t\t\tnew BN(spotMarket.imfFactor),\n\t\t\t\tnew BN(spotMarket.maintenanceLiabilityWeight),\n\t\t\t\tSPOT_MARKET_WEIGHT_PRECISION\n\t\t\t);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tassetWeight = spotMarket.initialLiabilityWeight;\n\t\t\tbreak;\n\t}\n\n\treturn assetWeight;\n}\n\nexport function calculateUtilization(bank: SpotMarketAccount): BN {\n\tconst tokenDepositAmount = getTokenAmount(\n\t\tbank.depositBalance,\n\t\tbank,\n\t\tSpotBalanceType.DEPOSIT\n\t);\n\tconst tokenBorrowAmount = getTokenAmount(\n\t\tbank.borrowBalance,\n\t\tbank,\n\t\tSpotBalanceType.BORROW\n\t);\n\n\tlet utilization: BN;\n\tif (tokenBorrowAmount.eq(ZERO) && tokenDepositAmount.eq(ZERO)) {\n\t\tutilization = ZERO;\n\t} else if (tokenDepositAmount.eq(ZERO)) {\n\t\tutilization = SPOT_MARKET_UTILIZATION_PRECISION;\n\t} else {\n\t\tutilization = tokenBorrowAmount\n\t\t\t.mul(SPOT_MARKET_UTILIZATION_PRECISION)\n\t\t\t.div(tokenDepositAmount);\n\t}\n\n\treturn utilization;\n}\n\nexport function calculateInterestRate(bank: SpotMarketAccount): BN {\n\tconst utilization = calculateUtilization(bank);\n\n\tlet interestRate: BN;\n\tif (utilization.gt(new BN(bank.optimalUtilization))) {\n\t\tconst surplusUtilization = utilization.sub(new BN(bank.optimalUtilization));\n\t\tconst borrowRateSlope = new BN(bank.maxBorrowRate - bank.optimalBorrowRate)\n\t\t\t.mul(SPOT_MARKET_UTILIZATION_PRECISION)\n\t\t\t.div(\n\t\t\t\tSPOT_MARKET_UTILIZATION_PRECISION.sub(new BN(bank.optimalUtilization))\n\t\t\t);\n\n\t\tinterestRate = new BN(bank.optimalBorrowRate).add(\n\t\t\tsurplusUtilization\n\t\t\t\t.mul(borrowRateSlope)\n\t\t\t\t.div(SPOT_MARKET_UTILIZATION_PRECISION)\n\t\t);\n\t} else {\n\t\tconst borrowRateSlope = new BN(bank.optimalBorrowRate)\n\t\t\t.mul(SPOT_MARKET_UTILIZATION_PRECISION)\n\t\t\t.div(\n\t\t\t\tSPOT_MARKET_UTILIZATION_PRECISION.sub(new BN(bank.optimalUtilization))\n\t\t\t);\n\n\t\tinterestRate = utilization\n\t\t\t.mul(borrowRateSlope)\n\t\t\t.div(SPOT_MARKET_UTILIZATION_PRECISION);\n\t}\n\n\treturn interestRate;\n}\n\nexport function calculateDepositRate(bank: SpotMarketAccount): BN {\n\tconst utilization = calculateUtilization(bank);\n\tconst borrowRate = calculateBorrowRate(bank);\n\tconst depositRate = borrowRate\n\t\t.mul(PERCENTAGE_PRECISION.sub(new BN(bank.insuranceFund.totalFactor)))\n\t\t.mul(utilization)\n\t\t.div(SPOT_MARKET_UTILIZATION_PRECISION)\n\t\t.div(PERCENTAGE_PRECISION);\n\treturn depositRate;\n}\n\nexport function calculateBorrowRate(bank: SpotMarketAccount): BN {\n\treturn calculateInterestRate(bank);\n}\n\nexport function calculateInterestAccumulated(\n\tbank: SpotMarketAccount,\n\tnow: BN\n): { borrowInterest: BN; depositInterest: BN } {\n\tconst interestRate = calculateInterestRate(bank);\n\n\tconst timeSinceLastUpdate = now.sub(bank.lastInterestTs);\n\n\tconst modifiedBorrowRate = interestRate.mul(timeSinceLastUpdate);\n\n\tconst utilization = calculateUtilization(bank);\n\n\tconst modifiedDepositRate = modifiedBorrowRate\n\t\t.mul(utilization)\n\t\t.div(SPOT_MARKET_UTILIZATION_PRECISION);\n\n\tconst borrowInterest = bank.cumulativeBorrowInterest\n\t\t.mul(modifiedBorrowRate)\n\t\t.div(ONE_YEAR)\n\t\t.div(SPOT_MARKET_RATE_PRECISION)\n\t\t.add(ONE);\n\tconst depositInterest = bank.cumulativeDepositInterest\n\t\t.mul(modifiedDepositRate)\n\t\t.div(ONE_YEAR)\n\t\t.div(SPOT_MARKET_RATE_PRECISION);\n\n\treturn { borrowInterest, depositInterest };\n}\n\nexport function calculateWithdrawLimit(\n\tspotMarket: SpotMarketAccount,\n\tnow: BN\n): { borrowLimit: BN; withdrawLimit: BN } {\n\tconst marketDepositTokenAmount = getTokenAmount(\n\t\tspotMarket.depositBalance,\n\t\tspotMarket,\n\t\tSpotBalanceType.DEPOSIT\n\t);\n\tconst marketBorrowTokenAmount = getTokenAmount(\n\t\tspotMarket.borrowBalance,\n\t\tspotMarket,\n\t\tSpotBalanceType.BORROW\n\t);\n\n\tconst twentyFourHours = new BN(60 * 60 * 24);\n\tconst sinceLast = now.sub(spotMarket.lastTwapTs);\n\tconst sinceStart = BN.max(ZERO, twentyFourHours.sub(sinceLast));\n\tconst borrowTokenTwapLive = spotMarket.borrowTokenTwap\n\t\t.mul(sinceStart)\n\t\t.add(marketBorrowTokenAmount.mul(sinceLast))\n\t\t.div(sinceLast.add(sinceStart));\n\n\tconst depositTokenTwapLive = spotMarket.depositTokenTwap\n\t\t.mul(sinceStart)\n\t\t.add(marketDepositTokenAmount.mul(sinceLast))\n\t\t.div(sinceLast.add(sinceStart));\n\n\tconst maxBorrowTokens = BN.min(\n\t\tBN.max(\n\t\t\tmarketDepositTokenAmount.div(new BN(6)),\n\t\t\tborrowTokenTwapLive.add(borrowTokenTwapLive.div(new BN(5)))\n\t\t),\n\t\tmarketDepositTokenAmount.sub(marketDepositTokenAmount.div(new BN(5)))\n\t); // between ~15-80% utilization with friction on twap\n\n\tconst minDepositTokens = depositTokenTwapLive.sub(\n\t\tBN.min(\n\t\t\tBN.max(\n\t\t\t\tdepositTokenTwapLive.div(new BN(5)),\n\t\t\t\tspotMarket.withdrawGuardThreshold\n\t\t\t),\n\t\t\tdepositTokenTwapLive\n\t\t)\n\t);\n\n\treturn {\n\t\tborrowLimit: maxBorrowTokens.sub(marketBorrowTokenAmount),\n\t\twithdrawLimit: marketDepositTokenAmount.sub(minDepositTokens),\n\t};\n}\n","import { BN, SpotMarketAccount } from '../';\nimport {\n\tAMM_RESERVE_PRECISION,\n\tAMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO,\n\tAMM_TO_QUOTE_PRECISION_RATIO,\n\tFUNDING_RATE_BUFFER_PRECISION,\n\tPRICE_PRECISION,\n\tONE,\n\tZERO,\n} from '../constants/numericConstants';\nimport { OraclePriceData } from '../oracles/types';\nimport { PerpMarketAccount, PositionDirection, PerpPosition } from '../types';\nimport {\n\tcalculateUpdatedAMM,\n\tcalculateUpdatedAMMSpreadReserves,\n\tcalculateAmmReservesAfterSwap,\n\tgetSwapDirection,\n} from './amm';\nimport { calculateBaseAssetValueWithOracle } from './margin';\nimport { calculateNetUserPnlImbalance } from './market';\n\n/**\n * calculateBaseAssetValue\n * = market value of closing entire position\n * @param market\n * @param userPosition\n * @param oraclePriceData\n * @returns Base Asset Value. : Precision QUOTE_PRECISION\n */\nexport function calculateBaseAssetValue(\n\tmarket: PerpMarketAccount,\n\tuserPosition: PerpPosition,\n\toraclePriceData: OraclePriceData,\n\tuseSpread = true,\n\tskipUpdate = false\n): BN {\n\tif (userPosition.baseAssetAmount.eq(ZERO)) {\n\t\treturn ZERO;\n\t}\n\n\tconst directionToClose = findDirectionToClose(userPosition);\n\tlet prepegAmm: Parameters<typeof calculateAmmReservesAfterSwap>[0];\n\n\tif (!skipUpdate) {\n\t\tif (market.amm.baseSpread > 0 && useSpread) {\n\t\t\tconst { baseAssetReserve, quoteAssetReserve, sqrtK, newPeg } =\n\t\t\t\tcalculateUpdatedAMMSpreadReserves(\n\t\t\t\t\tmarket.amm,\n\t\t\t\t\tdirectionToClose,\n\t\t\t\t\toraclePriceData\n\t\t\t\t);\n\t\t\tprepegAmm = {\n\t\t\t\tbaseAssetReserve,\n\t\t\t\tquoteAssetReserve,\n\t\t\t\tsqrtK: sqrtK,\n\t\t\t\tpegMultiplier: newPeg,\n\t\t\t};\n\t\t} else {\n\t\t\tprepegAmm = calculateUpdatedAMM(market.amm, oraclePriceData);\n\t\t}\n\t} else {\n\t\tprepegAmm = market.amm;\n\t}\n\n\tconst [newQuoteAssetReserve, _] = calculateAmmReservesAfterSwap(\n\t\tprepegAmm,\n\t\t'base',\n\t\tuserPosition.baseAssetAmount.abs(),\n\t\tgetSwapDirection('base', directionToClose)\n\t);\n\n\tswitch (directionToClose) {\n\t\tcase PositionDirection.SHORT:\n\t\t\treturn prepegAmm.quoteAssetReserve\n\t\t\t\t.sub(newQuoteAssetReserve)\n\t\t\t\t.mul(prepegAmm.pegMultiplier)\n\t\t\t\t.div(AMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO);\n\n\t\tcase PositionDirection.LONG:\n\t\t\treturn newQuoteAssetReserve\n\t\t\t\t.sub(prepegAmm.quoteAssetReserve)\n\t\t\t\t.mul(prepegAmm.pegMultiplier)\n\t\t\t\t.div(AMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO)\n\t\t\t\t.add(ONE);\n\t}\n}\n\n/**\n * calculatePositionPNL\n * = BaseAssetAmount * (Avg Exit Price - Avg Entry Price)\n * @param market\n * @param PerpPosition\n * @param withFunding (adds unrealized funding payment pnl to result)\n * @param oraclePriceData\n * @returns BaseAssetAmount : Precision QUOTE_PRECISION\n */\nexport function calculatePositionPNL(\n\tmarket: PerpMarketAccount,\n\tperpPosition: PerpPosition,\n\twithFunding = false,\n\toraclePriceData: OraclePriceData\n): BN {\n\tif (perpPosition.baseAssetAmount.eq(ZERO)) {\n\t\treturn perpPosition.quoteAssetAmount;\n\t}\n\n\tconst baseAssetValue = calculateBaseAssetValueWithOracle(\n\t\tmarket,\n\t\tperpPosition,\n\t\toraclePriceData\n\t);\n\n\tconst baseAssetValueSign = perpPosition.baseAssetAmount.isNeg()\n\t\t? new BN(-1)\n\t\t: new BN(1);\n\tlet pnl = baseAssetValue\n\t\t.mul(baseAssetValueSign)\n\t\t.add(perpPosition.quoteAssetAmount);\n\n\tif (withFunding) {\n\t\tconst fundingRatePnL = calculatePositionFundingPNL(market, perpPosition);\n\n\t\tpnl = pnl.add(fundingRatePnL);\n\t}\n\n\treturn pnl;\n}\n\nexport function calculateClaimablePnl(\n\tmarket: PerpMarketAccount,\n\tspotMarket: SpotMarketAccount,\n\tperpPosition: PerpPosition,\n\toraclePriceData: OraclePriceData\n): BN {\n\tconst unrealizedPnl = calculatePositionPNL(\n\t\tmarket,\n\t\tperpPosition,\n\t\ttrue,\n\t\toraclePriceData\n\t);\n\n\tconst fundingPnL = calculatePositionFundingPNL(market, perpPosition);\n\n\tlet unsettledPnl = unrealizedPnl.add(fundingPnL);\n\tif (unrealizedPnl.gt(ZERO)) {\n\t\tconst excessPnlPool = BN.max(\n\t\t\tZERO,\n\t\t\tcalculateNetUserPnlImbalance(market, spotMarket, oraclePriceData).mul(\n\t\t\t\tnew BN(-1)\n\t\t\t)\n\t\t);\n\n\t\tconst maxPositivePnl = BN.max(\n\t\t\tperpPosition.quoteAssetAmount.sub(perpPosition.quoteEntryAmount),\n\t\t\tZERO\n\t\t).add(excessPnlPool);\n\n\t\tunsettledPnl = BN.min(maxPositivePnl, unrealizedPnl);\n\t}\n\treturn unsettledPnl;\n}\n\n/**\n *\n * @param market\n * @param PerpPosition\n * @returns // TODO-PRECISION\n */\nexport function calculatePositionFundingPNL(\n\tmarket: PerpMarketAccount,\n\tperpPosition: PerpPosition\n): BN {\n\tif (perpPosition.baseAssetAmount.eq(ZERO)) {\n\t\treturn ZERO;\n\t}\n\n\tlet ammCumulativeFundingRate: BN;\n\tif (perpPosition.baseAssetAmount.gt(ZERO)) {\n\t\tammCumulativeFundingRate = market.amm.cumulativeFundingRateLong;\n\t} else {\n\t\tammCumulativeFundingRate = market.amm.cumulativeFundingRateShort;\n\t}\n\n\tconst perPositionFundingRate = ammCumulativeFundingRate\n\t\t.sub(perpPosition.lastCumulativeFundingRate)\n\t\t.mul(perpPosition.baseAssetAmount)\n\t\t.div(AMM_RESERVE_PRECISION)\n\t\t.div(FUNDING_RATE_BUFFER_PRECISION)\n\t\t.mul(new BN(-1));\n\n\treturn perPositionFundingRate;\n}\n\nexport function positionIsAvailable(position: PerpPosition): boolean {\n\treturn (\n\t\tposition.baseAssetAmount.eq(ZERO) &&\n\t\tposition.openOrders === 0 &&\n\t\tposition.quoteAssetAmount.eq(ZERO) &&\n\t\tposition.lpShares.eq(ZERO)\n\t);\n}\n\n/**\n *\n * @param userPosition\n * @returns Precision: PRICE_PRECISION (10^6)\n */\nexport function calculateBreakEvenPrice(userPosition: PerpPosition): BN {\n\tif (userPosition.baseAssetAmount.eq(ZERO)) {\n\t\treturn ZERO;\n\t}\n\n\treturn userPosition.quoteBreakEvenAmount\n\t\t.mul(PRICE_PRECISION)\n\t\t.mul(AMM_TO_QUOTE_PRECISION_RATIO)\n\t\t.div(userPosition.baseAssetAmount)\n\t\t.abs();\n}\n\n/**\n *\n * @param userPosition\n * @returns Precision: PRICE_PRECISION (10^6)\n */\nexport function calculateEntryPrice(userPosition: PerpPosition): BN {\n\tif (userPosition.baseAssetAmount.eq(ZERO)) {\n\t\treturn ZERO;\n\t}\n\n\treturn userPosition.quoteEntryAmount\n\t\t.mul(PRICE_PRECISION)\n\t\t.mul(AMM_TO_QUOTE_PRECISION_RATIO)\n\t\t.div(userPosition.baseAssetAmount)\n\t\t.abs();\n}\n\n/**\n *\n * @param userPosition\n * @returns Precision: PRICE_PRECISION (10^10)\n */\nexport function calculateCostBasis(userPosition: PerpPosition): BN {\n\tif (userPosition.baseAssetAmount.eq(ZERO)) {\n\t\treturn ZERO;\n\t}\n\n\treturn userPosition.quoteAssetAmount\n\t\t.mul(PRICE_PRECISION)\n\t\t.mul(AMM_TO_QUOTE_PRECISION_RATIO)\n\t\t.div(userPosition.baseAssetAmount)\n\t\t.abs();\n}\n\nexport function findDirectionToClose(\n\tuserPosition: PerpPosition\n): PositionDirection {\n\treturn userPosition.baseAssetAmount.gt(ZERO)\n\t\t? PositionDirection.SHORT\n\t\t: PositionDirection.LONG;\n}\n\nexport function positionCurrentDirection(\n\tuserPosition: PerpPosition\n): PositionDirection {\n\treturn userPosition.baseAssetAmount.gte(ZERO)\n\t\t? PositionDirection.LONG\n\t\t: PositionDirection.SHORT;\n}\n\nexport function isEmptyPosition(userPosition: PerpPosition): boolean {\n\treturn userPosition.baseAssetAmount.eq(ZERO) && userPosition.openOrders === 0;\n}\n","import { TxSender, TxSigAndSlot } from './types';\nimport {\n\tCommitment,\n\tConfirmOptions,\n\tContext,\n\tRpcResponseAndContext,\n\tSigner,\n\tSignatureResult,\n\tTransaction,\n\tTransactionSignature,\n\tConnection,\n} from '@solana/web3.js';\nimport { AnchorProvider } from '@project-serum/anchor';\nimport assert from 'assert';\nimport bs58 from 'bs58';\n\nconst DEFAULT_TIMEOUT = 35000;\nconst DEFAULT_RETRY = 8000;\n\ntype ResolveReference = {\n\tresolve?: () => void;\n};\n\nexport class RetryTxSender implements TxSender {\n\tprovider: AnchorProvider;\n\ttimeout: number;\n\tretrySleep: number;\n\tadditionalConnections: Connection[];\n\n\tpublic constructor(\n\t\tprovider: AnchorProvider,\n\t\ttimeout?: number,\n\t\tretrySleep?: number,\n\t\tadditionalConnections = new Array<Connection>()\n\t) {\n\t\tthis.provider = provider;\n\t\tthis.timeout = timeout ?? DEFAULT_TIMEOUT;\n\t\tthis.retrySleep = retrySleep ?? DEFAULT_RETRY;\n\t\tthis.additionalConnections = additionalConnections;\n\t}\n\n\tasync send(\n\t\ttx: Transaction,\n\t\tadditionalSigners?: Array<Signer>,\n\t\topts?: ConfirmOptions,\n\t\tpreSigned?: boolean\n\t): Promise<TxSigAndSlot> {\n\t\tif (additionalSigners === undefined) {\n\t\t\tadditionalSigners = [];\n\t\t}\n\t\tif (opts === undefined) {\n\t\t\topts = this.provider.opts;\n\t\t}\n\n\t\tif (!preSigned) {\n\t\t\tawait this.prepareTx(tx, additionalSigners, opts);\n\t\t}\n\n\t\tconst rawTransaction = tx.serialize();\n\t\tconst startTime = this.getTimestamp();\n\n\t\tlet txid: TransactionSignature;\n\t\ttry {\n\t\t\ttxid = await this.provider.connection.sendRawTransaction(\n\t\t\t\trawTransaction,\n\t\t\t\topts\n\t\t\t);\n\t\t\tthis.sendToAdditionalConnections(rawTransaction, opts);\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tthrow e;\n\t\t}\n\n\t\tlet done = false;\n\t\tconst resolveReference: ResolveReference = {\n\t\t\tresolve: undefined,\n\t\t};\n\t\tconst stopWaiting = () => {\n\t\t\tdone = true;\n\t\t\tif (resolveReference.resolve) {\n\t\t\t\tresolveReference.resolve();\n\t\t\t}\n\t\t};\n\n\t\t(async () => {\n\t\t\twhile (!done && this.getTimestamp() - startTime < this.timeout) {\n\t\t\t\tawait this.sleep(resolveReference);\n\t\t\t\tif (!done) {\n\t\t\t\t\tthis.provider.connection\n\t\t\t\t\t\t.sendRawTransaction(rawTransaction, opts)\n\t\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t\t\tstopWaiting();\n\t\t\t\t\t\t});\n\t\t\t\t\tthis.sendToAdditionalConnections(rawTransaction, opts);\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\n\t\tlet slot: number;\n\t\ttry {\n\t\t\tconst result = await this.confirmTransaction(txid, opts.commitment);\n\t\t\tslot = result.context.slot;\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tstopWaiting();\n\t\t}\n\n\t\treturn { txSig: txid, slot };\n\t}\n\n\tasync prepareTx(\n\t\ttx: Transaction,\n\t\tadditionalSigners: Array<Signer>,\n\t\topts: ConfirmOptions\n\t): Promise<Transaction> {\n\t\ttx.feePayer = this.provider.wallet.publicKey;\n\t\ttx.recentBlockhash = (\n\t\t\tawait this.provider.connection.getRecentBlockhash(\n\t\t\t\topts.preflightCommitment\n\t\t\t)\n\t\t).blockhash;\n\n\t\tawait this.provider.wallet.signTransaction(tx);\n\t\tadditionalSigners\n\t\t\t.filter((s): s is Signer => s !== undefined)\n\t\t\t.forEach((kp) => {\n\t\t\t\ttx.partialSign(kp);\n\t\t\t});\n\n\t\treturn tx;\n\t}\n\n\tasync confirmTransaction(\n\t\tsignature: TransactionSignature,\n\t\tcommitment?: Commitment\n\t): Promise<RpcResponseAndContext<SignatureResult>> {\n\t\tlet decodedSignature;\n\t\ttry {\n\t\t\tdecodedSignature = bs58.decode(signature);\n\t\t} catch (err) {\n\t\t\tthrow new Error('signature must be base58 encoded: ' + signature);\n\t\t}\n\n\t\tassert(decodedSignature.length === 64, 'signature has invalid length');\n\n\t\tconst start = Date.now();\n\t\tconst subscriptionCommitment = commitment || this.provider.opts.commitment;\n\n\t\tconst subscriptionIds = new Array<number>();\n\t\tconst connections = [\n\t\t\tthis.provider.connection,\n\t\t\t...this.additionalConnections,\n\t\t];\n\t\tlet response: RpcResponseAndContext<SignatureResult> | null = null;\n\t\tconst promises = connections.map((connection, i) => {\n\t\t\tlet subscriptionId;\n\t\t\tconst confirmPromise = new Promise((resolve, reject) => {\n\t\t\t\ttry {\n\t\t\t\t\tsubscriptionId = connection.onSignature(\n\t\t\t\t\t\tsignature,\n\t\t\t\t\t\t(result: SignatureResult, context: Context) => {\n\t\t\t\t\t\t\tsubscriptionIds[i] = undefined;\n\t\t\t\t\t\t\tresponse = {\n\t\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\t\tvalue: result,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tresolve(null);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsubscriptionCommitment\n\t\t\t\t\t);\n\t\t\t\t} catch (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t});\n\t\t\tsubscriptionIds.push(subscriptionId);\n\t\t\treturn confirmPromise;\n\t\t});\n\n\t\ttry {\n\t\t\tawait this.promiseTimeout(promises, this.timeout);\n\t\t} finally {\n\t\t\tfor (const [i, subscriptionId] of subscriptionIds.entries()) {\n\t\t\t\tif (subscriptionId) {\n\t\t\t\t\tconnections[i].removeSignatureListener(subscriptionId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (response === null) {\n\t\t\tconst duration = (Date.now() - start) / 1000;\n\t\t\tthrow new Error(\n\t\t\t\t`Transaction was not confirmed in ${duration.toFixed(\n\t\t\t\t\t2\n\t\t\t\t)} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`\n\t\t\t);\n\t\t}\n\n\t\treturn response;\n\t}\n\n\tgetTimestamp(): number {\n\t\treturn new Date().getTime();\n\t}\n\n\tasync sleep(reference: ResolveReference): Promise<void> {\n\t\treturn new Promise((resolve) => {\n\t\t\treference.resolve = resolve;\n\t\t\tsetTimeout(resolve, this.retrySleep);\n\t\t});\n\t}\n\n\tpromiseTimeout<T>(\n\t\tpromises: Promise<T>[],\n\t\ttimeoutMs: number\n\t): Promise<T | null> {\n\t\tlet timeoutId: ReturnType<typeof setTimeout>;\n\t\tconst timeoutPromise: Promise<null> = new Promise((resolve) => {\n\t\t\ttimeoutId = setTimeout(() => resolve(null), timeoutMs);\n\t\t});\n\n\t\treturn Promise.race([...promises, timeoutPromise]).then(\n\t\t\t(result: T | null) => {\n\t\t\t\tclearTimeout(timeoutId);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t);\n\t}\n\n\tsendToAdditionalConnections(rawTx: Buffer, opts: ConfirmOptions): void {\n\t\tthis.additionalConnections.map((connection) => {\n\t\t\tconnection.sendRawTransaction(rawTx, opts).catch((e) => {\n\t\t\t\tconsole.error(\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t`error sending tx to additional connection ${connection._rpcEndpoint}`\n\t\t\t\t);\n\t\t\t\tconsole.error(e);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic addAdditionalConnection(newConnection: Connection): void {\n\t\tconst alreadyUsingConnection =\n\t\t\tthis.additionalConnections.filter((connection) => {\n\t\t\t\t// @ts-ignore\n\t\t\t\treturn connection._rpcEndpoint === newConnection.rpcEndpoint;\n\t\t\t}).length > 0;\n\n\t\tif (!alreadyUsingConnection) {\n\t\t\tthis.additionalConnections.push(newConnection);\n\t\t}\n\t}\n}\n","import {\n\tDataAndSlot,\n\tAccountSubscriber,\n\tNotSubscribedError,\n\tUserAccountEvents,\n\tUserAccountSubscriber,\n} from './types';\nimport { Program } from '@project-serum/anchor';\nimport StrictEventEmitter from 'strict-event-emitter-types';\nimport { EventEmitter } from 'events';\nimport { PublicKey } from '@solana/web3.js';\nimport { WebSocketAccountSubscriber } from './webSocketAccountSubscriber';\nimport { UserAccount } from '../types';\n\nexport class WebSocketUserAccountSubscriber implements UserAccountSubscriber {\n\tisSubscribed: boolean;\n\tprogram: Program;\n\teventEmitter: StrictEventEmitter<EventEmitter, UserAccountEvents>;\n\tuserAccountPublicKey: PublicKey;\n\n\tuserDataAccountSubscriber: AccountSubscriber<UserAccount>;\n\n\tpublic constructor(program: Program, userAccountPublicKey: PublicKey) {\n\t\tthis.isSubscribed = false;\n\t\tthis.program = program;\n\t\tthis.userAccountPublicKey = userAccountPublicKey;\n\t\tthis.eventEmitter = new EventEmitter();\n\t}\n\n\tasync subscribe(): Promise<boolean> {\n\t\tif (this.isSubscribed) {\n\t\t\treturn true;\n\t\t}\n\n\t\tthis.userDataAccountSubscriber = new WebSocketAccountSubscriber(\n\t\t\t'user',\n\t\t\tthis.program,\n\t\t\tthis.userAccountPublicKey\n\t\t);\n\t\tawait this.userDataAccountSubscriber.subscribe((data: UserAccount) => {\n\t\t\tthis.eventEmitter.emit('userAccountUpdate', data);\n\t\t\tthis.eventEmitter.emit('update');\n\t\t});\n\n\t\tthis.eventEmitter.emit('update');\n\t\tthis.isSubscribed = true;\n\t\treturn true;\n\t}\n\n\tasync fetch(): Promise<void> {\n\t\tawait Promise.all([this.userDataAccountSubscriber.fetch()]);\n\t}\n\n\tasync unsubscribe(): Promise<void> {\n\t\tif (!this.isSubscribed) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait Promise.all([this.userDataAccountSubscriber.unsubscribe()]);\n\n\t\tthis.isSubscribed = false;\n\t}\n\n\tassertIsSubscribed(): void {\n\t\tif (!this.isSubscribed) {\n\t\t\tthrow new NotSubscribedError(\n\t\t\t\t'You must call `subscribe` before using this function'\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic getUserAccountAndSlot(): DataAndSlot<UserAccount> {\n\t\tthis.assertIsSubscribed();\n\t\treturn this.userDataAccountSubscriber.dataAndSlot;\n\t}\n}\n","import { SpotMarketAccount, SpotPosition } from '../types';\nimport { ZERO } from '../constants/numericConstants';\nimport { BN } from '@project-serum/anchor';\nimport {\n\tgetSignedTokenAmount,\n\tgetTokenAmount,\n\tgetTokenValue,\n} from './spotBalance';\nimport { OraclePriceData } from '../oracles/types';\n\nexport function isSpotPositionAvailable(position: SpotPosition): boolean {\n\treturn position.scaledBalance.eq(ZERO) && position.openOrders === 0;\n}\n\nexport function getWorstCaseTokenAmounts(\n\tspotPosition: SpotPosition,\n\tspotMarketAccount: SpotMarketAccount,\n\toraclePriceData: OraclePriceData\n): [BN, BN] {\n\tconst tokenAmount = getSignedTokenAmount(\n\t\tgetTokenAmount(\n\t\t\tspotPosition.scaledBalance,\n\t\t\tspotMarketAccount,\n\t\t\tspotPosition.balanceType\n\t\t),\n\t\tspotPosition.balanceType\n\t);\n\n\tconst tokenAmountAllBidsFill = tokenAmount.add(spotPosition.openBids);\n\tconst tokenAmountAllAsksFill = tokenAmount.add(spotPosition.openAsks);\n\n\tif (tokenAmountAllAsksFill.abs().gt(tokenAmountAllBidsFill.abs())) {\n\t\tconst worstCaseQuoteTokenAmount = getTokenValue(\n\t\t\tspotPosition.openAsks.neg(),\n\t\t\tspotMarketAccount.decimals,\n\t\t\toraclePriceData\n\t\t);\n\t\treturn [tokenAmountAllBidsFill, worstCaseQuoteTokenAmount];\n\t} else {\n\t\tconst worstCaseQuoteTokenAmount = getTokenValue(\n\t\t\tspotPosition.openBids.neg(),\n\t\t\tspotMarketAccount.decimals,\n\t\t\toraclePriceData\n\t\t);\n\t\treturn [tokenAmountAllAsksFill, worstCaseQuoteTokenAmount];\n\t}\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { EventEmitter } from 'events';\nimport StrictEventEmitter from 'strict-event-emitter-types';\nimport { DriftClient } from './driftClient';\nimport {\n\tisVariant,\n\tMarginCategory,\n\tOrder,\n\tUserAccount,\n\tPerpPosition,\n\tSpotPosition,\n\tisOneOfVariant,\n} from './types';\nimport { calculateEntryPrice } from './math/position';\nimport {\n\tPRICE_PRECISION,\n\tAMM_TO_QUOTE_PRECISION_RATIO,\n\tZERO,\n\tTEN_THOUSAND,\n\tBN_MAX,\n\tQUOTE_PRECISION,\n\tAMM_RESERVE_PRECISION,\n\tPRICE_TO_QUOTE_PRECISION,\n\tMARGIN_PRECISION,\n\tSPOT_MARKET_WEIGHT_PRECISION,\n\tQUOTE_SPOT_MARKET_INDEX,\n\tTEN,\n\tOPEN_ORDER_MARGIN_REQUIREMENT,\n} from './constants/numericConstants';\nimport {\n\tUserAccountSubscriber,\n\tUserAccountEvents,\n\tDataAndSlot,\n} from './accounts/types';\nimport {\n\tcalculateReservePrice,\n\tcalculateBaseAssetValue,\n\tcalculatePositionFundingPNL,\n\tcalculatePositionPNL,\n\tcalculateUnrealizedAssetWeight,\n\tcalculateMarketMarginRatio,\n\tPositionDirection,\n\tcalculateTradeSlippage,\n\tBN,\n\tSpotMarketAccount,\n\tgetTokenValue,\n\tSpotBalanceType,\n} from '.';\nimport {\n\tgetTokenAmount,\n\tcalculateAssetWeight,\n\tcalculateLiabilityWeight,\n\tcalculateWithdrawLimit,\n} from './math/spotBalance';\nimport { calculateMarketOpenBidAsk } from './math/amm';\nimport {\n\tcalculateBaseAssetValueWithOracle,\n\tcalculateWorstCaseBaseAssetAmount,\n} from './math/margin';\nimport { OraclePriceData } from './oracles/types';\nimport { UserConfig } from './userConfig';\nimport { PollingUserAccountSubscriber } from './accounts/pollingUserAccountSubscriber';\nimport { WebSocketUserAccountSubscriber } from './accounts/webSocketUserAccountSubscriber';\nimport {\n\tgetWorstCaseTokenAmounts,\n\tisSpotPositionAvailable,\n} from './math/spotPosition';\n\nexport class User {\n\tdriftClient: DriftClient;\n\tuserAccountPublicKey: PublicKey;\n\taccountSubscriber: UserAccountSubscriber;\n\t_isSubscribed = false;\n\teventEmitter: StrictEventEmitter<EventEmitter, UserAccountEvents>;\n\n\tpublic get isSubscribed() {\n\t\treturn this._isSubscribed && this.accountSubscriber.isSubscribed;\n\t}\n\n\tpublic set isSubscribed(val: boolean) {\n\t\tthis._isSubscribed = val;\n\t}\n\n\tpublic constructor(config: UserConfig) {\n\t\tthis.driftClient = config.driftClient;\n\t\tthis.userAccountPublicKey = config.userAccountPublicKey;\n\t\tif (config.accountSubscription?.type === 'polling') {\n\t\t\tthis.accountSubscriber = new PollingUserAccountSubscriber(\n\t\t\t\tconfig.driftClient.program,\n\t\t\t\tconfig.userAccountPublicKey,\n\t\t\t\tconfig.accountSubscription.accountLoader\n\t\t\t);\n\t\t} else {\n\t\t\tthis.accountSubscriber = new WebSocketUserAccountSubscriber(\n\t\t\t\tconfig.driftClient.program,\n\t\t\t\tconfig.userAccountPublicKey\n\t\t\t);\n\t\t}\n\t\tthis.eventEmitter = this.accountSubscriber.eventEmitter;\n\t}\n\n\t/**\n\t * Subscribe to User state accounts\n\t * @returns SusbcriptionSuccess result\n\t */\n\tpublic async subscribe(): Promise<boolean> {\n\t\tthis.isSubscribed = await this.accountSubscriber.subscribe();\n\t\treturn this.isSubscribed;\n\t}\n\n\t/**\n\t *\tForces the accountSubscriber to fetch account updates from rpc\n\t */\n\tpublic async fetchAccounts(): Promise<void> {\n\t\tawait this.accountSubscriber.fetch();\n\t}\n\n\tpublic async unsubscribe(): Promise<void> {\n\t\tawait this.accountSubscriber.unsubscribe();\n\t\tthis.isSubscribed = false;\n\t}\n\n\tpublic getUserAccount(): UserAccount {\n\t\treturn this.accountSubscriber.getUserAccountAndSlot().data;\n\t}\n\n\tpublic getUserAccountAndSlot(): DataAndSlot<UserAccount> | undefined {\n\t\treturn this.accountSubscriber.getUserAccountAndSlot();\n\t}\n\n\t/**\n\t * Gets the user's current position for a given perp market. If the user has no position returns undefined\n\t * @param marketIndex\n\t * @returns userPerpPosition\n\t */\n\tpublic getPerpPosition(marketIndex: number): PerpPosition | undefined {\n\t\treturn this.getUserAccount().perpPositions.find(\n\t\t\t(position) => position.marketIndex === marketIndex\n\t\t);\n\t}\n\n\t/**\n\t * Gets the user's current position for a given spot market. If the user has no position returns undefined\n\t * @param marketIndex\n\t * @returns userSpotPosition\n\t */\n\tpublic getSpotPosition(marketIndex: number): SpotPosition | undefined {\n\t\treturn this.getUserAccount().spotPositions.find(\n\t\t\t(position) => position.marketIndex === marketIndex\n\t\t);\n\t}\n\n\tpublic getEmptyPosition(marketIndex: number): PerpPosition {\n\t\treturn {\n\t\t\tbaseAssetAmount: ZERO,\n\t\t\tremainderBaseAssetAmount: 0,\n\t\t\tlastCumulativeFundingRate: ZERO,\n\t\t\tmarketIndex,\n\t\t\tquoteAssetAmount: ZERO,\n\t\t\tquoteEntryAmount: ZERO,\n\t\t\tquoteBreakEvenAmount: ZERO,\n\t\t\topenOrders: 0,\n\t\t\topenBids: ZERO,\n\t\t\topenAsks: ZERO,\n\t\t\tsettledPnl: ZERO,\n\t\t\tlpShares: ZERO,\n\t\t\tlastBaseAssetAmountPerLp: ZERO,\n\t\t\tlastQuoteAssetAmountPerLp: ZERO,\n\t\t};\n\t}\n\n\tpublic getClonedPosition(position: PerpPosition): PerpPosition {\n\t\tconst clonedPosition = Object.assign({}, position);\n\t\treturn clonedPosition;\n\t}\n\n\t/**\n\t * @param orderId\n\t * @returns Order\n\t */\n\tpublic getOrder(orderId: number): Order | undefined {\n\t\treturn this.getUserAccount().orders.find(\n\t\t\t(order) => order.orderId === orderId\n\t\t);\n\t}\n\n\t/**\n\t * @param userOrderId\n\t * @returns Order\n\t */\n\tpublic getOrderByUserOrderId(userOrderId: number): Order | undefined {\n\t\treturn this.getUserAccount().orders.find(\n\t\t\t(order) => order.userOrderId === userOrderId\n\t\t);\n\t}\n\n\tpublic getUserAccountPublicKey(): PublicKey {\n\t\treturn this.userAccountPublicKey;\n\t}\n\n\tpublic async exists(): Promise<boolean> {\n\t\tconst userAccountRPCResponse =\n\t\t\tawait this.driftClient.connection.getParsedAccountInfo(\n\t\t\t\tthis.userAccountPublicKey\n\t\t\t);\n\t\treturn userAccountRPCResponse.value !== null;\n\t}\n\n\t/**\n\t * calculates the total open bids/asks in a perp market (including lps)\n\t * @returns : open bids\n\t * @returns : open asks\n\t */\n\tpublic getPerpBidAsks(marketIndex: number): [BN, BN] {\n\t\tconst position = this.getPerpPosition(marketIndex);\n\n\t\tconst [lpOpenBids, lpOpenAsks] = this.getLPBidAsks(marketIndex);\n\n\t\tconst totalOpenBids = lpOpenBids.add(position.openBids);\n\t\tconst totalOpenAsks = lpOpenAsks.add(position.openAsks);\n\n\t\treturn [totalOpenBids, totalOpenAsks];\n\t}\n\n\t/**\n\t * calculates the open bids and asks for an lp\n\t * @returns : lp open bids\n\t * @returns : lp open asks\n\t */\n\tpublic getLPBidAsks(marketIndex: number): [BN, BN] {\n\t\tconst position = this.getPerpPosition(marketIndex);\n\t\tif (position === undefined || position.lpShares.eq(ZERO)) {\n\t\t\treturn [ZERO, ZERO];\n\t\t}\n\n\t\tconst market = this.driftClient.getPerpMarketAccount(marketIndex);\n\t\tconst [marketOpenBids, marketOpenAsks] = calculateMarketOpenBidAsk(\n\t\t\tmarket.amm.baseAssetReserve,\n\t\t\tmarket.amm.minBaseAssetReserve,\n\t\t\tmarket.amm.maxBaseAssetReserve\n\t\t);\n\n\t\tconst lpOpenBids = marketOpenBids\n\t\t\t.mul(position.lpShares)\n\t\t\t.div(market.amm.sqrtK);\n\t\tconst lpOpenAsks = marketOpenAsks\n\t\t\t.mul(position.lpShares)\n\t\t\t.div(market.amm.sqrtK);\n\n\t\treturn [lpOpenBids, lpOpenAsks];\n\t}\n\n\t/**\n\t * calculates the market position if the lp position was settled\n\t * @returns : the settled userPosition\n\t * @returns : the dust base asset amount (ie, < stepsize)\n\t * @returns : pnl from settle\n\t */\n\tpublic getSettledLPPosition(marketIndex: number): [PerpPosition, BN, BN] {\n\t\tconst _position = this.getPerpPosition(marketIndex);\n\t\tconst position = this.getClonedPosition(_position);\n\n\t\tif (position.lpShares.eq(ZERO)) {\n\t\t\treturn [position, ZERO, ZERO];\n\t\t}\n\n\t\tconst market = this.driftClient.getPerpMarketAccount(position.marketIndex);\n\t\tconst nShares = position.lpShares;\n\n\t\tconst deltaBaa = market.amm.baseAssetAmountPerLp\n\t\t\t.sub(position.lastBaseAssetAmountPerLp)\n\t\t\t.mul(nShares)\n\t\t\t.div(AMM_RESERVE_PRECISION);\n\t\tconst deltaQaa = market.amm.quoteAssetAmountPerLp\n\t\t\t.sub(position.lastQuoteAssetAmountPerLp)\n\t\t\t.mul(nShares)\n\t\t\t.div(AMM_RESERVE_PRECISION);\n\n\t\tfunction sign(v: BN) {\n\t\t\tconst sign = { true: new BN(1), false: new BN(-1) }[\n\t\t\t\tv.gte(ZERO).toString()\n\t\t\t];\n\t\t\treturn sign;\n\t\t}\n\n\t\tfunction standardize(amount: BN, stepsize: BN) {\n\t\t\tconst remainder = amount.abs().mod(stepsize).mul(sign(amount));\n\t\t\tconst standardizedAmount = amount.sub(remainder);\n\t\t\treturn [standardizedAmount, remainder];\n\t\t}\n\n\t\tconst [standardizedBaa, remainderBaa] = standardize(\n\t\t\tdeltaBaa,\n\t\t\tmarket.amm.orderStepSize\n\t\t);\n\n\t\tposition.remainderBaseAssetAmount += remainderBaa.toNumber();\n\n\t\tif (\n\t\t\tMath.abs(position.remainderBaseAssetAmount) >\n\t\t\tmarket.amm.orderStepSize.toNumber()\n\t\t) {\n\t\t\tconst [newStandardizedBaa, newRemainderBaa] = standardize(\n\t\t\t\tnew BN(position.remainderBaseAssetAmount),\n\t\t\t\tmarket.amm.orderStepSize\n\t\t\t);\n\t\t\tposition.baseAssetAmount =\n\t\t\t\tposition.baseAssetAmount.add(newStandardizedBaa);\n\t\t\tposition.remainderBaseAssetAmount = newRemainderBaa.toNumber();\n\t\t}\n\n\t\tlet updateType;\n\t\tif (position.baseAssetAmount.eq(ZERO)) {\n\t\t\tupdateType = 'open';\n\t\t} else if (sign(position.baseAssetAmount).eq(sign(deltaBaa))) {\n\t\t\tupdateType = 'increase';\n\t\t} else if (position.baseAssetAmount.abs().gt(deltaBaa.abs())) {\n\t\t\tupdateType = 'reduce';\n\t\t} else if (position.baseAssetAmount.abs().eq(deltaBaa.abs())) {\n\t\t\tupdateType = 'close';\n\t\t} else {\n\t\t\tupdateType = 'flip';\n\t\t}\n\n\t\tlet newQuoteEntry;\n\t\tlet pnl;\n\t\tif (updateType == 'open' || updateType == 'increase') {\n\t\t\tnewQuoteEntry = position.quoteEntryAmount.add(deltaQaa);\n\t\t\tpnl = 0;\n\t\t} else if (updateType == 'reduce' || updateType == 'close') {\n\t\t\tnewQuoteEntry = position.quoteEntryAmount.sub(\n\t\t\t\tposition.quoteEntryAmount\n\t\t\t\t\t.mul(deltaBaa.abs())\n\t\t\t\t\t.div(position.baseAssetAmount.abs())\n\t\t\t);\n\t\t\tpnl = position.quoteEntryAmount.sub(newQuoteEntry).add(deltaQaa);\n\t\t} else {\n\t\t\tnewQuoteEntry = deltaQaa.sub(\n\t\t\t\tdeltaQaa.mul(position.baseAssetAmount.abs()).div(deltaBaa.abs())\n\t\t\t);\n\t\t\tpnl = position.quoteEntryAmount.add(deltaQaa.sub(newQuoteEntry));\n\t\t}\n\t\tposition.quoteEntryAmount = newQuoteEntry;\n\t\tposition.baseAssetAmount = position.baseAssetAmount.add(standardizedBaa);\n\t\tposition.quoteAssetAmount = position.quoteAssetAmount.add(deltaQaa);\n\n\t\tif (position.baseAssetAmount.gt(ZERO)) {\n\t\t\tposition.lastCumulativeFundingRate = market.amm.cumulativeFundingRateLong;\n\t\t} else if (position.baseAssetAmount.lt(ZERO)) {\n\t\t\tposition.lastCumulativeFundingRate =\n\t\t\t\tmarket.amm.cumulativeFundingRateShort;\n\t\t} else {\n\t\t\tposition.lastCumulativeFundingRate = ZERO;\n\t\t}\n\n\t\treturn [position, remainderBaa, pnl];\n\t}\n\n\t/**\n\t * calculates Buying Power = FC * MAX_LEVERAGE\n\t * @returns : Precision QUOTE_PRECISION\n\t */\n\tpublic getBuyingPower(marketIndex: number): BN {\n\t\treturn this.getFreeCollateral()\n\t\t\t.mul(this.getMaxLeverage(marketIndex, 'Initial'))\n\t\t\t.div(TEN_THOUSAND);\n\t}\n\n\t/**\n\t * calculates Free Collateral = Total collateral - initial margin requirement\n\t * @returns : Precision QUOTE_PRECISION\n\t */\n\tpublic getFreeCollateral(): BN {\n\t\tconst totalCollateral = this.getTotalCollateral();\n\t\tconst initialMarginRequirement = this.getInitialMarginRequirement();\n\t\tconst freeCollateral = totalCollateral.sub(initialMarginRequirement);\n\t\treturn freeCollateral.gte(ZERO) ? freeCollateral : ZERO;\n\t}\n\n\t/**\n\t * @returns The margin requirement of a certain type (Initial or Maintenance) in USDC. : QUOTE_PRECISION\n\t */\n\tpublic getMarginRequirement(\n\t\tmarginCategory: MarginCategory,\n\t\tliquidationBuffer?: BN\n\t): BN {\n\t\treturn this.getTotalPerpPositionValue(\n\t\t\tmarginCategory,\n\t\t\tliquidationBuffer,\n\t\t\ttrue\n\t\t).add(\n\t\t\tthis.getSpotMarketLiabilityValue(\n\t\t\t\tundefined,\n\t\t\t\tmarginCategory,\n\t\t\t\tliquidationBuffer,\n\t\t\t\ttrue\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @returns The initial margin requirement in USDC. : QUOTE_PRECISION\n\t */\n\tpublic getInitialMarginRequirement(): BN {\n\t\treturn this.getMarginRequirement('Initial');\n\t}\n\n\t/**\n\t * @returns The maintenance margin requirement in USDC. : QUOTE_PRECISION\n\t */\n\tpublic getMaintenanceMarginRequirement(liquidationBuffer?: BN): BN {\n\t\treturn this.getMarginRequirement('Maintenance', liquidationBuffer);\n\t}\n\n\tpublic getActivePerpPositions(): PerpPosition[] {\n\t\treturn this.getUserAccount().perpPositions.filter(\n\t\t\t(pos) =>\n\t\t\t\t!pos.baseAssetAmount.eq(ZERO) ||\n\t\t\t\t!pos.quoteAssetAmount.eq(ZERO) ||\n\t\t\t\t!(pos.openOrders == 0) ||\n\t\t\t\t!pos.lpShares.eq(ZERO)\n\t\t);\n\t}\n\n\t/**\n\t * calculates unrealized position price pnl\n\t * @returns : Precision QUOTE_PRECISION\n\t */\n\tpublic getUnrealizedPNL(\n\t\twithFunding?: boolean,\n\t\tmarketIndex?: number,\n\t\twithWeightMarginCategory?: MarginCategory\n\t): BN {\n\t\tconst quoteSpotMarket = this.driftClient.getQuoteSpotMarketAccount();\n\t\treturn this.getActivePerpPositions()\n\t\t\t.filter((pos) => (marketIndex ? pos.marketIndex === marketIndex : true))\n\t\t\t.reduce((unrealizedPnl, perpPosition) => {\n\t\t\t\tconst market = this.driftClient.getPerpMarketAccount(\n\t\t\t\t\tperpPosition.marketIndex\n\t\t\t\t);\n\t\t\t\tconst oraclePriceData = this.getOracleDataForPerpMarket(\n\t\t\t\t\tmarket.marketIndex\n\t\t\t\t);\n\n\t\t\t\tlet positionUnrealizedPnl = calculatePositionPNL(\n\t\t\t\t\tmarket,\n\t\t\t\t\tperpPosition,\n\t\t\t\t\twithFunding,\n\t\t\t\t\toraclePriceData\n\t\t\t\t);\n\n\t\t\t\tif (withWeightMarginCategory !== undefined) {\n\t\t\t\t\tif (positionUnrealizedPnl.gt(ZERO)) {\n\t\t\t\t\t\tpositionUnrealizedPnl = positionUnrealizedPnl\n\t\t\t\t\t\t\t.mul(\n\t\t\t\t\t\t\t\tcalculateUnrealizedAssetWeight(\n\t\t\t\t\t\t\t\t\tmarket,\n\t\t\t\t\t\t\t\t\tquoteSpotMarket,\n\t\t\t\t\t\t\t\t\tpositionUnrealizedPnl,\n\t\t\t\t\t\t\t\t\twithWeightMarginCategory,\n\t\t\t\t\t\t\t\t\toraclePriceData\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.div(new BN(SPOT_MARKET_WEIGHT_PRECISION));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn unrealizedPnl.add(positionUnrealizedPnl);\n\t\t\t}, ZERO);\n\t}\n\n\t/**\n\t * calculates unrealized funding payment pnl\n\t * @returns : Precision QUOTE_PRECISION\n\t */\n\tpublic getUnrealizedFundingPNL(marketIndex?: number): BN {\n\t\treturn this.getUserAccount()\n\t\t\t.perpPositions.filter((pos) =>\n\t\t\t\tmarketIndex ? pos.marketIndex === marketIndex : true\n\t\t\t)\n\t\t\t.reduce((pnl, perpPosition) => {\n\t\t\t\tconst market = this.driftClient.getPerpMarketAccount(\n\t\t\t\t\tperpPosition.marketIndex\n\t\t\t\t);\n\t\t\t\treturn pnl.add(calculatePositionFundingPNL(market, perpPosition));\n\t\t\t}, ZERO);\n\t}\n\n\tpublic getSpotMarketLiabilityValue(\n\t\tmarketIndex?: number,\n\t\tmarginCategory?: MarginCategory,\n\t\tliquidationBuffer?: BN,\n\t\tincludeOpenOrders?: boolean\n\t): BN {\n\t\treturn this.getUserAccount().spotPositions.reduce(\n\t\t\t(totalLiabilityValue, spotPosition) => {\n\t\t\t\tif (\n\t\t\t\t\tisSpotPositionAvailable(spotPosition) ||\n\t\t\t\t\t(marketIndex !== undefined &&\n\t\t\t\t\t\tspotPosition.marketIndex !== marketIndex)\n\t\t\t\t) {\n\t\t\t\t\treturn totalLiabilityValue;\n\t\t\t\t}\n\n\t\t\t\tconst spotMarketAccount: SpotMarketAccount =\n\t\t\t\t\tthis.driftClient.getSpotMarketAccount(spotPosition.marketIndex);\n\n\t\t\t\tif (spotPosition.marketIndex === QUOTE_SPOT_MARKET_INDEX) {\n\t\t\t\t\tif (isVariant(spotPosition.balanceType, 'borrow')) {\n\t\t\t\t\t\tconst tokenAmount = getTokenAmount(\n\t\t\t\t\t\t\tspotPosition.scaledBalance,\n\t\t\t\t\t\t\tspotMarketAccount,\n\t\t\t\t\t\t\tspotPosition.balanceType\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tlet weight = SPOT_MARKET_WEIGHT_PRECISION;\n\t\t\t\t\t\tif (marginCategory === 'Initial') {\n\t\t\t\t\t\t\tweight = BN.max(\n\t\t\t\t\t\t\t\tweight,\n\t\t\t\t\t\t\t\tnew BN(this.getUserAccount().maxMarginRatio)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst weightedTokenValue = tokenAmount\n\t\t\t\t\t\t\t.mul(weight)\n\t\t\t\t\t\t\t.div(SPOT_MARKET_WEIGHT_PRECISION);\n\n\t\t\t\t\t\treturn totalLiabilityValue.add(weightedTokenValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn totalLiabilityValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst oraclePriceData = this.getOracleDataForSpotMarket(\n\t\t\t\t\tspotPosition.marketIndex\n\t\t\t\t);\n\n\t\t\t\tif (!includeOpenOrders) {\n\t\t\t\t\tif (isVariant(spotPosition.balanceType, 'borrow')) {\n\t\t\t\t\t\tconst tokenAmount = getTokenAmount(\n\t\t\t\t\t\t\tspotPosition.scaledBalance,\n\t\t\t\t\t\t\tspotMarketAccount,\n\t\t\t\t\t\t\tspotPosition.balanceType\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst liabilityValue = this.getSpotLiabilityValue(\n\t\t\t\t\t\t\ttokenAmount,\n\t\t\t\t\t\t\toraclePriceData,\n\t\t\t\t\t\t\tspotMarketAccount,\n\t\t\t\t\t\t\tmarginCategory,\n\t\t\t\t\t\t\tliquidationBuffer\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn totalLiabilityValue.add(liabilityValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn totalLiabilityValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst [worstCaseTokenAmount, worstCaseQuoteTokenAmount] =\n\t\t\t\t\tgetWorstCaseTokenAmounts(\n\t\t\t\t\t\tspotPosition,\n\t\t\t\t\t\tspotMarketAccount,\n\t\t\t\t\t\tthis.getOracleDataForSpotMarket(spotPosition.marketIndex)\n\t\t\t\t\t);\n\n\t\t\t\tlet newTotalLiabilityValue = totalLiabilityValue;\n\t\t\t\tif (worstCaseTokenAmount.lt(ZERO)) {\n\t\t\t\t\tconst baseLiabilityValue = this.getSpotLiabilityValue(\n\t\t\t\t\t\tworstCaseTokenAmount.abs(),\n\t\t\t\t\t\toraclePriceData,\n\t\t\t\t\t\tspotMarketAccount,\n\t\t\t\t\t\tmarginCategory,\n\t\t\t\t\t\tliquidationBuffer\n\t\t\t\t\t);\n\n\t\t\t\t\tnewTotalLiabilityValue =\n\t\t\t\t\t\tnewTotalLiabilityValue.add(baseLiabilityValue);\n\t\t\t\t}\n\n\t\t\t\tif (worstCaseQuoteTokenAmount.lt(ZERO)) {\n\t\t\t\t\tlet weight = SPOT_MARKET_WEIGHT_PRECISION;\n\t\t\t\t\tif (marginCategory === 'Initial') {\n\t\t\t\t\t\tweight = BN.max(\n\t\t\t\t\t\t\tweight,\n\t\t\t\t\t\t\tnew BN(this.getUserAccount().maxMarginRatio)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst weightedTokenValue = worstCaseQuoteTokenAmount\n\t\t\t\t\t\t.abs()\n\t\t\t\t\t\t.mul(weight)\n\t\t\t\t\t\t.div(SPOT_MARKET_WEIGHT_PRECISION);\n\n\t\t\t\t\tnewTotalLiabilityValue =\n\t\t\t\t\t\tnewTotalLiabilityValue.add(weightedTokenValue);\n\t\t\t\t}\n\n\t\t\t\tnewTotalLiabilityValue = newTotalLiabilityValue.add(\n\t\t\t\t\tnew BN(spotPosition.openOrders).mul(OPEN_ORDER_MARGIN_REQUIREMENT)\n\t\t\t\t);\n\n\t\t\t\treturn newTotalLiabilityValue;\n\t\t\t},\n\t\t\tZERO\n\t\t);\n\t}\n\n\tgetSpotLiabilityValue(\n\t\ttokenAmount: BN,\n\t\toraclePriceData: OraclePriceData,\n\t\tspotMarketAccount: SpotMarketAccount,\n\t\tmarginCategory?: MarginCategory,\n\t\tliquidationBuffer?: BN\n\t): BN {\n\t\tlet liabilityValue = getTokenValue(\n\t\t\ttokenAmount,\n\t\t\tspotMarketAccount.decimals,\n\t\t\toraclePriceData\n\t\t);\n\n\t\tif (marginCategory !== undefined) {\n\t\t\tlet weight = calculateLiabilityWeight(\n\t\t\t\ttokenAmount,\n\t\t\t\tspotMarketAccount,\n\t\t\t\tmarginCategory\n\t\t\t);\n\n\t\t\tif (marginCategory === 'Initial') {\n\t\t\t\tweight = BN.max(weight, new BN(this.getUserAccount().maxMarginRatio));\n\t\t\t}\n\n\t\t\tif (liquidationBuffer !== undefined) {\n\t\t\t\tweight = weight.add(liquidationBuffer);\n\t\t\t}\n\n\t\t\tliabilityValue = liabilityValue\n\t\t\t\t.mul(weight)\n\t\t\t\t.div(SPOT_MARKET_WEIGHT_PRECISION);\n\t\t}\n\n\t\treturn liabilityValue;\n\t}\n\n\tpublic getSpotMarketAssetValue(\n\t\tmarketIndex?: number,\n\t\tmarginCategory?: MarginCategory,\n\t\tincludeOpenOrders?: boolean\n\t): BN {\n\t\treturn this.getUserAccount().spotPositions.reduce(\n\t\t\t(totalAssetValue, spotPosition) => {\n\t\t\t\tif (\n\t\t\t\t\tisSpotPositionAvailable(spotPosition) ||\n\t\t\t\t\t(marketIndex !== undefined &&\n\t\t\t\t\t\tspotPosition.marketIndex !== marketIndex)\n\t\t\t\t) {\n\t\t\t\t\treturn totalAssetValue;\n\t\t\t\t}\n\n\t\t\t\t// Todo this needs to account for whether it's based on initial or maintenance requirements\n\t\t\t\tconst spotMarketAccount: SpotMarketAccount =\n\t\t\t\t\tthis.driftClient.getSpotMarketAccount(spotPosition.marketIndex);\n\n\t\t\t\tif (spotPosition.marketIndex === QUOTE_SPOT_MARKET_INDEX) {\n\t\t\t\t\tif (isVariant(spotPosition.balanceType, 'deposit')) {\n\t\t\t\t\t\tconst tokenAmount = getTokenAmount(\n\t\t\t\t\t\t\tspotPosition.scaledBalance,\n\t\t\t\t\t\t\tspotMarketAccount,\n\t\t\t\t\t\t\tspotPosition.balanceType\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn totalAssetValue.add(tokenAmount);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn totalAssetValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst oraclePriceData = this.getOracleDataForSpotMarket(\n\t\t\t\t\tspotPosition.marketIndex\n\t\t\t\t);\n\n\t\t\t\tif (!includeOpenOrders) {\n\t\t\t\t\tif (isVariant(spotPosition.balanceType, 'deposit')) {\n\t\t\t\t\t\tconst tokenAmount = getTokenAmount(\n\t\t\t\t\t\t\tspotPosition.scaledBalance,\n\t\t\t\t\t\t\tspotMarketAccount,\n\t\t\t\t\t\t\tspotPosition.balanceType\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst assetValue = this.getSpotAssetValue(\n\t\t\t\t\t\t\ttokenAmount,\n\t\t\t\t\t\t\toraclePriceData,\n\t\t\t\t\t\t\tspotMarketAccount,\n\t\t\t\t\t\t\tmarginCategory\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn totalAssetValue.add(assetValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn totalAssetValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst [worstCaseTokenAmount, worstCaseQuoteTokenAmount] =\n\t\t\t\t\tgetWorstCaseTokenAmounts(\n\t\t\t\t\t\tspotPosition,\n\t\t\t\t\t\tspotMarketAccount,\n\t\t\t\t\t\tthis.getOracleDataForSpotMarket(spotPosition.marketIndex)\n\t\t\t\t\t);\n\n\t\t\t\tlet newTotalAssetValue = totalAssetValue;\n\t\t\t\tif (worstCaseTokenAmount.gt(ZERO)) {\n\t\t\t\t\tconst baseAssetValue = this.getSpotAssetValue(\n\t\t\t\t\t\tworstCaseTokenAmount,\n\t\t\t\t\t\toraclePriceData,\n\t\t\t\t\t\tspotMarketAccount,\n\t\t\t\t\t\tmarginCategory\n\t\t\t\t\t);\n\n\t\t\t\t\tnewTotalAssetValue = newTotalAssetValue.add(baseAssetValue);\n\t\t\t\t}\n\n\t\t\t\tif (worstCaseQuoteTokenAmount.gt(ZERO)) {\n\t\t\t\t\tnewTotalAssetValue = newTotalAssetValue.add(\n\t\t\t\t\t\tworstCaseQuoteTokenAmount\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn newTotalAssetValue;\n\t\t\t},\n\t\t\tZERO\n\t\t);\n\t}\n\n\tgetSpotAssetValue(\n\t\ttokenAmount: BN,\n\t\toraclePriceData: OraclePriceData,\n\t\tspotMarketAccount: SpotMarketAccount,\n\t\tmarginCategory?: MarginCategory\n\t): BN {\n\t\tlet assetValue = getTokenValue(\n\t\t\ttokenAmount,\n\t\t\tspotMarketAccount.decimals,\n\t\t\toraclePriceData\n\t\t);\n\n\t\tif (marginCategory !== undefined) {\n\t\t\tconst weight = calculateAssetWeight(\n\t\t\t\ttokenAmount,\n\t\t\t\tspotMarketAccount,\n\t\t\t\tmarginCategory\n\t\t\t);\n\n\t\t\tassetValue = assetValue.mul(weight).div(SPOT_MARKET_WEIGHT_PRECISION);\n\t\t}\n\n\t\treturn assetValue;\n\t}\n\n\tpublic getNetSpotMarketValue(withWeightMarginCategory?: MarginCategory): BN {\n\t\treturn this.getSpotMarketAssetValue(\n\t\t\tundefined,\n\t\t\twithWeightMarginCategory\n\t\t).sub(\n\t\t\tthis.getSpotMarketLiabilityValue(undefined, withWeightMarginCategory)\n\t\t);\n\t}\n\n\t/**\n\t * calculates TotalCollateral: collateral + unrealized pnl\n\t * @returns : Precision QUOTE_PRECISION\n\t */\n\tpublic getTotalCollateral(marginCategory: MarginCategory = 'Initial'): BN {\n\t\treturn this.getSpotMarketAssetValue(undefined, marginCategory, true).add(\n\t\t\tthis.getUnrealizedPNL(true, undefined, marginCategory)\n\t\t);\n\t}\n\n\t/**\n\t * calculates User Health by comparing total collateral and maint. margin requirement\n\t * @returns : number (value from [0, 100])\n\t */\n\tpublic getHealth(): number {\n\t\tconst userAccount = this.getUserAccount();\n\n\t\tif (\n\t\t\tisVariant(userAccount.status, 'beingLiquidated') ||\n\t\t\tisVariant(userAccount.status, 'bankrupt')\n\t\t) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst totalCollateral = this.getTotalCollateral('Maintenance');\n\t\tconst maintenanceMarginReq = this.getMaintenanceMarginRequirement();\n\n\t\tlet health: number;\n\n\t\tif (maintenanceMarginReq.eq(ZERO) && totalCollateral.gte(ZERO)) {\n\t\t\thealth = 100;\n\t\t} else if (totalCollateral.lte(ZERO)) {\n\t\t\thealth = 0;\n\t\t} else {\n\t\t\t// const totalCollateral = this.getTotalCollateral('Initial');\n\t\t\t// const maintenanceMarginReq = this.getMaintenanceMarginRequirement();\n\n\t\t\tconst marginRatio =\n\t\t\t\tthis.getMarginRatio().toNumber() / MARGIN_PRECISION.toNumber();\n\n\t\t\tconst maintenanceRatio =\n\t\t\t\t(maintenanceMarginReq.toNumber() / totalCollateral.toNumber()) *\n\t\t\t\tmarginRatio;\n\n\t\t\tconst healthP1 = Math.max(0, (marginRatio - maintenanceRatio) * 100) + 1;\n\n\t\t\thealth = Math.min(1, Math.log(healthP1) / Math.log(100)) * 100;\n\t\t\tif (health > 1) {\n\t\t\t\thealth = Math.round(health);\n\t\t\t} else {\n\t\t\t\thealth = Math.round(health * 100) / 100;\n\t\t\t}\n\t\t}\n\n\t\treturn health;\n\t}\n\n\t/**\n\t * calculates sum of position value across all positions in margin system\n\t * @returns : Precision QUOTE_PRECISION\n\t */\n\tgetTotalPerpPositionValue(\n\t\tmarginCategory?: MarginCategory,\n\t\tliquidationBuffer?: BN,\n\t\tincludeOpenOrders?: boolean\n\t): BN {\n\t\treturn this.getActivePerpPositions().reduce(\n\t\t\t(totalPerpValue, perpPosition) => {\n\t\t\t\tconst market = this.driftClient.getPerpMarketAccount(\n\t\t\t\t\tperpPosition.marketIndex\n\t\t\t\t);\n\n\t\t\t\tif (perpPosition.lpShares.gt(ZERO)) {\n\t\t\t\t\t// is an lp\n\t\t\t\t\t// clone so we dont mutate the position\n\t\t\t\t\tperpPosition = this.getClonedPosition(perpPosition);\n\n\t\t\t\t\t// settle position\n\t\t\t\t\tconst [settledPosition, dustBaa, _] = this.getSettledLPPosition(\n\t\t\t\t\t\tmarket.marketIndex\n\t\t\t\t\t);\n\t\t\t\t\tperpPosition.baseAssetAmount =\n\t\t\t\t\t\tsettledPosition.baseAssetAmount.add(dustBaa);\n\t\t\t\t\tperpPosition.quoteAssetAmount = settledPosition.quoteAssetAmount;\n\n\t\t\t\t\tconst [totalOpenBids, totalOpenAsks] = this.getPerpBidAsks(\n\t\t\t\t\t\tmarket.marketIndex\n\t\t\t\t\t);\n\n\t\t\t\t\tperpPosition.openAsks = totalOpenAsks;\n\t\t\t\t\tperpPosition.openBids = totalOpenBids;\n\t\t\t\t}\n\n\t\t\t\tlet valuationPrice = this.getOracleDataForPerpMarket(\n\t\t\t\t\tmarket.marketIndex\n\t\t\t\t).price;\n\n\t\t\t\tif (isVariant(market.status, 'settlement')) {\n\t\t\t\t\tvaluationPrice = market.expiryPrice;\n\t\t\t\t}\n\n\t\t\t\tconst baseAssetAmount = includeOpenOrders\n\t\t\t\t\t? calculateWorstCaseBaseAssetAmount(perpPosition)\n\t\t\t\t\t: perpPosition.baseAssetAmount;\n\n\t\t\t\tlet baseAssetValue = baseAssetAmount\n\t\t\t\t\t.abs()\n\t\t\t\t\t.mul(valuationPrice)\n\t\t\t\t\t.div(AMM_TO_QUOTE_PRECISION_RATIO.mul(PRICE_PRECISION));\n\n\t\t\t\tif (marginCategory) {\n\t\t\t\t\tlet marginRatio = new BN(\n\t\t\t\t\t\tcalculateMarketMarginRatio(\n\t\t\t\t\t\t\tmarket,\n\t\t\t\t\t\t\tbaseAssetAmount.abs(),\n\t\t\t\t\t\t\tmarginCategory\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t\tif (marginCategory === 'Initial') {\n\t\t\t\t\t\tmarginRatio = BN.max(\n\t\t\t\t\t\t\tmarginRatio,\n\t\t\t\t\t\t\tnew BN(this.getUserAccount().maxMarginRatio)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (liquidationBuffer !== undefined) {\n\t\t\t\t\t\tmarginRatio = marginRatio.add(liquidationBuffer);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isVariant(market.status, 'settlement')) {\n\t\t\t\t\t\tmarginRatio = ZERO;\n\t\t\t\t\t}\n\n\t\t\t\t\tbaseAssetValue = baseAssetValue\n\t\t\t\t\t\t.mul(marginRatio)\n\t\t\t\t\t\t.div(MARGIN_PRECISION);\n\n\t\t\t\t\tif (includeOpenOrders) {\n\t\t\t\t\t\tbaseAssetValue = baseAssetValue.add(\n\t\t\t\t\t\t\tnew BN(perpPosition.openOrders).mul(OPEN_ORDER_MARGIN_REQUIREMENT)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn totalPerpValue.add(baseAssetValue);\n\t\t\t},\n\t\t\tZERO\n\t\t);\n\t}\n\n\t/**\n\t * calculates position value in margin system\n\t * @returns : Precision QUOTE_PRECISION\n\t */\n\tpublic getPerpPositionValue(\n\t\tmarketIndex: number,\n\t\toraclePriceData: OraclePriceData\n\t): BN {\n\t\tconst userPosition =\n\t\t\tthis.getPerpPosition(marketIndex) || this.getEmptyPosition(marketIndex);\n\t\tconst market = this.driftClient.getPerpMarketAccount(\n\t\t\tuserPosition.marketIndex\n\t\t);\n\t\treturn calculateBaseAssetValueWithOracle(\n\t\t\tmarket,\n\t\t\tuserPosition,\n\t\t\toraclePriceData\n\t\t);\n\t}\n\n\tpublic getPositionSide(\n\t\tcurrentPosition: Pick<PerpPosition, 'baseAssetAmount'>\n\t): PositionDirection | undefined {\n\t\tif (currentPosition.baseAssetAmount.gt(ZERO)) {\n\t\t\treturn PositionDirection.LONG;\n\t\t} else if (currentPosition.baseAssetAmount.lt(ZERO)) {\n\t\t\treturn PositionDirection.SHORT;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * calculates average exit price (optionally for closing up to 100% of position)\n\t * @returns : Precision PRICE_PRECISION\n\t */\n\tpublic getPositionEstimatedExitPriceAndPnl(\n\t\tposition: PerpPosition,\n\t\tamountToClose?: BN,\n\t\tuseAMMClose = false\n\t): [BN, BN] {\n\t\tconst market = this.driftClient.getPerpMarketAccount(position.marketIndex);\n\n\t\tconst entryPrice = calculateEntryPrice(position);\n\n\t\tconst oraclePriceData = this.getOracleDataForPerpMarket(\n\t\t\tposition.marketIndex\n\t\t);\n\n\t\tif (amountToClose) {\n\t\t\tif (amountToClose.eq(ZERO)) {\n\t\t\t\treturn [calculateReservePrice(market, oraclePriceData), ZERO];\n\t\t\t}\n\t\t\tposition = {\n\t\t\t\tbaseAssetAmount: amountToClose,\n\t\t\t\tlastCumulativeFundingRate: position.lastCumulativeFundingRate,\n\t\t\t\tmarketIndex: position.marketIndex,\n\t\t\t\tquoteAssetAmount: position.quoteAssetAmount,\n\t\t\t} as PerpPosition;\n\t\t}\n\n\t\tlet baseAssetValue: BN;\n\n\t\tif (useAMMClose) {\n\t\t\tbaseAssetValue = calculateBaseAssetValue(\n\t\t\t\tmarket,\n\t\t\t\tposition,\n\t\t\t\toraclePriceData\n\t\t\t);\n\t\t} else {\n\t\t\tbaseAssetValue = calculateBaseAssetValueWithOracle(\n\t\t\t\tmarket,\n\t\t\t\tposition,\n\t\t\t\toraclePriceData\n\t\t\t);\n\t\t}\n\t\tif (position.baseAssetAmount.eq(ZERO)) {\n\t\t\treturn [ZERO, ZERO];\n\t\t}\n\n\t\tconst exitPrice = baseAssetValue\n\t\t\t.mul(AMM_TO_QUOTE_PRECISION_RATIO)\n\t\t\t.mul(PRICE_PRECISION)\n\t\t\t.div(position.baseAssetAmount.abs());\n\n\t\tconst pnlPerBase = exitPrice.sub(entryPrice);\n\t\tconst pnl = pnlPerBase\n\t\t\t.mul(position.baseAssetAmount)\n\t\t\t.div(PRICE_PRECISION)\n\t\t\t.div(AMM_TO_QUOTE_PRECISION_RATIO);\n\n\t\treturn [exitPrice, pnl];\n\t}\n\n\t/**\n\t * calculates current user leverage across all positions\n\t * @returns : Precision TEN_THOUSAND\n\t */\n\tpublic getLeverage(): BN {\n\t\tconst totalLiabilityValue = this.getTotalLiabilityValue();\n\n\t\tconst totalAssetValue = this.getTotalAssetValue();\n\n\t\tif (totalAssetValue.eq(ZERO) && totalLiabilityValue.eq(ZERO)) {\n\t\t\treturn ZERO;\n\t\t}\n\n\t\treturn totalLiabilityValue.mul(TEN_THOUSAND).div(totalAssetValue);\n\t}\n\n\tgetTotalLiabilityValue(marginCategory?: MarginCategory): BN {\n\t\treturn this.getTotalPerpPositionValue(marginCategory, undefined, true).add(\n\t\t\tthis.getSpotMarketLiabilityValue(\n\t\t\t\tundefined,\n\t\t\t\tmarginCategory,\n\t\t\t\tundefined,\n\t\t\t\ttrue\n\t\t\t)\n\t\t);\n\t}\n\n\tgetTotalAssetValue(marginCategory?: MarginCategory): BN {\n\t\treturn this.getSpotMarketAssetValue(undefined, marginCategory, true).add(\n\t\t\tthis.getUnrealizedPNL(true, undefined, marginCategory)\n\t\t);\n\t}\n\n\t/**\n\t * calculates max allowable leverage exceeding hitting requirement category\n\t * @params category {Initial, Maintenance}\n\t * @returns : Precision TEN_THOUSAND\n\t */\n\tpublic getMaxLeverage(\n\t\tmarketIndex: number,\n\t\tcategory: MarginCategory = 'Initial'\n\t): BN {\n\t\tconst market = this.driftClient.getPerpMarketAccount(marketIndex);\n\n\t\tconst totalAssetValue = this.getTotalAssetValue();\n\t\tif (totalAssetValue.eq(ZERO)) {\n\t\t\treturn ZERO;\n\t\t}\n\n\t\tconst totalLiabilityValue = this.getTotalLiabilityValue();\n\n\t\tconst marginRatio = calculateMarketMarginRatio(\n\t\t\tmarket,\n\t\t\t// worstCaseBaseAssetAmount.abs(),\n\t\t\tZERO, // todo\n\t\t\tcategory\n\t\t);\n\t\tconst freeCollateral = this.getFreeCollateral();\n\n\t\t// how much more liabilities can be opened w remaining free collateral\n\t\tconst additionalLiabilities = freeCollateral\n\t\t\t.mul(MARGIN_PRECISION)\n\t\t\t.div(new BN(marginRatio));\n\n\t\treturn totalLiabilityValue\n\t\t\t.add(additionalLiabilities)\n\t\t\t.mul(TEN_THOUSAND)\n\t\t\t.div(totalAssetValue);\n\t}\n\n\t/**\n\t * calculates margin ratio: total collateral / |total position value|\n\t * @returns : Precision TEN_THOUSAND\n\t */\n\tpublic getMarginRatio(marginCategory?: MarginCategory): BN {\n\t\tconst totalLiabilityValue = this.getTotalLiabilityValue(marginCategory);\n\n\t\tif (totalLiabilityValue.eq(ZERO)) {\n\t\t\treturn BN_MAX;\n\t\t}\n\n\t\tconst totalAssetValue = this.getTotalAssetValue(marginCategory);\n\n\t\treturn totalAssetValue.mul(TEN_THOUSAND).div(totalLiabilityValue);\n\t}\n\n\tpublic canBeLiquidated(): boolean {\n\t\tconst totalCollateral = this.getTotalCollateral('Maintenance');\n\n\t\t// if user being liq'd, can continue to be liq'd until total collateral above the margin requirement plus buffer\n\t\tlet liquidationBuffer = undefined;\n\t\tconst isBeingLiquidated = isVariant(\n\t\t\tthis.getUserAccount().status,\n\t\t\t'beingLiquidated'\n\t\t);\n\n\t\tif (isBeingLiquidated) {\n\t\t\tliquidationBuffer = new BN(\n\t\t\t\tthis.driftClient.getStateAccount().liquidationMarginBufferRatio\n\t\t\t);\n\t\t}\n\t\tconst maintenanceRequirement =\n\t\t\tthis.getMaintenanceMarginRequirement(liquidationBuffer);\n\t\treturn totalCollateral.lt(maintenanceRequirement);\n\t}\n\n\tpublic isBeingLiquidated(): boolean {\n\t\treturn isOneOfVariant(this.getUserAccount().status, [\n\t\t\t'beingLiquidated',\n\t\t\t'bankrupt',\n\t\t]);\n\t}\n\n\tpublic isBankrupt(): boolean {\n\t\treturn isVariant(this.getUserAccount().status, 'bankrupt');\n\t}\n\n\t/**\n\t * Checks if any user position cumulative funding differs from respective market cumulative funding\n\t * @returns\n\t */\n\tpublic needsToSettleFundingPayment(): boolean {\n\t\tfor (const userPosition of this.getUserAccount().perpPositions) {\n\t\t\tif (userPosition.baseAssetAmount.eq(ZERO)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst market = this.driftClient.getPerpMarketAccount(\n\t\t\t\tuserPosition.marketIndex\n\t\t\t);\n\t\t\tif (\n\t\t\t\tmarket.amm.cumulativeFundingRateLong.eq(\n\t\t\t\t\tuserPosition.lastCumulativeFundingRate\n\t\t\t\t) ||\n\t\t\t\tmarket.amm.cumulativeFundingRateShort.eq(\n\t\t\t\t\tuserPosition.lastCumulativeFundingRate\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Calculate the liquidation price of a perp position, with optional parameter to calculate the liquidation price after a trade\n\t * @param PerpPosition\n\t * @param positionBaseSizeChange // change in position size to calculate liquidation price for : Precision 10^13\n\t * @param partial\n\t * @returns Precision : PRICE_PRECISION\n\t */\n\tpublic spotLiquidationPrice(\n\t\tspotPosition: Pick<SpotPosition, 'marketIndex'>\n\t): BN {\n\t\tconst currentSpotPosition = this.getSpotPosition(spotPosition.marketIndex);\n\n\t\tconst mtc = this.getTotalCollateral('Maintenance');\n\t\tconst mmr = this.getMaintenanceMarginRequirement();\n\n\t\tconst deltaValueToLiq = mtc.sub(mmr); // QUOTE_PRECISION\n\n\t\tconst currentSpotMarket = this.driftClient.getSpotMarketAccount(\n\t\t\tspotPosition.marketIndex\n\t\t);\n\t\tconst tokenAmount = getTokenAmount(\n\t\t\tcurrentSpotPosition.scaledBalance,\n\t\t\tcurrentSpotMarket,\n\t\t\tcurrentSpotPosition.balanceType\n\t\t);\n\t\tconst tokenAmountQP = tokenAmount\n\t\t\t.mul(QUOTE_PRECISION)\n\t\t\t.div(new BN(10 ** currentSpotMarket.decimals));\n\n\t\tif (tokenAmountQP.abs().eq(ZERO)) {\n\t\t\treturn new BN(-1);\n\t\t}\n\t\tlet liqPriceDelta: BN;\n\t\tif (isVariant(currentSpotPosition.balanceType, 'borrow')) {\n\t\t\tliqPriceDelta = deltaValueToLiq\n\t\t\t\t.mul(PRICE_PRECISION)\n\t\t\t\t.mul(SPOT_MARKET_WEIGHT_PRECISION)\n\t\t\t\t.div(tokenAmountQP)\n\t\t\t\t.div(new BN(currentSpotMarket.maintenanceLiabilityWeight));\n\t\t} else {\n\t\t\tliqPriceDelta = deltaValueToLiq\n\t\t\t\t.mul(PRICE_PRECISION)\n\t\t\t\t.mul(SPOT_MARKET_WEIGHT_PRECISION)\n\t\t\t\t.div(tokenAmountQP)\n\t\t\t\t.div(new BN(currentSpotMarket.maintenanceAssetWeight))\n\t\t\t\t.mul(new BN(-1));\n\t\t}\n\n\t\tconst currentPrice = this.driftClient.getOracleDataForSpotMarket(\n\t\t\tspotPosition.marketIndex\n\t\t).price;\n\n\t\tconst liqPrice = currentPrice.add(liqPriceDelta);\n\n\t\treturn liqPrice;\n\t}\n\n\t/**\n\t * Calculate the liquidation price of a perp position, with optional parameter to calculate the liquidation price after a trade\n\t * @param PerpPosition\n\t * @param positionBaseSizeChange // change in position size to calculate liquidation price for : Precision 10^13\n\t * @param partial\n\t * @returns Precision : PRICE_PRECISION\n\t */\n\tpublic liquidationPrice(\n\t\tperpPosition: Pick<PerpPosition, 'marketIndex'>,\n\t\tpositionBaseSizeChange: BN = ZERO\n\t): BN {\n\t\t// solves formula for example canBeLiquidated below\n\n\t\t/* example: assume BTC price is $40k (examine 10% up/down)\n\n        if 10k deposit and levered 10x short BTC => BTC up $400 means:\n        1. higher base_asset_value (+$4k)\n        2. lower collateral (-$4k)\n        3. (10k - 4k)/(100k + 4k) => 6k/104k => .0576\n\n        for 10x long, BTC down $400:\n        3. (10k - 4k) / (100k - 4k) = 6k/96k => .0625 */\n\n\t\tconst totalCollateral = this.getTotalCollateral();\n\n\t\t// calculate the total position value ignoring any value from the target market of the trade\n\t\tconst totalPositionValueExcludingTargetMarket =\n\t\t\tthis.getTotalPerpPositionValueExcludingMarket(perpPosition.marketIndex);\n\n\t\tconst currentPerpPosition =\n\t\t\tthis.getPerpPosition(perpPosition.marketIndex) ||\n\t\t\tthis.getEmptyPosition(perpPosition.marketIndex);\n\n\t\tconst currentPerpPositionBaseSize = currentPerpPosition.baseAssetAmount;\n\n\t\tconst proposedBaseAssetAmount = currentPerpPositionBaseSize.add(\n\t\t\tpositionBaseSizeChange\n\t\t);\n\n\t\t// calculate position for current market after trade\n\t\tconst proposedPerpPosition: PerpPosition = {\n\t\t\tmarketIndex: perpPosition.marketIndex,\n\t\t\tbaseAssetAmount: proposedBaseAssetAmount,\n\t\t\tremainderBaseAssetAmount: 0,\n\t\t\tquoteAssetAmount: new BN(0),\n\t\t\tlastCumulativeFundingRate: ZERO,\n\t\t\tquoteBreakEvenAmount: new BN(0),\n\t\t\tquoteEntryAmount: new BN(0),\n\t\t\topenOrders: 0,\n\t\t\topenBids: new BN(0),\n\t\t\topenAsks: new BN(0),\n\t\t\tsettledPnl: ZERO,\n\t\t\tlpShares: ZERO,\n\t\t\tlastBaseAssetAmountPerLp: ZERO,\n\t\t\tlastQuoteAssetAmountPerLp: ZERO,\n\t\t};\n\n\t\tif (proposedBaseAssetAmount.eq(ZERO)) return new BN(-1);\n\n\t\tconst market = this.driftClient.getPerpMarketAccount(\n\t\t\tproposedPerpPosition.marketIndex\n\t\t);\n\n\t\tconst proposedPerpPositionValue = calculateBaseAssetValueWithOracle(\n\t\t\tmarket,\n\t\t\tproposedPerpPosition,\n\t\t\tthis.getOracleDataForPerpMarket(market.marketIndex)\n\t\t);\n\n\t\t// total position value after trade\n\t\tconst totalPositionValueAfterTrade =\n\t\t\ttotalPositionValueExcludingTargetMarket.add(proposedPerpPositionValue);\n\n\t\tconst marginRequirementExcludingTargetMarket =\n\t\t\tthis.getUserAccount().perpPositions.reduce(\n\t\t\t\t(totalMarginRequirement, position) => {\n\t\t\t\t\tif (position.marketIndex !== perpPosition.marketIndex) {\n\t\t\t\t\t\tconst market = this.driftClient.getPerpMarketAccount(\n\t\t\t\t\t\t\tposition.marketIndex\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst positionValue = calculateBaseAssetValueWithOracle(\n\t\t\t\t\t\t\tmarket,\n\t\t\t\t\t\t\tposition,\n\t\t\t\t\t\t\tthis.getOracleDataForPerpMarket(market.marketIndex)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst marketMarginRequirement = positionValue\n\t\t\t\t\t\t\t.mul(\n\t\t\t\t\t\t\t\tnew BN(\n\t\t\t\t\t\t\t\t\tcalculateMarketMarginRatio(\n\t\t\t\t\t\t\t\t\t\tmarket,\n\t\t\t\t\t\t\t\t\t\tposition.baseAssetAmount.abs(),\n\t\t\t\t\t\t\t\t\t\t'Maintenance'\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.div(MARGIN_PRECISION);\n\t\t\t\t\t\ttotalMarginRequirement = totalMarginRequirement.add(\n\t\t\t\t\t\t\tmarketMarginRequirement\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn totalMarginRequirement;\n\t\t\t\t},\n\t\t\t\tZERO\n\t\t\t);\n\n\t\tconst freeCollateralExcludingTargetMarket = totalCollateral.sub(\n\t\t\tmarginRequirementExcludingTargetMarket\n\t\t);\n\n\t\t// if the position value after the trade is less than free collateral, there is no liq price\n\t\tif (\n\t\t\ttotalPositionValueAfterTrade.lte(freeCollateralExcludingTargetMarket) &&\n\t\t\tproposedPerpPosition.baseAssetAmount.abs().gt(ZERO)\n\t\t) {\n\t\t\treturn new BN(-1);\n\t\t}\n\n\t\tconst marginRequirementAfterTrade =\n\t\t\tmarginRequirementExcludingTargetMarket.add(\n\t\t\t\tproposedPerpPositionValue\n\t\t\t\t\t.mul(\n\t\t\t\t\t\tnew BN(\n\t\t\t\t\t\t\tcalculateMarketMarginRatio(\n\t\t\t\t\t\t\t\tmarket,\n\t\t\t\t\t\t\t\tproposedPerpPosition.baseAssetAmount.abs(),\n\t\t\t\t\t\t\t\t'Maintenance'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t\t.div(MARGIN_PRECISION)\n\t\t\t);\n\t\tconst freeCollateralAfterTrade = totalCollateral.sub(\n\t\t\tmarginRequirementAfterTrade\n\t\t);\n\n\t\tconst marketMaxLeverage = this.getMaxLeverage(\n\t\t\tproposedPerpPosition.marketIndex,\n\t\t\t'Maintenance'\n\t\t);\n\n\t\tlet priceDelta;\n\t\tif (proposedBaseAssetAmount.lt(ZERO)) {\n\t\t\tpriceDelta = freeCollateralAfterTrade\n\t\t\t\t.mul(marketMaxLeverage) // precision is TEN_THOUSAND\n\t\t\t\t.div(marketMaxLeverage.add(TEN_THOUSAND))\n\t\t\t\t.mul(PRICE_TO_QUOTE_PRECISION)\n\t\t\t\t.mul(AMM_RESERVE_PRECISION)\n\t\t\t\t.div(proposedBaseAssetAmount);\n\t\t} else {\n\t\t\tpriceDelta = freeCollateralAfterTrade\n\t\t\t\t.mul(marketMaxLeverage) // precision is TEN_THOUSAND\n\t\t\t\t.div(marketMaxLeverage.sub(TEN_THOUSAND))\n\t\t\t\t.mul(PRICE_TO_QUOTE_PRECISION)\n\t\t\t\t.mul(AMM_RESERVE_PRECISION)\n\t\t\t\t.div(proposedBaseAssetAmount);\n\t\t}\n\n\t\tlet markPriceAfterTrade;\n\t\tif (positionBaseSizeChange.eq(ZERO)) {\n\t\t\tmarkPriceAfterTrade = calculateReservePrice(\n\t\t\t\tthis.driftClient.getPerpMarketAccount(perpPosition.marketIndex),\n\t\t\t\tthis.getOracleDataForPerpMarket(perpPosition.marketIndex)\n\t\t\t);\n\t\t} else {\n\t\t\tconst direction = positionBaseSizeChange.gt(ZERO)\n\t\t\t\t? PositionDirection.LONG\n\t\t\t\t: PositionDirection.SHORT;\n\t\t\tmarkPriceAfterTrade = calculateTradeSlippage(\n\t\t\t\tdirection,\n\t\t\t\tpositionBaseSizeChange.abs(),\n\t\t\t\tthis.driftClient.getPerpMarketAccount(perpPosition.marketIndex),\n\t\t\t\t'base',\n\t\t\t\tthis.getOracleDataForPerpMarket(perpPosition.marketIndex)\n\t\t\t)[3]; // newPrice after swap\n\t\t}\n\n\t\tif (priceDelta.gt(markPriceAfterTrade)) {\n\t\t\treturn new BN(-1);\n\t\t}\n\n\t\treturn markPriceAfterTrade.sub(priceDelta);\n\t}\n\n\t/**\n\t * Calculates the estimated liquidation price for a position after closing a quote amount of the position.\n\t * @param positionMarketIndex\n\t * @param closeQuoteAmount\n\t * @returns : Precision PRICE_PRECISION\n\t */\n\tpublic liquidationPriceAfterClose(\n\t\tpositionMarketIndex: number,\n\t\tcloseQuoteAmount: BN\n\t): BN {\n\t\tconst currentPosition =\n\t\t\tthis.getPerpPosition(positionMarketIndex) ||\n\t\t\tthis.getEmptyPosition(positionMarketIndex);\n\n\t\tconst closeBaseAmount = currentPosition.baseAssetAmount\n\t\t\t.mul(closeQuoteAmount)\n\t\t\t.div(currentPosition.quoteAssetAmount.abs())\n\t\t\t.add(\n\t\t\t\tcurrentPosition.baseAssetAmount\n\t\t\t\t\t.mul(closeQuoteAmount)\n\t\t\t\t\t.mod(currentPosition.quoteAssetAmount.abs())\n\t\t\t)\n\t\t\t.neg();\n\n\t\treturn this.liquidationPrice(\n\t\t\t{\n\t\t\t\tmarketIndex: positionMarketIndex,\n\t\t\t},\n\t\t\tcloseBaseAmount\n\t\t);\n\t}\n\n\t/**\n\t * Get the maximum trade size for a given market, taking into account the user's current leverage, positions, collateral, etc.\n\t *\n\t * To Calculate Max Quote Available:\n\t *\n\t * Case 1: SameSide\n\t * \t=> Remaining quote to get to maxLeverage\n\t *\n\t * Case 2: NOT SameSide && currentLeverage <= maxLeverage\n\t * \t=> Current opposite position x2 + remaining to get to maxLeverage\n\t *\n\t * Case 3: NOT SameSide && currentLeverage > maxLeverage && otherPositions - currentPosition > maxLeverage\n\t * \t=> strictly reduce current position size\n\t *\n\t * Case 4: NOT SameSide && currentLeverage > maxLeverage && otherPositions - currentPosition < maxLeverage\n\t * \t=> current position + remaining to get to maxLeverage\n\t *\n\t * @param targetMarketIndex\n\t * @param tradeSide\n\t * @returns tradeSizeAllowed : Precision QUOTE_PRECISION\n\t */\n\tpublic getMaxTradeSizeUSDC(\n\t\ttargetMarketIndex: number,\n\t\ttradeSide: PositionDirection\n\t): BN {\n\t\tconst currentPosition =\n\t\t\tthis.getPerpPosition(targetMarketIndex) ||\n\t\t\tthis.getEmptyPosition(targetMarketIndex);\n\n\t\tconst targetSide = isVariant(tradeSide, 'short') ? 'short' : 'long';\n\n\t\tconst currentPositionSide = currentPosition?.baseAssetAmount.isNeg()\n\t\t\t? 'short'\n\t\t\t: 'long';\n\n\t\tconst targetingSameSide = !currentPosition\n\t\t\t? true\n\t\t\t: targetSide === currentPositionSide;\n\n\t\tconst oracleData = this.getOracleDataForPerpMarket(targetMarketIndex);\n\n\t\t// add any position we have on the opposite side of the current trade, because we can \"flip\" the size of this position without taking any extra leverage.\n\t\tconst oppositeSizeValueUSDC = targetingSameSide\n\t\t\t? ZERO\n\t\t\t: this.getPerpPositionValue(targetMarketIndex, oracleData);\n\n\t\tlet maxPositionSize = this.getBuyingPower(targetMarketIndex);\n\t\tif (maxPositionSize.gte(ZERO)) {\n\t\t\tif (oppositeSizeValueUSDC.eq(ZERO)) {\n\t\t\t\t// case 1 : Regular trade where current total position less than max, and no opposite position to account for\n\t\t\t\t// do nothing\n\t\t\t} else {\n\t\t\t\t// case 2 : trade where current total position less than max, but need to account for flipping the current position over to the other side\n\t\t\t\tmaxPositionSize = maxPositionSize.add(\n\t\t\t\t\toppositeSizeValueUSDC.mul(new BN(2))\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// current leverage is greater than max leverage - can only reduce position size\n\n\t\t\tif (!targetingSameSide) {\n\t\t\t\tconst market = this.driftClient.getPerpMarketAccount(targetMarketIndex);\n\t\t\t\tconst perpPositionValue = this.getPerpPositionValue(\n\t\t\t\t\ttargetMarketIndex,\n\t\t\t\t\toracleData\n\t\t\t\t);\n\t\t\t\tconst totalCollateral = this.getTotalCollateral();\n\t\t\t\tconst marginRequirement = this.getInitialMarginRequirement();\n\t\t\t\tconst marginFreedByClosing = perpPositionValue\n\t\t\t\t\t.mul(new BN(market.marginRatioInitial))\n\t\t\t\t\t.div(MARGIN_PRECISION);\n\t\t\t\tconst marginRequirementAfterClosing =\n\t\t\t\t\tmarginRequirement.sub(marginFreedByClosing);\n\n\t\t\t\tif (marginRequirementAfterClosing.gt(totalCollateral)) {\n\t\t\t\t\tmaxPositionSize = perpPositionValue;\n\t\t\t\t} else {\n\t\t\t\t\tconst freeCollateralAfterClose = totalCollateral.sub(\n\t\t\t\t\t\tmarginRequirementAfterClosing\n\t\t\t\t\t);\n\t\t\t\t\tconst buyingPowerAfterClose = freeCollateralAfterClose\n\t\t\t\t\t\t.mul(this.getMaxLeverage(targetMarketIndex))\n\t\t\t\t\t\t.div(TEN_THOUSAND);\n\t\t\t\t\tmaxPositionSize = perpPositionValue.add(buyingPowerAfterClose);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// do nothing if targetting same side\n\t\t\t}\n\t\t}\n\n\t\t// subtract oneMillionth of maxPositionSize\n\t\t// => to avoid rounding errors when taking max leverage\n\t\tconst oneMilli = maxPositionSize.div(QUOTE_PRECISION);\n\t\treturn maxPositionSize.sub(oneMilli);\n\t}\n\n\t// TODO - should this take the price impact of the trade into account for strict accuracy?\n\n\t/**\n\t * Returns the leverage ratio for the account after adding (or subtracting) the given quote size to the given position\n\t * @param targetMarketIndex\n\t * @param positionMarketIndex\n\t * @param tradeQuoteAmount\n\t * @returns leverageRatio : Precision TEN_THOUSAND\n\t */\n\tpublic accountLeverageRatioAfterTrade(\n\t\ttargetMarketIndex: number,\n\t\ttradeQuoteAmount: BN,\n\t\ttradeSide: PositionDirection,\n\t\tincludeOpenOrders = true\n\t): BN {\n\t\tconst currentPosition =\n\t\t\tthis.getPerpPosition(targetMarketIndex) ||\n\t\t\tthis.getEmptyPosition(targetMarketIndex);\n\n\t\tconst oracleData = this.getOracleDataForPerpMarket(targetMarketIndex);\n\n\t\tlet currentPositionQuoteAmount = this.getPerpPositionValue(\n\t\t\ttargetMarketIndex,\n\t\t\toracleData\n\t\t);\n\n\t\tconst currentSide =\n\t\t\tcurrentPosition && currentPosition.baseAssetAmount.isNeg()\n\t\t\t\t? PositionDirection.SHORT\n\t\t\t\t: PositionDirection.LONG;\n\n\t\tif (currentSide === PositionDirection.SHORT)\n\t\t\tcurrentPositionQuoteAmount = currentPositionQuoteAmount.neg();\n\n\t\tif (tradeSide === PositionDirection.SHORT)\n\t\t\ttradeQuoteAmount = tradeQuoteAmount.neg();\n\n\t\tconst currentPerpPositionAfterTrade = currentPositionQuoteAmount\n\t\t\t.add(tradeQuoteAmount)\n\t\t\t.abs();\n\n\t\tconst totalPositionAfterTradeExcludingTargetMarket =\n\t\t\tthis.getTotalPerpPositionValueExcludingMarket(\n\t\t\t\ttargetMarketIndex,\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\tincludeOpenOrders\n\t\t\t);\n\n\t\tconst totalAssetValue = this.getTotalAssetValue();\n\n\t\tconst totalPerpPositionValue = currentPerpPositionAfterTrade\n\t\t\t.add(totalPositionAfterTradeExcludingTargetMarket)\n\t\t\t.abs();\n\n\t\tconst totalLiabilitiesAfterTrade = totalPerpPositionValue.add(\n\t\t\tthis.getSpotMarketLiabilityValue(undefined, undefined, undefined, false)\n\t\t);\n\n\t\tif (totalAssetValue.eq(ZERO) && totalLiabilitiesAfterTrade.eq(ZERO)) {\n\t\t\treturn ZERO;\n\t\t}\n\n\t\tconst newLeverage = totalLiabilitiesAfterTrade\n\t\t\t.mul(TEN_THOUSAND)\n\t\t\t.div(totalAssetValue);\n\n\t\treturn newLeverage;\n\t}\n\n\t/**\n\t * Calculates how much fee will be taken for a given sized trade\n\t * @param quoteAmount\n\t * @returns feeForQuote : Precision QUOTE_PRECISION\n\t */\n\tpublic calculateFeeForQuoteAmount(quoteAmount: BN): BN {\n\t\tconst feeTier =\n\t\t\tthis.driftClient.getStateAccount().perpFeeStructure.feeTiers[0];\n\t\treturn quoteAmount\n\t\t\t.mul(new BN(feeTier.feeNumerator))\n\t\t\t.div(new BN(feeTier.feeDenominator));\n\t}\n\n\t/**\n\t * Calculates a user's max withdrawal amounts for a spot market. If reduceOnly is true,\n\t * it will return the max withdrawal amount without opening a liability for the user\n\t * @param marketIndex\n\t * @returns withdrawalLimit : Precision is the token precision for the chosen SpotMarket\n\t */\n\tpublic getWithdrawalLimit(marketIndex: number, reduceOnly?: boolean): BN {\n\t\tconst nowTs = new BN(Math.floor(Date.now() / 1000));\n\t\tconst spotMarket = this.driftClient.getSpotMarketAccount(marketIndex);\n\n\t\tconst { borrowLimit, withdrawLimit } = calculateWithdrawLimit(\n\t\t\tspotMarket,\n\t\t\tnowTs\n\t\t);\n\n\t\tconst freeCollateral = this.getFreeCollateral();\n\t\tconst oracleData = this.getOracleDataForSpotMarket(marketIndex);\n\t\tconst precisionIncrease = TEN.pow(new BN(spotMarket.decimals - 6));\n\n\t\tconst amountWithdrawable = freeCollateral\n\t\t\t.mul(MARGIN_PRECISION)\n\t\t\t.div(new BN(spotMarket.initialAssetWeight))\n\t\t\t.mul(PRICE_PRECISION)\n\t\t\t.div(oracleData.price)\n\t\t\t.mul(precisionIncrease);\n\n\t\tconst userSpotPosition = this.getUserAccount().spotPositions.find(\n\t\t\t(spotPosition) =>\n\t\t\t\tisVariant(spotPosition.balanceType, 'deposit') &&\n\t\t\t\tspotPosition.marketIndex == marketIndex\n\t\t);\n\n\t\tconst userSpotBalance = userSpotPosition\n\t\t\t? getTokenAmount(\n\t\t\t\t\tuserSpotPosition.scaledBalance,\n\t\t\t\t\tthis.driftClient.getSpotMarketAccount(marketIndex),\n\t\t\t\t\tSpotBalanceType.DEPOSIT\n\t\t\t  )\n\t\t\t: ZERO;\n\n\t\tconst maxWithdrawValue = BN.min(\n\t\t\tBN.min(amountWithdrawable, userSpotBalance),\n\t\t\twithdrawLimit.abs()\n\t\t);\n\n\t\tif (reduceOnly) {\n\t\t\treturn BN.max(maxWithdrawValue, ZERO);\n\t\t} else {\n\t\t\tconst weightedAssetValue = this.getSpotMarketAssetValue(\n\t\t\t\tmarketIndex,\n\t\t\t\t'Initial',\n\t\t\t\tfalse\n\t\t\t);\n\n\t\t\tconst freeCollatAfterWithdraw = userSpotBalance.gt(ZERO)\n\t\t\t\t? freeCollateral.sub(weightedAssetValue)\n\t\t\t\t: freeCollateral;\n\n\t\t\tconst maxLiabilityAllowed = freeCollatAfterWithdraw\n\t\t\t\t.mul(MARGIN_PRECISION)\n\t\t\t\t.div(new BN(spotMarket.initialLiabilityWeight))\n\t\t\t\t.mul(PRICE_PRECISION)\n\t\t\t\t.div(oracleData.price)\n\t\t\t\t.mul(precisionIncrease);\n\n\t\t\tconst maxBorrowValue = BN.min(\n\t\t\t\tmaxWithdrawValue.add(maxLiabilityAllowed),\n\t\t\t\tborrowLimit.abs()\n\t\t\t);\n\n\t\t\treturn BN.max(maxBorrowValue, ZERO);\n\t\t}\n\t}\n\n\t/**\n\t * Get the total position value, excluding any position coming from the given target market\n\t * @param marketToIgnore\n\t * @returns positionValue : Precision QUOTE_PRECISION\n\t */\n\tprivate getTotalPerpPositionValueExcludingMarket(\n\t\tmarketToIgnore: number,\n\t\tmarginCategory?: MarginCategory,\n\t\tliquidationBuffer?: BN,\n\t\tincludeOpenOrders?: boolean\n\t): BN {\n\t\tconst currentPerpPosition =\n\t\t\tthis.getPerpPosition(marketToIgnore) ||\n\t\t\tthis.getEmptyPosition(marketToIgnore);\n\n\t\tconst oracleData = this.getOracleDataForPerpMarket(marketToIgnore);\n\n\t\tlet currentPerpPositionValueUSDC = ZERO;\n\t\tif (currentPerpPosition) {\n\t\t\tcurrentPerpPositionValueUSDC = this.getPerpPositionValue(\n\t\t\t\tmarketToIgnore,\n\t\t\t\toracleData\n\t\t\t);\n\t\t}\n\n\t\treturn this.getTotalPerpPositionValue(\n\t\t\tmarginCategory,\n\t\t\tliquidationBuffer,\n\t\t\tincludeOpenOrders\n\t\t).sub(currentPerpPositionValueUSDC);\n\t}\n\n\tprivate getOracleDataForPerpMarket(marketIndex: number): OraclePriceData {\n\t\tconst oracleKey =\n\t\t\tthis.driftClient.getPerpMarketAccount(marketIndex).amm.oracle;\n\t\tconst oracleData =\n\t\t\tthis.driftClient.getOraclePriceDataAndSlot(oracleKey).data;\n\n\t\treturn oracleData;\n\t}\n\tprivate getOracleDataForSpotMarket(marketIndex: number): OraclePriceData {\n\t\tconst oracleKey = this.driftClient.getSpotMarketAccount(marketIndex).oracle;\n\n\t\tconst oracleData =\n\t\t\tthis.driftClient.getOraclePriceDataAndSlot(oracleKey).data;\n\n\t\treturn oracleData;\n\t}\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { BN, DriftEnv, OracleSource } from '../';\nimport {\n\tQUOTE_PRECISION,\n\tQUOTE_PRECISION_EXP,\n\tLAMPORTS_EXP,\n\tLAMPORTS_PRECISION,\n\tSIX,\n} from './numericConstants';\n\nexport type SpotMarketConfig = {\n\tsymbol: string;\n\tmarketIndex: number;\n\toracle: PublicKey;\n\tmint: PublicKey;\n\toracleSource: OracleSource;\n\tprecision: BN;\n\tprecisionExp: BN;\n\tserumMarket?: PublicKey;\n};\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n\t'So11111111111111111111111111111111111111112'\n);\n\nexport const DevnetSpotMarkets: SpotMarketConfig[] = [\n\t{\n\t\tsymbol: 'USDC',\n\t\tmarketIndex: 0,\n\t\toracle: PublicKey.default,\n\t\toracleSource: OracleSource.QUOTE_ASSET,\n\t\tmint: new PublicKey('8zGuJQqwhZafTah7Uc7Z4tXRnguqkn5KLFAP8oV6PHe2'),\n\t\tprecision: new BN(10).pow(SIX),\n\t\tprecisionExp: SIX,\n\t},\n\t{\n\t\tsymbol: 'SOL',\n\t\tmarketIndex: 1,\n\t\toracle: new PublicKey('J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix'),\n\t\toracleSource: OracleSource.PYTH,\n\t\tmint: new PublicKey(WRAPPED_SOL_MINT),\n\t\tprecision: LAMPORTS_PRECISION,\n\t\tprecisionExp: LAMPORTS_EXP,\n\t\tserumMarket: new PublicKey('8N37SsnTu8RYxtjrV9SStjkkwVhmU8aCWhLvwduAPEKW'),\n\t},\n\t{\n\t\tsymbol: 'BTC',\n\t\tmarketIndex: 2,\n\t\toracle: new PublicKey('HovQMDrbAgAYPCmHVSrezcSmkMtXSSUsLDFANExrZh2J'),\n\t\toracleSource: OracleSource.PYTH,\n\t\tmint: new PublicKey('3BZPwbcqB5kKScF3TEXxwNfx5ipV13kbRVDvfVp5c6fv'),\n\t\tprecision: new BN(10).pow(SIX),\n\t\tprecisionExp: SIX,\n\t\tserumMarket: new PublicKey('AGsmbVu3MS9u68GEYABWosQQCZwmLcBHu4pWEuBYH7Za'),\n\t},\n];\n\nexport const MainnetSpotMarkets: SpotMarketConfig[] = [\n\t{\n\t\tsymbol: 'USDC',\n\t\tmarketIndex: 0,\n\t\toracle: PublicKey.default,\n\t\toracleSource: OracleSource.QUOTE_ASSET,\n\t\tmint: new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'),\n\t\tprecision: QUOTE_PRECISION,\n\t\tprecisionExp: QUOTE_PRECISION_EXP,\n\t},\n\t{\n\t\tsymbol: 'SOL',\n\t\tmarketIndex: 1,\n\t\toracle: new PublicKey('H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG'),\n\t\toracleSource: OracleSource.PYTH,\n\t\tmint: new PublicKey(WRAPPED_SOL_MINT),\n\t\tprecision: LAMPORTS_PRECISION,\n\t\tprecisionExp: LAMPORTS_EXP,\n\t\tserumMarket: new PublicKey('8BnEgHoWFysVcuFFX7QztDmzuH8r5ZFvyP3sYwn1XTh6'),\n\t},\n];\n\nexport const SpotMarkets: { [key in DriftEnv]: SpotMarketConfig[] } = {\n\tdevnet: DevnetSpotMarkets,\n\t'mainnet-beta': MainnetSpotMarkets,\n};\n","import {\n\tDevnetPerpMarkets,\n\tMainnetPerpMarkets,\n\tPerpMarketConfig,\n\tPerpMarkets,\n} from './constants/perpMarkets';\nimport {\n\tSpotMarketConfig,\n\tSpotMarkets,\n\tDevnetSpotMarkets,\n\tMainnetSpotMarkets,\n} from './constants/spotMarkets';\nimport { OracleInfo } from './oracles/types';\n\nexport type DriftConfig = {\n\tENV: DriftEnv;\n\tPYTH_ORACLE_MAPPING_ADDRESS: string;\n\tDRIFT_PROGRAM_ID: string;\n\tUSDC_MINT_ADDRESS: string;\n\tSERUM_V3: string;\n\tV2_ALPHA_TICKET_MINT_ADDRESS: string;\n\tPERP_MARKETS: PerpMarketConfig[];\n\tSPOT_MARKETS: SpotMarketConfig[];\n};\n\nexport type DriftEnv = 'devnet' | 'mainnet-beta';\n\nexport const configs: { [key in DriftEnv]: DriftConfig } = {\n\tdevnet: {\n\t\tENV: 'devnet',\n\t\tPYTH_ORACLE_MAPPING_ADDRESS: 'BmA9Z6FjioHJPpjT39QazZyhDRUdZy2ezwx4GiDdE2u2',\n\t\tDRIFT_PROGRAM_ID: 'dRiftyHA39MWEi3m9aunc5MzRF1JYuBsbn6VPcn33UH',\n\t\tUSDC_MINT_ADDRESS: '8zGuJQqwhZafTah7Uc7Z4tXRnguqkn5KLFAP8oV6PHe2',\n\t\tSERUM_V3: 'DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY',\n\t\tV2_ALPHA_TICKET_MINT_ADDRESS:\n\t\t\t'DeEiGWfCMP9psnLGkxGrBBMEAW5Jv8bBGMN8DCtFRCyB',\n\t\tPERP_MARKETS: DevnetPerpMarkets,\n\t\tSPOT_MARKETS: DevnetSpotMarkets,\n\t},\n\t'mainnet-beta': {\n\t\tENV: 'mainnet-beta',\n\t\tPYTH_ORACLE_MAPPING_ADDRESS: 'AHtgzX45WTKfkPG53L6WYhGEXwQkN1BVknET3sVsLL8J',\n\t\tDRIFT_PROGRAM_ID: 'dRiftyHA39MWEi3m9aunc5MzRF1JYuBsbn6VPcn33UH',\n\t\tUSDC_MINT_ADDRESS: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n\t\tSERUM_V3: 'srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX',\n\t\tV2_ALPHA_TICKET_MINT_ADDRESS:\n\t\t\t'Cmvhycb6LQvvzaShGw4iDHRLzeSSryioAsU98DSSkMNa',\n\t\tPERP_MARKETS: MainnetPerpMarkets,\n\t\tSPOT_MARKETS: MainnetSpotMarkets,\n\t},\n};\n\nlet currentConfig: DriftConfig = configs.devnet;\n\nexport const getConfig = (): DriftConfig => currentConfig;\n\n/**\n * Allows customization of the SDK's environment and endpoints. You can pass individual settings to override the settings with your own presets.\n *\n * Defaults to master environment if you don't use this function.\n * @param props\n * @returns\n */\nexport const initialize = (props: {\n\tenv: DriftEnv;\n\toverrideEnv?: Partial<DriftConfig>;\n}): DriftConfig => {\n\t//@ts-ignore\n\tif (props.env === 'master')\n\t\treturn { ...configs['devnet'], ...(props.overrideEnv ?? {}) };\n\n\tcurrentConfig = { ...configs[props.env], ...(props.overrideEnv ?? {}) };\n\n\treturn currentConfig;\n};\n\nexport function getMarketsAndOraclesForSubscription(env: DriftEnv): {\n\tperpMarketIndexes: number[];\n\tspotMarketIndexes: number[];\n\toracleInfos: OracleInfo[];\n} {\n\tconst perpMarketIndexes = [];\n\tconst spotMarketIndexes = [];\n\tconst oracleInfos = new Map<string, OracleInfo>();\n\n\tfor (const market of PerpMarkets[env]) {\n\t\tperpMarketIndexes.push(market.marketIndex);\n\t\toracleInfos.set(market.oracle.toString(), {\n\t\t\tpublicKey: market.oracle,\n\t\t\tsource: market.oracleSource,\n\t\t});\n\t}\n\n\tfor (const spotMarket of SpotMarkets[env]) {\n\t\tspotMarketIndexes.push(spotMarket.marketIndex);\n\t\toracleInfos.set(spotMarket.oracle.toString(), {\n\t\t\tpublicKey: spotMarket.oracle,\n\t\t\tsource: spotMarket.oracleSource,\n\t\t});\n\t}\n\n\treturn {\n\t\tperpMarketIndexes: perpMarketIndexes,\n\t\tspotMarketIndexes: spotMarketIndexes,\n\t\toracleInfos: Array.from(oracleInfos.values()),\n\t};\n}\n","import { DriftClient } from './driftClient';\nimport { PublicKey } from '@solana/web3.js';\nimport { DataAndSlot, UserStatsAccountSubscriber } from './accounts/types';\nimport { UserStatsConfig } from './userStatsConfig';\nimport { PollingUserStatsAccountSubscriber } from './accounts/pollingUserStatsAccountSubscriber';\nimport { WebSocketUserStatsAccountSubscriber } from './accounts/webSocketUserStatsAccountSubsriber';\nimport { ReferrerInfo, UserStatsAccount } from './types';\nimport {\n\tgetUserAccountPublicKeySync,\n\tgetUserStatsAccountPublicKey,\n} from './addresses/pda';\n\nexport class UserStats {\n\tdriftClient: DriftClient;\n\tuserStatsAccountPublicKey: PublicKey;\n\taccountSubscriber: UserStatsAccountSubscriber;\n\tisSubscribed: boolean;\n\n\tpublic constructor(config: UserStatsConfig) {\n\t\tthis.driftClient = config.driftClient;\n\t\tthis.userStatsAccountPublicKey = config.userStatsAccountPublicKey;\n\t\tif (config.accountSubscription?.type === 'polling') {\n\t\t\tthis.accountSubscriber = new PollingUserStatsAccountSubscriber(\n\t\t\t\tconfig.driftClient.program,\n\t\t\t\tconfig.userStatsAccountPublicKey,\n\t\t\t\tconfig.accountSubscription.accountLoader\n\t\t\t);\n\t\t} else {\n\t\t\tthis.accountSubscriber = new WebSocketUserStatsAccountSubscriber(\n\t\t\t\tconfig.driftClient.program,\n\t\t\t\tconfig.userStatsAccountPublicKey\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async subscribe(): Promise<boolean> {\n\t\tthis.isSubscribed = await this.accountSubscriber.subscribe();\n\t\treturn this.isSubscribed;\n\t}\n\n\tpublic async fetchAccounts(): Promise<void> {\n\t\tawait this.accountSubscriber.fetch();\n\t}\n\n\tpublic async unsubscribe(): Promise<void> {\n\t\tawait this.accountSubscriber.unsubscribe();\n\t\tthis.isSubscribed = false;\n\t}\n\n\tpublic getAccountAndSlot(): DataAndSlot<UserStatsAccount> {\n\t\treturn this.accountSubscriber.getUserStatsAccountAndSlot();\n\t}\n\n\tpublic getAccount(): UserStatsAccount {\n\t\treturn this.accountSubscriber.getUserStatsAccountAndSlot().data;\n\t}\n\n\tpublic getReferrerInfo(): ReferrerInfo | undefined {\n\t\tif (this.getAccount().referrer.equals(PublicKey.default)) {\n\t\t\treturn undefined;\n\t\t} else {\n\t\t\treturn {\n\t\t\t\treferrer: getUserAccountPublicKeySync(\n\t\t\t\t\tthis.driftClient.program.programId,\n\t\t\t\t\tthis.getAccount().referrer,\n\t\t\t\t\t0\n\t\t\t\t),\n\t\t\t\treferrerStats: getUserStatsAccountPublicKey(\n\t\t\t\t\tthis.driftClient.program.programId,\n\t\t\t\t\tthis.getAccount().referrer\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\t}\n}\n","import {\n\tDataAndSlot,\n\tAccountSubscriber,\n\tNotSubscribedError,\n\tUserStatsAccountSubscriber,\n\tUserStatsAccountEvents,\n} from './types';\nimport { Program } from '@project-serum/anchor';\nimport StrictEventEmitter from 'strict-event-emitter-types';\nimport { EventEmitter } from 'events';\nimport { PublicKey } from '@solana/web3.js';\nimport { WebSocketAccountSubscriber } from './webSocketAccountSubscriber';\nimport { UserStatsAccount } from '../types';\n\nexport class WebSocketUserStatsAccountSubscriber\n\timplements UserStatsAccountSubscriber\n{\n\tisSubscribed: boolean;\n\tprogram: Program;\n\teventEmitter: StrictEventEmitter<EventEmitter, UserStatsAccountEvents>;\n\tuserStatsAccountPublicKey: PublicKey;\n\n\tuserStatsAccountSubscriber: AccountSubscriber<UserStatsAccount>;\n\n\tpublic constructor(program: Program, userStatsAccountPublicKey: PublicKey) {\n\t\tthis.isSubscribed = false;\n\t\tthis.program = program;\n\t\tthis.userStatsAccountPublicKey = userStatsAccountPublicKey;\n\t\tthis.eventEmitter = new EventEmitter();\n\t}\n\n\tasync subscribe(): Promise<boolean> {\n\t\tif (this.isSubscribed) {\n\t\t\treturn true;\n\t\t}\n\n\t\tthis.userStatsAccountSubscriber = new WebSocketAccountSubscriber(\n\t\t\t'userStats',\n\t\t\tthis.program,\n\t\t\tthis.userStatsAccountPublicKey\n\t\t);\n\t\tawait this.userStatsAccountSubscriber.subscribe(\n\t\t\t(data: UserStatsAccount) => {\n\t\t\t\tthis.eventEmitter.emit('userStatsAccountUpdate', data);\n\t\t\t\tthis.eventEmitter.emit('update');\n\t\t\t}\n\t\t);\n\n\t\tthis.eventEmitter.emit('update');\n\t\tthis.isSubscribed = true;\n\t\treturn true;\n\t}\n\n\tasync fetch(): Promise<void> {\n\t\tawait Promise.all([this.userStatsAccountSubscriber.fetch()]);\n\t}\n\n\tasync unsubscribe(): Promise<void> {\n\t\tif (!this.isSubscribed) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait Promise.all([this.userStatsAccountSubscriber.unsubscribe()]);\n\n\t\tthis.isSubscribed = false;\n\t}\n\n\tassertIsSubscribed(): void {\n\t\tif (!this.isSubscribed) {\n\t\t\tthrow new NotSubscribedError(\n\t\t\t\t'You must call `subscribe` before using this function'\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic getUserStatsAccountAndSlot(): DataAndSlot<UserStatsAccount> {\n\t\tthis.assertIsSubscribed();\n\t\treturn this.userStatsAccountSubscriber.dataAndSlot;\n\t}\n}\n","import { PerpMarketAccount, PositionDirection } from '../types';\nimport { BN } from '@project-serum/anchor';\nimport { assert } from '../assert/assert';\nimport {\n\tPRICE_PRECISION,\n\tPEG_PRECISION,\n\tAMM_TO_QUOTE_PRECISION_RATIO,\n\tZERO,\n} from '../constants/numericConstants';\nimport {\n\tcalculateBidPrice,\n\tcalculateAskPrice,\n\tcalculateReservePrice,\n} from './market';\nimport {\n\tcalculateAmmReservesAfterSwap,\n\tcalculatePrice,\n\tgetSwapDirection,\n\tAssetType,\n\tcalculateUpdatedAMMSpreadReserves,\n\tcalculateQuoteAssetAmountSwapped,\n} from './amm';\nimport { squareRootBN } from './utils';\nimport { isVariant } from '../types';\nimport { OraclePriceData } from '../oracles/types';\n\nconst MAXPCT = new BN(1000); //percentage units are [0,1000] => [0,1]\n\nexport type PriceImpactUnit =\n\t| 'entryPrice'\n\t| 'maxPrice'\n\t| 'priceDelta'\n\t| 'priceDeltaAsNumber'\n\t| 'pctAvg'\n\t| 'pctMax'\n\t| 'quoteAssetAmount'\n\t| 'quoteAssetAmountPeg'\n\t| 'acquiredBaseAssetAmount'\n\t| 'acquiredQuoteAssetAmount'\n\t| 'all';\n\n/**\n * Calculates avg/max slippage (price impact) for candidate trade\n * @param direction\n * @param amount\n * @param market\n * @param inputAssetType which asset is being traded\n * @param useSpread whether to consider spread with calculating slippage\n * @return [pctAvgSlippage, pctMaxSlippage, entryPrice, newPrice]\n *\n * 'pctAvgSlippage' =>  the percentage change to entryPrice (average est slippage in execution) : Precision PRICE_PRECISION\n *\n * 'pctMaxSlippage' =>  the percentage change to maxPrice (highest est slippage in execution) : Precision PRICE_PRECISION\n *\n * 'entryPrice' => the average price of the trade : Precision PRICE_PRECISION\n *\n * 'newPrice' => the price of the asset after the trade : Precision PRICE_PRECISION\n */\nexport function calculateTradeSlippage(\n\tdirection: PositionDirection,\n\tamount: BN,\n\tmarket: PerpMarketAccount,\n\tinputAssetType: AssetType = 'quote',\n\toraclePriceData?: OraclePriceData,\n\tuseSpread = true\n): [BN, BN, BN, BN] {\n\tlet oldPrice: BN;\n\n\tif (useSpread && market.amm.baseSpread > 0) {\n\t\tif (isVariant(direction, 'long')) {\n\t\t\toldPrice = calculateAskPrice(market, oraclePriceData);\n\t\t} else {\n\t\t\toldPrice = calculateBidPrice(market, oraclePriceData);\n\t\t}\n\t} else {\n\t\toldPrice = calculateReservePrice(market, oraclePriceData);\n\t}\n\tif (amount.eq(ZERO)) {\n\t\treturn [ZERO, ZERO, oldPrice, oldPrice];\n\t}\n\tconst [acquiredBaseReserve, acquiredQuoteReserve, acquiredQuoteAssetAmount] =\n\t\tcalculateTradeAcquiredAmounts(\n\t\t\tdirection,\n\t\t\tamount,\n\t\t\tmarket,\n\t\t\tinputAssetType,\n\t\t\toraclePriceData,\n\t\t\tuseSpread\n\t\t);\n\n\tconst entryPrice = acquiredQuoteAssetAmount\n\t\t.mul(AMM_TO_QUOTE_PRECISION_RATIO)\n\t\t.mul(PRICE_PRECISION)\n\t\t.div(acquiredBaseReserve.abs());\n\n\tlet amm: Parameters<typeof calculateAmmReservesAfterSwap>[0];\n\tif (useSpread && market.amm.baseSpread > 0) {\n\t\tconst { baseAssetReserve, quoteAssetReserve, sqrtK, newPeg } =\n\t\t\tcalculateUpdatedAMMSpreadReserves(market.amm, direction, oraclePriceData);\n\t\tamm = {\n\t\t\tbaseAssetReserve,\n\t\t\tquoteAssetReserve,\n\t\t\tsqrtK: sqrtK,\n\t\t\tpegMultiplier: newPeg,\n\t\t};\n\t} else {\n\t\tamm = market.amm;\n\t}\n\n\tconst newPrice = calculatePrice(\n\t\tamm.baseAssetReserve.sub(acquiredBaseReserve),\n\t\tamm.quoteAssetReserve.sub(acquiredQuoteReserve),\n\t\tamm.pegMultiplier\n\t);\n\n\tif (direction == PositionDirection.SHORT) {\n\t\tassert(newPrice.lte(oldPrice));\n\t} else {\n\t\tassert(oldPrice.lte(newPrice));\n\t}\n\n\tconst pctMaxSlippage = newPrice\n\t\t.sub(oldPrice)\n\t\t.mul(PRICE_PRECISION)\n\t\t.div(oldPrice)\n\t\t.abs();\n\tconst pctAvgSlippage = entryPrice\n\t\t.sub(oldPrice)\n\t\t.mul(PRICE_PRECISION)\n\t\t.div(oldPrice)\n\t\t.abs();\n\n\treturn [pctAvgSlippage, pctMaxSlippage, entryPrice, newPrice];\n}\n\n/**\n * Calculates acquired amounts for trade executed\n * @param direction\n * @param amount\n * @param market\n * @param inputAssetType\n * @param useSpread\n * @return\n * \t| 'acquiredBase' =>  positive/negative change in user's base : BN AMM_RESERVE_PRECISION\n * \t| 'acquiredQuote' => positive/negative change in user's quote : BN TODO-PRECISION\n */\nexport function calculateTradeAcquiredAmounts(\n\tdirection: PositionDirection,\n\tamount: BN,\n\tmarket: PerpMarketAccount,\n\tinputAssetType: AssetType = 'quote',\n\toraclePriceData: OraclePriceData,\n\tuseSpread = true\n): [BN, BN, BN] {\n\tif (amount.eq(ZERO)) {\n\t\treturn [ZERO, ZERO, ZERO];\n\t}\n\n\tconst swapDirection = getSwapDirection(inputAssetType, direction);\n\n\tlet amm: Parameters<typeof calculateAmmReservesAfterSwap>[0];\n\tif (useSpread && market.amm.baseSpread > 0) {\n\t\tconst { baseAssetReserve, quoteAssetReserve, sqrtK, newPeg } =\n\t\t\tcalculateUpdatedAMMSpreadReserves(market.amm, direction, oraclePriceData);\n\t\tamm = {\n\t\t\tbaseAssetReserve,\n\t\t\tquoteAssetReserve,\n\t\t\tsqrtK: sqrtK,\n\t\t\tpegMultiplier: newPeg,\n\t\t};\n\t} else {\n\t\tamm = market.amm;\n\t}\n\n\tconst [newQuoteAssetReserve, newBaseAssetReserve] =\n\t\tcalculateAmmReservesAfterSwap(amm, inputAssetType, amount, swapDirection);\n\n\tconst acquiredBase = amm.baseAssetReserve.sub(newBaseAssetReserve);\n\tconst acquiredQuote = amm.quoteAssetReserve.sub(newQuoteAssetReserve);\n\tconst acquiredQuoteAssetAmount = calculateQuoteAssetAmountSwapped(\n\t\tacquiredQuote.abs(),\n\t\tamm.pegMultiplier,\n\t\tswapDirection\n\t);\n\n\treturn [acquiredBase, acquiredQuote, acquiredQuoteAssetAmount];\n}\n\n/**\n * calculateTargetPriceTrade\n * simple function for finding arbitraging trades\n * @param market\n * @param targetPrice\n * @param pct optional default is 100% gap filling, can set smaller.\n * @param outputAssetType which asset to trade.\n * @param useSpread whether or not to consider the spread when calculating the trade size\n * @returns trade direction/size in order to push price to a targetPrice,\n *\n * [\n *   direction => direction of trade required, PositionDirection\n *   tradeSize => size of trade required, TODO-PRECISION\n *   entryPrice => the entry price for the trade, PRICE_PRECISION\n *   targetPrice => the target price PRICE_PRECISION\n * ]\n */\nexport function calculateTargetPriceTrade(\n\tmarket: PerpMarketAccount,\n\ttargetPrice: BN,\n\tpct: BN = MAXPCT,\n\toutputAssetType: AssetType = 'quote',\n\toraclePriceData?: OraclePriceData,\n\tuseSpread = true\n): [PositionDirection, BN, BN, BN] {\n\tassert(market.amm.baseAssetReserve.gt(ZERO));\n\tassert(targetPrice.gt(ZERO));\n\tassert(pct.lte(MAXPCT) && pct.gt(ZERO));\n\n\tconst reservePriceBefore = calculateReservePrice(market, oraclePriceData);\n\tconst bidPriceBefore = calculateBidPrice(market, oraclePriceData);\n\tconst askPriceBefore = calculateAskPrice(market, oraclePriceData);\n\n\tlet direction;\n\tif (targetPrice.gt(reservePriceBefore)) {\n\t\tconst priceGap = targetPrice.sub(reservePriceBefore);\n\t\tconst priceGapScaled = priceGap.mul(pct).div(MAXPCT);\n\t\ttargetPrice = reservePriceBefore.add(priceGapScaled);\n\t\tdirection = PositionDirection.LONG;\n\t} else {\n\t\tconst priceGap = reservePriceBefore.sub(targetPrice);\n\t\tconst priceGapScaled = priceGap.mul(pct).div(MAXPCT);\n\t\ttargetPrice = reservePriceBefore.sub(priceGapScaled);\n\t\tdirection = PositionDirection.SHORT;\n\t}\n\n\tlet tradeSize;\n\tlet baseSize;\n\n\tlet baseAssetReserveBefore: BN;\n\tlet quoteAssetReserveBefore: BN;\n\n\tlet peg = market.amm.pegMultiplier;\n\n\tif (useSpread && market.amm.baseSpread > 0) {\n\t\tconst { baseAssetReserve, quoteAssetReserve, newPeg } =\n\t\t\tcalculateUpdatedAMMSpreadReserves(market.amm, direction, oraclePriceData);\n\t\tbaseAssetReserveBefore = baseAssetReserve;\n\t\tquoteAssetReserveBefore = quoteAssetReserve;\n\t\tpeg = newPeg;\n\t} else {\n\t\tbaseAssetReserveBefore = market.amm.baseAssetReserve;\n\t\tquoteAssetReserveBefore = market.amm.quoteAssetReserve;\n\t}\n\n\tconst invariant = market.amm.sqrtK.mul(market.amm.sqrtK);\n\tconst k = invariant.mul(PRICE_PRECISION);\n\n\tlet baseAssetReserveAfter;\n\tlet quoteAssetReserveAfter;\n\tconst biasModifier = new BN(1);\n\tlet markPriceAfter;\n\n\tif (\n\t\tuseSpread &&\n\t\ttargetPrice.lt(askPriceBefore) &&\n\t\ttargetPrice.gt(bidPriceBefore)\n\t) {\n\t\t// no trade, market is at target\n\t\tif (reservePriceBefore.gt(targetPrice)) {\n\t\t\tdirection = PositionDirection.SHORT;\n\t\t} else {\n\t\t\tdirection = PositionDirection.LONG;\n\t\t}\n\t\ttradeSize = ZERO;\n\t\treturn [direction, tradeSize, targetPrice, targetPrice];\n\t} else if (reservePriceBefore.gt(targetPrice)) {\n\t\t// overestimate y2\n\t\tbaseAssetReserveAfter = squareRootBN(\n\t\t\tk.div(targetPrice).mul(peg).div(PEG_PRECISION).sub(biasModifier)\n\t\t).sub(new BN(1));\n\t\tquoteAssetReserveAfter = k.div(PRICE_PRECISION).div(baseAssetReserveAfter);\n\n\t\tmarkPriceAfter = calculatePrice(\n\t\t\tbaseAssetReserveAfter,\n\t\t\tquoteAssetReserveAfter,\n\t\t\tpeg\n\t\t);\n\t\tdirection = PositionDirection.SHORT;\n\t\ttradeSize = quoteAssetReserveBefore\n\t\t\t.sub(quoteAssetReserveAfter)\n\t\t\t.mul(peg)\n\t\t\t.div(PEG_PRECISION)\n\t\t\t.div(AMM_TO_QUOTE_PRECISION_RATIO);\n\t\tbaseSize = baseAssetReserveAfter.sub(baseAssetReserveBefore);\n\t} else if (reservePriceBefore.lt(targetPrice)) {\n\t\t// underestimate y2\n\t\tbaseAssetReserveAfter = squareRootBN(\n\t\t\tk.div(targetPrice).mul(peg).div(PEG_PRECISION).add(biasModifier)\n\t\t).add(new BN(1));\n\t\tquoteAssetReserveAfter = k.div(PRICE_PRECISION).div(baseAssetReserveAfter);\n\n\t\tmarkPriceAfter = calculatePrice(\n\t\t\tbaseAssetReserveAfter,\n\t\t\tquoteAssetReserveAfter,\n\t\t\tpeg\n\t\t);\n\n\t\tdirection = PositionDirection.LONG;\n\t\ttradeSize = quoteAssetReserveAfter\n\t\t\t.sub(quoteAssetReserveBefore)\n\t\t\t.mul(peg)\n\t\t\t.div(PEG_PRECISION)\n\t\t\t.div(AMM_TO_QUOTE_PRECISION_RATIO);\n\t\tbaseSize = baseAssetReserveBefore.sub(baseAssetReserveAfter);\n\t} else {\n\t\t// no trade, market is at target\n\t\tdirection = PositionDirection.LONG;\n\t\ttradeSize = ZERO;\n\t\treturn [direction, tradeSize, targetPrice, targetPrice];\n\t}\n\n\tlet tp1 = targetPrice;\n\tlet tp2 = markPriceAfter;\n\tlet originalDiff = targetPrice.sub(reservePriceBefore);\n\n\tif (direction == PositionDirection.SHORT) {\n\t\ttp1 = markPriceAfter;\n\t\ttp2 = targetPrice;\n\t\toriginalDiff = reservePriceBefore.sub(targetPrice);\n\t}\n\n\tconst entryPrice = tradeSize\n\t\t.mul(AMM_TO_QUOTE_PRECISION_RATIO)\n\t\t.mul(PRICE_PRECISION)\n\t\t.div(baseSize.abs());\n\n\tassert(tp1.sub(tp2).lte(originalDiff), 'Target Price Calculation incorrect');\n\tassert(\n\t\ttp2.lte(tp1) || tp2.sub(tp1).abs() < 100000,\n\t\t'Target Price Calculation incorrect' +\n\t\t\ttp2.toString() +\n\t\t\t'>=' +\n\t\t\ttp1.toString() +\n\t\t\t'err: ' +\n\t\t\ttp2.sub(tp1).abs().toString()\n\t);\n\tif (outputAssetType == 'quote') {\n\t\treturn [direction, tradeSize, entryPrice, targetPrice];\n\t} else {\n\t\treturn [direction, baseSize, entryPrice, targetPrice];\n\t}\n}\n","import { BN } from '@project-serum/anchor';\nimport { assert } from '../assert/assert';\nimport { ZERO } from './../constants/numericConstants';\n\nexport class BigNum {\n\tval: BN;\n\tprecision: BN;\n\n\tstatic delim = '.';\n\tstatic spacer = ',';\n\n\tpublic static setLocale(locale: string): void {\n\t\tBigNum.delim = (1.1).toLocaleString(locale).slice(1, 2) || '.';\n\t\tBigNum.spacer = (1000).toLocaleString(locale).slice(1, 2) || ',';\n\t}\n\n\tconstructor(\n\t\tval: BN | number | string,\n\t\tprecisionVal: BN | number | string = new BN(0)\n\t) {\n\t\tthis.val = new BN(val);\n\t\tthis.precision = new BN(precisionVal);\n\t}\n\n\tprivate bigNumFromParam(bn: BigNum | BN) {\n\t\treturn BN.isBN(bn) ? BigNum.from(bn) : bn;\n\t}\n\n\tpublic add(bn: BigNum): BigNum {\n\t\tassert(bn.precision.eq(this.precision), 'Adding unequal precisions');\n\n\t\treturn BigNum.from(this.val.add(bn.val), this.precision);\n\t}\n\n\tpublic sub(bn: BigNum): BigNum {\n\t\tassert(bn.precision.eq(this.precision), 'Subtracting unequal precisions');\n\n\t\treturn BigNum.from(this.val.sub(bn.val), this.precision);\n\t}\n\n\tpublic mul(bn: BigNum | BN): BigNum {\n\t\tconst mulVal = this.bigNumFromParam(bn);\n\n\t\treturn BigNum.from(\n\t\t\tthis.val.mul(mulVal.val),\n\t\t\tthis.precision.add(mulVal.precision)\n\t\t);\n\t}\n\n\t/**\n\t * Multiplies by another big number then scales the result down by the big number's precision so that we're in the same precision space\n\t * @param bn\n\t * @returns\n\t */\n\tpublic scalarMul(bn: BigNum | BN): BigNum {\n\t\tif (BN.isBN(bn)) return BigNum.from(this.val.mul(bn), this.precision);\n\n\t\treturn BigNum.from(\n\t\t\tthis.val.mul(bn.val),\n\t\t\tthis.precision.add(bn.precision)\n\t\t).shift(bn.precision.neg());\n\t}\n\n\tpublic div(bn: BigNum | BN): BigNum {\n\t\tif (BN.isBN(bn)) return BigNum.from(this.val.div(bn), this.precision);\n\n\t\treturn BigNum.from(this.val.div(bn.val), this.precision.sub(bn.precision));\n\t}\n\n\t/**\n\t * Shift precision up or down\n\t * @param exponent\n\t * @param skipAdjustingPrecision\n\t * @returns\n\t */\n\tpublic shift(exponent: BN | number, skipAdjustingPrecision = false): BigNum {\n\t\tconst shiftVal = typeof exponent === 'number' ? new BN(exponent) : exponent;\n\n\t\treturn BigNum.from(\n\t\t\tshiftVal.isNeg()\n\t\t\t\t? this.val.div(new BN(10).pow(shiftVal))\n\t\t\t\t: this.val.mul(new BN(10).pow(shiftVal)),\n\t\t\tskipAdjustingPrecision ? this.precision : this.precision.add(shiftVal)\n\t\t);\n\t}\n\n\t/**\n\t * Shift to a target precision\n\t * @param targetPrecision\n\t * @returns\n\t */\n\tpublic shiftTo(targetPrecision: BN): BigNum {\n\t\treturn this.shift(targetPrecision.sub(this.precision));\n\t}\n\n\t/**\n\t * Scale the number by a fraction\n\t * @param numerator\n\t * @param denominator\n\t * @returns\n\t */\n\tpublic scale(numerator: BN | number, denominator: BN | number): BigNum {\n\t\treturn this.mul(BigNum.from(new BN(numerator))).div(new BN(denominator));\n\t}\n\n\tpublic toPercentage(denominator: BigNum, precision: number): string {\n\t\treturn this.shift(precision)\n\t\t\t.shift(2, true)\n\t\t\t.div(denominator)\n\t\t\t.toPrecision(precision);\n\t}\n\n\tpublic gt(bn: BigNum | BN, ignorePrecision?: boolean): boolean {\n\t\tconst comparisonVal = this.bigNumFromParam(bn);\n\n\t\tif (!ignorePrecision && !comparisonVal.eq(ZERO)) {\n\t\t\tassert(\n\t\t\t\tcomparisonVal.precision.eq(this.precision),\n\t\t\t\t'Trying to compare numbers with different precision. Yo can opt to ignore precision using the ignorePrecision parameter'\n\t\t\t);\n\t\t}\n\n\t\treturn this.val.gt(comparisonVal.val);\n\t}\n\n\tpublic lt(bn: BigNum | BN, ignorePrecision?: boolean): boolean {\n\t\tconst comparisonVal = this.bigNumFromParam(bn);\n\n\t\tif (!ignorePrecision && !comparisonVal.val.eq(ZERO)) {\n\t\t\tassert(\n\t\t\t\tcomparisonVal.precision.eq(this.precision),\n\t\t\t\t'Trying to compare numbers with different precision. Yo can opt to ignore precision using the ignorePrecision parameter'\n\t\t\t);\n\t\t}\n\n\t\treturn this.val.lt(comparisonVal.val);\n\t}\n\n\tpublic gte(bn: BigNum | BN, ignorePrecision?: boolean): boolean {\n\t\tconst comparisonVal = this.bigNumFromParam(bn);\n\n\t\tif (!ignorePrecision && !comparisonVal.val.eq(ZERO)) {\n\t\t\tassert(\n\t\t\t\tcomparisonVal.precision.eq(this.precision),\n\t\t\t\t'Trying to compare numbers with different precision. Yo can opt to ignore precision using the ignorePrecision parameter'\n\t\t\t);\n\t\t}\n\n\t\treturn this.val.gte(comparisonVal.val);\n\t}\n\n\tpublic lte(bn: BigNum | BN, ignorePrecision?: boolean): boolean {\n\t\tconst comparisonVal = this.bigNumFromParam(bn);\n\n\t\tif (!ignorePrecision && !comparisonVal.val.eq(ZERO)) {\n\t\t\tassert(\n\t\t\t\tcomparisonVal.precision.eq(this.precision),\n\t\t\t\t'Trying to compare numbers with different precision. Yo can opt to ignore precision using the ignorePrecision parameter'\n\t\t\t);\n\t\t}\n\n\t\treturn this.val.lte(comparisonVal.val);\n\t}\n\n\tpublic eq(bn: BigNum | BN, ignorePrecision?: boolean): boolean {\n\t\tconst comparisonVal = this.bigNumFromParam(bn);\n\n\t\tif (!ignorePrecision && !comparisonVal.val.eq(ZERO)) {\n\t\t\tassert(\n\t\t\t\tcomparisonVal.precision.eq(this.precision),\n\t\t\t\t'Trying to compare numbers with different precision. Yo can opt to ignore precision using the ignorePrecision parameter'\n\t\t\t);\n\t\t}\n\n\t\treturn this.val.eq(comparisonVal.val);\n\t}\n\n\tpublic eqZero() {\n\t\treturn this.val.eq(ZERO);\n\t}\n\n\tpublic gtZero() {\n\t\treturn this.val.gt(ZERO);\n\t}\n\n\tpublic ltZero() {\n\t\treturn this.val.lt(ZERO);\n\t}\n\n\tpublic gteZero() {\n\t\treturn this.val.gte(ZERO);\n\t}\n\n\tpublic lteZero() {\n\t\treturn this.val.lte(ZERO);\n\t}\n\n\tpublic abs(): BigNum {\n\t\treturn new BigNum(this.val.abs(), this.precision);\n\t}\n\n\tpublic neg(): BigNum {\n\t\treturn new BigNum(this.val.neg(), this.precision);\n\t}\n\n\tpublic toString = (base?: number | 'hex', length?: number): string =>\n\t\tthis.val.toString(base, length);\n\n\t/**\n\t * Pretty print the underlying value in human-readable form. Depends on precision being correct for the output string to be correct\n\t * @returns\n\t */\n\tpublic print(): string {\n\t\tassert(\n\t\t\tthis.precision.gte(ZERO),\n\t\t\t'Tried to print a BN with precision lower than zero'\n\t\t);\n\n\t\tconst isNeg = this.isNeg();\n\t\tconst plainString = this.abs().toString();\n\t\tconst precisionNum = this.precision.toNumber();\n\n\t\t// make a string with at least the precisionNum number of zeroes\n\t\tlet printString = [\n\t\t\t...Array(this.precision.toNumber()).fill(0),\n\t\t\t...plainString.split(''),\n\t\t].join('');\n\n\t\t// inject decimal\n\t\tprintString =\n\t\t\tprintString.substring(0, printString.length - precisionNum) +\n\t\t\tBigNum.delim +\n\t\t\tprintString.substring(printString.length - precisionNum);\n\n\t\t// remove leading zeroes\n\t\tprintString = printString.replace(/^0+/, '');\n\n\t\t// add zero if leading delim\n\t\tif (printString[0] === BigNum.delim) printString = `0${printString}`;\n\n\t\t// Add minus if negative\n\t\tif (isNeg) printString = `-${printString}`;\n\n\t\t// remove trailing delim\n\t\tif (printString[printString.length - 1] === BigNum.delim)\n\t\t\tprintString = printString.slice(0, printString.length - 1);\n\n\t\treturn printString;\n\t}\n\n\tpublic prettyPrint(\n\t\tuseTradePrecision?: boolean,\n\t\tprecisionOverride?: number\n\t): string {\n\t\tconst [leftSide, rightSide] = this.printShort(\n\t\t\tuseTradePrecision,\n\t\t\tprecisionOverride\n\t\t).split(BigNum.delim);\n\n\t\tlet formattedLeftSide = leftSide;\n\n\t\tconst isNeg = formattedLeftSide.includes('-');\n\t\tif (isNeg) {\n\t\t\tformattedLeftSide = formattedLeftSide.replace('-', '');\n\t\t}\n\n\t\tlet index = formattedLeftSide.length - 3;\n\n\t\twhile (index >= 1) {\n\t\t\tconst formattedLeftSideArray = formattedLeftSide.split('');\n\n\t\t\tformattedLeftSideArray.splice(index, 0, BigNum.spacer);\n\n\t\t\tformattedLeftSide = formattedLeftSideArray.join('');\n\n\t\t\tindex -= 3;\n\t\t}\n\n\t\treturn `${isNeg ? '-' : ''}${formattedLeftSide}${\n\t\t\trightSide ? `${BigNum.delim}${rightSide}` : ''\n\t\t}`;\n\t}\n\n\t/**\n\t * Print and remove unnecessary trailing zeroes\n\t * @returns\n\t */\n\tpublic printShort(\n\t\tuseTradePrecision?: boolean,\n\t\tprecisionOverride?: number\n\t): string {\n\t\tconst printVal = precisionOverride\n\t\t\t? this.toPrecision(precisionOverride)\n\t\t\t: useTradePrecision\n\t\t\t? this.toTradePrecision()\n\t\t\t: this.print();\n\n\t\tif (!printVal.includes(BigNum.delim)) return printVal;\n\n\t\treturn printVal.replace(/0+$/g, '').replace(/\\.$/, '').replace(/,$/, '');\n\t}\n\n\tpublic debug() {\n\t\tconsole.log(\n\t\t\t`${this.toString()} | ${this.print()} | ${this.precision.toString()}`\n\t\t);\n\t}\n\n\t/**\n\t * Pretty print with the specified number of decimal places\n\t * @param fixedPrecision\n\t * @returns\n\t */\n\tpublic toFixed(fixedPrecision: number, rounded = false): string {\n\t\tif (rounded) {\n\t\t\treturn this.toRounded(fixedPrecision).toFixed(fixedPrecision);\n\t\t}\n\n\t\tconst printString = this.print();\n\n\t\tconst [leftSide, rightSide] = printString.split(BigNum.delim);\n\n\t\tconst filledRightSide = [\n\t\t\t...(rightSide ?? '').slice(0, fixedPrecision),\n\t\t\t...Array(fixedPrecision).fill('0'),\n\t\t]\n\t\t\t.slice(0, fixedPrecision)\n\t\t\t.join('');\n\n\t\treturn `${leftSide}${BigNum.delim}${filledRightSide}`;\n\t}\n\n\tprivate getZeroes(count: number) {\n\t\treturn new Array(Math.max(count, 0)).fill('0').join('');\n\t}\n\n\tpublic toRounded(roundingPrecision: number) {\n\t\tconst printString = this.toString();\n\n\t\tlet shouldRoundUp = false;\n\n\t\tconst roundingDigitChar = printString[roundingPrecision];\n\n\t\tif (roundingDigitChar) {\n\t\t\tconst roundingDigitVal = Number(roundingDigitChar);\n\t\t\tif (roundingDigitVal >= 5) shouldRoundUp = true;\n\t\t}\n\n\t\tif (shouldRoundUp) {\n\t\t\tconst valueWithRoundedPrecisionAdded = this.add(\n\t\t\t\tBigNum.from(\n\t\t\t\t\tnew BN(10).pow(new BN(printString.length - roundingPrecision)),\n\t\t\t\t\tthis.precision\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tconst roundedUpPrintString =\n\t\t\t\tvalueWithRoundedPrecisionAdded.toString().slice(0, roundingPrecision) +\n\t\t\t\tthis.getZeroes(printString.length - roundingPrecision);\n\n\t\t\treturn BigNum.from(roundedUpPrintString, this.precision);\n\t\t} else {\n\t\t\tconst roundedDownPrintString =\n\t\t\t\tprintString.slice(0, roundingPrecision) +\n\t\t\t\tthis.getZeroes(printString.length - roundingPrecision);\n\n\t\t\treturn BigNum.from(roundedDownPrintString, this.precision);\n\t\t}\n\t}\n\n\t/**\n\t * Pretty print to the specified number of significant figures\n\t * @param fixedPrecision\n\t * @returns\n\t */\n\tpublic toPrecision(\n\t\tfixedPrecision: number,\n\t\ttrailingZeroes = false,\n\t\trounded = false\n\t): string {\n\t\tif (rounded) {\n\t\t\treturn this.toRounded(fixedPrecision).toPrecision(\n\t\t\t\tfixedPrecision,\n\t\t\t\ttrailingZeroes\n\t\t\t);\n\t\t}\n\n\t\tconst isNeg = this.isNeg();\n\n\t\tconst printString = this.abs().print();\n\t\tconst thisString = this.abs().toString();\n\n\t\tlet precisionPrintString = printString.slice(0, fixedPrecision + 1);\n\n\t\tif (\n\t\t\t!printString.includes(BigNum.delim) &&\n\t\t\tthisString.length < fixedPrecision\n\t\t) {\n\t\t\tconst precisionMismatch = fixedPrecision - thisString.length;\n\t\t\treturn BigNum.from(\n\t\t\t\t(isNeg ? '-' : '') + thisString + this.getZeroes(precisionMismatch),\n\t\t\t\tprecisionMismatch\n\t\t\t).toPrecision(fixedPrecision, trailingZeroes);\n\t\t}\n\n\t\tif (\n\t\t\t!precisionPrintString.includes(BigNum.delim) ||\n\t\t\tprecisionPrintString[precisionPrintString.length - 1] === BigNum.delim\n\t\t) {\n\t\t\tprecisionPrintString = printString.slice(0, fixedPrecision);\n\t\t}\n\n\t\tconst pointsOfPrecision = precisionPrintString.replace(\n\t\t\tBigNum.delim,\n\t\t\t''\n\t\t).length;\n\n\t\tif (pointsOfPrecision < fixedPrecision) {\n\t\t\tprecisionPrintString = [\n\t\t\t\t...precisionPrintString.split(''),\n\t\t\t\t...Array(fixedPrecision - pointsOfPrecision).fill('0'),\n\t\t\t].join('');\n\t\t}\n\n\t\tif (!precisionPrintString.includes(BigNum.delim)) {\n\t\t\tconst delimFullStringLocation = printString.indexOf(BigNum.delim);\n\n\t\t\tlet skipExponent = false;\n\n\t\t\tif (delimFullStringLocation === -1) {\n\t\t\t\t// no decimal, not missing any precision\n\t\t\t\tskipExponent = true;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tprecisionPrintString[precisionPrintString.length - 1] === BigNum.delim\n\t\t\t) {\n\t\t\t\t// decimal is at end of string, not missing any precision, do nothing\n\t\t\t\tskipExponent = true;\n\t\t\t}\n\n\t\t\tif (printString.indexOf(BigNum.delim) === fixedPrecision) {\n\t\t\t\t// decimal is at end of string, not missing any precision, do nothing\n\t\t\t\tskipExponent = true;\n\t\t\t}\n\n\t\t\tif (!skipExponent) {\n\t\t\t\tconst exponent = delimFullStringLocation - fixedPrecision;\n\t\t\t\tif (trailingZeroes) {\n\t\t\t\t\tprecisionPrintString = `${precisionPrintString}${Array(exponent)\n\t\t\t\t\t\t.fill('0')\n\t\t\t\t\t\t.join('')}`;\n\t\t\t\t} else {\n\t\t\t\t\tprecisionPrintString = `${precisionPrintString}e${exponent}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn `${isNeg ? '-' : ''}${precisionPrintString}`;\n\t}\n\n\tpublic toTradePrecision(rounded = false): string {\n\t\treturn this.toPrecision(6, true, rounded);\n\t}\n\n\t/**\n\t * Print dollar formatted value. Defaults to fixed decimals two unless a given precision is given.\n\t * @param useTradePrecision\n\t * @param precisionOverride\n\t * @returns\n\t */\n\tpublic toNotional(\n\t\tuseTradePrecision?: boolean,\n\t\tprecisionOverride?: number\n\t): string {\n\t\tconst prefix = `${this.lt(BigNum.zero()) ? `-` : ``}$`;\n\n\t\tconst usingCustomPrecision =\n\t\t\ttrue && (useTradePrecision || precisionOverride);\n\n\t\tlet val = usingCustomPrecision\n\t\t\t? this.prettyPrint(useTradePrecision, precisionOverride)\n\t\t\t: BigNum.fromPrint(this.toFixed(2), new BN(2)).prettyPrint();\n\n\t\t// Append trailing zeroes out to 2 decimal places if not using custom precision\n\t\tif (!usingCustomPrecision) {\n\t\t\tconst [_, rightSide] = val.split(BigNum.delim);\n\t\t\tconst trailingLength = rightSide?.length ?? 0;\n\n\t\t\tif (trailingLength === 0) {\n\t\t\t\tval = `${val}${BigNum.delim}00`;\n\t\t\t} else if (trailingLength === 1) {\n\t\t\t\tval = `${val}0`;\n\t\t\t}\n\t\t}\n\n\t\treturn `${prefix}${val.replace('-', '')}`;\n\t}\n\n\tpublic toMillified(precision = 3, rounded = false): string {\n\t\tif (rounded) {\n\t\t\treturn this.toRounded(precision).toMillified(precision);\n\t\t}\n\n\t\tconst isNeg = this.isNeg();\n\n\t\tconst stringVal = this.abs().print();\n\n\t\tconst [leftSide] = stringVal.split(BigNum.delim);\n\n\t\tif (!leftSide) {\n\t\t\treturn this.shift(new BN(precision)).toPrecision(precision, true);\n\t\t}\n\n\t\tif (leftSide.length <= precision) {\n\t\t\treturn this.toPrecision(precision);\n\t\t}\n\n\t\tif (leftSide.length <= 3) {\n\t\t\treturn this.shift(new BN(precision)).toPrecision(precision, true);\n\t\t}\n\n\t\tconst unitTicks = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\n\t\tconst unitNumber = Math.floor((leftSide.length - 1) / 3);\n\t\tconst unit = unitTicks[unitNumber];\n\n\t\tlet leadDigits = leftSide.slice(0, precision);\n\n\t\tif (leadDigits.length < precision) {\n\t\t\tleadDigits = [\n\t\t\t\t...leadDigits.split(''),\n\t\t\t\t...Array(precision - leadDigits.length).fill('0'),\n\t\t\t].join('');\n\t\t}\n\n\t\tconst decimalLocation = leftSide.length - 3 * unitNumber;\n\n\t\tlet leadString = '';\n\n\t\tif (decimalLocation >= precision) {\n\t\t\tleadString = `${leadDigits}`;\n\t\t} else {\n\t\t\tleadString = `${leadDigits.slice(0, decimalLocation)}${\n\t\t\t\tBigNum.delim\n\t\t\t}${leadDigits.slice(decimalLocation)}`;\n\t\t}\n\n\t\treturn `${isNeg ? '-' : ''}${leadString}${unit}`;\n\t}\n\n\tpublic toJSON() {\n\t\treturn {\n\t\t\tval: this.val.toString(),\n\t\t\tprecision: this.precision.toString(),\n\t\t};\n\t}\n\n\tpublic isNeg() {\n\t\treturn this.lt(ZERO, true);\n\t}\n\n\tpublic isPos() {\n\t\treturn !this.isNeg();\n\t}\n\n\t/**\n\t * Get the numerical value of the BigNum. This can break if the BigNum is too large.\n\t * @returns\n\t */\n\tpublic toNum() {\n\t\tlet printedValue = this.print();\n\n\t\t// Must convert any non-US delimiters and spacers to US format before using parseFloat\n\t\tif (BigNum.delim !== '.' || BigNum.spacer !== ',') {\n\t\t\tprintedValue = printedValue\n\t\t\t\t.split('')\n\t\t\t\t.map((char) => {\n\t\t\t\t\tif (char === BigNum.delim) return '.';\n\t\t\t\t\tif (char === BigNum.spacer) return ',';\n\t\t\t\t\treturn char;\n\t\t\t\t})\n\t\t\t\t.join('');\n\t\t}\n\n\t\treturn parseFloat(printedValue);\n\t}\n\n\tstatic fromJSON(json: { val: string; precision: string }) {\n\t\treturn BigNum.from(new BN(json.val), new BN(json.precision));\n\t}\n\n\t/**\n\t * Create a BigNum instance\n\t * @param val\n\t * @param precision\n\t * @returns\n\t */\n\tstatic from(\n\t\tval: BN | number | string = ZERO,\n\t\tprecision?: BN | number | string\n\t): BigNum {\n\t\tassert(\n\t\t\tnew BN(precision).lt(new BN(100)),\n\t\t\t'Tried to create a bignum with precision higher than 10^100'\n\t\t);\n\t\treturn new BigNum(val, precision);\n\t}\n\n\t/**\n\t * Create a BigNum instance from a printed BigNum\n\t * @param val\n\t * @param precisionOverride\n\t * @returns\n\t */\n\tstatic fromPrint(val: string, precisionShift?: BN): BigNum {\n\t\t// Handle empty number edge cases\n\t\tif (!val) return BigNum.from(ZERO, precisionShift);\n\t\tif (!val.replace(BigNum.delim, '')) {\n\t\t\treturn BigNum.from(ZERO, precisionShift);\n\t\t}\n\n\t\tconst sides = val.split(BigNum.delim);\n\t\tconst rightSide = sides[1];\n\t\tconst leftSide = sides[0].replace(/\\s/g, '');\n\t\tconst bnInput = `${leftSide ?? ''}${rightSide ?? ''}`;\n\n\t\tconst rawBn = new BN(bnInput);\n\n\t\tconst rightSideLength = rightSide?.length ?? 0;\n\n\t\tconst totalShift = precisionShift\n\t\t\t? precisionShift.sub(new BN(rightSideLength))\n\t\t\t: ZERO;\n\n\t\treturn BigNum.from(rawBn, precisionShift).shift(totalShift, true);\n\t}\n\n\tstatic max(a: BigNum, b: BigNum): BigNum {\n\t\treturn a.gt(b) ? a : b;\n\t}\n\n\tstatic min(a: BigNum, b: BigNum): BigNum {\n\t\treturn a.lt(b) ? a : b;\n\t}\n\n\tstatic zero(precision?: BN | number): BigNum {\n\t\treturn BigNum.from(0, precision);\n\t}\n}\n","import { Commitment, TransactionSignature } from '@solana/web3.js';\nimport {\n\tDepositRecord,\n\tFundingPaymentRecord,\n\tFundingRateRecord,\n\tLiquidationRecord,\n\tNewUserRecord,\n\tOrderActionRecord,\n\tOrderRecord,\n\tSettlePnlRecord,\n\tLPRecord,\n\tInsuranceFundRecord,\n\tSpotInterestRecord,\n\tInsuranceFundStakeRecord,\n\tCurveRecord,\n} from '../index';\n\nexport type EventSubscriptionOptions = {\n\teventTypes?: EventType[];\n\tmaxEventsPerType?: number;\n\torderBy?: EventSubscriptionOrderBy;\n\torderDir?: EventSubscriptionOrderDirection;\n\tcommitment?: Commitment;\n\tmaxTx?: number;\n\tlogProviderConfig?: LogProviderConfig;\n\t// when the subscription starts, client might want to backtrack and fetch old tx's\n\t// this specifies how far to backtrack\n\tuntilTx?: TransactionSignature;\n};\n\nexport const DefaultEventSubscriptionOptions: EventSubscriptionOptions = {\n\teventTypes: [\n\t\t'DepositRecord',\n\t\t'FundingPaymentRecord',\n\t\t'LiquidationRecord',\n\t\t'OrderRecord',\n\t\t'OrderActionRecord',\n\t\t'FundingRateRecord',\n\t\t'NewUserRecord',\n\t\t'SettlePnlRecord',\n\t\t'LPRecord',\n\t\t'InsuranceFundRecord',\n\t\t'SpotInterestRecord',\n\t\t'InsuranceFundStakeRecord',\n\t\t'CurveRecord',\n\t],\n\tmaxEventsPerType: 4096,\n\torderBy: 'blockchain',\n\torderDir: 'asc',\n\tcommitment: 'confirmed',\n\tmaxTx: 4096,\n\tlogProviderConfig: {\n\t\ttype: 'websocket',\n\t},\n};\n\n// Whether we sort events based on order blockchain produced events or client receives events\nexport type EventSubscriptionOrderBy = 'blockchain' | 'client';\nexport type EventSubscriptionOrderDirection = 'asc' | 'desc';\n\nexport type Event<T> = T & {\n\ttxSig: TransactionSignature;\n\tslot: number;\n};\n\nexport type WrappedEvent<Type extends EventType> = EventMap[Type] & {\n\teventType: Type;\n};\n\nexport type WrappedEvents = WrappedEvent<EventType>[];\n\nexport type EventMap = {\n\tDepositRecord: Event<DepositRecord>;\n\tFundingPaymentRecord: Event<FundingPaymentRecord>;\n\tLiquidationRecord: Event<LiquidationRecord>;\n\tFundingRateRecord: Event<FundingRateRecord>;\n\tOrderRecord: Event<OrderRecord>;\n\tOrderActionRecord: Event<OrderActionRecord>;\n\tSettlePnlRecord: Event<SettlePnlRecord>;\n\tNewUserRecord: Event<NewUserRecord>;\n\tLPRecord: Event<LPRecord>;\n\tInsuranceFundRecord: Event<InsuranceFundRecord>;\n\tSpotInterestRecord: Event<SpotInterestRecord>;\n\tInsuranceFundStakeRecord: Event<InsuranceFundStakeRecord>;\n\tCurveRecord: Event<CurveRecord>;\n};\n\nexport type EventType = keyof EventMap;\n\nexport interface EventSubscriberEvents {\n\tnewEvent: (event: WrappedEvent<EventType>) => void;\n}\n\nexport type SortFn = (\n\tcurrentRecord: EventMap[EventType],\n\tnewRecord: EventMap[EventType]\n) => 'less than' | 'greater than';\n\nexport type logProviderCallback = (\n\ttxSig: TransactionSignature,\n\tslot: number,\n\tlogs: string[],\n\tmostRecentBlockTime: number | undefined\n) => void;\n\nexport interface LogProvider {\n\tisSubscribed(): boolean;\n\tsubscribe(callback: logProviderCallback, skipHistory?: boolean): boolean;\n\tunsubscribe(): Promise<boolean>;\n}\n\nexport type WebSocketLogProviderConfig = {\n\ttype: 'websocket';\n};\n\nexport type PollingLogProviderConfig = {\n\ttype: 'polling';\n\tfrequency: number;\n};\n\nexport type LogProviderConfig =\n\t| WebSocketLogProviderConfig\n\t| PollingLogProviderConfig;\n","import { WrappedEvent, EventType } from './types';\n\nclass Node {\n\tconstructor(\n\t\tpublic key: string,\n\t\tpublic value: WrappedEvent<EventType>[],\n\t\tpublic next?: Node,\n\t\tpublic prev?: Node\n\t) {}\n}\n\n// lru cache\nexport class TxEventCache {\n\tsize = 0;\n\thead?: Node;\n\ttail?: Node;\n\tcacheMap: { [key: string]: Node } = {};\n\n\tconstructor(public maxTx = 1024) {}\n\n\tpublic add(key: string, events: WrappedEvent<EventType>[]): void {\n\t\tconst existingNode = this.cacheMap[key];\n\t\tif (existingNode) {\n\t\t\tthis.detach(existingNode);\n\t\t\tthis.size--;\n\t\t} else if (this.size === this.maxTx) {\n\t\t\tdelete this.cacheMap[this.tail.key];\n\t\t\tthis.detach(this.tail);\n\t\t\tthis.size--;\n\t\t}\n\n\t\t// Write to head of LinkedList\n\t\tif (!this.head) {\n\t\t\tthis.head = this.tail = new Node(key, events);\n\t\t} else {\n\t\t\tconst node = new Node(key, events, this.head);\n\t\t\tthis.head.prev = node;\n\t\t\tthis.head = node;\n\t\t}\n\n\t\t// update cacheMap with LinkedList key and Node reference\n\t\tthis.cacheMap[key] = this.head;\n\t\tthis.size++;\n\t}\n\n\tpublic has(key: string): boolean {\n\t\treturn this.cacheMap.hasOwnProperty(key);\n\t}\n\n\tpublic get(key: string): WrappedEvent<EventType>[] | undefined {\n\t\treturn this.cacheMap[key]?.value;\n\t}\n\n\tdetach(node: Node): void {\n\t\tif (node.prev !== undefined) {\n\t\t\tnode.prev.next = node.next;\n\t\t} else {\n\t\t\tthis.head = node.next;\n\t\t}\n\n\t\tif (node.next !== undefined) {\n\t\t\tnode.next.prev = node.prev;\n\t\t} else {\n\t\t\tthis.tail = node.prev;\n\t\t}\n\t}\n\n\tpublic clear(): void {\n\t\tthis.head = undefined;\n\t\tthis.tail = undefined;\n\t\tthis.size = 0;\n\t\tthis.cacheMap = {};\n\t}\n}\n","import {\n\tEventType,\n\tEventMap,\n\tEventSubscriptionOrderDirection,\n\tSortFn,\n} from './types';\n\nclass Node<Type extends EventType, Event extends EventMap[Type]> {\n\tconstructor(\n\t\tpublic event: Event,\n\t\tpublic next?: Node<Type, Event>,\n\t\tpublic prev?: Node<Type, Event>\n\t) {}\n}\n\nexport class EventList<Type extends EventType> {\n\tsize = 0;\n\thead?: Node<Type, EventMap[Type]>;\n\ttail?: Node<Type, EventMap[Type]>;\n\n\tpublic constructor(\n\t\tpublic eventType: Type,\n\t\tpublic maxSize: number,\n\t\tprivate sortFn: SortFn,\n\t\tprivate orderDirection: EventSubscriptionOrderDirection\n\t) {}\n\n\tpublic insert(event: EventMap[Type]): void {\n\t\tthis.size++;\n\t\tconst newNode = new Node(event);\n\t\tif (this.head === undefined) {\n\t\t\tthis.head = this.tail = newNode;\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\tthis.sortFn(this.head.event, newNode.event) ===\n\t\t\t(this.orderDirection === 'asc' ? 'less than' : 'greater than')\n\t\t) {\n\t\t\tthis.head.prev = newNode;\n\t\t\tnewNode.next = this.head;\n\t\t\tthis.head = newNode;\n\t\t} else {\n\t\t\tlet currentNode = this.head;\n\t\t\twhile (\n\t\t\t\tcurrentNode.next !== undefined &&\n\t\t\t\tthis.sortFn(currentNode.next.event, newNode.event) !==\n\t\t\t\t\t(this.orderDirection === 'asc' ? 'less than' : 'greater than')\n\t\t\t) {\n\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t}\n\n\t\t\tnewNode.next = currentNode.next;\n\t\t\tif (currentNode.next !== undefined) {\n\t\t\t\tnewNode.next.prev = newNode;\n\t\t\t} else {\n\t\t\t\tthis.tail = newNode;\n\t\t\t}\n\n\t\t\tcurrentNode.next = newNode;\n\t\t\tnewNode.prev = currentNode;\n\t\t}\n\n\t\tif (this.size > this.maxSize) {\n\t\t\tthis.detach();\n\t\t}\n\t}\n\n\tdetach(): void {\n\t\tconst node = this.tail;\n\t\tif (node.prev !== undefined) {\n\t\t\tnode.prev.next = node.next;\n\t\t} else {\n\t\t\tthis.head = node.next;\n\t\t}\n\n\t\tif (node.next !== undefined) {\n\t\t\tnode.next.prev = node.prev;\n\t\t} else {\n\t\t\tthis.tail = node.prev;\n\t\t}\n\n\t\tthis.size--;\n\t}\n\n\ttoArray(): EventMap[Type][] {\n\t\treturn Array.from(this);\n\t}\n\n\t*[Symbol.iterator]() {\n\t\tlet node = this.head;\n\t\twhile (node) {\n\t\t\tyield node.event;\n\t\t\tnode = node.next;\n\t\t}\n\t}\n}\n","import { Program } from '@project-serum/anchor';\nimport {\n\tConnection,\n\tFinality,\n\tPublicKey,\n\tTransactionResponse,\n\tTransactionSignature,\n} from '@solana/web3.js';\nimport { WrappedEvents } from './types';\n\ntype Log = { txSig: TransactionSignature; slot: number; logs: string[] };\ntype FetchLogsResponse = {\n\tearliestTx: string;\n\tmostRecentTx: string;\n\tearliestSlot: number;\n\tmostRecentSlot: number;\n\ttransactionLogs: Log[];\n\tmostRecentBlockTime: number | undefined;\n};\n\nfunction mapTransactionResponseToLog(transaction: TransactionResponse): Log {\n\treturn {\n\t\ttxSig: transaction.transaction.signatures[0],\n\t\tslot: transaction.slot,\n\t\tlogs: transaction.meta.logMessages,\n\t};\n}\n\nexport async function fetchLogs(\n\tconnection: Connection,\n\tprogramId: PublicKey,\n\tfinality: Finality,\n\tbeforeTx?: TransactionSignature,\n\tuntilTx?: TransactionSignature,\n\tlimit?: number\n): Promise<FetchLogsResponse> {\n\tconst signatures = await connection.getSignaturesForAddress(\n\t\tprogramId,\n\t\t{\n\t\t\tbefore: beforeTx,\n\t\t\tuntil: untilTx,\n\t\t\tlimit,\n\t\t},\n\t\tfinality\n\t);\n\n\tconst sortedSignatures = signatures.sort((a, b) =>\n\t\ta.slot === b.slot ? 0 : a.slot < b.slot ? -1 : 1\n\t);\n\n\tconst filteredSignatures = sortedSignatures.filter(\n\t\t(signature) => !signature.err\n\t);\n\n\tif (filteredSignatures.length === 0) {\n\t\treturn undefined;\n\t}\n\n\tconst chunkedSignatures = chunk(filteredSignatures, 100);\n\n\tconst transactionLogs = (\n\t\tawait Promise.all(\n\t\t\tchunkedSignatures.map(async (chunk) => {\n\t\t\t\tconst transactions = await connection.getTransactions(\n\t\t\t\t\tchunk.map((confirmedSignature) => confirmedSignature.signature),\n\t\t\t\t\tfinality\n\t\t\t\t);\n\n\t\t\t\treturn transactions.reduce((logs, transaction) => {\n\t\t\t\t\tif (transaction) {\n\t\t\t\t\t\tlogs.push(mapTransactionResponseToLog(transaction));\n\t\t\t\t\t}\n\t\t\t\t\treturn logs;\n\t\t\t\t}, new Array<Log>());\n\t\t\t})\n\t\t)\n\t).flat();\n\n\tconst earliest = filteredSignatures[0];\n\tconst mostRecent = filteredSignatures[filteredSignatures.length - 1];\n\n\treturn {\n\t\ttransactionLogs: transactionLogs,\n\t\tearliestTx: earliest.signature,\n\t\tmostRecentTx: mostRecent.signature,\n\t\tearliestSlot: earliest.slot,\n\t\tmostRecentSlot: mostRecent.slot,\n\t\tmostRecentBlockTime: mostRecent.blockTime,\n\t};\n}\n\nfunction chunk<T>(array: readonly T[], size: number): T[][] {\n\treturn new Array(Math.ceil(array.length / size))\n\t\t.fill(null)\n\t\t.map((_, index) => index * size)\n\t\t.map((begin) => array.slice(begin, begin + size));\n}\n\nexport class LogParser {\n\tprivate program: Program;\n\n\tconstructor(program: Program) {\n\t\tthis.program = program;\n\t}\n\n\tpublic parseEventsFromTransaction(\n\t\ttransaction: TransactionResponse\n\t): WrappedEvents {\n\t\tconst transactionLogObject = mapTransactionResponseToLog(transaction);\n\n\t\treturn this.parseEventsFromLogs(transactionLogObject);\n\t}\n\n\tpublic parseEventsFromLogs(event: Log): WrappedEvents {\n\t\tconst records: WrappedEvents = [];\n\t\t// @ts-ignore\n\t\tthis.program._events._eventParser.parseLogs(event.logs, (eventLog) => {\n\t\t\teventLog.data.txSig = event.txSig;\n\t\t\teventLog.data.slot = event.slot;\n\t\t\teventLog.data.eventType = eventLog.name;\n\t\t\trecords.push(eventLog.data);\n\t\t});\n\t\treturn records;\n\t}\n}\n","import { LogProvider, logProviderCallback } from './types';\nimport {\n\tCommitment,\n\tConnection,\n\tFinality,\n\tPublicKey,\n\tTransactionSignature,\n} from '@solana/web3.js';\nimport { fetchLogs } from './fetchLogs';\n\nexport class PollingLogProvider implements LogProvider {\n\tprivate finality: Finality;\n\tprivate intervalId: NodeJS.Timer;\n\tprivate mostRecentSeenTx?: TransactionSignature;\n\tprivate mutex: number;\n\tprivate firstFetch = true;\n\n\tpublic constructor(\n\t\tprivate connection: Connection,\n\t\tprivate programId: PublicKey,\n\t\tcommitment: Commitment,\n\t\tprivate frequency = 15 * 1000\n\t) {\n\t\tthis.finality = commitment === 'finalized' ? 'finalized' : 'confirmed';\n\t}\n\n\tpublic subscribe(\n\t\tcallback: logProviderCallback,\n\t\tskipHistory?: boolean\n\t): boolean {\n\t\tif (this.intervalId) {\n\t\t\treturn true;\n\t\t}\n\n\t\tthis.intervalId = setInterval(async () => {\n\t\t\tif (this.mutex === 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.mutex = 1;\n\n\t\t\ttry {\n\t\t\t\tconst response = await fetchLogs(\n\t\t\t\t\tthis.connection,\n\t\t\t\t\tthis.programId,\n\t\t\t\t\tthis.finality,\n\t\t\t\t\tundefined,\n\t\t\t\t\tthis.mostRecentSeenTx,\n\t\t\t\t\t// If skipping history, only fetch one log back, not the maximum amount available\n\t\t\t\t\tskipHistory && this.firstFetch ? 1 : undefined\n\t\t\t\t);\n\n\t\t\t\tif (response === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.firstFetch = false;\n\n\t\t\t\tconst { mostRecentTx, transactionLogs } = response;\n\n\t\t\t\tfor (const { txSig, slot, logs } of transactionLogs) {\n\t\t\t\t\tcallback(txSig, slot, logs, response.mostRecentBlockTime);\n\t\t\t\t}\n\n\t\t\t\tthis.mostRecentSeenTx = mostRecentTx;\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('PollingLogProvider threw an Error');\n\t\t\t\tconsole.error(e);\n\t\t\t} finally {\n\t\t\t\tthis.mutex = 0;\n\t\t\t}\n\t\t}, this.frequency);\n\n\t\treturn true;\n\t}\n\n\tpublic isSubscribed(): boolean {\n\t\treturn this.intervalId !== undefined;\n\t}\n\n\tpublic async unsubscribe(): Promise<boolean> {\n\t\tif (this.intervalId !== undefined) {\n\t\t\tclearInterval(this.intervalId);\n\t\t\tthis.intervalId = undefined;\n\t\t}\n\t\treturn true;\n\t}\n}\n","import { LogProvider, logProviderCallback } from './types';\nimport { Commitment, Connection, PublicKey } from '@solana/web3.js';\n\nexport class WebSocketLogProvider implements LogProvider {\n\tprivate subscriptionId: number;\n\tpublic constructor(\n\t\tprivate connection: Connection,\n\t\tprivate programId: PublicKey,\n\t\tprivate commitment: Commitment\n\t) {}\n\n\tpublic subscribe(callback: logProviderCallback): boolean {\n\t\tif (this.subscriptionId) {\n\t\t\treturn true;\n\t\t}\n\n\t\tthis.subscriptionId = this.connection.onLogs(\n\t\t\tthis.programId,\n\t\t\t(logs, ctx) => {\n\t\t\t\tcallback(logs.signature, ctx.slot, logs.logs, undefined);\n\t\t\t},\n\t\t\tthis.commitment\n\t\t);\n\t\treturn true;\n\t}\n\n\tpublic isSubscribed(): boolean {\n\t\treturn this.subscriptionId !== undefined;\n\t}\n\n\tpublic async unsubscribe(): Promise<boolean> {\n\t\tif (this.subscriptionId !== undefined) {\n\t\t\tawait this.connection.removeOnLogsListener(this.subscriptionId);\n\t\t\tthis.subscriptionId = undefined;\n\t\t}\n\t\treturn true;\n\t}\n}\n","import { Connection, TransactionSignature } from '@solana/web3.js';\nimport { Program } from '@project-serum/anchor';\nimport {\n\tDefaultEventSubscriptionOptions,\n\tEventSubscriptionOptions,\n\tEventType,\n\tWrappedEvents,\n\tEventMap,\n\tLogProvider,\n\tEventSubscriberEvents,\n} from './types';\nimport { TxEventCache } from './txEventCache';\nimport { EventList } from './eventList';\nimport { PollingLogProvider } from './pollingLogProvider';\nimport { fetchLogs } from './fetchLogs';\nimport { WebSocketLogProvider } from './webSocketLogProvider';\nimport { EventEmitter } from 'events';\nimport StrictEventEmitter from 'strict-event-emitter-types';\nimport { getSortFn } from './sort';\n\nexport class EventSubscriber {\n\tprivate eventListMap: Map<EventType, EventList<EventType>>;\n\tprivate txEventCache: TxEventCache;\n\tprivate awaitTxPromises = new Map<string, Promise<void>>();\n\tprivate awaitTxResolver = new Map<string, () => void>();\n\tprivate logProvider: LogProvider;\n\tpublic eventEmitter: StrictEventEmitter<EventEmitter, EventSubscriberEvents>;\n\tprivate lastSeenSlot: number;\n\tprivate lastSeenBlockTime: number | undefined;\n\tpublic lastSeenTxSig: string;\n\n\tpublic constructor(\n\t\tprivate connection: Connection,\n\t\tprivate program: Program,\n\t\tprivate options: EventSubscriptionOptions = DefaultEventSubscriptionOptions\n\t) {\n\t\tthis.options = Object.assign({}, DefaultEventSubscriptionOptions, options);\n\t\tthis.txEventCache = new TxEventCache(this.options.maxTx);\n\t\tthis.eventListMap = new Map<EventType, EventList<EventType>>();\n\t\tfor (const eventType of this.options.eventTypes) {\n\t\t\tthis.eventListMap.set(\n\t\t\t\teventType,\n\t\t\t\tnew EventList(\n\t\t\t\t\teventType,\n\t\t\t\t\tthis.options.maxEventsPerType,\n\t\t\t\t\tgetSortFn(this.options.orderBy, this.options.orderDir, eventType),\n\t\t\t\t\tthis.options.orderDir\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\tthis.eventEmitter = new EventEmitter();\n\t\tif (this.options.logProviderConfig.type === 'websocket') {\n\t\t\tthis.logProvider = new WebSocketLogProvider(\n\t\t\t\tthis.connection,\n\t\t\t\tthis.program.programId,\n\t\t\t\tthis.options.commitment\n\t\t\t);\n\t\t} else {\n\t\t\tthis.logProvider = new PollingLogProvider(\n\t\t\t\tthis.connection,\n\t\t\t\tthis.program.programId,\n\t\t\t\toptions.commitment,\n\t\t\t\tthis.options.logProviderConfig.frequency\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async subscribe(): Promise<boolean> {\n\t\ttry {\n\t\t\tif (this.logProvider.isSubscribed()) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tthis.logProvider.subscribe((txSig, slot, logs, mostRecentBlockTime) => {\n\t\t\t\tthis.handleTxLogs(txSig, slot, logs, mostRecentBlockTime);\n\t\t\t}, true);\n\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\tconsole.error('Error fetching previous txs in event subscriber');\n\t\t\tconsole.error(e);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate handleTxLogs(\n\t\ttxSig: TransactionSignature,\n\t\tslot: number,\n\t\tlogs: string[],\n\t\tmostRecentBlockTime: number | undefined\n\t): void {\n\t\tif (this.txEventCache.has(txSig)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst wrappedEvents = this.parseEventsFromLogs(txSig, slot, logs);\n\t\tfor (const wrappedEvent of wrappedEvents) {\n\t\t\tthis.eventListMap.get(wrappedEvent.eventType).insert(wrappedEvent);\n\t\t}\n\n\t\t// dont emit event till we've added all the events to the eventListMap\n\t\tfor (const wrappedEvent of wrappedEvents) {\n\t\t\tthis.eventEmitter.emit('newEvent', wrappedEvent);\n\t\t}\n\n\t\tif (this.awaitTxPromises.has(txSig)) {\n\t\t\tthis.awaitTxPromises.delete(txSig);\n\t\t\tthis.awaitTxResolver.get(txSig)();\n\t\t\tthis.awaitTxResolver.delete(txSig);\n\t\t}\n\n\t\tif (!this.lastSeenSlot || slot > this.lastSeenSlot) {\n\t\t\tthis.lastSeenTxSig = txSig;\n\t\t}\n\n\t\tif (\n\t\t\tthis.lastSeenBlockTime === undefined ||\n\t\t\tmostRecentBlockTime > this.lastSeenBlockTime\n\t\t) {\n\t\t\tthis.lastSeenBlockTime = mostRecentBlockTime;\n\t\t}\n\n\t\tthis.txEventCache.add(txSig, wrappedEvents);\n\t}\n\n\tpublic async fetchPreviousTx(fetchMax?: boolean): Promise<void> {\n\t\tif (!this.options.untilTx && !fetchMax) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet txFetched = 0;\n\t\tlet beforeTx: TransactionSignature = undefined;\n\t\tconst untilTx: TransactionSignature = this.options.untilTx;\n\t\twhile (txFetched < this.options.maxTx) {\n\t\t\tconst response = await fetchLogs(\n\t\t\t\tthis.connection,\n\t\t\t\tthis.program.programId,\n\t\t\t\tthis.options.commitment === 'finalized' ? 'finalized' : 'confirmed',\n\t\t\t\tbeforeTx,\n\t\t\t\tuntilTx\n\t\t\t);\n\n\t\t\tif (response === undefined) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttxFetched += response.transactionLogs.length;\n\t\t\tbeforeTx = response.earliestTx;\n\n\t\t\tfor (const { txSig, slot, logs } of response.transactionLogs) {\n\t\t\t\tthis.handleTxLogs(txSig, slot, logs, response.mostRecentBlockTime);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async unsubscribe(): Promise<boolean> {\n\t\treturn await this.logProvider.unsubscribe();\n\t}\n\n\tprivate parseEventsFromLogs(\n\t\ttxSig: TransactionSignature,\n\t\tslot: number,\n\t\tlogs: string[]\n\t): WrappedEvents {\n\t\tconst records = [];\n\t\t// @ts-ignore\n\t\tthis.program._events._eventParser.parseLogs(logs, (event) => {\n\t\t\tconst expectRecordType = this.eventListMap.has(event.name);\n\t\t\tif (expectRecordType) {\n\t\t\t\tevent.data.txSig = txSig;\n\t\t\t\tevent.data.slot = slot;\n\t\t\t\tevent.data.eventType = event.name;\n\t\t\t\trecords.push(event.data);\n\t\t\t}\n\t\t});\n\t\treturn records;\n\t}\n\n\tpublic awaitTx(txSig: TransactionSignature): Promise<void> {\n\t\tif (this.awaitTxPromises.has(txSig)) {\n\t\t\treturn this.awaitTxPromises.get(txSig);\n\t\t}\n\n\t\tif (this.txEventCache.has(txSig)) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst promise = new Promise<void>((resolve) => {\n\t\t\tthis.awaitTxResolver.set(txSig, resolve);\n\t\t});\n\t\tthis.awaitTxPromises.set(txSig, promise);\n\t\treturn promise;\n\t}\n\n\tpublic getEventList<Type extends keyof EventMap>(\n\t\teventType: Type\n\t): EventList<Type> {\n\t\treturn this.eventListMap.get(eventType) as EventList<Type>;\n\t}\n\n\t/**\n\t * This requires the EventList be cast to an array, which requires reallocation of memory.\n\t * Would bias to using getEventList over getEvents\n\t *\n\t * @param eventType\n\t */\n\tpublic getEventsArray<Type extends EventType>(\n\t\teventType: Type\n\t): EventMap[Type][] {\n\t\treturn this.eventListMap.get(eventType).toArray() as EventMap[Type][];\n\t}\n\n\tpublic getEventsByTx(txSig: TransactionSignature): WrappedEvents | undefined {\n\t\treturn this.txEventCache.get(txSig);\n\t}\n}\n","import {\n\tEventMap,\n\tEventSubscriptionOrderBy,\n\tEventSubscriptionOrderDirection,\n\tEventType,\n\tSortFn,\n\tEvent,\n} from './types';\nimport { OrderActionRecord } from '../types';\nimport { ZERO } from '../index';\n\nfunction clientSortAscFn(): 'less than' {\n\treturn 'less than';\n}\n\nfunction clientSortDescFn(): 'greater than' {\n\treturn 'greater than';\n}\n\nfunction defaultBlockchainSortFn(\n\tcurrentEvent: EventMap[EventType],\n\tnewEvent: EventMap[EventType]\n): 'less than' | 'greater than' {\n\treturn currentEvent.slot <= newEvent.slot ? 'less than' : 'greater than';\n}\n\nfunction orderActionRecordSortFn(\n\tcurrentEvent: Event<OrderActionRecord>,\n\tnewEvent: Event<OrderActionRecord>\n): 'less than' | 'greater than' {\n\tconst currentEventMarketIndex = currentEvent.marketIndex;\n\tconst newEventMarketIndex = newEvent.marketIndex;\n\tif (currentEventMarketIndex !== newEventMarketIndex) {\n\t\treturn currentEvent.ts.lte(newEvent.ts) ? 'less than' : 'greater than';\n\t}\n\n\tif (currentEvent.fillRecordId?.gt(ZERO) && newEvent.fillRecordId?.gt(ZERO)) {\n\t\treturn currentEvent.fillRecordId.lte(newEvent.fillRecordId)\n\t\t\t? 'less than'\n\t\t\t: 'greater than';\n\t} else {\n\t\treturn currentEvent.ts.lte(newEvent.ts) ? 'less than' : 'greater than';\n\t}\n}\n\nexport function getSortFn(\n\torderBy: EventSubscriptionOrderBy,\n\torderDir: EventSubscriptionOrderDirection,\n\teventType: EventType\n): SortFn {\n\tif (orderBy === 'client') {\n\t\treturn orderDir === 'asc' ? clientSortAscFn : clientSortDescFn;\n\t}\n\n\tswitch (eventType) {\n\t\tcase 'OrderActionRecord':\n\t\t\treturn orderActionRecordSortFn;\n\t\tdefault:\n\t\t\treturn defaultBlockchainSortFn;\n\t}\n}\n","import { isOneOfVariant, isVariant, Order } from '../types';\nimport { BN, ZERO } from '../.';\n\nexport function isAuctionComplete(order: Order, slot: number): boolean {\n\tif (order.auctionDuration === 0) {\n\t\treturn true;\n\t}\n\n\treturn new BN(slot).sub(order.slot).gt(new BN(order.auctionDuration));\n}\n\nexport function getAuctionPrice(\n\torder: Order,\n\tslot: number,\n\toraclePrice: BN\n): BN {\n\tif (isOneOfVariant(order.orderType, ['market', 'triggerMarket'])) {\n\t\treturn getAuctionPriceForFixedAuction(order, slot);\n\t} else if (isVariant(order.orderType, 'oracle')) {\n\t\treturn getAuctionPriceForOracleOffsetAuction(order, slot, oraclePrice);\n\t} else {\n\t\tthrow Error(`Cant get auction price for order type ${order.orderType}`);\n\t}\n}\n\nexport function getAuctionPriceForFixedAuction(order: Order, slot: number): BN {\n\tconst slotsElapsed = new BN(slot).sub(order.slot);\n\n\tconst deltaDenominator = new BN(order.auctionDuration);\n\tconst deltaNumerator = BN.min(slotsElapsed, deltaDenominator);\n\n\tif (deltaDenominator.eq(ZERO)) {\n\t\treturn order.auctionEndPrice;\n\t}\n\n\tlet priceDelta;\n\tif (isVariant(order.direction, 'long')) {\n\t\tpriceDelta = order.auctionEndPrice\n\t\t\t.sub(order.auctionStartPrice)\n\t\t\t.mul(deltaNumerator)\n\t\t\t.div(deltaDenominator);\n\t} else {\n\t\tpriceDelta = order.auctionStartPrice\n\t\t\t.sub(order.auctionEndPrice)\n\t\t\t.mul(deltaNumerator)\n\t\t\t.div(deltaDenominator);\n\t}\n\n\tlet price;\n\tif (isVariant(order.direction, 'long')) {\n\t\tprice = order.auctionStartPrice.add(priceDelta);\n\t} else {\n\t\tprice = order.auctionStartPrice.sub(priceDelta);\n\t}\n\n\treturn price;\n}\n\nexport function getAuctionPriceForOracleOffsetAuction(\n\torder: Order,\n\tslot: number,\n\toraclePrice: BN\n): BN {\n\tconst slotsElapsed = new BN(slot).sub(order.slot);\n\n\tconst deltaDenominator = new BN(order.auctionDuration);\n\tconst deltaNumerator = BN.min(slotsElapsed, deltaDenominator);\n\n\tif (deltaDenominator.eq(ZERO)) {\n\t\treturn order.auctionEndPrice.add(order.auctionEndPrice);\n\t}\n\n\tlet priceOffsetDelta;\n\tif (isVariant(order.direction, 'long')) {\n\t\tpriceOffsetDelta = order.auctionEndPrice\n\t\t\t.sub(order.auctionStartPrice)\n\t\t\t.mul(deltaNumerator)\n\t\t\t.div(deltaDenominator);\n\t} else {\n\t\tpriceOffsetDelta = order.auctionStartPrice\n\t\t\t.sub(order.auctionEndPrice)\n\t\t\t.mul(deltaNumerator)\n\t\t\t.div(deltaDenominator);\n\t}\n\n\tlet priceOffset;\n\tif (isVariant(order.direction, 'long')) {\n\t\tpriceOffset = order.auctionStartPrice.add(priceOffsetDelta);\n\t} else {\n\t\tpriceOffset = order.auctionStartPrice.sub(priceOffsetDelta);\n\t}\n\n\treturn oraclePrice.add(priceOffset);\n}\n","import { BN } from '@project-serum/anchor';\nimport { SpotMarketAccount } from '../types';\n\nexport function castNumberToSpotPrecision(\n\tvalue: number,\n\tspotMarket: SpotMarketAccount\n): BN {\n\treturn new BN(value * Math.pow(10, spotMarket.decimals));\n}\n","import { BN } from '../';\nimport { PRICE_PRECISION } from '../constants/numericConstants';\n\nexport const convertToNumber = (\n\tbigNumber: BN,\n\tprecision: BN = PRICE_PRECISION\n) => {\n\tif (!bigNumber) return 0;\n\treturn (\n\t\tbigNumber.div(precision).toNumber() +\n\t\tbigNumber.mod(precision).toNumber() / precision.toNumber()\n\t);\n};\n","import {\n\tisOneOfVariant,\n\tisVariant,\n\tPerpMarketAccount,\n\tSpotMarketAccount,\n\tStateAccount,\n} from '../types';\n\nexport function exchangePaused(state: StateAccount): boolean {\n\treturn isVariant(state.exchangeStatus, 'paused');\n}\n\nexport function fillPaused(\n\tstate: StateAccount,\n\tmarket: PerpMarketAccount | SpotMarketAccount\n): boolean {\n\treturn (\n\t\tisOneOfVariant(state.exchangeStatus, ['paused', 'fillPaused']) ||\n\t\tisOneOfVariant(market.status, ['paused', 'fillPaused'])\n\t);\n}\n\nexport function ammPaused(\n\tstate: StateAccount,\n\tmarket: PerpMarketAccount | SpotMarketAccount\n): boolean {\n\treturn (\n\t\tisOneOfVariant(state.exchangeStatus, ['paused', 'ammPaused']) ||\n\t\tisOneOfVariant(market.status, ['paused', 'ammPaused'])\n\t);\n}\n","import { BN } from '@project-serum/anchor';\nimport {\n\tAMM_RESERVE_PRECISION,\n\tPRICE_PRECISION,\n\tQUOTE_PRECISION,\n\tZERO,\n} from '../constants/numericConstants';\nimport { PerpMarketAccount, isVariant } from '../types';\nimport { OraclePriceData } from '../oracles/types';\nimport { calculateBidAskPrice } from './amm';\n\n/**\n *\n * @param market\n * @param oraclePriceData\n * @param periodAdjustment\n * @returns Estimated funding rate. : Precision //TODO-PRECISION\n */\nexport async function calculateAllEstimatedFundingRate(\n\tmarket: PerpMarketAccount,\n\toraclePriceData?: OraclePriceData,\n\tperiodAdjustment: BN = new BN(1)\n): Promise<[BN, BN, BN, BN, BN]> {\n\t// periodAdjustment\n\t// \t1: hourly\n\t//  24: daily\n\t//  24 * 365.25: annualized\n\tconst secondsInHour = new BN(3600);\n\tconst hoursInDay = new BN(24);\n\tconst ONE = new BN(1);\n\n\tif (isVariant(market.status, 'uninitialized')) {\n\t\treturn [ZERO, ZERO, ZERO, ZERO, ZERO];\n\t}\n\n\tconst payFreq = new BN(market.amm.fundingPeriod);\n\n\t// todo: sufficiently differs from blockchain timestamp?\n\tconst now = new BN((Date.now() / 1000).toFixed(0));\n\tconst timeSinceLastUpdate = now.sub(market.amm.lastFundingRateTs);\n\n\t// calculate real-time mark twap\n\tconst lastMarkTwapWithMantissa = market.amm.lastMarkPriceTwap;\n\tconst lastMarkPriceTwapTs = market.amm.lastMarkPriceTwapTs;\n\n\tconst timeSinceLastMarkChange = now.sub(lastMarkPriceTwapTs);\n\tconst markTwapTimeSinceLastUpdate = BN.max(\n\t\tsecondsInHour,\n\t\tBN.max(ZERO, secondsInHour.sub(timeSinceLastMarkChange))\n\t);\n\tconst [bid, ask] = calculateBidAskPrice(market.amm, oraclePriceData);\n\tconst baseAssetPriceWithMantissa = bid.add(ask).div(new BN(2));\n\n\tconst markTwapWithMantissa = markTwapTimeSinceLastUpdate\n\t\t.mul(lastMarkTwapWithMantissa)\n\t\t.add(timeSinceLastMarkChange.mul(baseAssetPriceWithMantissa))\n\t\t.div(timeSinceLastMarkChange.add(markTwapTimeSinceLastUpdate));\n\n\t// calculate real-time (predicted) oracle twap\n\t// note: oracle twap depends on `when the chord is struck` (market is trade)\n\tconst lastOracleTwapWithMantissa =\n\t\tmarket.amm.historicalOracleData.lastOraclePriceTwap;\n\tconst lastOraclePriceTwapTs =\n\t\tmarket.amm.historicalOracleData.lastOraclePriceTwapTs;\n\n\tconst oracleInvalidDuration = BN.max(\n\t\tZERO,\n\t\tlastMarkPriceTwapTs.sub(lastOraclePriceTwapTs)\n\t);\n\n\tconst timeSinceLastOracleTwapUpdate = now.sub(lastOraclePriceTwapTs);\n\tconst oracleTwapTimeSinceLastUpdate = BN.max(\n\t\tONE,\n\t\tBN.min(\n\t\t\tsecondsInHour,\n\t\t\tBN.max(ONE, secondsInHour.sub(timeSinceLastOracleTwapUpdate))\n\t\t)\n\t);\n\tlet oracleTwapWithMantissa = lastOracleTwapWithMantissa;\n\n\t// if passing live oracle data, improve predicted calc estimate\n\tif (oraclePriceData) {\n\t\tconst oraclePrice = oraclePriceData.price;\n\n\t\tconst oracleLiveVsTwap = oraclePrice\n\t\t\t.sub(lastOracleTwapWithMantissa)\n\t\t\t.abs()\n\t\t\t.mul(PRICE_PRECISION)\n\t\t\t.mul(new BN(100))\n\t\t\t.div(lastOracleTwapWithMantissa);\n\n\t\t// verify pyth live input is within 10% of last twap for live update\n\t\tif (oracleLiveVsTwap.lte(PRICE_PRECISION.mul(new BN(10)))) {\n\t\t\toracleTwapWithMantissa = oracleTwapTimeSinceLastUpdate\n\t\t\t\t.mul(lastOracleTwapWithMantissa)\n\t\t\t\t.add(timeSinceLastMarkChange.mul(oraclePrice))\n\t\t\t\t.div(timeSinceLastMarkChange.add(oracleTwapTimeSinceLastUpdate));\n\t\t}\n\t}\n\n\tconst shrunkLastOracleTwapwithMantissa = oracleTwapTimeSinceLastUpdate\n\t\t.mul(lastOracleTwapWithMantissa)\n\t\t.add(oracleInvalidDuration.mul(lastMarkTwapWithMantissa))\n\t\t.div(oracleTwapTimeSinceLastUpdate.add(oracleInvalidDuration));\n\n\tconst twapSpread = lastMarkTwapWithMantissa.sub(\n\t\tshrunkLastOracleTwapwithMantissa\n\t);\n\n\tconst twapSpreadPct = twapSpread\n\t\t.mul(PRICE_PRECISION)\n\t\t.mul(new BN(100))\n\t\t.div(shrunkLastOracleTwapwithMantissa);\n\n\tconst lowerboundEst = twapSpreadPct\n\t\t.mul(payFreq)\n\t\t.mul(BN.min(secondsInHour, timeSinceLastUpdate))\n\t\t.mul(periodAdjustment)\n\t\t.div(secondsInHour)\n\t\t.div(secondsInHour)\n\t\t.div(hoursInDay);\n\n\tconst interpEst = twapSpreadPct.mul(periodAdjustment).div(hoursInDay);\n\n\tconst interpRateQuote = twapSpreadPct\n\t\t.mul(periodAdjustment)\n\t\t.div(hoursInDay)\n\t\t.div(PRICE_PRECISION.div(QUOTE_PRECISION));\n\n\tlet feePoolSize = calculateFundingPool(market);\n\tif (interpRateQuote.lt(new BN(0))) {\n\t\tfeePoolSize = feePoolSize.mul(new BN(-1));\n\t}\n\n\tlet cappedAltEst: BN;\n\tlet largerSide: BN;\n\tlet smallerSide: BN;\n\tif (\n\t\tmarket.amm.baseAssetAmountLong.gt(market.amm.baseAssetAmountShort.abs())\n\t) {\n\t\tlargerSide = market.amm.baseAssetAmountLong.abs();\n\t\tsmallerSide = market.amm.baseAssetAmountShort.abs();\n\t\tif (twapSpread.gt(new BN(0))) {\n\t\t\treturn [\n\t\t\t\tmarkTwapWithMantissa,\n\t\t\t\toracleTwapWithMantissa,\n\t\t\t\tlowerboundEst,\n\t\t\t\tinterpEst,\n\t\t\t\tinterpEst,\n\t\t\t];\n\t\t}\n\t} else if (\n\t\tmarket.amm.baseAssetAmountLong.lt(market.amm.baseAssetAmountShort.abs())\n\t) {\n\t\tlargerSide = market.amm.baseAssetAmountShort.abs();\n\t\tsmallerSide = market.amm.baseAssetAmountLong.abs();\n\t\tif (twapSpread.lt(new BN(0))) {\n\t\t\treturn [\n\t\t\t\tmarkTwapWithMantissa,\n\t\t\t\toracleTwapWithMantissa,\n\t\t\t\tlowerboundEst,\n\t\t\t\tinterpEst,\n\t\t\t\tinterpEst,\n\t\t\t];\n\t\t}\n\t} else {\n\t\treturn [\n\t\t\tmarkTwapWithMantissa,\n\t\t\toracleTwapWithMantissa,\n\t\t\tlowerboundEst,\n\t\t\tinterpEst,\n\t\t\tinterpEst,\n\t\t];\n\t}\n\n\tif (largerSide.gt(ZERO)) {\n\t\t// funding smaller flow\n\t\tcappedAltEst = smallerSide.mul(twapSpread).div(hoursInDay);\n\t\tconst feePoolTopOff = feePoolSize\n\t\t\t.mul(PRICE_PRECISION.div(QUOTE_PRECISION))\n\t\t\t.mul(AMM_RESERVE_PRECISION);\n\t\tcappedAltEst = cappedAltEst.add(feePoolTopOff).div(largerSide);\n\n\t\tcappedAltEst = cappedAltEst\n\t\t\t.mul(PRICE_PRECISION)\n\t\t\t.mul(new BN(100))\n\t\t\t.div(oracleTwapWithMantissa)\n\t\t\t.mul(periodAdjustment);\n\n\t\tif (cappedAltEst.abs().gte(interpEst.abs())) {\n\t\t\tcappedAltEst = interpEst;\n\t\t}\n\t} else {\n\t\tcappedAltEst = interpEst;\n\t}\n\n\treturn [\n\t\tmarkTwapWithMantissa,\n\t\toracleTwapWithMantissa,\n\t\tlowerboundEst,\n\t\tcappedAltEst,\n\t\tinterpEst,\n\t];\n}\n\n/**\n *\n * @param market\n * @param oraclePriceData\n * @param periodAdjustment\n * @param estimationMethod\n * @returns Estimated funding rate. : Precision //TODO-PRECISION\n */\nexport async function calculateEstimatedFundingRate(\n\tmarket: PerpMarketAccount,\n\toraclePriceData?: OraclePriceData,\n\tperiodAdjustment: BN = new BN(1),\n\testimationMethod?: 'interpolated' | 'lowerbound' | 'capped'\n): Promise<BN> {\n\tconst [_1, _2, lowerboundEst, cappedAltEst, interpEst] =\n\t\tawait calculateAllEstimatedFundingRate(\n\t\t\tmarket,\n\t\t\toraclePriceData,\n\t\t\tperiodAdjustment\n\t\t);\n\n\tif (estimationMethod == 'lowerbound') {\n\t\t//assuming remaining funding period has no gap\n\t\treturn lowerboundEst;\n\t} else if (estimationMethod == 'capped') {\n\t\treturn cappedAltEst;\n\t} else {\n\t\treturn interpEst;\n\t}\n}\n\n/**\n *\n * @param market\n * @param oraclePriceData\n * @param periodAdjustment\n * @returns Estimated funding rate. : Precision //TODO-PRECISION\n */\nexport async function calculateLongShortFundingRate(\n\tmarket: PerpMarketAccount,\n\toraclePriceData?: OraclePriceData,\n\tperiodAdjustment: BN = new BN(1)\n): Promise<[BN, BN]> {\n\tconst [_1, _2, _, cappedAltEst, interpEst] =\n\t\tawait calculateAllEstimatedFundingRate(\n\t\t\tmarket,\n\t\t\toraclePriceData,\n\t\t\tperiodAdjustment\n\t\t);\n\n\tif (market.amm.baseAssetAmountLong.gt(market.amm.baseAssetAmountShort)) {\n\t\treturn [cappedAltEst, interpEst];\n\t} else if (\n\t\tmarket.amm.baseAssetAmountLong.lt(market.amm.baseAssetAmountShort)\n\t) {\n\t\treturn [interpEst, cappedAltEst];\n\t} else {\n\t\treturn [interpEst, interpEst];\n\t}\n}\n\n/**\n *\n * @param market\n * @param oraclePriceData\n * @param periodAdjustment\n * @returns Estimated funding rate. : Precision //TODO-PRECISION\n */\nexport async function calculateLongShortFundingRateAndLiveTwaps(\n\tmarket: PerpMarketAccount,\n\toraclePriceData?: OraclePriceData,\n\tperiodAdjustment: BN = new BN(1)\n): Promise<[BN, BN, BN, BN]> {\n\tconst [markTwapLive, oracleTwapLive, _2, cappedAltEst, interpEst] =\n\t\tawait calculateAllEstimatedFundingRate(\n\t\t\tmarket,\n\t\t\toraclePriceData,\n\t\t\tperiodAdjustment\n\t\t);\n\n\tif (\n\t\tmarket.amm.baseAssetAmountLong.gt(market.amm.baseAssetAmountShort.abs())\n\t) {\n\t\treturn [markTwapLive, oracleTwapLive, cappedAltEst, interpEst];\n\t} else if (\n\t\tmarket.amm.baseAssetAmountLong.lt(market.amm.baseAssetAmountShort.abs())\n\t) {\n\t\treturn [markTwapLive, oracleTwapLive, interpEst, cappedAltEst];\n\t} else {\n\t\treturn [markTwapLive, oracleTwapLive, interpEst, interpEst];\n\t}\n}\n\n/**\n *\n * @param market\n * @returns Estimated fee pool size\n */\nexport function calculateFundingPool(market: PerpMarketAccount): BN {\n\t// todo\n\tconst totalFeeLB = market.amm.totalExchangeFee.div(new BN(2));\n\tconst feePool = BN.max(\n\t\tZERO,\n\t\tmarket.amm.totalFeeMinusDistributions\n\t\t\t.sub(totalFeeLB)\n\t\t\t.mul(new BN(1))\n\t\t\t.div(new BN(3))\n\t);\n\treturn feePool;\n}\n","import { User } from '../user';\nimport {\n\tisOneOfVariant,\n\tisVariant,\n\tPerpMarketAccount,\n\tAMM,\n\tOrder,\n\tPositionDirection,\n} from '../types';\nimport { ZERO, TWO } from '../constants/numericConstants';\nimport { BN } from '@project-serum/anchor';\nimport { OraclePriceData } from '../oracles/types';\nimport { getAuctionPrice, isAuctionComplete } from './auction';\nimport {\n\tcalculateMaxBaseAssetAmountFillable,\n\tcalculateMaxBaseAssetAmountToTrade,\n\tcalculateUpdatedAMM,\n} from './amm';\n\nexport function isOrderRiskIncreasing(user: User, order: Order): boolean {\n\tif (isVariant(order.status, 'init')) {\n\t\treturn false;\n\t}\n\n\tconst position =\n\t\tuser.getPerpPosition(order.marketIndex) ||\n\t\tuser.getEmptyPosition(order.marketIndex);\n\n\t// if no position exists, it's risk increasing\n\tif (position.baseAssetAmount.eq(ZERO)) {\n\t\treturn true;\n\t}\n\n\t// if position is long and order is long\n\tif (position.baseAssetAmount.gt(ZERO) && isVariant(order.direction, 'long')) {\n\t\treturn true;\n\t}\n\n\t// if position is short and order is short\n\tif (\n\t\tposition.baseAssetAmount.lt(ZERO) &&\n\t\tisVariant(order.direction, 'short')\n\t) {\n\t\treturn true;\n\t}\n\n\tconst baseAssetAmountToFill = order.baseAssetAmount.sub(\n\t\torder.baseAssetAmountFilled\n\t);\n\t// if order will flip position\n\tif (baseAssetAmountToFill.gt(position.baseAssetAmount.abs().mul(TWO))) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nexport function isOrderRiskIncreasingInSameDirection(\n\tuser: User,\n\torder: Order\n): boolean {\n\tif (isVariant(order.status, 'init')) {\n\t\treturn false;\n\t}\n\n\tconst position =\n\t\tuser.getPerpPosition(order.marketIndex) ||\n\t\tuser.getEmptyPosition(order.marketIndex);\n\n\t// if no position exists, it's risk increasing\n\tif (position.baseAssetAmount.eq(ZERO)) {\n\t\treturn true;\n\t}\n\n\t// if position is long and order is long\n\tif (position.baseAssetAmount.gt(ZERO) && isVariant(order.direction, 'long')) {\n\t\treturn true;\n\t}\n\n\t// if position is short and order is short\n\tif (\n\t\tposition.baseAssetAmount.lt(ZERO) &&\n\t\tisVariant(order.direction, 'short')\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nexport function isOrderReduceOnly(user: User, order: Order): boolean {\n\tif (isVariant(order.status, 'init')) {\n\t\treturn false;\n\t}\n\n\tconst position =\n\t\tuser.getPerpPosition(order.marketIndex) ||\n\t\tuser.getEmptyPosition(order.marketIndex);\n\n\t// if position is long and order is long\n\tif (\n\t\tposition.baseAssetAmount.gte(ZERO) &&\n\t\tisVariant(order.direction, 'long')\n\t) {\n\t\treturn false;\n\t}\n\n\t// if position is short and order is short\n\tif (\n\t\tposition.baseAssetAmount.lte(ZERO) &&\n\t\tisVariant(order.direction, 'short')\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport function standardizeBaseAssetAmount(\n\tbaseAssetAmount: BN,\n\tstepSize: BN\n): BN {\n\tconst remainder = baseAssetAmount.mod(stepSize);\n\treturn baseAssetAmount.sub(remainder);\n}\n\nexport function getLimitPrice(\n\torder: Order,\n\toraclePriceData: OraclePriceData,\n\tslot: number,\n\tfallbackPrice?: BN\n): BN | undefined {\n\tlet limitPrice;\n\tif (hasAuctionPrice(order, slot)) {\n\t\tlimitPrice = getAuctionPrice(order, slot, oraclePriceData.price);\n\t} else if (order.oraclePriceOffset !== 0) {\n\t\tlimitPrice = oraclePriceData.price.add(new BN(order.oraclePriceOffset));\n\t} else if (order.price.eq(ZERO)) {\n\t\tlimitPrice = fallbackPrice;\n\t} else {\n\t\tlimitPrice = order.price;\n\t}\n\n\treturn limitPrice;\n}\n\nexport function hasLimitPrice(order: Order, slot: number): boolean {\n\treturn (\n\t\torder.price.gt(ZERO) ||\n\t\torder.oraclePriceOffset != 0 ||\n\t\t!isAuctionComplete(order, slot)\n\t);\n}\n\nexport function hasAuctionPrice(order: Order, slot: number): boolean {\n\treturn isMarketOrder(order) && !isAuctionComplete(order, slot);\n}\n\nexport function isFillableByVAMM(\n\torder: Order,\n\tmarket: PerpMarketAccount,\n\toraclePriceData: OraclePriceData,\n\tslot: number,\n\tts: number\n): boolean {\n\treturn (\n\t\t(isAuctionComplete(order, slot) &&\n\t\t\t!calculateBaseAssetAmountForAmmToFulfill(\n\t\t\t\torder,\n\t\t\t\tmarket,\n\t\t\t\toraclePriceData,\n\t\t\t\tslot\n\t\t\t).eq(ZERO)) ||\n\t\tisOrderExpired(order, ts)\n\t);\n}\n\nexport function calculateBaseAssetAmountForAmmToFulfill(\n\torder: Order,\n\tmarket: PerpMarketAccount,\n\toraclePriceData: OraclePriceData,\n\tslot: number\n): BN {\n\tif (mustBeTriggered(order) && !isTriggered(order)) {\n\t\treturn ZERO;\n\t}\n\n\tconst limitPrice = getLimitPrice(order, oraclePriceData, slot);\n\tlet baseAssetAmount;\n\n\tconst updatedAMM = calculateUpdatedAMM(market.amm, oraclePriceData);\n\tif (limitPrice !== undefined) {\n\t\tbaseAssetAmount = calculateBaseAssetAmountToFillUpToLimitPrice(\n\t\t\torder,\n\t\t\tupdatedAMM,\n\t\t\tlimitPrice,\n\t\t\toraclePriceData\n\t\t);\n\t} else {\n\t\tbaseAssetAmount = order.baseAssetAmount.sub(order.baseAssetAmountFilled);\n\t}\n\n\tconst maxBaseAssetAmount = calculateMaxBaseAssetAmountFillable(\n\t\tupdatedAMM,\n\t\torder.direction\n\t);\n\n\treturn BN.min(maxBaseAssetAmount, baseAssetAmount);\n}\n\nexport function calculateBaseAssetAmountToFillUpToLimitPrice(\n\torder: Order,\n\tamm: AMM,\n\tlimitPrice: BN,\n\toraclePriceData: OraclePriceData\n): BN {\n\tconst [maxAmountToTrade, direction] = calculateMaxBaseAssetAmountToTrade(\n\t\tamm,\n\t\tlimitPrice,\n\t\torder.direction,\n\t\toraclePriceData\n\t);\n\n\tconst baseAssetAmount = standardizeBaseAssetAmount(\n\t\tmaxAmountToTrade,\n\t\tamm.orderStepSize\n\t);\n\n\t// Check that directions are the same\n\tconst sameDirection = isSameDirection(direction, order.direction);\n\tif (!sameDirection) {\n\t\treturn ZERO;\n\t}\n\n\tconst baseAssetAmountUnfilled = order.baseAssetAmount.sub(\n\t\torder.baseAssetAmountFilled\n\t);\n\treturn baseAssetAmount.gt(baseAssetAmountUnfilled)\n\t\t? baseAssetAmountUnfilled\n\t\t: baseAssetAmount;\n}\n\nfunction isSameDirection(\n\tfirstDirection: PositionDirection,\n\tsecondDirection: PositionDirection\n): boolean {\n\treturn (\n\t\t(isVariant(firstDirection, 'long') && isVariant(secondDirection, 'long')) ||\n\t\t(isVariant(firstDirection, 'short') && isVariant(secondDirection, 'short'))\n\t);\n}\n\nexport function isOrderExpired(order: Order, ts: number): boolean {\n\tif (\n\t\tmustBeTriggered(order) ||\n\t\t!isVariant(order.status, 'open') ||\n\t\torder.maxTs.eq(ZERO)\n\t) {\n\t\treturn false;\n\t}\n\n\treturn new BN(ts).gt(order.maxTs);\n}\n\nexport function isMarketOrder(order: Order): boolean {\n\treturn isOneOfVariant(order.orderType, ['market', 'triggerMarket', 'oracle']);\n}\n\nexport function isLimitOrder(order: Order): boolean {\n\treturn isOneOfVariant(order.orderType, ['limit', 'triggerLimit']);\n}\n\nexport function mustBeTriggered(order: Order): boolean {\n\treturn isOneOfVariant(order.orderType, ['triggerMarket', 'triggerLimit']);\n}\n\nexport function isTriggered(order: Order): boolean {\n\treturn isOneOfVariant(order.triggerCondition, [\n\t\t'triggeredAbove',\n\t\t'triggeredBelow',\n\t]);\n}\n","import { ZERO } from '../constants/numericConstants';\nimport { BN } from '../index';\n\nexport function stakeAmountToShares(\n\tamount: BN,\n\ttotalIfShares: BN,\n\tinsuranceFundVaultBalance: BN\n): BN {\n\tlet nShares: BN;\n\tif (insuranceFundVaultBalance.gt(ZERO)) {\n\t\tnShares = amount.mul(totalIfShares).div(insuranceFundVaultBalance);\n\t} else {\n\t\tnShares = amount;\n\t}\n\n\treturn nShares;\n}\n\nexport function unstakeSharesToAmount(\n\tnShares: BN,\n\ttotalIfShares: BN,\n\tinsuranceFundVaultBalance: BN\n): BN {\n\tlet amount: BN;\n\tif (totalIfShares.gt(ZERO)) {\n\t\tamount = BN.max(\n\t\t\tZERO,\n\t\t\tnShares.mul(insuranceFundVaultBalance).div(totalIfShares)\n\t\t);\n\t} else {\n\t\tamount = ZERO;\n\t}\n\n\treturn amount;\n}\n","import { OptionalOrderParams, OrderTriggerCondition, OrderType } from './types';\nimport { BN } from '@project-serum/anchor';\n\nexport function getLimitOrderParams(\n\tparams: Omit<OptionalOrderParams, 'orderType' | 'marketType'> & { price: BN }\n): OptionalOrderParams {\n\treturn Object.assign({}, params, {\n\t\torderType: OrderType.LIMIT,\n\t});\n}\n\nexport function getTriggerMarketOrderParams(\n\tparams: Omit<OptionalOrderParams, 'orderType' | 'marketType'> & {\n\t\ttriggerCondition: OrderTriggerCondition;\n\t\ttriggerPrice: BN;\n\t}\n): OptionalOrderParams {\n\treturn Object.assign({}, params, {\n\t\torderType: OrderType.TRIGGER_MARKET,\n\t});\n}\n\nexport function getTriggerLimitOrderParams(\n\tparams: Omit<OptionalOrderParams, 'orderType' | 'marketType'> & {\n\t\ttriggerCondition: OrderTriggerCondition;\n\t\ttriggerPrice: BN;\n\t\tprice: BN;\n\t}\n): OptionalOrderParams {\n\treturn Object.assign({}, params, {\n\t\torderType: OrderType.TRIGGER_LIMIT,\n\t});\n}\n\nexport function getMarketOrderParams(\n\tparams: Omit<OptionalOrderParams, 'orderType' | 'marketType'>\n): OptionalOrderParams {\n\treturn Object.assign({}, params, {\n\t\torderType: OrderType.MARKET,\n\t});\n}\n","import { Connection } from '@solana/web3.js';\nimport { EventEmitter } from 'events';\nimport StrictEventEmitter from 'strict-event-emitter-types/types/src';\n\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype SlotSubscriberConfig = {}; // for future customization\n\nexport interface SlotSubscriberEvents {\n\tnewSlot: (newSlot: number) => void;\n}\n\nexport class SlotSubscriber {\n\tcurrentSlot: number;\n\tsubscriptionId: number;\n\teventEmitter: StrictEventEmitter<EventEmitter, SlotSubscriberEvents>;\n\n\tpublic constructor(\n\t\tprivate connection: Connection,\n\t\t_config?: SlotSubscriberConfig\n\t) {\n\t\tthis.eventEmitter = new EventEmitter();\n\t}\n\n\tpublic async subscribe(): Promise<void> {\n\t\tthis.currentSlot = await this.connection.getSlot('confirmed');\n\n\t\tthis.subscriptionId = this.connection.onSlotChange((slotInfo) => {\n\t\t\tthis.currentSlot = slotInfo.slot;\n\t\t\tthis.eventEmitter.emit('newSlot', slotInfo.slot);\n\t\t});\n\t}\n\n\tpublic getSlot(): number {\n\t\treturn this.currentSlot;\n\t}\n\n\tpublic async unsubscribe(): Promise<void> {\n\t\tif (this.subscriptionId) {\n\t\t\tawait this.connection.removeSlotChangeListener(this.subscriptionId);\n\t\t}\n\t}\n}\n","import { Connection, PublicKey } from '@solana/web3.js';\nimport { BulkAccountLoader } from '../accounts/bulkAccountLoader';\nimport { Market, Orderbook } from '@project-serum/serum';\nimport { SerumMarketSubscriberConfig } from './types';\nimport { BN } from '@project-serum/anchor';\nimport { PRICE_PRECISION } from '../constants/numericConstants';\n\nexport class SerumSubscriber {\n\tconnection: Connection;\n\tprogramId: PublicKey;\n\tmarketAddress: PublicKey;\n\taccountLoader: BulkAccountLoader;\n\tmarket: Market;\n\n\tsubscribed: boolean;\n\n\tasksAddress: PublicKey;\n\tasks: Orderbook;\n\tasksCallbackId: string;\n\tlastAsksSlot: number;\n\n\tbidsAddress: PublicKey;\n\tbids: Orderbook;\n\tbidsCallbackId: string;\n\tlastBidsSlot: number;\n\n\tpublic constructor(config: SerumMarketSubscriberConfig) {\n\t\tthis.connection = config.connection;\n\t\tthis.programId = config.programId;\n\t\tthis.marketAddress = config.marketAddress;\n\t\tthis.accountLoader = config.accountSubscription.accountLoader;\n\t}\n\n\tpublic async subscribe(): Promise<void> {\n\t\tif (this.subscribed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.market = await Market.load(\n\t\t\tthis.connection,\n\t\t\tthis.marketAddress,\n\t\t\tundefined,\n\t\t\tthis.programId\n\t\t);\n\n\t\tthis.asksAddress = this.market.asksAddress;\n\t\tthis.asks = await this.market.loadAsks(this.connection);\n\n\t\tthis.asksCallbackId = await this.accountLoader.addAccount(\n\t\t\tthis.asksAddress,\n\t\t\t(buffer, slot) => {\n\t\t\t\tthis.lastAsksSlot = slot;\n\t\t\t\tthis.asks = Orderbook.decode(this.market, buffer);\n\t\t\t}\n\t\t);\n\n\t\tthis.bidsAddress = this.market.bidsAddress;\n\t\tthis.bids = await this.market.loadBids(this.connection);\n\n\t\tthis.bidsCallbackId = await this.accountLoader.addAccount(\n\t\t\tthis.bidsAddress,\n\t\t\t(buffer, slot) => {\n\t\t\t\tthis.lastBidsSlot = slot;\n\t\t\t\tthis.bids = Orderbook.decode(this.market, buffer);\n\t\t\t}\n\t\t);\n\n\t\tthis.subscribed = true;\n\t}\n\n\tpublic getBestBid(): BN | undefined {\n\t\tconst bestBid = this.bids.getL2(1)[0];\n\t\tif (!bestBid) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn new BN(bestBid[0] * PRICE_PRECISION.toNumber());\n\t}\n\n\tpublic getBestAsk(): BN | undefined {\n\t\tconst bestAsk = this.asks.getL2(1)[0];\n\t\tif (!bestAsk) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn new BN(bestAsk[0] * PRICE_PRECISION.toNumber());\n\t}\n\n\tpublic async unsubscribe(): Promise<void> {\n\t\tif (!this.subscribed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.accountLoader.removeAccount(this.asksAddress, this.asksCallbackId);\n\t\tthis.accountLoader.removeAccount(this.bidsAddress, this.bidsCallbackId);\n\n\t\tthis.subscribed = false;\n\t}\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { SerumV3FulfillmentConfigAccount } from '../types';\nimport { DriftClient } from '../driftClient';\n\nexport class SerumFulfillmentConfigMap {\n\tdriftClient: DriftClient;\n\tmap = new Map<number, SerumV3FulfillmentConfigAccount>();\n\n\tpublic constructor(driftClient: DriftClient) {\n\t\tthis.driftClient = driftClient;\n\t}\n\n\tpublic async add(\n\t\tmarketIndex: number,\n\t\tserumMarketAddress: PublicKey\n\t): Promise<void> {\n\t\tconst account = await this.driftClient.getSerumV3FulfillmentConfig(\n\t\t\tserumMarketAddress\n\t\t);\n\t\tthis.map.set(marketIndex, account);\n\t}\n\n\tpublic get(marketIndex: number): SerumV3FulfillmentConfigAccount {\n\t\treturn this.map.get(marketIndex);\n\t}\n}\n","import { Connection, Finality, PublicKey } from '@solana/web3.js';\n\nexport async function findComputeUnitConsumption(\n\tprogramId: PublicKey,\n\tconnection: Connection,\n\ttxSignature: string,\n\tcommitment: Finality = 'confirmed'\n): Promise<number[]> {\n\tconst tx = await connection.getTransaction(txSignature, { commitment });\n\tconst computeUnits = [];\n\tconst regex = new RegExp(\n\t\t`Program ${programId.toString()} consumed ([0-9]{0,6}) of ([0-9]{0,7}) compute units`\n\t);\n\ttx.meta.logMessages.forEach((logMessage) => {\n\t\tconst match = logMessage.match(regex);\n\t\tif (match && match[1]) {\n\t\t\tcomputeUnits.push(match[1]);\n\t\t}\n\t});\n\treturn computeUnits;\n}\n","import { Connection, PublicKey } from '@solana/web3.js';\n\nexport async function estimateTps(\n\tprogramId: PublicKey,\n\tconnection: Connection,\n\tfailed: boolean\n): Promise<number> {\n\tlet signatures = await connection.getSignaturesForAddress(\n\t\tprogramId,\n\t\tundefined,\n\t\t'finalized'\n\t);\n\tif (failed) {\n\t\tsignatures = signatures.filter((signature) => signature.err);\n\t}\n\n\tconst numberOfSignatures = signatures.length;\n\n\tif (numberOfSignatures === 0) {\n\t\treturn 0;\n\t}\n\n\treturn (\n\t\tnumberOfSignatures /\n\t\t(signatures[0].blockTime - signatures[numberOfSignatures - 1].blockTime)\n\t);\n}\n","import {\n\tAMM_RESERVE_PRECISION,\n\tBN,\n\tconvertToNumber,\n\tgetLimitPrice,\n\tisVariant,\n\tPRICE_PRECISION,\n\tOraclePriceData,\n\tOrder,\n\tZERO,\n} from '..';\nimport { PublicKey } from '@solana/web3.js';\nimport { getOrderSignature } from './NodeList';\n\nexport interface DLOBNode {\n\tgetPrice(oraclePriceData: OraclePriceData, slot: number): BN;\n\tisVammNode(): boolean;\n\torder: Order | undefined;\n\tisBaseFilled(): boolean;\n\thaveFilled: boolean;\n\tuserAccount: PublicKey | undefined;\n}\n\nexport abstract class OrderNode implements DLOBNode {\n\torder: Order;\n\tuserAccount: PublicKey;\n\tsortValue: BN;\n\thaveFilled = false;\n\thaveTrigger = false;\n\n\tconstructor(order: Order, userAccount: PublicKey) {\n\t\t// Copy the order over to the node\n\t\tthis.order = { ...order };\n\t\tthis.userAccount = userAccount;\n\t\tthis.sortValue = this.getSortValue(order);\n\t}\n\n\tabstract getSortValue(order: Order): BN;\n\n\tpublic getLabel(): string {\n\t\tlet msg = `Order ${getOrderSignature(\n\t\t\tthis.order.orderId,\n\t\t\tthis.userAccount\n\t\t)}`;\n\t\tmsg += ` ${isVariant(this.order.direction, 'long') ? 'LONG' : 'SHORT'} `;\n\t\tmsg += `${convertToNumber(\n\t\t\tthis.order.baseAssetAmount,\n\t\t\tAMM_RESERVE_PRECISION\n\t\t).toFixed(3)}`;\n\t\tif (this.order.price.gt(ZERO)) {\n\t\t\tmsg += ` @ ${convertToNumber(this.order.price, PRICE_PRECISION).toFixed(\n\t\t\t\t3\n\t\t\t)}`;\n\t\t}\n\t\tif (this.order.triggerPrice.gt(ZERO)) {\n\t\t\tmsg += ` ${\n\t\t\t\tisVariant(this.order.triggerCondition, 'below') ? 'BELOW' : 'ABOVE'\n\t\t\t}`;\n\t\t\tmsg += ` ${convertToNumber(\n\t\t\t\tthis.order.triggerPrice,\n\t\t\t\tPRICE_PRECISION\n\t\t\t).toFixed(3)}`;\n\t\t}\n\t\treturn msg;\n\t}\n\n\tgetPrice(oraclePriceData: OraclePriceData, slot: number): BN {\n\t\treturn getLimitPrice(this.order, oraclePriceData, slot);\n\t}\n\n\tisBaseFilled(): boolean {\n\t\treturn this.order.baseAssetAmountFilled.eq(this.order.baseAssetAmount);\n\t}\n\n\tisVammNode(): boolean {\n\t\treturn false;\n\t}\n}\n\nexport class LimitOrderNode extends OrderNode {\n\tnext?: LimitOrderNode;\n\tprevious?: LimitOrderNode;\n\n\tgetSortValue(order: Order): BN {\n\t\treturn order.price;\n\t}\n}\n\nexport class FloatingLimitOrderNode extends OrderNode {\n\tnext?: FloatingLimitOrderNode;\n\tprevious?: FloatingLimitOrderNode;\n\n\tgetSortValue(order: Order): BN {\n\t\treturn new BN(order.oraclePriceOffset);\n\t}\n}\n\nexport class MarketOrderNode extends OrderNode {\n\tnext?: MarketOrderNode;\n\tprevious?: MarketOrderNode;\n\n\tgetSortValue(order: Order): BN {\n\t\treturn order.slot;\n\t}\n}\n\nexport class TriggerOrderNode extends OrderNode {\n\tnext?: TriggerOrderNode;\n\tprevious?: TriggerOrderNode;\n\n\tgetSortValue(order: Order): BN {\n\t\treturn order.triggerPrice;\n\t}\n}\n\nexport type DLOBNodeMap = {\n\tlimit: LimitOrderNode;\n\tfloatingLimit: FloatingLimitOrderNode;\n\tmarket: MarketOrderNode;\n\ttrigger: TriggerOrderNode;\n};\n\nexport type DLOBNodeType =\n\t| 'limit'\n\t| 'floatingLimit'\n\t| 'market'\n\t| ('trigger' & keyof DLOBNodeMap);\n\nexport function createNode<T extends DLOBNodeType>(\n\tnodeType: T,\n\torder: Order,\n\tuserAccount: PublicKey\n): DLOBNodeMap[T] {\n\tswitch (nodeType) {\n\t\tcase 'floatingLimit':\n\t\t\treturn new FloatingLimitOrderNode(order, userAccount);\n\t\tcase 'limit':\n\t\t\treturn new LimitOrderNode(order, userAccount);\n\t\tcase 'market':\n\t\t\treturn new MarketOrderNode(order, userAccount);\n\t\tcase 'trigger':\n\t\t\treturn new TriggerOrderNode(order, userAccount);\n\t\tdefault:\n\t\t\tthrow Error(`Unknown DLOBNode type ${nodeType}`);\n\t}\n}\n","import { BN, isVariant, MarketTypeStr, Order } from '..';\nimport { PublicKey } from '@solana/web3.js';\nimport { createNode, DLOBNode, DLOBNodeMap } from './DLOBNode';\n\nexport type SortDirection = 'asc' | 'desc';\n\nexport function getOrderSignature(\n\torderId: number,\n\tuserAccount: PublicKey\n): string {\n\treturn `${userAccount.toString()}-${orderId.toString()}`;\n}\n\nexport interface DLOBNodeGenerator {\n\tgetGenerator(): Generator<DLOBNode>;\n}\n\nexport class NodeList<NodeType extends keyof DLOBNodeMap>\n\timplements DLOBNodeGenerator\n{\n\thead?: DLOBNodeMap[NodeType];\n\tlength = 0;\n\tnodeMap = new Map<string, DLOBNodeMap[NodeType]>();\n\n\tconstructor(\n\t\tprivate nodeType: NodeType,\n\t\tprivate sortDirection: SortDirection\n\t) {}\n\n\tpublic clear() {\n\t\tthis.head = undefined;\n\t\tthis.length = 0;\n\t\tthis.nodeMap.clear();\n\t}\n\n\tpublic insert(\n\t\torder: Order,\n\t\tmarketType: MarketTypeStr,\n\t\tuserAccount: PublicKey\n\t): void {\n\t\tif (isVariant(order.status, 'init')) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newNode = createNode(this.nodeType, order, userAccount);\n\n\t\tconst orderSignature = getOrderSignature(order.orderId, userAccount);\n\t\tif (this.nodeMap.has(orderSignature)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.nodeMap.set(orderSignature, newNode);\n\n\t\tthis.length += 1;\n\n\t\tif (this.head === undefined) {\n\t\t\tthis.head = newNode;\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.prependNode(this.head, newNode)) {\n\t\t\tthis.head.previous = newNode;\n\t\t\tnewNode.next = this.head;\n\t\t\tthis.head = newNode;\n\t\t\treturn;\n\t\t}\n\n\t\tlet currentNode = this.head;\n\t\twhile (\n\t\t\tcurrentNode.next !== undefined &&\n\t\t\t!this.prependNode(currentNode.next, newNode)\n\t\t) {\n\t\t\tcurrentNode = currentNode.next;\n\t\t}\n\n\t\tnewNode.next = currentNode.next;\n\t\tif (currentNode.next !== undefined) {\n\t\t\tnewNode.next.previous = newNode;\n\t\t}\n\t\tcurrentNode.next = newNode;\n\t\tnewNode.previous = currentNode;\n\t}\n\n\tprependNode(\n\t\tcurrentNode: DLOBNodeMap[NodeType],\n\t\tnewNode: DLOBNodeMap[NodeType]\n\t): boolean {\n\t\tconst currentOrder = currentNode.order;\n\t\tconst newOrder = newNode.order;\n\n\t\tconst currentOrderSortPrice = currentNode.sortValue;\n\t\tconst newOrderSortPrice = newNode.sortValue;\n\n\t\tif (newOrderSortPrice.eq(currentOrderSortPrice)) {\n\t\t\treturn newOrder.slot.lt(currentOrder.slot);\n\t\t}\n\n\t\tif (this.sortDirection === 'asc') {\n\t\t\treturn newOrderSortPrice.lt(currentOrderSortPrice);\n\t\t} else {\n\t\t\treturn newOrderSortPrice.gt(currentOrderSortPrice);\n\t\t}\n\t}\n\n\tpublic update(order: Order, userAccount: PublicKey): void {\n\t\tconst orderId = getOrderSignature(order.orderId, userAccount);\n\t\tif (this.nodeMap.has(orderId)) {\n\t\t\tconst node = this.nodeMap.get(orderId);\n\t\t\tObject.assign(node.order, order);\n\t\t\tnode.haveFilled = false;\n\t\t}\n\t}\n\n\tpublic remove(order: Order, userAccount: PublicKey): void {\n\t\tconst orderId = getOrderSignature(order.orderId, userAccount);\n\t\tif (this.nodeMap.has(orderId)) {\n\t\t\tconst node = this.nodeMap.get(orderId);\n\t\t\tif (node.next) {\n\t\t\t\tnode.next.previous = node.previous;\n\t\t\t}\n\t\t\tif (node.previous) {\n\t\t\t\tnode.previous.next = node.next;\n\t\t\t}\n\n\t\t\tif (this.head && node.order.orderId === this.head.order.orderId) {\n\t\t\t\tthis.head = node.next;\n\t\t\t}\n\n\t\t\tnode.previous = undefined;\n\t\t\tnode.next = undefined;\n\n\t\t\tthis.nodeMap.delete(orderId);\n\n\t\t\tthis.length--;\n\t\t}\n\t}\n\n\t*getGenerator(): Generator<DLOBNode> {\n\t\tlet node = this.head;\n\t\twhile (node !== undefined) {\n\t\t\tyield node;\n\t\t\tnode = node.next;\n\t\t}\n\t}\n\n\tpublic has(order: Order, userAccount: PublicKey): boolean {\n\t\treturn this.nodeMap.has(getOrderSignature(order.orderId, userAccount));\n\t}\n\n\tpublic get(\n\t\torderId: number,\n\t\tuserAccount: PublicKey\n\t): DLOBNodeMap[NodeType] | undefined {\n\t\treturn this.nodeMap.get(getOrderSignature(orderId, userAccount));\n\t}\n\n\tpublic print(): void {\n\t\tlet currentNode = this.head;\n\t\twhile (currentNode !== undefined) {\n\t\t\tconsole.log(currentNode.getLabel());\n\t\t\tcurrentNode = currentNode.next;\n\t\t}\n\t}\n\n\tpublic printTop(): void {\n\t\tif (this.head) {\n\t\t\tconsole.log(this.sortDirection.toUpperCase(), this.head.getLabel());\n\t\t} else {\n\t\t\tconsole.log('---');\n\t\t}\n\t}\n}\n\nexport function* getVammNodeGenerator(\n\tprice: BN | undefined\n): Generator<DLOBNode> {\n\tif (!price) {\n\t\treturn;\n\t}\n\tyield {\n\t\tgetPrice: () => price,\n\t\tisVammNode: () => true,\n\t\torder: undefined,\n\t\tuserAccount: undefined,\n\t\tisBaseFilled: () => false,\n\t\thaveFilled: false,\n\t};\n}\n","import { getOrderSignature, getVammNodeGenerator, NodeList } from './NodeList';\nimport {\n\tMarketType,\n\tBN,\n\tcalculateAskPrice,\n\tcalculateBidPrice,\n\tDriftClient,\n\tconvertToNumber,\n\tisAuctionComplete,\n\tisOrderExpired,\n\tisOneOfVariant,\n\tisVariant,\n\tgetVariant,\n\tOrder,\n\tPRICE_PRECISION,\n\tSpotMarketAccount,\n\tPerpMarketAccount,\n\tOraclePriceData,\n\tSlotSubscriber,\n\tMarketTypeStr,\n\tStateAccount,\n\tisMarketOrder,\n\tmustBeTriggered,\n\tisTriggered,\n\tgetLimitPrice,\n\tUserMap,\n\tOrderRecord,\n\tOrderActionRecord,\n} from '..';\nimport { PublicKey } from '@solana/web3.js';\nimport { DLOBNode, DLOBNodeType, TriggerOrderNode } from '..';\nimport { ammPaused, exchangePaused, fillPaused } from '../math/exchangeStatus';\nimport { DLOBOrders } from './DLOBOrders';\n\nexport type MarketNodeLists = {\n\tlimit: {\n\t\task: NodeList<'limit'>;\n\t\tbid: NodeList<'limit'>;\n\t};\n\tfloatingLimit: {\n\t\task: NodeList<'floatingLimit'>;\n\t\tbid: NodeList<'floatingLimit'>;\n\t};\n\tmarket: {\n\t\task: NodeList<'market'>;\n\t\tbid: NodeList<'market'>;\n\t};\n\ttrigger: {\n\t\tabove: NodeList<'trigger'>;\n\t\tbelow: NodeList<'trigger'>;\n\t};\n};\n\ntype OrderBookCallback = () => void;\n\nexport type NodeToFill = {\n\tnode: DLOBNode;\n\tmakerNode?: DLOBNode;\n};\n\nexport type NodeToTrigger = {\n\tnode: TriggerOrderNode;\n};\n\nconst SUPPORTED_ORDER_TYPES = [\n\t'market',\n\t'limit',\n\t'triggerMarket',\n\t'triggerLimit',\n\t'oracle',\n];\n\nexport class DLOB {\n\topenOrders = new Map<MarketTypeStr, Set<string>>();\n\torderLists = new Map<MarketTypeStr, Map<number, MarketNodeLists>>();\n\n\tinitialized = false;\n\n\tpublic constructor() {\n\t\tthis.init();\n\t}\n\n\tprivate init() {\n\t\tthis.openOrders.set('perp', new Set<string>());\n\t\tthis.openOrders.set('spot', new Set<string>());\n\t\tthis.orderLists.set('perp', new Map<number, MarketNodeLists>());\n\t\tthis.orderLists.set('spot', new Map<number, MarketNodeLists>());\n\t}\n\n\tpublic clear() {\n\t\tfor (const marketType of this.openOrders.keys()) {\n\t\t\tthis.openOrders.get(marketType).clear();\n\t\t}\n\t\tthis.openOrders.clear();\n\n\t\tfor (const marketType of this.orderLists.keys()) {\n\t\t\tfor (const marketIndex of this.orderLists.get(marketType).keys()) {\n\t\t\t\tconst marketNodeLists = this.orderLists\n\t\t\t\t\t.get(marketType)\n\t\t\t\t\t.get(marketIndex);\n\t\t\t\tfor (const side of Object.keys(marketNodeLists)) {\n\t\t\t\t\tfor (const orderType of Object.keys(marketNodeLists[side])) {\n\t\t\t\t\t\tmarketNodeLists[side][orderType].clear();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.orderLists.clear();\n\n\t\tthis.init();\n\t}\n\n\t/**\n\t * initializes a new DLOB instance\n\t *\n\t * @returns a promise that resolves when the DLOB is initialized\n\t */\n\tpublic async initFromUserMap(userMap: UserMap): Promise<boolean> {\n\t\tif (this.initialized) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// initialize the dlob with the user map\n\t\tfor (const user of userMap.values()) {\n\t\t\tconst userAccount = user.getUserAccount();\n\t\t\tconst userAccountPubkey = user.getUserAccountPublicKey();\n\n\t\t\tfor (const order of userAccount.orders) {\n\t\t\t\tthis.insertOrder(order, userAccountPubkey);\n\t\t\t}\n\t\t}\n\n\t\tthis.initialized = true;\n\t\treturn true;\n\t}\n\n\tpublic initFromOrders(dlobOrders: DLOBOrders): boolean {\n\t\tif (this.initialized) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const { user, order } of dlobOrders) {\n\t\t\tthis.insertOrder(order, user);\n\t\t}\n\n\t\tthis.initialized = true;\n\t\treturn true;\n\t}\n\n\tpublic handleOrderRecord(record: OrderRecord): void {\n\t\tthis.insertOrder(record.order, record.user);\n\t}\n\n\tpublic handleOrderActionRecord(record: OrderActionRecord): void {\n\t\tif (isOneOfVariant(record.action, ['place', 'expire'])) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (isVariant(record.action, 'trigger')) {\n\t\t\tif (record.taker !== null) {\n\t\t\t\tconst takerOrder = this.getOrder(record.takerOrderId, record.taker);\n\t\t\t\tif (takerOrder) {\n\t\t\t\t\tthis.trigger(takerOrder, record.taker);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (record.maker !== null) {\n\t\t\t\tconst makerOrder = this.getOrder(record.makerOrderId, record.maker);\n\t\t\t\tif (makerOrder) {\n\t\t\t\t\tthis.trigger(makerOrder, record.maker);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isVariant(record.action, 'fill')) {\n\t\t\tif (record.taker !== null) {\n\t\t\t\tconst takerOrder = this.getOrder(record.takerOrderId, record.taker);\n\t\t\t\tif (takerOrder) {\n\t\t\t\t\tthis.updateOrder(\n\t\t\t\t\t\ttakerOrder,\n\t\t\t\t\t\trecord.taker,\n\t\t\t\t\t\trecord.takerOrderCumulativeBaseAssetAmountFilled\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (record.maker !== null) {\n\t\t\t\tconst makerOrder = this.getOrder(record.makerOrderId, record.maker);\n\t\t\t\tif (makerOrder) {\n\t\t\t\t\tthis.updateOrder(\n\t\t\t\t\t\tmakerOrder,\n\t\t\t\t\t\trecord.maker,\n\t\t\t\t\t\trecord.makerOrderCumulativeBaseAssetAmountFilled\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isVariant(record.action, 'cancel')) {\n\t\t\tif (record.taker !== null) {\n\t\t\t\tconst takerOrder = this.getOrder(record.takerOrderId, record.taker);\n\t\t\t\tif (takerOrder) {\n\t\t\t\t\tthis.delete(takerOrder, record.taker);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (record.maker !== null) {\n\t\t\t\tconst makerOrder = this.getOrder(record.makerOrderId, record.maker);\n\t\t\t\tif (makerOrder) {\n\t\t\t\t\tthis.delete(makerOrder, record.maker);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic insertOrder(\n\t\torder: Order,\n\t\tuserAccount: PublicKey,\n\t\tonInsert?: OrderBookCallback\n\t): void {\n\t\tif (isVariant(order.status, 'init')) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!isOneOfVariant(order.orderType, SUPPORTED_ORDER_TYPES)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst marketType = getVariant(order.marketType) as MarketTypeStr;\n\n\t\tif (!this.orderLists.get(marketType).has(order.marketIndex)) {\n\t\t\tthis.addOrderList(marketType, order.marketIndex);\n\t\t}\n\n\t\tif (isVariant(order.status, 'open')) {\n\t\t\tthis.openOrders\n\t\t\t\t.get(marketType)\n\t\t\t\t.add(getOrderSignature(order.orderId, userAccount));\n\t\t}\n\t\tthis.getListForOrder(order)?.insert(order, marketType, userAccount);\n\n\t\tif (onInsert) {\n\t\t\tonInsert();\n\t\t}\n\t}\n\n\taddOrderList(marketType: MarketTypeStr, marketIndex: number): void {\n\t\tthis.orderLists.get(marketType).set(marketIndex, {\n\t\t\tlimit: {\n\t\t\t\task: new NodeList('limit', 'asc'),\n\t\t\t\tbid: new NodeList('limit', 'desc'),\n\t\t\t},\n\t\t\tfloatingLimit: {\n\t\t\t\task: new NodeList('floatingLimit', 'asc'),\n\t\t\t\tbid: new NodeList('floatingLimit', 'desc'),\n\t\t\t},\n\t\t\tmarket: {\n\t\t\t\task: new NodeList('market', 'asc'),\n\t\t\t\tbid: new NodeList('market', 'asc'), // always sort ascending for market orders\n\t\t\t},\n\t\t\ttrigger: {\n\t\t\t\tabove: new NodeList('trigger', 'asc'),\n\t\t\t\tbelow: new NodeList('trigger', 'desc'),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic updateOrder(\n\t\torder: Order,\n\t\tuserAccount: PublicKey,\n\t\tcumulativeBaseAssetAmountFilled: BN,\n\t\tonUpdate?: OrderBookCallback\n\t): void {\n\t\tif (order.baseAssetAmount.eq(cumulativeBaseAssetAmountFilled)) {\n\t\t\tthis.delete(order, userAccount);\n\t\t\treturn;\n\t\t}\n\n\t\tif (order.baseAssetAmountFilled.eq(cumulativeBaseAssetAmountFilled)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newOrder = {\n\t\t\t...order,\n\t\t};\n\t\tnewOrder.baseAssetAmountFilled = cumulativeBaseAssetAmountFilled;\n\n\t\tthis.getListForOrder(order)?.update(newOrder, userAccount);\n\n\t\tif (onUpdate) {\n\t\t\tonUpdate();\n\t\t}\n\t}\n\n\tpublic trigger(\n\t\torder: Order,\n\t\tuserAccount: PublicKey,\n\t\tonTrigger?: OrderBookCallback\n\t): void {\n\t\tif (isVariant(order.status, 'init')) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (isTriggered(order)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst marketType = getVariant(order.marketType) as MarketTypeStr;\n\n\t\tconst triggerList = this.orderLists.get(marketType).get(order.marketIndex)\n\t\t\t.trigger[isVariant(order.triggerCondition, 'above') ? 'above' : 'below'];\n\t\ttriggerList.remove(order, userAccount);\n\n\t\tthis.getListForOrder(order)?.insert(order, marketType, userAccount);\n\t\tif (onTrigger) {\n\t\t\tonTrigger();\n\t\t}\n\t}\n\n\tpublic delete(\n\t\torder: Order,\n\t\tuserAccount: PublicKey,\n\t\tonDelete?: OrderBookCallback\n\t): void {\n\t\tif (isVariant(order.status, 'init')) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.getListForOrder(order)?.remove(order, userAccount);\n\t\tif (onDelete) {\n\t\t\tonDelete();\n\t\t}\n\t}\n\n\tpublic getListForOrder(order: Order): NodeList<any> | undefined {\n\t\tconst isInactiveTriggerOrder =\n\t\t\tmustBeTriggered(order) && !isTriggered(order);\n\n\t\tlet type: DLOBNodeType;\n\t\tif (isInactiveTriggerOrder) {\n\t\t\ttype = 'trigger';\n\t\t} else if (\n\t\t\tisOneOfVariant(order.orderType, ['market', 'triggerMarket', 'oracle'])\n\t\t) {\n\t\t\ttype = 'market';\n\t\t} else if (order.oraclePriceOffset !== 0) {\n\t\t\ttype = 'floatingLimit';\n\t\t} else {\n\t\t\ttype = 'limit';\n\t\t}\n\n\t\tlet subType: string;\n\t\tif (isInactiveTriggerOrder) {\n\t\t\tsubType = isVariant(order.triggerCondition, 'above') ? 'above' : 'below';\n\t\t} else {\n\t\t\tsubType = isVariant(order.direction, 'long') ? 'bid' : 'ask';\n\t\t}\n\n\t\tconst marketType = getVariant(order.marketType) as MarketTypeStr;\n\n\t\tif (!this.orderLists.has(marketType)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.orderLists.get(marketType).get(order.marketIndex)[type][\n\t\t\tsubType\n\t\t];\n\t}\n\n\tpublic getOrder(orderId: number, userAccount: PublicKey): Order | undefined {\n\t\tfor (const nodeList of this.getNodeLists()) {\n\t\t\tconst node = nodeList.get(orderId, userAccount);\n\t\t\tif (node) {\n\t\t\t\treturn node.order;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tpublic findNodesToFill(\n\t\tmarketIndex: number,\n\t\tfallbackBid: BN | undefined,\n\t\tfallbackAsk: BN | undefined,\n\t\tslot: number,\n\t\tts: number,\n\t\tmarketType: MarketType,\n\t\toraclePriceData: OraclePriceData,\n\t\tstateAccount: StateAccount,\n\t\tmarketAccount: PerpMarketAccount | SpotMarketAccount\n\t): NodeToFill[] {\n\t\tif (fillPaused(stateAccount, marketAccount)) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst isAmmPaused = ammPaused(stateAccount, marketAccount);\n\n\t\tconst marketOrderNodesToFill: Array<NodeToFill> =\n\t\t\tthis.findMarketNodesToFill(\n\t\t\t\tmarketIndex,\n\t\t\t\tslot,\n\t\t\t\tmarketType,\n\t\t\t\toraclePriceData,\n\t\t\t\tisAmmPaused,\n\t\t\t\tfallbackAsk,\n\t\t\t\tfallbackBid\n\t\t\t);\n\n\t\tconst limitOrderNodesToFill: Array<NodeToFill> =\n\t\t\tthis.findLimitOrderNodesToFill(\n\t\t\t\tmarketIndex,\n\t\t\t\tslot,\n\t\t\t\tmarketType,\n\t\t\t\toraclePriceData,\n\t\t\t\tisAmmPaused,\n\t\t\t\tfallbackAsk,\n\t\t\t\tfallbackBid\n\t\t\t);\n\n\t\t// get expired market nodes\n\t\tconst expiredNodesToFill = this.findExpiredNodesToFill(\n\t\t\tmarketIndex,\n\t\t\tts,\n\t\t\tmarketType\n\t\t);\n\t\treturn marketOrderNodesToFill.concat(\n\t\t\tlimitOrderNodesToFill,\n\t\t\texpiredNodesToFill\n\t\t);\n\t}\n\n\tpublic findLimitOrderNodesToFill(\n\t\tmarketIndex: number,\n\t\tslot: number,\n\t\tmarketType: MarketType,\n\t\toraclePriceData: OraclePriceData,\n\t\tisAmmPaused: boolean,\n\t\tfallbackAsk: BN | undefined,\n\t\tfallbackBid: BN | undefined\n\t): NodeToFill[] {\n\t\tconst nodesToFill = new Array<NodeToFill>();\n\n\t\tconst crossingNodes = this.findCrossingLimitOrders(\n\t\t\tmarketIndex,\n\t\t\tslot,\n\t\t\tmarketType,\n\t\t\toraclePriceData\n\t\t);\n\n\t\tfor (const crossingNode of crossingNodes) {\n\t\t\tnodesToFill.push(crossingNode);\n\t\t}\n\n\t\tif (fallbackBid && !isAmmPaused) {\n\t\t\tconst askGenerator = this.getLimitAsks(\n\t\t\t\tmarketIndex,\n\t\t\t\tslot,\n\t\t\t\tmarketType,\n\t\t\t\toraclePriceData\n\t\t\t);\n\t\t\tconst asksCrossingFallback = this.findNodesCrossingFallbackLiquidity(\n\t\t\t\tmarketType,\n\t\t\t\tslot,\n\t\t\t\toraclePriceData,\n\t\t\t\taskGenerator,\n\t\t\t\tfallbackBid,\n\t\t\t\t(askPrice, fallbackPrice) => {\n\t\t\t\t\treturn askPrice.lte(fallbackPrice);\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tfor (const askCrossingFallback of asksCrossingFallback) {\n\t\t\t\tnodesToFill.push(askCrossingFallback);\n\t\t\t}\n\t\t}\n\n\t\tif (fallbackAsk && !isAmmPaused) {\n\t\t\tconst bidGenerator = this.getLimitBids(\n\t\t\t\tmarketIndex,\n\t\t\t\tslot,\n\t\t\t\tmarketType,\n\t\t\t\toraclePriceData\n\t\t\t);\n\t\t\tconst bidsCrossingFallback = this.findNodesCrossingFallbackLiquidity(\n\t\t\t\tmarketType,\n\t\t\t\tslot,\n\t\t\t\toraclePriceData,\n\t\t\t\tbidGenerator,\n\t\t\t\tfallbackAsk,\n\t\t\t\t(bidPrice, fallbackPrice) => {\n\t\t\t\t\treturn bidPrice.gte(fallbackPrice);\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tfor (const bidCrossingFallback of bidsCrossingFallback) {\n\t\t\t\tnodesToFill.push(bidCrossingFallback);\n\t\t\t}\n\t\t}\n\n\t\treturn nodesToFill;\n\t}\n\n\tpublic findMarketNodesToFill(\n\t\tmarketIndex: number,\n\t\tslot: number,\n\t\tmarketType: MarketType,\n\t\toraclePriceData: OraclePriceData,\n\t\tisAmmPaused: boolean,\n\t\tfallbackAsk: BN | undefined,\n\t\tfallbackBid?: BN | undefined\n\t): NodeToFill[] {\n\t\tconst nodesToFill = new Array<NodeToFill>();\n\n\t\tlet marketOrderGenerator = this.getMarketAsks(marketIndex, marketType);\n\n\t\tconst marketAsksCrossingBids = this.findMarketNodesCrossingLimitNodes(\n\t\t\tmarketIndex,\n\t\t\tslot,\n\t\t\tmarketType,\n\t\t\toraclePriceData,\n\t\t\tmarketOrderGenerator,\n\t\t\tthis.getLimitBids.bind(this),\n\t\t\t(takerPrice, makerPrice) => {\n\t\t\t\treturn takerPrice === undefined || takerPrice.lte(makerPrice);\n\t\t\t}\n\t\t);\n\t\tfor (const marketAskCrossingBid of marketAsksCrossingBids) {\n\t\t\tnodesToFill.push(marketAskCrossingBid);\n\t\t}\n\n\t\tif (fallbackBid && !isAmmPaused) {\n\t\t\tmarketOrderGenerator = this.getMarketAsks(marketIndex, marketType);\n\t\t\tconst marketAsksCrossingFallback =\n\t\t\t\tthis.findNodesCrossingFallbackLiquidity(\n\t\t\t\t\tmarketType,\n\t\t\t\t\tslot,\n\t\t\t\t\toraclePriceData,\n\t\t\t\t\tmarketOrderGenerator,\n\t\t\t\t\tfallbackBid,\n\t\t\t\t\t(takerPrice, fallbackPrice) => {\n\t\t\t\t\t\treturn takerPrice === undefined || takerPrice.lte(fallbackPrice);\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\tfor (const marketAskCrossingFallback of marketAsksCrossingFallback) {\n\t\t\t\tnodesToFill.push(marketAskCrossingFallback);\n\t\t\t}\n\t\t}\n\n\t\tmarketOrderGenerator = this.getMarketBids(marketIndex, marketType);\n\n\t\tconst marketBidsToFill = this.findMarketNodesCrossingLimitNodes(\n\t\t\tmarketIndex,\n\t\t\tslot,\n\t\t\tmarketType,\n\t\t\toraclePriceData,\n\t\t\tmarketOrderGenerator,\n\t\t\tthis.getLimitAsks.bind(this),\n\t\t\t(takerPrice, fallbackPrice) => {\n\t\t\t\treturn takerPrice === undefined || takerPrice.gte(fallbackPrice);\n\t\t\t}\n\t\t);\n\n\t\tfor (const marketBidToFill of marketBidsToFill) {\n\t\t\tnodesToFill.push(marketBidToFill);\n\t\t}\n\n\t\tif (fallbackAsk && !isAmmPaused) {\n\t\t\tmarketOrderGenerator = this.getMarketBids(marketIndex, marketType);\n\t\t\tconst marketBidsCrossingFallback =\n\t\t\t\tthis.findNodesCrossingFallbackLiquidity(\n\t\t\t\t\tmarketType,\n\t\t\t\t\tslot,\n\t\t\t\t\toraclePriceData,\n\t\t\t\t\tmarketOrderGenerator,\n\t\t\t\t\tfallbackAsk,\n\t\t\t\t\t(takerPrice, fallbackPrice) => {\n\t\t\t\t\t\treturn takerPrice === undefined || takerPrice.gte(fallbackPrice);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\tfor (const marketBidCrossingFallback of marketBidsCrossingFallback) {\n\t\t\t\tnodesToFill.push(marketBidCrossingFallback);\n\t\t\t}\n\t\t}\n\n\t\treturn nodesToFill;\n\t}\n\n\tpublic findMarketNodesCrossingLimitNodes(\n\t\tmarketIndex: number,\n\t\tslot: number,\n\t\tmarketType: MarketType,\n\t\toraclePriceData: OraclePriceData,\n\t\ttakerNodeGenerator: Generator<DLOBNode>,\n\t\tmakerNodeGeneratorFn: (\n\t\t\tmarketIndex: number,\n\t\t\tslot: number,\n\t\t\tmarketType: MarketType,\n\t\t\toraclePriceData: OraclePriceData\n\t\t) => Generator<DLOBNode>,\n\t\tdoesCross: (takerPrice: BN | undefined, makerPrice: BN) => boolean\n\t): NodeToFill[] {\n\t\tconst nodesToFill = new Array<NodeToFill>();\n\n\t\tfor (const takerNode of takerNodeGenerator) {\n\t\t\tconst makerNodeGenerator = makerNodeGeneratorFn(\n\t\t\t\tmarketIndex,\n\t\t\t\tslot,\n\t\t\t\tmarketType,\n\t\t\t\toraclePriceData\n\t\t\t);\n\n\t\t\tfor (const makerNode of makerNodeGenerator) {\n\t\t\t\t// Can't match orders from the same user\n\t\t\t\tconst sameUser = takerNode.userAccount.equals(makerNode.userAccount);\n\t\t\t\tif (sameUser) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst makerPrice = makerNode.getPrice(oraclePriceData, slot);\n\t\t\t\tconst takerPrice = takerNode.getPrice(oraclePriceData, slot);\n\n\t\t\t\tconst ordersCross = doesCross(takerPrice, makerPrice);\n\t\t\t\tif (!ordersCross) {\n\t\t\t\t\t// market orders aren't sorted by price, they are sorted by time, so we need to traverse\n\t\t\t\t\t// through all of em\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tnodesToFill.push({\n\t\t\t\t\tnode: takerNode,\n\t\t\t\t\tmakerNode: makerNode,\n\t\t\t\t});\n\n\t\t\t\tconst makerOrder = makerNode.order;\n\t\t\t\tconst takerOrder = takerNode.order;\n\n\t\t\t\tconst makerBaseRemaining = makerOrder.baseAssetAmount.sub(\n\t\t\t\t\tmakerOrder.baseAssetAmountFilled\n\t\t\t\t);\n\t\t\t\tconst takerBaseRemaining = takerOrder.baseAssetAmount.sub(\n\t\t\t\t\ttakerOrder.baseAssetAmountFilled\n\t\t\t\t);\n\n\t\t\t\tconst baseFilled = BN.min(makerBaseRemaining, takerBaseRemaining);\n\n\t\t\t\tconst newMakerOrder = { ...makerOrder };\n\t\t\t\tnewMakerOrder.baseAssetAmountFilled =\n\t\t\t\t\tmakerOrder.baseAssetAmountFilled.add(baseFilled);\n\t\t\t\tthis.getListForOrder(newMakerOrder).update(\n\t\t\t\t\tnewMakerOrder,\n\t\t\t\t\tmakerNode.userAccount\n\t\t\t\t);\n\n\t\t\t\tconst newTakerOrder = { ...takerOrder };\n\t\t\t\tnewTakerOrder.baseAssetAmountFilled =\n\t\t\t\t\ttakerOrder.baseAssetAmountFilled.add(baseFilled);\n\t\t\t\tthis.getListForOrder(newTakerOrder).update(\n\t\t\t\t\tnewTakerOrder,\n\t\t\t\t\ttakerNode.userAccount\n\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\tnewTakerOrder.baseAssetAmountFilled.eq(takerOrder.baseAssetAmount)\n\t\t\t\t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn nodesToFill;\n\t}\n\n\tpublic findNodesCrossingFallbackLiquidity(\n\t\tmarketType: MarketType,\n\t\tslot: number,\n\t\toraclePriceData: OraclePriceData,\n\t\tnodeGenerator: Generator<DLOBNode>,\n\t\tfallbackPrice: BN,\n\t\tdoesCross: (nodePrice: BN | undefined, fallbackPrice: BN) => boolean\n\t): NodeToFill[] {\n\t\tconst nodesToFill = new Array<NodeToFill>();\n\n\t\tlet nextNode = nodeGenerator.next();\n\t\twhile (!nextNode.done) {\n\t\t\tconst node = nextNode.value;\n\n\t\t\tif (isVariant(marketType, 'spot') && node.order?.postOnly) {\n\t\t\t\tnextNode = nodeGenerator.next();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst nodePrice = getLimitPrice(node.order, oraclePriceData, slot);\n\n\t\t\t// order crosses if there is no limit price or it crosses fallback price\n\t\t\tconst crosses = doesCross(nodePrice, fallbackPrice);\n\n\t\t\t// fallback is available if auction is complete or it's a spot order\n\t\t\tconst fallbackAvailable =\n\t\t\t\tisVariant(marketType, 'spot') || isAuctionComplete(node.order, slot);\n\n\t\t\tif (crosses && fallbackAvailable) {\n\t\t\t\tnodesToFill.push({\n\t\t\t\t\tnode: node,\n\t\t\t\t\tmakerNode: undefined, // filled by fallback\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tnextNode = nodeGenerator.next();\n\t\t}\n\n\t\treturn nodesToFill;\n\t}\n\n\tpublic findExpiredNodesToFill(\n\t\tmarketIndex: number,\n\t\tts: number,\n\t\tmarketType: MarketType\n\t): NodeToFill[] {\n\t\tconst nodesToFill = new Array<NodeToFill>();\n\n\t\tconst marketTypeStr = getVariant(marketType) as MarketTypeStr;\n\t\tconst nodeLists = this.orderLists.get(marketTypeStr).get(marketIndex);\n\n\t\tif (!nodeLists) {\n\t\t\treturn nodesToFill;\n\t\t}\n\n\t\t// All bids/asks that can expire\n\t\tconst bidGenerators = [\n\t\t\tnodeLists.limit.bid.getGenerator(),\n\t\t\tnodeLists.floatingLimit.bid.getGenerator(),\n\t\t\tnodeLists.market.bid.getGenerator(),\n\t\t];\n\t\tconst askGenerators = [\n\t\t\tnodeLists.limit.ask.getGenerator(),\n\t\t\tnodeLists.floatingLimit.ask.getGenerator(),\n\t\t\tnodeLists.market.ask.getGenerator(),\n\t\t];\n\n\t\tfor (const bidGenerator of bidGenerators) {\n\t\t\tfor (const bid of bidGenerator) {\n\t\t\t\tif (isOrderExpired(bid.order, ts)) {\n\t\t\t\t\tnodesToFill.push({\n\t\t\t\t\t\tnode: bid,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const askGenerator of askGenerators) {\n\t\t\tfor (const ask of askGenerator) {\n\t\t\t\tif (isOrderExpired(ask.order, ts)) {\n\t\t\t\t\tnodesToFill.push({\n\t\t\t\t\t\tnode: ask,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn nodesToFill;\n\t}\n\n\tpublic findJitAuctionNodesToFill(\n\t\tmarketIndex: number,\n\t\tslot: number,\n\t\tmarketType: MarketType\n\t): NodeToFill[] {\n\t\tconst nodesToFill = new Array<NodeToFill>();\n\t\t// Then see if there are orders still in JIT auction\n\t\tfor (const marketBid of this.getMarketBids(marketIndex, marketType)) {\n\t\t\tif (!isAuctionComplete(marketBid.order, slot)) {\n\t\t\t\tnodesToFill.push({\n\t\t\t\t\tnode: marketBid,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfor (const marketAsk of this.getMarketAsks(marketIndex, marketType)) {\n\t\t\tif (!isAuctionComplete(marketAsk.order, slot)) {\n\t\t\t\tnodesToFill.push({\n\t\t\t\t\tnode: marketAsk,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn nodesToFill;\n\t}\n\n\t*getMarketBids(\n\t\tmarketIndex: number,\n\t\tmarketType: MarketType\n\t): Generator<DLOBNode> {\n\t\tconst marketTypeStr = getVariant(marketType) as MarketTypeStr;\n\t\tconst orderLists = this.orderLists.get(marketTypeStr).get(marketIndex);\n\t\tif (!orderLists) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst generator = orderLists.market.bid.getGenerator();\n\t\tfor (const marketBidNode of generator) {\n\t\t\tif (marketBidNode.isBaseFilled()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tyield marketBidNode;\n\t\t}\n\t}\n\n\t*getMarketAsks(\n\t\tmarketIndex: number,\n\t\tmarketType: MarketType\n\t): Generator<DLOBNode> {\n\t\tconst marketTypeStr = getVariant(marketType) as MarketTypeStr;\n\t\tconst orderLists = this.orderLists.get(marketTypeStr).get(marketIndex);\n\t\tif (!orderLists) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst generator = orderLists.market.ask.getGenerator();\n\t\tfor (const marketAskNode of generator) {\n\t\t\tif (marketAskNode.isBaseFilled()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tyield marketAskNode;\n\t\t}\n\t}\n\n\tprivate *getBestNode(\n\t\tgeneratorList: Array<Generator<DLOBNode>>,\n\t\toraclePriceData: OraclePriceData,\n\t\tslot: number,\n\t\tcompareFcn: (bestPrice: BN, currentPrice: BN) => boolean\n\t): Generator<DLOBNode> {\n\t\tconst generators = generatorList.map((generator) => {\n\t\t\treturn {\n\t\t\t\tnext: generator.next(),\n\t\t\t\tgenerator,\n\t\t\t};\n\t\t});\n\n\t\tlet sideExhausted = false;\n\t\twhile (!sideExhausted) {\n\t\t\tconst bestGenerator = generators.reduce(\n\t\t\t\t(bestGenerator, currentGenerator) => {\n\t\t\t\t\tif (currentGenerator.next.done) {\n\t\t\t\t\t\treturn bestGenerator;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bestGenerator.next.done) {\n\t\t\t\t\t\treturn currentGenerator;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst bestValue = bestGenerator.next.value as DLOBNode;\n\t\t\t\t\tconst currentValue = currentGenerator.next.value as DLOBNode;\n\n\t\t\t\t\t// always return the market orders first\n\t\t\t\t\tif (bestValue.order && isMarketOrder(bestValue.order)) {\n\t\t\t\t\t\treturn bestGenerator;\n\t\t\t\t\t}\n\t\t\t\t\tif (currentValue.order && isMarketOrder(currentValue.order)) {\n\t\t\t\t\t\treturn currentGenerator;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst bestPrice = bestValue.getPrice(oraclePriceData, slot);\n\t\t\t\t\tconst currentPrice = currentValue.getPrice(oraclePriceData, slot);\n\n\t\t\t\t\treturn compareFcn(bestPrice, currentPrice)\n\t\t\t\t\t\t? bestGenerator\n\t\t\t\t\t\t: currentGenerator;\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif (!bestGenerator.next.done) {\n\t\t\t\t// skip this node if it's already completely filled\n\t\t\t\tif (bestGenerator.next.value.isBaseFilled()) {\n\t\t\t\t\tbestGenerator.next = bestGenerator.generator.next();\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tyield bestGenerator.next.value;\n\t\t\t\tbestGenerator.next = bestGenerator.generator.next();\n\t\t\t} else {\n\t\t\t\tsideExhausted = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t*getLimitAsks(\n\t\tmarketIndex: number,\n\t\tslot: number,\n\t\tmarketType: MarketType,\n\t\toraclePriceData: OraclePriceData\n\t): Generator<DLOBNode> {\n\t\tif (isVariant(marketType, 'spot') && !oraclePriceData) {\n\t\t\tthrow new Error('Must provide OraclePriceData to get spot asks');\n\t\t}\n\t\tconst marketTypeStr = getVariant(marketType) as MarketTypeStr;\n\t\tconst nodeLists = this.orderLists.get(marketTypeStr).get(marketIndex);\n\n\t\tif (!nodeLists) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst generatorList = [\n\t\t\tnodeLists.limit.ask.getGenerator(),\n\t\t\tnodeLists.floatingLimit.ask.getGenerator(),\n\t\t];\n\n\t\tyield* this.getBestNode(\n\t\t\tgeneratorList,\n\t\t\toraclePriceData,\n\t\t\tslot,\n\t\t\t(bestPrice, currentPrice) => {\n\t\t\t\treturn bestPrice.lt(currentPrice);\n\t\t\t}\n\t\t);\n\t}\n\n\t*getLimitBids(\n\t\tmarketIndex: number,\n\t\tslot: number,\n\t\tmarketType: MarketType,\n\t\toraclePriceData: OraclePriceData\n\t): Generator<DLOBNode> {\n\t\tif (isVariant(marketType, 'spot') && !oraclePriceData) {\n\t\t\tthrow new Error('Must provide OraclePriceData to get spot bids');\n\t\t}\n\n\t\tconst marketTypeStr = getVariant(marketType) as MarketTypeStr;\n\t\tconst nodeLists = this.orderLists.get(marketTypeStr).get(marketIndex);\n\n\t\tif (!nodeLists) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst generatorList = [\n\t\t\tnodeLists.limit.bid.getGenerator(),\n\t\t\tnodeLists.floatingLimit.bid.getGenerator(),\n\t\t];\n\n\t\tyield* this.getBestNode(\n\t\t\tgeneratorList,\n\t\t\toraclePriceData,\n\t\t\tslot,\n\t\t\t(bestPrice, currentPrice) => {\n\t\t\t\treturn bestPrice.gt(currentPrice);\n\t\t\t}\n\t\t);\n\t}\n\n\t*getAsks(\n\t\tmarketIndex: number,\n\t\tfallbackAsk: BN | undefined,\n\t\tslot: number,\n\t\tmarketType: MarketType,\n\t\toraclePriceData: OraclePriceData\n\t): Generator<DLOBNode> {\n\t\tif (isVariant(marketType, 'spot') && !oraclePriceData) {\n\t\t\tthrow new Error('Must provide OraclePriceData to get spot asks');\n\t\t}\n\n\t\tconst generatorList = [\n\t\t\tthis.getMarketAsks(marketIndex, marketType),\n\t\t\tthis.getLimitAsks(marketIndex, slot, marketType, oraclePriceData),\n\t\t];\n\n\t\tconst marketTypeStr = getVariant(marketType) as MarketTypeStr;\n\t\tif (marketTypeStr === 'perp' && fallbackAsk) {\n\t\t\tgeneratorList.push(getVammNodeGenerator(fallbackAsk));\n\t\t}\n\n\t\tyield* this.getBestNode(\n\t\t\tgeneratorList,\n\t\t\toraclePriceData,\n\t\t\tslot,\n\t\t\t(bestPrice, currentPrice) => {\n\t\t\t\treturn bestPrice.lt(currentPrice);\n\t\t\t}\n\t\t);\n\t}\n\n\t*getBids(\n\t\tmarketIndex: number,\n\t\tfallbackBid: BN | undefined,\n\t\tslot: number,\n\t\tmarketType: MarketType,\n\t\toraclePriceData: OraclePriceData\n\t): Generator<DLOBNode> {\n\t\tif (isVariant(marketType, 'spot') && !oraclePriceData) {\n\t\t\tthrow new Error('Must provide OraclePriceData to get spot bids');\n\t\t}\n\n\t\tconst generatorList = [\n\t\t\tthis.getMarketBids(marketIndex, marketType),\n\t\t\tthis.getLimitBids(marketIndex, slot, marketType, oraclePriceData),\n\t\t];\n\n\t\tconst marketTypeStr = getVariant(marketType) as MarketTypeStr;\n\t\tif (marketTypeStr === 'perp' && fallbackBid) {\n\t\t\tgeneratorList.push(getVammNodeGenerator(fallbackBid));\n\t\t}\n\n\t\tyield* this.getBestNode(\n\t\t\tgeneratorList,\n\t\t\toraclePriceData,\n\t\t\tslot,\n\t\t\t(bestPrice, currentPrice) => {\n\t\t\t\treturn bestPrice.gt(currentPrice);\n\t\t\t}\n\t\t);\n\t}\n\n\tfindCrossingLimitOrders(\n\t\tmarketIndex: number,\n\t\tslot: number,\n\t\tmarketType: MarketType,\n\t\toraclePriceData: OraclePriceData\n\t): NodeToFill[] {\n\t\tconst nodesToFill = new Array<NodeToFill>();\n\n\t\tfor (const askNode of this.getLimitAsks(\n\t\t\tmarketIndex,\n\t\t\tslot,\n\t\t\tmarketType,\n\t\t\toraclePriceData\n\t\t)) {\n\t\t\tfor (const bidNode of this.getLimitBids(\n\t\t\t\tmarketIndex,\n\t\t\t\tslot,\n\t\t\t\tmarketType,\n\t\t\t\toraclePriceData\n\t\t\t)) {\n\t\t\t\tconst bidPrice = bidNode.getPrice(oraclePriceData, slot);\n\t\t\t\tconst askPrice = askNode.getPrice(oraclePriceData, slot);\n\n\t\t\t\t// orders don't cross - we're done walking the book\n\t\t\t\tif (bidPrice.lt(askPrice)) {\n\t\t\t\t\treturn nodesToFill;\n\t\t\t\t}\n\n\t\t\t\tconst bidOrder = bidNode.order;\n\t\t\t\tconst askOrder = askNode.order;\n\n\t\t\t\t// Can't match orders from the same user\n\t\t\t\tconst sameUser = bidNode.userAccount.equals(askNode.userAccount);\n\t\t\t\tif (sameUser || (bidOrder.postOnly && askOrder.postOnly)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst { takerNode, makerNode } = this.determineMakerAndTaker(\n\t\t\t\t\taskNode,\n\t\t\t\t\tbidNode\n\t\t\t\t);\n\n\t\t\t\tconst bidBaseRemaining = bidOrder.baseAssetAmount.sub(\n\t\t\t\t\tbidOrder.baseAssetAmountFilled\n\t\t\t\t);\n\t\t\t\tconst askBaseRemaining = askOrder.baseAssetAmount.sub(\n\t\t\t\t\taskOrder.baseAssetAmountFilled\n\t\t\t\t);\n\n\t\t\t\tconst baseFilled = BN.min(bidBaseRemaining, askBaseRemaining);\n\n\t\t\t\tconst newBidOrder = { ...bidOrder };\n\t\t\t\tnewBidOrder.baseAssetAmountFilled =\n\t\t\t\t\tbidOrder.baseAssetAmountFilled.add(baseFilled);\n\t\t\t\tthis.getListForOrder(newBidOrder).update(\n\t\t\t\t\tnewBidOrder,\n\t\t\t\t\tbidNode.userAccount\n\t\t\t\t);\n\n\t\t\t\t// ask completely filled\n\t\t\t\tconst newAskOrder = { ...askOrder };\n\t\t\t\tnewAskOrder.baseAssetAmountFilled =\n\t\t\t\t\taskOrder.baseAssetAmountFilled.add(baseFilled);\n\t\t\t\tthis.getListForOrder(newAskOrder).update(\n\t\t\t\t\tnewAskOrder,\n\t\t\t\t\taskNode.userAccount\n\t\t\t\t);\n\n\t\t\t\tnodesToFill.push({\n\t\t\t\t\tnode: takerNode,\n\t\t\t\t\tmakerNode: makerNode,\n\t\t\t\t});\n\n\t\t\t\tif (newAskOrder.baseAssetAmount.eq(newAskOrder.baseAssetAmountFilled)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn nodesToFill;\n\t}\n\n\tdetermineMakerAndTaker(\n\t\taskNode: DLOBNode,\n\t\tbidNode: DLOBNode\n\t): { takerNode: DLOBNode; makerNode: DLOBNode } {\n\t\tif (bidNode.order.postOnly) {\n\t\t\treturn {\n\t\t\t\ttakerNode: askNode,\n\t\t\t\tmakerNode: bidNode,\n\t\t\t};\n\t\t} else if (askNode.order.postOnly) {\n\t\t\treturn {\n\t\t\t\ttakerNode: bidNode,\n\t\t\t\tmakerNode: askNode,\n\t\t\t};\n\t\t} else if (askNode.order.slot.lt(bidNode.order.slot)) {\n\t\t\treturn {\n\t\t\t\ttakerNode: bidNode,\n\t\t\t\tmakerNode: askNode,\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\ttakerNode: askNode,\n\t\t\t\tmakerNode: bidNode,\n\t\t\t};\n\t\t}\n\t}\n\n\tpublic getBestAsk(\n\t\tmarketIndex: number,\n\t\tfallbackAsk: BN | undefined,\n\t\tslot: number,\n\t\tmarketType: MarketType,\n\t\toraclePriceData: OraclePriceData\n\t): BN {\n\t\treturn this.getAsks(\n\t\t\tmarketIndex,\n\t\t\tfallbackAsk,\n\t\t\tslot,\n\t\t\tmarketType,\n\t\t\toraclePriceData\n\t\t)\n\t\t\t.next()\n\t\t\t.value.getPrice(oraclePriceData, slot);\n\t}\n\n\tpublic getBestBid(\n\t\tmarketIndex: number,\n\t\tfallbackBid: BN | undefined,\n\t\tslot: number,\n\t\tmarketType: MarketType,\n\t\toraclePriceData: OraclePriceData\n\t): BN {\n\t\treturn this.getBids(\n\t\t\tmarketIndex,\n\t\t\tfallbackBid,\n\t\t\tslot,\n\t\t\tmarketType,\n\t\t\toraclePriceData\n\t\t)\n\t\t\t.next()\n\t\t\t.value.getPrice(oraclePriceData, slot);\n\t}\n\n\tpublic findNodesToTrigger(\n\t\tmarketIndex: number,\n\t\tslot: number,\n\t\toraclePrice: BN,\n\t\tmarketType: MarketType,\n\t\tstateAccount: StateAccount\n\t): NodeToTrigger[] {\n\t\tif (exchangePaused(stateAccount)) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst nodesToTrigger = [];\n\t\tconst marketTypeStr = getVariant(marketType) as MarketTypeStr;\n\t\tconst marketNodeLists = this.orderLists.get(marketTypeStr).get(marketIndex);\n\n\t\tconst triggerAboveList = marketNodeLists\n\t\t\t? marketNodeLists.trigger.above\n\t\t\t: undefined;\n\t\tif (triggerAboveList) {\n\t\t\tfor (const node of triggerAboveList.getGenerator()) {\n\t\t\t\tif (oraclePrice.gt(node.order.triggerPrice)) {\n\t\t\t\t\tif (isAuctionComplete(node.order, slot)) {\n\t\t\t\t\t\tnodesToTrigger.push({\n\t\t\t\t\t\t\tnode: node,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst triggerBelowList = marketNodeLists\n\t\t\t? marketNodeLists.trigger.below\n\t\t\t: undefined;\n\t\tif (triggerBelowList) {\n\t\t\tfor (const node of triggerBelowList.getGenerator()) {\n\t\t\t\tif (oraclePrice.lt(node.order.triggerPrice)) {\n\t\t\t\t\tif (isAuctionComplete(node.order, slot)) {\n\t\t\t\t\t\tnodesToTrigger.push({\n\t\t\t\t\t\t\tnode: node,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn nodesToTrigger;\n\t}\n\n\tpublic printTopOfOrderLists(\n\t\tsdkConfig: any,\n\t\tdriftClient: DriftClient,\n\t\tslotSubscriber: SlotSubscriber,\n\t\tmarketIndex: number,\n\t\tmarketType: MarketType\n\t) {\n\t\tif (isVariant(marketType, 'perp')) {\n\t\t\tconst market = driftClient.getPerpMarketAccount(marketIndex);\n\n\t\t\tconst slot = slotSubscriber.getSlot();\n\t\t\tconst oraclePriceData =\n\t\t\t\tdriftClient.getOracleDataForPerpMarket(marketIndex);\n\t\t\tconst fallbackAsk = calculateAskPrice(market, oraclePriceData);\n\t\t\tconst fallbackBid = calculateBidPrice(market, oraclePriceData);\n\n\t\t\tconst bestAsk = this.getBestAsk(\n\t\t\t\tmarketIndex,\n\t\t\t\tfallbackAsk,\n\t\t\t\tslot,\n\t\t\t\tmarketType,\n\t\t\t\toraclePriceData\n\t\t\t);\n\t\t\tconst bestBid = this.getBestBid(\n\t\t\t\tmarketIndex,\n\t\t\t\tfallbackBid,\n\t\t\t\tslot,\n\t\t\t\tmarketType,\n\t\t\t\toraclePriceData\n\t\t\t);\n\t\t\tconst mid = bestAsk.add(bestBid).div(new BN(2));\n\n\t\t\tconst bidSpread =\n\t\t\t\t(convertToNumber(bestBid, PRICE_PRECISION) /\n\t\t\t\t\tconvertToNumber(oraclePriceData.price, PRICE_PRECISION) -\n\t\t\t\t\t1) *\n\t\t\t\t100.0;\n\t\t\tconst askSpread =\n\t\t\t\t(convertToNumber(bestAsk, PRICE_PRECISION) /\n\t\t\t\t\tconvertToNumber(oraclePriceData.price, PRICE_PRECISION) -\n\t\t\t\t\t1) *\n\t\t\t\t100.0;\n\n\t\t\tconsole.log(`Market ${sdkConfig.MARKETS[marketIndex].symbol} Orders`);\n\t\t\tconsole.log(\n\t\t\t\t`  Ask`,\n\t\t\t\tconvertToNumber(bestAsk, PRICE_PRECISION).toFixed(3),\n\t\t\t\t`(${askSpread.toFixed(4)}%)`\n\t\t\t);\n\t\t\tconsole.log(`  Mid`, convertToNumber(mid, PRICE_PRECISION).toFixed(3));\n\t\t\tconsole.log(\n\t\t\t\t`  Bid`,\n\t\t\t\tconvertToNumber(bestBid, PRICE_PRECISION).toFixed(3),\n\t\t\t\t`(${bidSpread.toFixed(4)}%)`\n\t\t\t);\n\t\t} else if (isVariant(marketType, 'spot')) {\n\t\t\tconst slot = slotSubscriber.getSlot();\n\t\t\tconst oraclePriceData =\n\t\t\t\tdriftClient.getOracleDataForPerpMarket(marketIndex);\n\n\t\t\tconst bestAsk = this.getBestAsk(\n\t\t\t\tmarketIndex,\n\t\t\t\tundefined,\n\t\t\t\tslot,\n\t\t\t\tmarketType,\n\t\t\t\toraclePriceData\n\t\t\t);\n\t\t\tconst bestBid = this.getBestBid(\n\t\t\t\tmarketIndex,\n\t\t\t\tundefined,\n\t\t\t\tslot,\n\t\t\t\tmarketType,\n\t\t\t\toraclePriceData\n\t\t\t);\n\t\t\tconst mid = bestAsk.add(bestBid).div(new BN(2));\n\n\t\t\tconst bidSpread =\n\t\t\t\t(convertToNumber(bestBid, PRICE_PRECISION) /\n\t\t\t\t\tconvertToNumber(oraclePriceData.price, PRICE_PRECISION) -\n\t\t\t\t\t1) *\n\t\t\t\t100.0;\n\t\t\tconst askSpread =\n\t\t\t\t(convertToNumber(bestAsk, PRICE_PRECISION) /\n\t\t\t\t\tconvertToNumber(oraclePriceData.price, PRICE_PRECISION) -\n\t\t\t\t\t1) *\n\t\t\t\t100.0;\n\n\t\t\tconsole.log(`Market ${sdkConfig.MARKETS[marketIndex].symbol} Orders`);\n\t\t\tconsole.log(\n\t\t\t\t`  Ask`,\n\t\t\t\tconvertToNumber(bestAsk, PRICE_PRECISION).toFixed(3),\n\t\t\t\t`(${askSpread.toFixed(4)}%)`\n\t\t\t);\n\t\t\tconsole.log(`  Mid`, convertToNumber(mid, PRICE_PRECISION).toFixed(3));\n\t\t\tconsole.log(\n\t\t\t\t`  Bid`,\n\t\t\t\tconvertToNumber(bestBid, PRICE_PRECISION).toFixed(3),\n\t\t\t\t`(${bidSpread.toFixed(4)}%)`\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic getDLOBOrders(): DLOBOrders {\n\t\tconst dlobOrders: DLOBOrders = [];\n\n\t\tfor (const nodeList of this.getNodeLists()) {\n\t\t\tfor (const node of nodeList.getGenerator()) {\n\t\t\t\tdlobOrders.push({\n\t\t\t\t\tuser: node.userAccount,\n\t\t\t\t\torder: node.order,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn dlobOrders;\n\t}\n\n\t*getNodeLists(): Generator<NodeList<DLOBNodeType>> {\n\t\tfor (const [_, nodeLists] of this.orderLists.get('perp')) {\n\t\t\tyield nodeLists.limit.bid;\n\t\t\tyield nodeLists.limit.ask;\n\t\t\tyield nodeLists.market.bid;\n\t\t\tyield nodeLists.market.ask;\n\t\t\tyield nodeLists.floatingLimit.bid;\n\t\t\tyield nodeLists.floatingLimit.ask;\n\t\t\tyield nodeLists.trigger.above;\n\t\t\tyield nodeLists.trigger.below;\n\t\t}\n\n\t\tfor (const [_, nodeLists] of this.orderLists.get('spot')) {\n\t\t\tyield nodeLists.limit.bid;\n\t\t\tyield nodeLists.limit.ask;\n\t\t\tyield nodeLists.market.bid;\n\t\t\tyield nodeLists.market.ask;\n\t\t\tyield nodeLists.floatingLimit.bid;\n\t\t\tyield nodeLists.floatingLimit.ask;\n\t\t\tyield nodeLists.trigger.above;\n\t\t\tyield nodeLists.trigger.below;\n\t\t}\n\t}\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { Idl } from '@project-serum/anchor';\nimport { IdlCoder } from '@project-serum/anchor/dist/cjs/coder/borsh/idl';\nimport dlobIDL from './dlobIdl.json';\nimport { Order } from '../types';\n\nexport type DLOBOrder = { user: PublicKey; order: Order };\n\nexport type DLOBOrders = DLOBOrder[];\n\nexport class DLOBOrdersCoder {\n\tpublic constructor(private idl: Idl) {}\n\n\tstatic create(): DLOBOrdersCoder {\n\t\treturn new DLOBOrdersCoder(dlobIDL as Idl);\n\t}\n\n\tpublic encode(dlobOrders: DLOBOrders): Buffer {\n\t\tconst layout = IdlCoder.fieldLayout(\n\t\t\t{\n\t\t\t\ttype: {\n\t\t\t\t\tvec: {\n\t\t\t\t\t\tdefined: 'DLOBOrder',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tthis.idl.types\n\t\t);\n\n\t\tconst size = 150 * dlobOrders.length;\n\t\tconst buffer = Buffer.alloc(size);\n\t\tconst len = layout.encode(dlobOrders, buffer);\n\t\treturn buffer.slice(0, len);\n\t}\n\n\tpublic decode(buffer: Buffer): DLOBOrders {\n\t\tconst layout = IdlCoder.fieldLayout(\n\t\t\t{\n\t\t\t\ttype: {\n\t\t\t\t\tvec: {\n\t\t\t\t\t\tdefined: 'DLOBOrder',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tthis.idl.types\n\t\t);\n\t\treturn layout.decode(buffer) as DLOBOrders;\n\t}\n}\n","import {\n\tUser,\n\tDriftClient,\n\tUserAccount,\n\tbulkPollingUserSubscribe,\n\tOrderRecord,\n\tUserSubscriptionConfig,\n\tWrappedEvent,\n\tDepositRecord,\n\tFundingPaymentRecord,\n\tLiquidationRecord,\n\tOrderActionRecord,\n\tSettlePnlRecord,\n\tNewUserRecord,\n\tLPRecord,\n} from '..';\nimport { ProgramAccount } from '@project-serum/anchor';\n\nimport { PublicKey } from '@solana/web3.js';\n\nexport interface UserMapInterface {\n\tfetchAllUsers(): Promise<void>;\n\taddPubkey(userAccountPublicKey: PublicKey): Promise<void>;\n\thas(key: string): boolean;\n\tget(key: string): User | undefined;\n\tmustGet(key: string): Promise<User>;\n\tgetUserAuthority(key: string): PublicKey | undefined;\n\tupdateWithOrderRecord(record: OrderRecord): Promise<void>;\n\tvalues(): IterableIterator<User>;\n}\n\nexport class UserMap implements UserMapInterface {\n\tprivate userMap = new Map<string, User>();\n\tprivate driftClient: DriftClient;\n\tprivate accountSubscription: UserSubscriptionConfig;\n\n\tconstructor(\n\t\tdriftClient: DriftClient,\n\t\taccountSubscription: UserSubscriptionConfig\n\t) {\n\t\tthis.driftClient = driftClient;\n\t\tthis.accountSubscription = accountSubscription;\n\t}\n\n\tpublic async fetchAllUsers() {\n\t\tconst userArray: User[] = [];\n\n\t\tconst programUserAccounts =\n\t\t\t(await this.driftClient.program.account.user.all()) as ProgramAccount<UserAccount>[];\n\t\tfor (const programUserAccount of programUserAccounts) {\n\t\t\tif (this.userMap.has(programUserAccount.publicKey.toString())) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst user = new User({\n\t\t\t\tdriftClient: this.driftClient,\n\t\t\t\tuserAccountPublicKey: programUserAccount.publicKey,\n\t\t\t\taccountSubscription: this.accountSubscription,\n\t\t\t});\n\t\t\tuserArray.push(user);\n\t\t}\n\n\t\tif (this.accountSubscription.type === 'polling') {\n\t\t\tawait bulkPollingUserSubscribe(\n\t\t\t\tuserArray,\n\t\t\t\tthis.accountSubscription.accountLoader\n\t\t\t);\n\t\t}\n\n\t\tfor (const user of userArray) {\n\t\t\tthis.userMap.set(user.getUserAccountPublicKey().toString(), user);\n\t\t}\n\t}\n\n\tpublic async addPubkey(userAccountPublicKey: PublicKey) {\n\t\tconst user = new User({\n\t\t\tdriftClient: this.driftClient,\n\t\t\tuserAccountPublicKey,\n\t\t\taccountSubscription: this.accountSubscription,\n\t\t});\n\t\tawait user.subscribe();\n\t\tthis.userMap.set(userAccountPublicKey.toString(), user);\n\t}\n\n\tpublic has(key: string): boolean {\n\t\treturn this.userMap.has(key);\n\t}\n\n\t/**\n\t * gets the User for a particular userAccountPublicKey, if no User exists, undefined is returned\n\t * @param key userAccountPublicKey to get User for\n\t * @returns user User | undefined\n\t */\n\tpublic get(key: string): User | undefined {\n\t\treturn this.userMap.get(key);\n\t}\n\n\t/**\n\t * gets the User for a particular userAccountPublicKey, if no User exists, new one is created\n\t * @param key userAccountPublicKey to get User for\n\t * @returns  User\n\t */\n\tpublic async mustGet(key: string): Promise<User> {\n\t\tif (!this.has(key)) {\n\t\t\tawait this.addPubkey(new PublicKey(key));\n\t\t}\n\t\tconst user = this.userMap.get(key);\n\t\tawait user.fetchAccounts();\n\t\treturn user;\n\t}\n\n\t/**\n\t * gets the Authority for a particular userAccountPublicKey, if no User exists, undefined is returned\n\t * @param key userAccountPublicKey to get User for\n\t * @returns authority PublicKey | undefined\n\t */\n\tpublic getUserAuthority(key: string): PublicKey | undefined {\n\t\tconst chUser = this.userMap.get(key);\n\t\tif (!chUser) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn chUser.getUserAccount().authority;\n\t}\n\n\tpublic async updateWithOrderRecord(record: OrderRecord) {\n\t\tif (!this.has(record.user.toString())) {\n\t\t\tawait this.addPubkey(record.user);\n\t\t}\n\t}\n\n\tpublic async updateWithEventRecord(record: WrappedEvent<any>) {\n\t\tif (record.eventType === 'DepositRecord') {\n\t\t\tconst depositRecord = record as DepositRecord;\n\t\t\tawait this.mustGet(depositRecord.user.toString());\n\t\t} else if (record.eventType === 'FundingPaymentRecord') {\n\t\t\tconst fundingPaymentRecord = record as FundingPaymentRecord;\n\t\t\tawait this.mustGet(fundingPaymentRecord.user.toString());\n\t\t} else if (record.eventType === 'LiquidationRecord') {\n\t\t\tconst liqRecord = record as LiquidationRecord;\n\n\t\t\tawait this.mustGet(liqRecord.user.toString());\n\t\t\tawait this.mustGet(liqRecord.liquidator.toString());\n\t\t} else if (record.eventType === 'OrderRecord') {\n\t\t\tconst orderRecord = record as OrderRecord;\n\t\t\tawait this.updateWithOrderRecord(orderRecord);\n\t\t} else if (record.eventType === 'OrderActionRecord') {\n\t\t\tconst actionRecord = record as OrderActionRecord;\n\n\t\t\tif (actionRecord.taker) {\n\t\t\t\tawait this.mustGet(actionRecord.taker.toString());\n\t\t\t}\n\t\t\tif (actionRecord.maker) {\n\t\t\t\tawait this.mustGet(actionRecord.maker.toString());\n\t\t\t}\n\t\t} else if (record.eventType === 'SettlePnlRecord') {\n\t\t\tconst settlePnlRecord = record as SettlePnlRecord;\n\t\t\tawait this.mustGet(settlePnlRecord.user.toString());\n\t\t} else if (record.eventType === 'NewUserRecord') {\n\t\t\tconst newUserRecord = record as NewUserRecord;\n\t\t\tawait this.mustGet(newUserRecord.user.toString());\n\t\t} else if (record.eventType === 'LPRecord') {\n\t\t\tconst lpRecord = record as LPRecord;\n\t\t\tawait this.mustGet(lpRecord.user.toString());\n\t\t}\n\t}\n\n\tpublic values(): IterableIterator<User> {\n\t\treturn this.userMap.values();\n\t}\n\n\tpublic size(): number {\n\t\treturn this.userMap.size;\n\t}\n}\n","import {\n\tDriftClient,\n\tgetUserStatsAccountPublicKey,\n\tOrderRecord,\n\tUserStatsAccount,\n\tUserStats,\n\tUserStatsSubscriptionConfig,\n\tbulkPollingUserStatsSubscribe,\n\tWrappedEvent,\n\tDepositRecord,\n\tFundingPaymentRecord,\n\tLiquidationRecord,\n\tOrderActionRecord,\n\tSettlePnlRecord,\n\tNewUserRecord,\n\tLPRecord,\n\tInsuranceFundStakeRecord,\n} from '..';\nimport { ProgramAccount } from '@project-serum/anchor';\nimport { PublicKey } from '@solana/web3.js';\n\nimport { UserMap } from './userMap';\n\nexport class UserStatsMap {\n\t/**\n\t * map from authority pubkey to UserStats\n\t */\n\tprivate userStatsMap = new Map<string, UserStats>();\n\tprivate driftClient: DriftClient;\n\tprivate accountSubscription: UserStatsSubscriptionConfig;\n\n\tconstructor(\n\t\tdriftClient: DriftClient,\n\t\taccountSubscription: UserStatsSubscriptionConfig\n\t) {\n\t\tthis.driftClient = driftClient;\n\t\tthis.accountSubscription = accountSubscription;\n\t}\n\n\tpublic async fetchAllUserStats() {\n\t\tconst userStatArray: UserStats[] = [];\n\n\t\tconst programUserAccounts =\n\t\t\t(await this.driftClient.program.account.userStats.all()) as ProgramAccount<UserStatsAccount>[];\n\n\t\tfor (const programUserAccount of programUserAccounts) {\n\t\t\tconst userStat: UserStatsAccount = programUserAccount.account;\n\t\t\tif (this.userStatsMap.has(userStat.authority.toString())) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst chUserStat = new UserStats({\n\t\t\t\tdriftClient: this.driftClient,\n\t\t\t\tuserStatsAccountPublicKey: getUserStatsAccountPublicKey(\n\t\t\t\t\tthis.driftClient.program.programId,\n\t\t\t\t\tuserStat.authority\n\t\t\t\t),\n\t\t\t\taccountSubscription: this.accountSubscription,\n\t\t\t});\n\t\t\tuserStatArray.push(chUserStat);\n\t\t}\n\n\t\tif (this.accountSubscription.type === 'polling') {\n\t\t\tawait bulkPollingUserStatsSubscribe(\n\t\t\t\tuserStatArray,\n\t\t\t\tthis.accountSubscription.accountLoader\n\t\t\t);\n\t\t}\n\n\t\tfor (const userStat of userStatArray) {\n\t\t\tthis.userStatsMap.set(\n\t\t\t\tuserStat.getAccount().authority.toString(),\n\t\t\t\tuserStat\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async addUserStat(authority: PublicKey) {\n\t\tconst userStat = new UserStats({\n\t\t\tdriftClient: this.driftClient,\n\t\t\tuserStatsAccountPublicKey: getUserStatsAccountPublicKey(\n\t\t\t\tthis.driftClient.program.programId,\n\t\t\t\tauthority\n\t\t\t),\n\t\t\taccountSubscription: this.accountSubscription,\n\t\t});\n\t\tawait userStat.subscribe();\n\n\t\tthis.userStatsMap.set(authority.toString(), userStat);\n\t}\n\n\tpublic async updateWithOrderRecord(record: OrderRecord, userMap: UserMap) {\n\t\tconst user = await userMap.mustGet(record.user.toString());\n\t\tif (!this.has(user.getUserAccount().authority.toString())) {\n\t\t\tthis.addUserStat(user.getUserAccount().authority);\n\t\t}\n\t}\n\n\tpublic async updateWithEventRecord(\n\t\trecord: WrappedEvent<any>,\n\t\tuserMap?: UserMap\n\t) {\n\t\tif (record.eventType === 'DepositRecord') {\n\t\t\tconst depositRecord = record as DepositRecord;\n\t\t\tawait this.mustGet(depositRecord.userAuthority.toString());\n\t\t} else if (record.eventType === 'FundingPaymentRecord') {\n\t\t\tconst fundingPaymentRecord = record as FundingPaymentRecord;\n\t\t\tawait this.mustGet(fundingPaymentRecord.userAuthority.toString());\n\t\t} else if (record.eventType === 'LiquidationRecord') {\n\t\t\tif (!userMap) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst liqRecord = record as LiquidationRecord;\n\n\t\t\tconst user = await userMap.mustGet(liqRecord.user.toString());\n\t\t\tawait this.mustGet(user.getUserAccount().authority.toString());\n\n\t\t\tconst liquidatorUser = await userMap.mustGet(\n\t\t\t\tliqRecord.liquidator.toString()\n\t\t\t);\n\t\t\tawait this.mustGet(liquidatorUser.getUserAccount().authority.toString());\n\t\t} else if (record.eventType === 'OrderRecord') {\n\t\t\tif (!userMap) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst orderRecord = record as OrderRecord;\n\t\t\tawait userMap.updateWithOrderRecord(orderRecord);\n\t\t} else if (record.eventType === 'OrderActionRecord') {\n\t\t\tif (!userMap) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst actionRecord = record as OrderActionRecord;\n\n\t\t\tif (actionRecord.taker) {\n\t\t\t\tconst taker = await userMap.mustGet(actionRecord.taker.toString());\n\t\t\t\tawait this.mustGet(taker.getUserAccount().authority.toString());\n\t\t\t}\n\t\t\tif (actionRecord.maker) {\n\t\t\t\tconst maker = await userMap.mustGet(actionRecord.maker.toString());\n\t\t\t\tawait this.mustGet(maker.getUserAccount().authority.toString());\n\t\t\t}\n\t\t} else if (record.eventType === 'SettlePnlRecord') {\n\t\t\tif (!userMap) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst settlePnlRecord = record as SettlePnlRecord;\n\t\t\tconst user = await userMap.mustGet(settlePnlRecord.user.toString());\n\t\t\tawait this.mustGet(user.getUserAccount().authority.toString());\n\t\t} else if (record.eventType === 'NewUserRecord') {\n\t\t\tconst newUserRecord = record as NewUserRecord;\n\t\t\tawait this.mustGet(newUserRecord.userAuthority.toString());\n\t\t} else if (record.eventType === 'LPRecord') {\n\t\t\tif (!userMap) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst lpRecord = record as LPRecord;\n\t\t\tconst user = await userMap.mustGet(lpRecord.user.toString());\n\t\t\tawait this.mustGet(user.getUserAccount().authority.toString());\n\t\t} else if (record.eventType === 'InsuranceFundStakeRecord') {\n\t\t\tconst ifStakeRecord = record as InsuranceFundStakeRecord;\n\t\t\tawait this.mustGet(ifStakeRecord.userAuthority.toString());\n\t\t}\n\t}\n\n\tpublic has(authorityPublicKey: string): boolean {\n\t\treturn this.userStatsMap.has(authorityPublicKey);\n\t}\n\n\tpublic get(authorityPublicKey: string): UserStats {\n\t\treturn this.userStatsMap.get(authorityPublicKey);\n\t}\n\n\tpublic async mustGet(authorityPublicKey: string): Promise<UserStats> {\n\t\tif (!this.has(authorityPublicKey)) {\n\t\t\tawait this.addUserStat(new PublicKey(authorityPublicKey));\n\t\t}\n\t\treturn this.get(authorityPublicKey);\n\t}\n\n\tpublic values(): IterableIterator<UserStats> {\n\t\treturn this.userStatsMap.values();\n\t}\n\n\tpublic size(): number {\n\t\treturn this.userStatsMap.size;\n\t}\n}\n"]}