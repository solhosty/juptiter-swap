{"version":3,"file":"initializeSimple.js","sourceRoot":"","sources":["../../../src/util/initializeSimple.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Provider } from \"@saberhq/solana-contrib\";\nimport { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport type { TokenAmount } from \"@saberhq/token-utils\";\nimport {\n  buildCreateTokenAccountTX,\n  createATAInstruction,\n  createInitMintTX,\n  getATAAddressSync,\n  SPLToken,\n  TOKEN_PROGRAM_ID,\n} from \"@saberhq/token-utils\";\nimport type { PublicKey } from \"@solana/web3.js\";\nimport { Keypair } from \"@solana/web3.js\";\n\nimport type { InitializeSwapInstruction } from \"../index\";\nimport { findSwapAuthorityKeySync, SWAP_PROGRAM_ID } from \"../index\";\nimport type { SwapTokenInfo } from \"../instructions/swap.js\";\nimport type { InitializeNewStableSwapArgs } from \"./initialize\";\nimport { createInitializeStableSwapInstructionsRaw } from \"./initialize\";\n\nconst initializeSwapTokenInfoSync = ({\n  provider,\n  mint,\n  authority,\n  admin,\n  rentExemptTokenAccountBalance,\n}: {\n  rentExemptTokenAccountBalance: number;\n  provider: Provider;\n  mint: PublicKey;\n  authority: PublicKey;\n  admin: PublicKey;\n}): {\n  info: SwapTokenInfo;\n  instructions: TransactionEnvelope;\n} => {\n  // Create Swap Token Account\n  const { key: tokenAccount, tx: createSwapTokenAccountInstructions } =\n    buildCreateTokenAccountTX({\n      provider,\n      mint,\n      owner: authority,\n      payer: provider.wallet.publicKey,\n      rentExemptAccountBalance: rentExemptTokenAccountBalance,\n    });\n\n  // Create Admin Fee Account\n  const { key: adminFeeAccount, tx: createAdminFeeAccountInstructions } =\n    buildCreateTokenAccountTX({\n      provider,\n      mint,\n      owner: admin,\n      payer: provider.wallet.publicKey,\n      rentExemptAccountBalance: rentExemptTokenAccountBalance,\n    });\n\n  return {\n    info: {\n      mint,\n      reserve: tokenAccount,\n      adminFeeAccount: adminFeeAccount,\n    },\n    instructions: createSwapTokenAccountInstructions.combine(\n      createAdminFeeAccountInstructions\n    ),\n  };\n};\n\nexport type InitializeNewStableSwapSimpleArgs = Omit<\n  InitializeNewStableSwapArgs,\n  | \"swapProgramID\"\n  | \"tokenAMint\"\n  | \"tokenBMint\"\n  | \"useAssociatedAccountForInitialLP\"\n> & {\n  reservesA: TokenAmount;\n  reservesB: TokenAmount;\n};\n\n/**\n * Creates a set of instructions to create a new StableSwap instance.\n *\n * After calling this, you must sign this transaction with the accounts:\n * - payer -- Account that holds the SOL to seed the account.\n * - args.config.stableSwapAccount -- This account is used once then its key is no longer relevant\n * - all returned signers\n */\nexport const createInitializeStableSwapInstructionsSimple = async ({\n  provider,\n  adminAccount,\n  ampFactor,\n  fees,\n\n  reservesA,\n  reservesB,\n  initialLiquidityProvider = adminAccount,\n  swapAccountSigner = Keypair.generate(),\n  poolTokenMintSigner = Keypair.generate(),\n  seedPoolAccounts,\n}: InitializeNewStableSwapSimpleArgs): Promise<{\n  initializeArgs: InitializeSwapInstruction;\n  /**\n   * Lamports needed to be rent exempt.\n   */\n  balanceNeeded: number;\n\n  instructions: {\n    /**\n     * Create accounts for the LP token\n     */\n    createLPTokenMint: TransactionEnvelope;\n    /**\n     * Create LP token account for the initial LP\n     */\n    createInitialLPTokenAccount: TransactionEnvelope;\n    /**\n     * Create accounts for swap token A\n     */\n    createSwapTokenAAccounts: TransactionEnvelope;\n    /**\n     * Create accounts for swap token B\n     */\n    createSwapTokenBAccounts: TransactionEnvelope;\n    /**\n     * Seed the accounts for the pool\n     */\n    seedPoolAccounts: TransactionEnvelope;\n    /**\n     * Initialize the swap\n     */\n    initializeSwap: TransactionEnvelope;\n  };\n}> => {\n  const rentExemptTokenAccountBalance =\n    await SPLToken.getMinBalanceRentForExemptAccount(provider.connection);\n  const rentExemptMintBalance = await SPLToken.getMinBalanceRentForExemptMint(\n    provider.connection\n  );\n\n  // Create swap account if not specified\n  const swapAccount = swapAccountSigner.publicKey;\n\n  // Create authority and nonce\n  const [authority, nonce] = findSwapAuthorityKeySync(swapAccount);\n\n  // Create LP token mint\n  const { decimals } = reservesA.token;\n  if (reservesA.token.decimals !== reservesB.token.decimals) {\n    throw new Error(\"decimals mismatch\");\n  }\n  const createLPTokenMint = createInitMintTX({\n    provider,\n    mintKP: poolTokenMintSigner,\n    mintAuthority: authority,\n    decimals,\n    rentExemptMintBalance,\n  });\n  const poolTokenMint = poolTokenMintSigner.publicKey;\n\n  // Create initial LP token account\n  const initialLPAccount = getATAAddressSync({\n    mint: poolTokenMint,\n    owner: initialLiquidityProvider,\n  });\n  const createInitialLPTokenAccount = new TransactionEnvelope(provider, [\n    createATAInstruction({\n      address: getATAAddressSync({\n        mint: poolTokenMint,\n        owner: initialLiquidityProvider,\n      }),\n      mint: poolTokenMint,\n      owner: initialLiquidityProvider,\n      payer: provider.wallet.publicKey,\n    }),\n  ]);\n\n  // Create Swap Token A account\n  const { info: tokenA, instructions: createSwapTokenAAccounts } =\n    initializeSwapTokenInfoSync({\n      provider,\n      mint: reservesA.token.mintAccount,\n      authority,\n      admin: adminAccount,\n      rentExemptTokenAccountBalance,\n    });\n\n  // Create Swap Token B account\n  const { info: tokenB, instructions: createSwapTokenBAccounts } =\n    initializeSwapTokenInfoSync({\n      provider,\n      mint: reservesB.token.mintAccount,\n      authority,\n      admin: adminAccount,\n      rentExemptTokenAccountBalance,\n    });\n\n  // Seed the swap's Token A and token B accounts with tokens\n  // On testnet, this is usually a mint.\n  // On mainnet, this is usually a token transfer.\n  const seedPoolAccountsResult = seedPoolAccounts({\n    tokenAAccount: tokenA.reserve,\n    tokenBAccount: tokenB.reserve,\n  });\n  const seedPoolAccountsTX = new TransactionEnvelope(\n    provider,\n    [...seedPoolAccountsResult.instructions],\n    [...seedPoolAccountsResult.signers]\n  );\n\n  const initializeSwapInstruction: InitializeSwapInstruction = {\n    config: {\n      swapAccount: swapAccount,\n      authority,\n      swapProgramID: SWAP_PROGRAM_ID,\n      tokenProgramID: TOKEN_PROGRAM_ID,\n    },\n\n    adminAccount,\n    tokenA,\n    tokenB,\n\n    poolTokenMint,\n    destinationPoolTokenAccount: initialLPAccount,\n    nonce,\n    ampFactor,\n    fees,\n  };\n  const {\n    balanceNeeded: swapBalanceNeeded,\n    instructions: initializeStableSwapInstructions,\n  } = await createInitializeStableSwapInstructionsRaw({\n    provider,\n    initializeSwapInstruction,\n  });\n  const initializeSwap = new TransactionEnvelope(\n    provider,\n    [...initializeStableSwapInstructions],\n    [swapAccountSigner]\n  );\n\n  const instructions = {\n    createLPTokenMint,\n    createInitialLPTokenAccount,\n    createSwapTokenAAccounts,\n    createSwapTokenBAccounts,\n    seedPoolAccounts: seedPoolAccountsTX,\n    initializeSwap,\n  };\n\n  return {\n    initializeArgs: initializeSwapInstruction,\n    balanceNeeded:\n      rentExemptMintBalance +\n      swapBalanceNeeded +\n      rentExemptTokenAccountBalance * 2,\n    instructions,\n  };\n};\n"]}