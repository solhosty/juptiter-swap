{"version":3,"file":"idl.js","sourceRoot":"","sources":["../../../src/utils/idl.ts"],"names":[],"mappings":"AAEA;;;;GAIG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,OAAgB,EAAU,EAAE;IACxD,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;QAC/B,OAAO,OAAO,CAAC;KAChB;IAED,IAAI,KAAK,IAAI,OAAO,EAAE;QACpB,OAAO,OAAO,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;KAC7C;IACD,IAAI,QAAQ,IAAI,OAAO,EAAE;QACvB,OAAO,UAAU,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC;KACnD;IACD,IAAI,SAAS,IAAI,OAAO,EAAE;QACxB,OAAO,OAAO,CAAC,OAAO,CAAC;KACxB;IACD,IAAI,OAAO,IAAI,OAAO,EAAE;QACtB,OAAO,SAAS,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;KACzE;IACD,MAAM,IAAI,KAAK,CAAC,qBAAqB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AAClE,CAAC,CAAC","sourcesContent":["import type { IdlType } from \"@project-serum/anchor/dist/esm/idl.js\";\n\n/**\n * Formats an IDL type as a string. This comes straight from the Anchor source.\n * @param idlType\n * @returns\n */\nexport const formatIdlType = (idlType: IdlType): string => {\n  if (typeof idlType === \"string\") {\n    return idlType;\n  }\n\n  if (\"vec\" in idlType) {\n    return `Vec<${formatIdlType(idlType.vec)}>`;\n  }\n  if (\"option\" in idlType) {\n    return `Option<${formatIdlType(idlType.option)}>`;\n  }\n  if (\"defined\" in idlType) {\n    return idlType.defined;\n  }\n  if (\"array\" in idlType) {\n    return `Array<${formatIdlType(idlType.array[0])}; ${idlType.array[1]}>`;\n  }\n  throw new Error(`Unknown IDL type: ${JSON.stringify(idlType)}`);\n};\n"]}