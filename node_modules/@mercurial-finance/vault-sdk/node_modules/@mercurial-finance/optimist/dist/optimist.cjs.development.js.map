{"version":3,"file":"optimist.cjs.development.js","sources":["../src/tx/errors.ts","../src/tx/poll.ts","../src/utils/deserializeAccount.ts","../src/utils/deserializeMint.ts","../src/utils/wrapSOL.ts"],"sourcesContent":["import { TransactionResponse } from '@solana/web3.js';\n\ntype CustomInstructionError = [index: number, code: { Custom: number }];\ninterface ITransactionError {\n  InstructionError: CustomInstructionError;\n}\n\nexport class TransactionError extends Error {\n  constructor(m: string, public txid?: string, public code?: number) {\n    super(m);\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Error.prototype);\n  }\n}\nexport const UNKNOWN_ERROR = 'Unknown error, visit the explorer';\nconst SYSTEM_PROGRAM_ID = '11111111111111111111111111111111';\n\nexport function parseErrorForTransaction(tx: TransactionResponse): {\n  message: string;\n  programId?: string;\n  code?: number;\n} {\n  // Easy case, logMessages has an obvious error message. From dapp-scaffold\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  if (errors.length > 0) {\n    return { message: errors.join(',') };\n  }\n\n  // Harder case, we need to dig for a custom code\n  const transactionError = tx?.meta?.err;\n  let errorCode;\n\n  if (transactionError && typeof transactionError !== 'string') {\n    const instructionError = (transactionError as ITransactionError).InstructionError;\n\n    const [index, { Custom }] = instructionError;\n    errorCode = Custom ?? (instructionError[1] as any as number);\n\n    if (tx?.meta && tx.meta.logMessages) {\n      const failedProgramId = getFailedProgram(tx.meta?.logMessages, errorCode);\n\n      if (failedProgramId) {\n        if (failedProgramId === SYSTEM_PROGRAM_ID) {\n          return getSystemProgramError(instructionError);\n        }\n\n        return {\n          message: UNKNOWN_ERROR,\n          programId: failedProgramId,\n          code: errorCode,\n        };\n      }\n    }\n  }\n\n  return { message: typeof transactionError === 'string' ? transactionError : UNKNOWN_ERROR, code: errorCode };\n}\n\nfunction getFailedProgram(logMessages: String[], errorCode: number) {\n  for (let i = 0; i < logMessages.length; i++) {\n    const log = logMessages[i];\n\n    const found = log.match(\n      new RegExp(`Program ([1-9A-HJ-NP-Za-km-z]{32,44}) failed: custom program error: 0x${errorCode.toString(16)}`),\n    );\n\n    if (found) {\n      return found[1];\n    }\n  }\n\n  return;\n}\n\nfunction getSystemProgramError(instructionError: CustomInstructionError) {\n  const code = instructionError[1].Custom;\n\n  let message = '';\n  switch (code) {\n    // https://github.com/solana-labs/solana/blob/22a18a68e3ee68ae013d647e62e12128433d7230/sdk/program/src/system_instruction.rs#L12-L26\n    // TODO: Do we need to translate all error codes.\n    case 0:\n      message = 'An account with the same address already exists';\n    case 1:\n      message = 'The account does not have enough SOL to perform the operation';\n    default:\n      message = UNKNOWN_ERROR;\n  }\n\n  return {\n    code,\n    programId: SYSTEM_PROGRAM_ID,\n    message,\n  };\n}\n","import { Connection, TransactionResponse, TransactionSignature } from '@solana/web3.js';\nimport { TransactionError } from './errors';\nimport promiseRetry from 'promise-retry';\n\nexport async function pollForConfirmedTransaction(\n  connection: Connection,\n  txid: TransactionSignature,\n): Promise<TransactionResponse | null> {\n  return promiseRetry(\n    async (retry) => {\n      const response = await connection.getTransaction(txid, {\n        commitment: 'confirmed',\n      });\n      if (!response) {\n        retry(new TransactionError('Transaction was not confirmed', txid));\n      }\n      return response;\n    },\n    {\n      retries: 30,\n      minTimeout: 500,\n    },\n  ).catch(() => null);\n}\n","import { AccountInfo, AccountLayout, u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\n\nexport const deserializeAccount = (data: Buffer | undefined): AccountInfo | undefined => {\n  if (data == undefined || data.length == 0) {\n    return undefined;\n  }\n\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n","import { PublicKey } from '@solana/web3.js';\nimport { u64, MintInfo, MintLayout } from '@solana/spl-token';\n\n// Backward compatibility for new Mint.\ntype Mint = MintInfo & {\n  address?: PublicKey;\n};\n\nexport const deserializeMint = (data: Buffer, address?: PublicKey) => {\n  if (data.length !== MintLayout.span) {\n    // This is causing problem with mainnet token\n    // throw new Error('Not a valid Mint')\n    return;\n  }\n\n  const mintInfo = MintLayout.decode(data);\n  mintInfo.address = address;\n\n  if (mintInfo.mintAuthorityOption === 0) {\n    mintInfo.mintAuthority = null;\n  } else {\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n  }\n\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\n\n  if (mintInfo.freezeAuthorityOption === 0) {\n    mintInfo.freezeAuthority = null;\n  } else {\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n  }\n\n  return mintInfo as Mint;\n};\n","import { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { Connection, PublicKey, SystemProgram, Transaction } from '@solana/web3.js';\n\nconst SOL_MINT = 'So11111111111111111111111111111111111111112';\n\nasync function getWSolATA(connection: Connection, publicKey: PublicKey) {\n  const wSolAddress = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    new PublicKey(SOL_MINT),\n    publicKey,\n  );\n  const accountInfo = await connection.getAccountInfo(wSolAddress);\n  return { address: wSolAddress, accountInfo };\n}\n\nasync function createAndTransferWSOLInstructions(\n  connection: Connection,\n  publicKey: PublicKey,\n  amountToTransferInLamports: number,\n) {\n  const wSolAccount = await getWSolATA(connection, publicKey);\n  const instructions = [];\n\n  // If no accountInfo, create one\n  if (!wSolAccount.accountInfo) {\n    // Create ATA account\n    instructions.push(\n      Token.createAssociatedTokenAccountInstruction(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        new PublicKey(SOL_MINT),\n        wSolAccount.address,\n        publicKey,\n        publicKey,\n      ),\n    );\n  }\n\n  // Fund account and sync\n  instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: publicKey,\n      toPubkey: wSolAccount.address,\n      lamports: amountToTransferInLamports,\n    }),\n  );\n  instructions.push(\n    // This is not exposed by the types, but indeed it exists\n    (Token as any).createSyncNativeInstruction(TOKEN_PROGRAM_ID, wSolAccount.address),\n  );\n\n  const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();\n  const transaction = new Transaction({ feePayer: publicKey, blockhash, lastValidBlockHeight });\n  transaction.add(...instructions);\n  return transaction;\n}\n\nasync function createUnwrapSolInstructions(connection: Connection, publicKey: PublicKey) {\n  const wSolAccount = await getWSolATA(connection, publicKey);\n  const instructions = [];\n\n  if (!wSolAccount.accountInfo) {\n    return;\n  }\n  // Close account\n  instructions.push(\n    Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, wSolAccount.address, publicKey, publicKey, []),\n  );\n\n  const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();\n  const transaction = new Transaction({ feePayer: publicKey, blockhash, lastValidBlockHeight });\n  transaction.add(...instructions);\n  return transaction;\n}\n\nexport { createAndTransferWSOLInstructions, createUnwrapSolInstructions };\n"],"names":["TransactionError","Error","constructor","m","txid","code","Object","setPrototypeOf","prototype","UNKNOWN_ERROR","SYSTEM_PROGRAM_ID","parseErrorForTransaction","tx","errors","meta","logMessages","forEach","log","regex","exec","index","lastIndex","length","push","message","join","transactionError","err","errorCode","instructionError","InstructionError","Custom","failedProgramId","getFailedProgram","getSystemProgramError","programId","i","found","match","RegExp","toString","pollForConfirmedTransaction","connection","promiseRetry","retry","response","getTransaction","commitment","retries","minTimeout","catch","deserializeAccount","data","undefined","accountInfo","AccountLayout","decode","mint","PublicKey","owner","amount","u64","fromBuffer","delegateOption","delegate","delegatedAmount","isInitialized","state","isFrozen","isNativeOption","rentExemptReserve","isNative","closeAuthorityOption","closeAuthority","deserializeMint","address","MintLayout","span","mintInfo","mintAuthorityOption","mintAuthority","supply","freezeAuthorityOption","freezeAuthority","SOL_MINT","getWSolATA","publicKey","wSolAddress","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","getAccountInfo","createAndTransferWSOLInstructions","amountToTransferInLamports","wSolAccount","instructions","createAssociatedTokenAccountInstruction","SystemProgram","transfer","fromPubkey","toPubkey","lamports","createSyncNativeInstruction","blockhash","lastValidBlockHeight","getLatestBlockhash","transaction","Transaction","feePayer","add","createUnwrapSolInstructions","createCloseAccountInstruction"],"mappings":"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"}