{"version":3,"file":"rewarder.js","sourceRoot":"","sources":["../../../../src/wrappers/mine/rewarder.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AugmentedProvider, Provider } from \"@saberhq/solana-contrib\";\nimport { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport type { ProgramAccount, Token, u64 } from \"@saberhq/token-utils\";\nimport type { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { SystemProgram } from \"@solana/web3.js\";\n\nimport type { MineProgram, RewarderData } from \"../../programs/mine\";\nimport { QuarrySDK } from \"../../sdk\";\nimport type { MineWrapper } from \".\";\nimport { findQuarryAddress } from \"./pda\";\nimport { QuarryWrapper } from \"./quarry\";\nimport type { PendingQuarry } from \"./types\";\n\nexport class RewarderWrapper {\n  readonly sdk: QuarrySDK;\n  readonly program: MineProgram;\n\n  constructor(\n    readonly mineWrapper: MineWrapper,\n    readonly rewarderKey: PublicKey,\n    readonly rewarderData: RewarderData\n  ) {\n    this.sdk = mineWrapper.sdk;\n    this.program = mineWrapper.program;\n  }\n\n  get provider(): AugmentedProvider {\n    return this.sdk.provider;\n  }\n\n  static fromData(\n    provider: Provider,\n    rewarder: ProgramAccount<RewarderData>\n  ): RewarderWrapper {\n    return new RewarderWrapper(\n      QuarrySDK.load({ provider }).mine,\n      rewarder.publicKey,\n      rewarder.account\n    );\n  }\n\n  /**\n   * Gets the quarry associated with the given token.\n   * @param token\n   * @returns\n   */\n  async getQuarry(token: Token): Promise<QuarryWrapper> {\n    const quarryKey = await this.getQuarryKey(token);\n    return await QuarryWrapper.load({\n      sdk: this.sdk,\n      token,\n      key: quarryKey,\n    });\n  }\n\n  /**\n   * Gets the public key of a quarry for a token.\n   * @param token\n   * @returns\n   */\n  async getQuarryKey(token: Token): Promise<PublicKey> {\n    return await this.getQuarryKeyForMint(token.mintAccount);\n  }\n\n  /**\n   * Gets the public key of a quarry for a token mint.\n   * @param token\n   * @returns\n   */\n  async getQuarryKeyForMint(mint: PublicKey): Promise<PublicKey> {\n    const [quarryKey] = await findQuarryAddress(\n      this.rewarderKey,\n      mint,\n      this.program.programId\n    );\n    return quarryKey;\n  }\n\n  /**\n   * Creates a new quarry. Only the rewarder can call this.\n   * @deprecated Use {@link createQuarry}.\n   * @param param0\n   * @returns\n   */\n  async createQuarryV1({\n    token,\n    authority = this.provider.wallet.publicKey,\n  }: {\n    token: Token;\n    authority?: PublicKey;\n  }): Promise<PendingQuarry> {\n    const [quarryKey, bump] = await findQuarryAddress(\n      this.rewarderKey,\n      token.mintAccount,\n      this.program.programId\n    );\n    const ix = this.program.instruction.createQuarry(bump, {\n      accounts: {\n        quarry: quarryKey,\n        auth: {\n          authority,\n          rewarder: this.rewarderKey,\n        },\n        tokenMint: token.mintAccount,\n        payer: this.provider.wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n        unusedAccount: SystemProgram.programId,\n      },\n    });\n\n    return {\n      rewarder: this.rewarderKey,\n      quarry: quarryKey,\n      tx: this.sdk.newTx([ix]),\n    };\n  }\n\n  /**\n   * Creates a new quarry. Only the rewarder can call this.\n   * @param param0\n   * @returns\n   */\n  async createQuarry({\n    token,\n    authority = this.provider.wallet.publicKey,\n  }: {\n    token: Token;\n    authority?: PublicKey;\n  }): Promise<PendingQuarry> {\n    const [quarryKey] = await findQuarryAddress(\n      this.rewarderKey,\n      token.mintAccount,\n      this.program.programId\n    );\n    const ix = this.program.instruction.createQuarryV2({\n      accounts: {\n        quarry: quarryKey,\n        auth: {\n          authority,\n          rewarder: this.rewarderKey,\n        },\n        tokenMint: token.mintAccount,\n        payer: this.provider.wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      },\n    });\n\n    return {\n      rewarder: this.rewarderKey,\n      quarry: quarryKey,\n      tx: this.sdk.newTx([ix]),\n    };\n  }\n\n  /**\n   * Updates annual rewards rate on the Rewarder.\n   * One must sync after this.\n   * @param param0\n   */\n  setAnnualRewards({\n    newAnnualRate,\n    authority = this.provider.wallet.publicKey,\n  }: {\n    newAnnualRate: u64;\n    authority?: PublicKey;\n  }): TransactionEnvelope {\n    return new TransactionEnvelope(this.sdk.provider, [\n      this.program.instruction.setAnnualRewards(newAnnualRate, {\n        accounts: {\n          auth: {\n            rewarder: this.rewarderKey,\n            authority,\n          },\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Updates to annual rewards rate on the quarry, and update rewards on quarries assocated with each mint provided.\n   * @param param0\n   */\n  async setAndSyncAnnualRewards(\n    newAnnualRate: u64,\n    mints: PublicKey[]\n  ): Promise<TransactionEnvelope> {\n    const tx = await this.syncQuarryRewards(mints);\n    return this.setAnnualRewards({ newAnnualRate }).combine(tx);\n  }\n\n  /**\n   * Synchronizes quarry rewards.\n   * @param mints\n   * @returns\n   */\n  async syncQuarryRewards(mints: PublicKey[]): Promise<TransactionEnvelope> {\n    const instructions: TransactionInstruction[] = [];\n    await Promise.all(\n      mints.map(async (m) => {\n        const quarry = await this.getQuarryKeyForMint(m);\n        instructions.push(\n          this.program.instruction.updateQuarryRewards({\n            accounts: {\n              rewarder: this.rewarderKey,\n              quarry,\n            },\n          })\n        );\n      })\n    );\n    return this.sdk.newTx(instructions);\n  }\n\n  /**\n   * Transfers the authority to a different account.\n   * @param param0\n   */\n  transferAuthority({\n    authority = this.sdk.provider.wallet.publicKey,\n    nextAuthority,\n  }: {\n    authority?: PublicKey;\n    nextAuthority: PublicKey;\n  }): TransactionEnvelope {\n    return new TransactionEnvelope(this.sdk.provider, [\n      this.program.instruction.transferAuthority(nextAuthority, {\n        accounts: {\n          authority,\n          rewarder: this.rewarderKey,\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Sets timestamp on when rewards will cease\n   */\n  setFamine({\n    newFamineTs,\n    quarry,\n    authority = this.sdk.provider.wallet.publicKey,\n  }: {\n    newFamineTs: u64;\n    quarry: PublicKey;\n    authority?: PublicKey;\n  }): TransactionEnvelope {\n    return new TransactionEnvelope(this.sdk.provider, [\n      this.program.instruction.setFamine(newFamineTs, {\n        accounts: {\n          auth: {\n            authority,\n            rewarder: this.rewarderKey,\n          },\n          quarry,\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Pause the rewarder\n   */\n  pause(\n    authority: PublicKey = this.sdk.provider.wallet.publicKey\n  ): TransactionEnvelope {\n    return new TransactionEnvelope(this.sdk.provider, [\n      this.program.instruction.pause({\n        accounts: { pauseAuthority: authority, rewarder: this.rewarderKey },\n      }),\n    ]);\n  }\n\n  /**\n   * Unpause the rewarder\n   */\n  unpause(\n    authority: PublicKey = this.sdk.provider.wallet.publicKey\n  ): TransactionEnvelope {\n    return new TransactionEnvelope(this.sdk.provider, [\n      this.program.instruction.unpause({\n        accounts: { pauseAuthority: authority, rewarder: this.rewarderKey },\n      }),\n    ]);\n  }\n}\n"]}