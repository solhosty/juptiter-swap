{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../../src/sdk.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Program } from \"@project-serum/anchor\";\nimport { newProgramMap } from \"@saberhq/anchor-contrib\";\nimport type {\n  AugmentedProvider,\n  Provider,\n  TransactionEnvelope,\n} from \"@saberhq/solana-contrib\";\nimport { SolanaAugmentedProvider } from \"@saberhq/solana-contrib\";\nimport type {\n  PublicKey,\n  Signer,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { Keypair } from \"@solana/web3.js\";\n\nimport type { Programs } from \"./constants\";\nimport { QUARRY_ADDRESSES, QUARRY_IDLS } from \"./constants\";\nimport type { PendingRedeemer } from \"./programs/redeemer\";\nimport {\n  MergeMine,\n  MineWrapper,\n  MintWrapper,\n  QuarryRegistry,\n} from \"./wrappers\";\nimport { Operator } from \"./wrappers/operator\";\nimport { RedeemerWrapper } from \"./wrappers/redeemer\";\n\n/**\n * Quarry SDK.\n */\nexport class QuarrySDK {\n  constructor(\n    readonly provider: AugmentedProvider,\n    readonly programs: Programs\n  ) {}\n\n  /**\n   * Creates a new instance of the SDK with the given keypair.\n   */\n  withSigner(signer: Signer): QuarrySDK {\n    return QuarrySDK.load({\n      provider: this.provider.withSigner(signer),\n    });\n  }\n\n  get programList(): Program[] {\n    return Object.values(this.programs) as Program[];\n  }\n\n  get mintWrapper(): MintWrapper {\n    return new MintWrapper(this);\n  }\n\n  get mine(): MineWrapper {\n    return new MineWrapper(this);\n  }\n\n  get registry(): QuarryRegistry {\n    return new QuarryRegistry(this);\n  }\n\n  get mergeMine(): MergeMine {\n    return new MergeMine(this);\n  }\n\n  /**\n   * Constructs a new transaction envelope.\n   * @param instructions\n   * @param signers\n   * @returns\n   */\n  newTx(\n    instructions: TransactionInstruction[],\n    signers?: Signer[]\n  ): TransactionEnvelope {\n    return this.provider.newTX(instructions, signers);\n  }\n\n  /**\n   * Loads the SDK.\n   * @returns\n   */\n  static load({\n    provider,\n    addresses = QUARRY_ADDRESSES,\n  }: {\n    // Provider\n    provider: Provider;\n    // Addresses of each program.\n    addresses?: { [K in keyof Programs]?: PublicKey };\n  }): QuarrySDK {\n    const allAddresses = { ...QUARRY_ADDRESSES, ...addresses };\n    const programs = newProgramMap<Programs>(\n      provider,\n      QUARRY_IDLS,\n      allAddresses\n    );\n    return new QuarrySDK(new SolanaAugmentedProvider(provider), programs);\n  }\n\n  async loadRedeemer({\n    iouMint,\n    redemptionMint,\n  }: {\n    iouMint: PublicKey;\n    redemptionMint: PublicKey;\n  }): Promise<RedeemerWrapper> {\n    return await RedeemerWrapper.load({ iouMint, redemptionMint, sdk: this });\n  }\n\n  async createRedeemer({\n    iouMint,\n    redemptionMint,\n  }: {\n    iouMint: PublicKey;\n    redemptionMint: PublicKey;\n  }): Promise<PendingRedeemer> {\n    return await RedeemerWrapper.createRedeemer({\n      iouMint,\n      redemptionMint,\n      sdk: this,\n    });\n  }\n\n  /**\n   * Loads an operator.\n   * @param key\n   * @returns\n   */\n  async loadOperator(key: PublicKey): Promise<Operator | null> {\n    return await Operator.load({\n      sdk: this,\n      key,\n    });\n  }\n\n  /**\n   * Creates an Operator.\n   * @returns\n   */\n  async createOperator({\n    rewarder,\n    baseKP = Keypair.generate(),\n    admin = this.provider.wallet.publicKey,\n    payer = this.provider.wallet.publicKey,\n  }: {\n    rewarder: PublicKey;\n    admin?: PublicKey;\n    baseKP?: Signer;\n    payer?: PublicKey;\n  }): Promise<{ key: PublicKey; tx: TransactionEnvelope }> {\n    return await Operator.createOperator({\n      sdk: this,\n      rewarder,\n      baseKP,\n      admin,\n      payer,\n    });\n  }\n}\n"]}