{"version":3,"file":"mergePool.js","sourceRoot":"","sources":["../../../../src/wrappers/mergeMine/mergePool.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AAE9D,OAAO,EACL,aAAa,EACb,cAAc,EACd,eAAe,EACf,QAAQ,EACR,gBAAgB,GACjB,MAAM,sBAAsB,CAAC;AAE9B,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD,OAAO,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AAMnD,OAAO,EAAE,iBAAiB,EAAE,MAAM,IAAI,CAAC;AACvC,OAAO,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,MAAM,aAAa,CAAC;AAClE,OAAO,EAAE,qBAAqB,EAAE,MAAM,OAAO,CAAC;AAG9C,MAAM,OAAO,SAAS;IAGpB,YAAqB,SAAoB,EAAW,GAAc;QAA7C,cAAS,GAAT,SAAS,CAAW;QAAW,QAAG,GAAH,GAAG,CAAW;QAF1D,UAAK,GAAyB,IAAI,CAAC;IAE0B,CAAC;IAEhE,UAAU;;YACd,IAAI,CAAC,KAAK,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC5E,OAAO,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;KAAA;IAEK,IAAI;;YACR,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,OAAO,IAAI,CAAC,KAAK,CAAC;aACnB;YACD,OAAO,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;QACjC,CAAC;KAAA;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;IACjC,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACG,OAAO,CAAC,EACZ,MAAM,EACN,QAAQ,EACR,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,GAKzC;;YACC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAEnC,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,MAAM,cAAc,CAAC;gBACzD,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,IAAI,EAAE,QAAQ,CAAC,WAAW;gBAC1B,KAAK,EAAE,OAAO;aACf,CAAC,CAAC;YACH,IAAI,WAAW,EAAE;gBACf,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;aAClD;YACD,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,qBAAqB,CAAC;gBAC1C,IAAI,EAAE,IAAI,CAAC,GAAG;gBACd,KAAK,EAAE,OAAO;aACf,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAC5D,MAAM,EAAE,OAAO,EAAE,qBAAqB,EAAE,WAAW,EAAE,OAAO,EAAE,GAC5D,MAAM,cAAc,CAAC;gBACnB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,IAAI,EAAE,QAAQ,CAAC,WAAW;gBAC1B,KAAK,EAAE,KAAK;aACb,CAAC,CAAC;YACL,MAAM,eAAe,GAA6B,EAAE,CAAC;YACrD,6CAA6C;YAC7C,IAAI,CAAC,SAAS,EAAE;gBACd,eAAe,CAAC,IAAI,CAClB,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,gBAAgB,CAAC;oBACxC,QAAQ,EAAE;wBACR,IAAI,EAAE,IAAI,CAAC,GAAG;wBACd,KAAK,EAAE,OAAO;wBACd,EAAE,EAAE,KAAK;wBACT,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS;wBACrC,aAAa,EAAE,aAAa,CAAC,SAAS;qBACvC;iBACF,CAAC,CACH,CAAC;gBACF,IAAI,OAAO,EAAE;oBACX,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC/B;gBACD,MAAM,EAAE,GAAG,EAAE,cAAc,EAAE,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC;oBACtE,IAAI,EAAE,QAAQ,CAAC,WAAW;oBAC1B,IAAI,EAAE,IAAI,CAAC,GAAG;oBACd,EAAE,EAAE,KAAK;oBACT,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS;oBACrC,QAAQ;iBACT,CAAC,CAAC;gBACH,eAAe,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,CAAC;aACzC;YAED,eAAe,CAAC,IAAI,CAClB,QAAQ,CAAC,yBAAyB,CAChC,gBAAgB,EAChB,GAAG,EACH,qBAAqB,EACrB,OAAO,EACP,EAAE,EACF,MAAM,CAAC,KAAK,EAAE,CACf,CACF,CAAC;YAEF,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC,OAAO,CACpE,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAC9C,CAAC;QACJ,CAAC;KAAA;IAED;;;;OAIG;IACG,iBAAiB,CACrB,QAAmB,EACnB,UAAqB;;YAErB,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;YACpC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAE/B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YACvE,MAAM,qBAAqB,GAAG,MAAM,aAAa,CAAC;gBAChD,IAAI,EAAE,IAAI,CAAC,WAAW;gBACtB,KAAK,EAAE,UAAU;aAClB,CAAC,CAAC;YACH,OAAO,IAAI,mBAAmB,CAAC,QAAQ,EAAE;gBACvC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC,iBAAiB,CAAC;oBACnD,QAAQ,EAAE;wBACR,OAAO,EAAE,QAAQ,CAAC,MAAM,CAAC,SAAS;wBAClC,qBAAqB;wBACrB,KAAK;qBACN;iBACF,CAAC;aACH,CAAC,CAAC;QACL,CAAC;KAAA;IAED;;;OAGG;IACG,iBAAiB,CACrB,QAAmB,EACnB,UAAqB;;YAErB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAEnC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YACvE,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC;YACzE,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,gBAAgB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YAE3D,MAAM,yBAAyB,GAAG,MAAM,cAAc,CAAC;gBACrD,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,IAAI,EAAE,QAAQ,CAAC,WAAW;gBAC1B,KAAK,EAAE,UAAU;aAClB,CAAC,CAAC;YACH,MAAM,KAAK,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE;gBACnD,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,iBAAiB,CAAC;oBACzC,QAAQ,EAAE;wBACR,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS;wBACvC,WAAW,EAAE,QAAQ,CAAC,WAAW;wBACjC,uBAAuB,EAAE,yBAAyB,CAAC,OAAO;wBAC1D,KAAK;qBACN;iBACF,CAAC;aACH,CAAC,CAAC;YACH,IAAI,yBAAyB,CAAC,WAAW,EAAE;gBACzC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,yBAAyB,CAAC,WAAW,CAAC,CAAC;aACnE;YAED,4CAA4C;YAC5C,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE;gBAChD,MAAM,4BAA4B,GAAG,MAAM,cAAc,CAAC;oBACxD,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,IAAI,EAAE,QAAQ,CAAC,WAAW;oBAC1B,KAAK,EAAE,KAAK;iBACb,CAAC,CAAC;gBACH,KAAK,CAAC,YAAY,CAAC,OAAO,CACxB,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC;oBACnC,QAAQ,EAAE;wBACR,IAAI,EAAE,IAAI,CAAC,GAAG;wBACd,EAAE,EAAE,UAAU;wBACd,KAAK;wBACL,MAAM;wBACN,QAAQ;wBACR,SAAS,EAAE,QAAQ,CAAC,WAAW;wBAC/B,UAAU,EAAE,4BAA4B,CAAC,OAAO;wBAChD,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS;wBACrC,WAAW,EAAE,gBAAgB,CAAC,IAAI;wBAClC,aAAa,EAAE,aAAa,CAAC,SAAS;wBACtC,YAAY,EAAE,gBAAgB;qBAC/B;iBACF,CAAC,CACH,CAAC;gBACF,IAAI,4BAA4B,CAAC,WAAW,EAAE;oBAC5C,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,4BAA4B,CAAC,WAAW,CAAC,CAAC;iBACtE;aACF;iBAAM;gBACL,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;aACvB;YAED,OAAO,KAAK,CAAC;QACf,CAAC;KAAA;IAED;;;;OAIG;IACG,QAAQ,CAAC,EACb,MAAM,EACN,QAAQ,EACR,UAAU,GAKX;;YACC,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,mBAAmB,CACpD,QAAQ,EACR,UAAU,EACV,MAAM,CACP,CAAC;YACF,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,cAAc,CACrD,MAAM,CAAC,KAAK,CAAC,WAAW,EACxB,UAAU,CACX,CAAC;YACF,OAAO,mBAAmB,CAAC,UAAU,CACnC,eAAe,EACf,qBAAqB,CACtB,CAAC;QACJ,CAAC;KAAA;IAED;;;;OAIG;IACG,iBAAiB,CACrB,QAAmB,EACnB,UAAqB;;YAErB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAEnC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YACvE,MAAM,uBAAuB,GAAG,MAAM,aAAa,CAAC;gBAClD,IAAI,EAAE,QAAQ,CAAC,WAAW;gBAC1B,KAAK,EAAE,UAAU;aAClB,CAAC,CAAC;YACH,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAC5C,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,sBAAsB,CAAC;oBAC9C,QAAQ,EAAE;wBACR,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS;wBACvC,WAAW,EAAE,QAAQ,CAAC,WAAW;wBACjC,uBAAuB;wBACvB,KAAK;qBACN;iBACF,CAAC;aACH,CAAC,CAAC;QACL,CAAC;KAAA;IAED;;;;OAIG;IACG,mBAAmB,CACvB,QAAmB,EACnB,UAAqB,EACrB,MAAmB;;YAEnB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAEnC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YACvE,MAAM,qBAAqB,GAAG,MAAM,aAAa,CAAC;gBAChD,IAAI,EAAE,QAAQ,CAAC,WAAW;gBAC1B,KAAK,EAAE,UAAU;aAClB,CAAC,CAAC;YACH,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAC5C,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,mBAAmB,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE;oBAC3D,QAAQ,EAAE;wBACR,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS;wBACvC,qBAAqB;wBACrB,KAAK;qBACN;iBACF,CAAC;aACH,CAAC,CAAC;QACL,CAAC;KAAA;IAED;;;;OAIG;IACG,cAAc,CAClB,YAAuB,EACvB,UAAqB;;YAErB,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC;YAC7C,MAAM,gBAAgB,GAAG,MAAM,aAAa,CAAC;gBAC3C,IAAI,EAAE,YAAY;gBAClB,KAAK,EAAE,UAAU;aAClB,CAAC,CAAC;YACH,MAAM,eAAe,GAAG,MAAM,aAAa,CAAC;gBAC1C,IAAI,EAAE,YAAY;gBAClB,KAAK;aACN,CAAC,CAAC;YACH,MAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,cAAc,CAAC;gBAC/D,QAAQ,EAAE;oBACR,KAAK;oBACL,IAAI,EAAE,IAAI,CAAC,GAAG;oBACd,EAAE,EAAE,UAAU;oBACd,cAAc,EAAE,gBAAgB;oBAChC,gBAAgB,EAAE,eAAe;oBACjC,YAAY,EAAE,gBAAgB;oBAC9B,YAAY;iBACb;aACF,CAAC,CAAC;YACH,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACpE,CAAC;KAAA;IAED;;;;OAIG;IACG,mBAAmB,CACvB,QAAmB,EACnB,UAAqB;;YAErB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YACnC,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAClC,QAAQ,CAAC,WAAW,EACpB,MAAM,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CACzD,CAAC;QACJ,CAAC;KAAA;IAED;;;OAGG;IACG,mBAAmB,CACvB,QAAmB,EACnB,UAAqB;;YAErB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAEnC,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAClC,QAAQ,CAAC,WAAW,EACpB,MAAM,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,UAAU,CAAC,CACzD,CAAC;QACJ,CAAC;KAAA;IAED;;;;OAIG;IACG,kBAAkB,CACtB,UAAqB,EACrB,KAA0B,EAC1B,UAAqB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS;;YAEnD,MAAM,QAAQ,GACZ,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAC3D,KAAK,CAAC,QAAQ,CACf,CAAC;YACJ,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,iBAAiB,CACtC,QAAQ,CAAC,WAAW,EACpB,KAAK,CAAC,QAAQ,EACd,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAClD,CAAC;YAEF,MAAM,YAAY,GAAG,QAAQ,CAAC,gBAAgB,CAAC;YAC/C,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC;gBACnC,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,KAAK,EAAE;oBACL,MAAM,EAAE,UAAU;oBAClB,OAAO,EAAE,YAAY;iBACtB;gBACD,KAAK,EAAE,KAAK,CAAC,EAAE;aAChB,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG,MAAM,eAAe,CAAC;gBACtC,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,KAAK,EAAE;oBACL,OAAO,EAAE,YAAY;iBACtB;gBACD,KAAK,EAAE,OAAO;aACf,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC;gBAClC,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,IAAI,EAAE,YAAY;gBAClB,KAAK,EAAE,IAAI,CAAC,GAAG;aAChB,CAAC,CAAC;YAEH,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAC5C,GAAG,MAAM,CAAC,YAAY;gBACtB,GAAG,SAAS,CAAC,YAAY;gBACzB,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBACnD,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC;oBACpC,QAAQ,EAAE;wBACR,WAAW,EAAE,QAAQ,CAAC,WAAW;wBACjC,kBAAkB,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS;wBACrE,MAAM;wBACN,gBAAgB,EAAE,YAAY;wBAC9B,mBAAmB,EAAE,MAAM,CAAC,QAAQ,CAAC,OAAO;wBAC5C,oBAAoB,EAAE,QAAQ,CAAC,oBAAoB;wBACnD,iBAAiB,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM;wBACzC,KAAK;qBACN;iBACF,CAAC;aACH,CAAC,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QAChE,CAAC;KAAA;IAEK,uBAAuB,CAC3B,QAAmB,EACnB,UAAqB;;YAErB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAEnC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC;YACzE,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,gBAAgB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC;gBACrC,IAAI,EAAE,QAAQ,CAAC,WAAW;gBAC1B,KAAK,EAAE,KAAK;aACb,CAAC,CAAC;YACH,uBACE,EAAE,EAAE,UAAU,EACd,QAAQ;gBACR,MAAM;gBACN,KAAK;gBACL,UAAU,IACP,IAAI,CAAC,cAAc,EACtB;QACJ,CAAC;KAAA;IAEK,uBAAuB,CAC3B,QAAmB,EACnB,UAAqB;;YAErB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAEnC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC;YACzE,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,gBAAgB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YAC3D,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC;gBACrC,IAAI,EAAE,QAAQ,CAAC,WAAW;gBAC1B,KAAK,EAAE,KAAK;aACb,CAAC,CAAC;YACH,uBACE,EAAE,EAAE,UAAU,EACd,QAAQ;gBACR,MAAM;gBACN,KAAK;gBACL,UAAU,IACP,IAAI,CAAC,cAAc,EACtB;QACJ,CAAC;KAAA;IAED,IAAI,cAAc;QAIhB,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,GAAG;YACd,YAAY,EAAE,gBAAgB;YAC9B,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS;SACpD,CAAC;IACJ,CAAC;CACF","sourcesContent":["import type { Provider } from \"@saberhq/solana-contrib\";\nimport { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport type { TokenAmount } from \"@saberhq/token-utils\";\nimport {\n  getATAAddress,\n  getOrCreateATA,\n  getOrCreateATAs,\n  SPLToken,\n  TOKEN_PROGRAM_ID,\n} from \"@saberhq/token-utils\";\nimport type { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { SystemProgram } from \"@solana/web3.js\";\n\nimport { QUARRY_ADDRESSES } from \"../../constants\";\nimport type {\n  MergePoolData,\n  QuarryMergeMineProgram,\n  QuarryStakeAccounts,\n} from \"../../programs\";\nimport { findMinterAddress } from \"..\";\nimport { findMinerAddress, findQuarryAddress } from \"../mine/pda\";\nimport { findMergeMinerAddress } from \"./pda\";\nimport type { MergeMine } from \"./quarryMergeMine\";\n\nexport class MergePool {\n  private _data: MergePoolData | null = null;\n\n  constructor(readonly mergeMine: MergeMine, readonly key: PublicKey) {}\n\n  async reloadData(): Promise<MergePoolData> {\n    this._data = await this.mergeMine.program.account.mergePool.fetch(this.key);\n    return this._data;\n  }\n\n  async data(): Promise<MergePoolData> {\n    if (this._data) {\n      return this._data;\n    }\n    return await this.reloadData();\n  }\n\n  get provider(): Provider {\n    return this.mergeMine.provider;\n  }\n\n  get program(): QuarryMergeMineProgram {\n    return this.mergeMine.programs.MergeMine;\n  }\n\n  /**\n   * Deposit primary tokens into the merge miner.\n   * @param amount\n   * @returns\n   */\n  async deposit({\n    amount,\n    rewarder,\n    mmOwner = this.provider.wallet.publicKey,\n  }: {\n    amount: TokenAmount;\n    rewarder: PublicKey;\n    mmOwner?: PublicKey;\n  }): Promise<TransactionEnvelope> {\n    const poolData = await this.data();\n\n    const { address: ata, instruction } = await getOrCreateATA({\n      provider: this.provider,\n      mint: poolData.primaryMint,\n      owner: mmOwner,\n    });\n    if (instruction) {\n      throw new Error(\"User has no tokens to deposit\");\n    }\n    const [mmKey] = await findMergeMinerAddress({\n      pool: this.key,\n      owner: mmOwner,\n    });\n\n    const mmAccount = await this.provider.getAccountInfo(mmKey);\n    const { address: mmPrimaryTokenAccount, instruction: mmATAIx } =\n      await getOrCreateATA({\n        provider: this.provider,\n        mint: poolData.primaryMint,\n        owner: mmKey,\n      });\n    const allInstructions: TransactionInstruction[] = [];\n    // Initialize mergeMiner if it does not exist\n    if (!mmAccount) {\n      allInstructions.push(\n        this.program.instruction.initMergeMinerV2({\n          accounts: {\n            pool: this.key,\n            owner: mmOwner,\n            mm: mmKey,\n            payer: this.provider.wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n          },\n        })\n      );\n      if (mmATAIx) {\n        allInstructions.push(mmATAIx);\n      }\n      const { ixs: initPrimaryIxs } = await this.mergeMine.getOrCreatePrimary({\n        mint: poolData.primaryMint,\n        pool: this.key,\n        mm: mmKey,\n        payer: this.provider.wallet.publicKey,\n        rewarder,\n      });\n      allInstructions.push(...initPrimaryIxs);\n    }\n\n    allInstructions.push(\n      SPLToken.createTransferInstruction(\n        TOKEN_PROGRAM_ID,\n        ata,\n        mmPrimaryTokenAccount,\n        mmOwner,\n        [],\n        amount.toU64()\n      )\n    );\n\n    return new TransactionEnvelope(this.provider, allInstructions).combine(\n      await this.stakePrimaryMiner(rewarder, mmKey)\n    );\n  }\n\n  /**\n   * Deposits tokens into the primary quarry.\n   * (Not recommended-- you probably want {@link MergeMiner#deposit}.)\n   * @returns\n   */\n  async stakePrimaryMiner(\n    rewarder: PublicKey,\n    mergeMiner: PublicKey\n  ): Promise<TransactionEnvelope> {\n    const { provider } = this.mergeMine;\n    const data = await this.data();\n\n    const stake = await this.getPrimaryStakeAccounts(rewarder, mergeMiner);\n    const mmPrimaryTokenAccount = await getATAAddress({\n      mint: data.primaryMint,\n      owner: mergeMiner,\n    });\n    return new TransactionEnvelope(provider, [\n      this.mergeMine.program.instruction.stakePrimaryMiner({\n        accounts: {\n          mmOwner: provider.wallet.publicKey,\n          mmPrimaryTokenAccount,\n          stake,\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Stakes replica tokens into a miner.\n   * @returns\n   */\n  async stakeReplicaMiner(\n    rewarder: PublicKey,\n    mergeMiner: PublicKey\n  ): Promise<TransactionEnvelope> {\n    const poolData = await this.data();\n\n    const stake = await this.getReplicaStakeAccounts(rewarder, mergeMiner);\n    const [quarry] = await findQuarryAddress(rewarder, poolData.replicaMint);\n    const [miner] = await findMinerAddress(quarry, mergeMiner);\n\n    const mmReplicaMintTokenAccount = await getOrCreateATA({\n      provider: this.provider,\n      mint: poolData.replicaMint,\n      owner: mergeMiner,\n    });\n    const txEnv = new TransactionEnvelope(this.provider, [\n      this.program.instruction.stakeReplicaMiner({\n        accounts: {\n          mmOwner: this.provider.wallet.publicKey,\n          replicaMint: poolData.replicaMint,\n          replicaMintTokenAccount: mmReplicaMintTokenAccount.address,\n          stake,\n        },\n      }),\n    ]);\n    if (mmReplicaMintTokenAccount.instruction) {\n      txEnv.instructions.unshift(mmReplicaMintTokenAccount.instruction);\n    }\n\n    // initialize the miner if it does not exist\n    if (!(await this.provider.getAccountInfo(miner))) {\n      const minerReplicaMintTokenAccount = await getOrCreateATA({\n        provider: this.provider,\n        mint: poolData.replicaMint,\n        owner: miner,\n      });\n      txEnv.instructions.unshift(\n        this.program.instruction.initMinerV2({\n          accounts: {\n            pool: this.key,\n            mm: mergeMiner,\n            miner,\n            quarry,\n            rewarder,\n            tokenMint: poolData.replicaMint,\n            minerVault: minerReplicaMintTokenAccount.address,\n            payer: this.provider.wallet.publicKey,\n            mineProgram: QUARRY_ADDRESSES.Mine,\n            systemProgram: SystemProgram.programId,\n            tokenProgram: TOKEN_PROGRAM_ID,\n          },\n        })\n      );\n      if (minerReplicaMintTokenAccount.instruction) {\n        txEnv.instructions.unshift(minerReplicaMintTokenAccount.instruction);\n      }\n    } else {\n      console.error(\"HERE\");\n    }\n\n    return txEnv;\n  }\n\n  /**\n   * Withdraw staked tokens from a merge miner.\n   * @param amount\n   * @returns\n   */\n  async withdraw({\n    amount,\n    rewarder,\n    mergeMiner,\n  }: {\n    amount: TokenAmount;\n    rewarder: PublicKey;\n    mergeMiner: PublicKey;\n  }): Promise<TransactionEnvelope> {\n    const withdrawPrimary = await this.unstakePrimaryMiner(\n      rewarder,\n      mergeMiner,\n      amount\n    );\n    const withdrawPrimaryFromMM = await this.withdrawTokens(\n      amount.token.mintAccount,\n      mergeMiner\n    );\n    return TransactionEnvelope.combineAll(\n      withdrawPrimary,\n      withdrawPrimaryFromMM\n    );\n  }\n\n  /**\n   * Unstakes all replica tokens from a quarry.\n   * You must call this function for each replica miner before unstaking the primary.\n   * @returns\n   */\n  async unstakeAllReplica(\n    rewarder: PublicKey,\n    mergeMiner: PublicKey\n  ): Promise<TransactionEnvelope> {\n    const poolData = await this.data();\n\n    const stake = await this.getReplicaStakeAccounts(rewarder, mergeMiner);\n    const replicaMintTokenAccount = await getATAAddress({\n      mint: poolData.replicaMint,\n      owner: mergeMiner,\n    });\n    return new TransactionEnvelope(this.provider, [\n      this.program.instruction.unstakeAllReplicaMiner({\n        accounts: {\n          mmOwner: this.provider.wallet.publicKey,\n          replicaMint: poolData.replicaMint,\n          replicaMintTokenAccount,\n          stake,\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Withdraws primary tokens from the quarry.\n   * (Not recommended-- you probably want {@link MergeMiner#withdraw}.)\n   * @returns\n   */\n  async unstakePrimaryMiner(\n    rewarder: PublicKey,\n    mergeMiner: PublicKey,\n    amount: TokenAmount\n  ): Promise<TransactionEnvelope> {\n    const poolData = await this.data();\n\n    const stake = await this.getPrimaryStakeAccounts(rewarder, mergeMiner);\n    const mmPrimaryTokenAccount = await getATAAddress({\n      mint: poolData.primaryMint,\n      owner: mergeMiner,\n    });\n    return new TransactionEnvelope(this.provider, [\n      this.program.instruction.unstakePrimaryMiner(amount.toU64(), {\n        accounts: {\n          mmOwner: this.provider.wallet.publicKey,\n          mmPrimaryTokenAccount,\n          stake,\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Withdraws a specific mint from the merge miner.\n   * @param withdrawMint\n   * @returns\n   */\n  async withdrawTokens(\n    withdrawMint: PublicKey,\n    mergeMiner: PublicKey\n  ): Promise<TransactionEnvelope> {\n    const owner = this.provider.wallet.publicKey;\n    const mmPrimaryAccount = await getATAAddress({\n      mint: withdrawMint,\n      owner: mergeMiner,\n    });\n    const ownerPrimaryATA = await getATAAddress({\n      mint: withdrawMint,\n      owner,\n    });\n    const withdrawTokensIX = this.program.instruction.withdrawTokens({\n      accounts: {\n        owner,\n        pool: this.key,\n        mm: mergeMiner,\n        mmTokenAccount: mmPrimaryAccount,\n        tokenDestination: ownerPrimaryATA,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        withdrawMint,\n      },\n    });\n    return new TransactionEnvelope(this.provider, [withdrawTokensIX]);\n  }\n\n  /**\n   * Claims rewards for a primary account.\n   * @param rewarder\n   * @returns\n   */\n  async claimPrimaryRewards(\n    rewarder: PublicKey,\n    mergeMiner: PublicKey\n  ): Promise<TransactionEnvelope> {\n    const poolData = await this.data();\n    return await this.claimRewardsCommon(\n      poolData.primaryMint,\n      await this.getPrimaryStakeAccounts(rewarder, mergeMiner)\n    );\n  }\n\n  /**\n   * Claims rewards for a replica account.\n   * @returns\n   */\n  async claimReplicaRewards(\n    rewarder: PublicKey,\n    mergeMiner: PublicKey\n  ): Promise<TransactionEnvelope> {\n    const poolData = await this.data();\n\n    return await this.claimRewardsCommon(\n      poolData.replicaMint,\n      await this.getReplicaStakeAccounts(rewarder, mergeMiner)\n    );\n  }\n\n  /**\n   * Claims internal mining rewards.\n   * @param amount\n   * @returns\n   */\n  async claimRewardsCommon(\n    quarryMint: PublicKey,\n    stake: QuarryStakeAccounts,\n    mmOwner: PublicKey = this.provider.wallet.publicKey\n  ): Promise<TransactionEnvelope> {\n    const rewarder =\n      await this.mergeMine.sdk.programs.Mine.account.rewarder.fetch(\n        stake.rewarder\n      );\n    const [minter] = await findMinterAddress(\n      rewarder.mintWrapper,\n      stake.rewarder,\n      this.mergeMine.sdk.programs.MintWrapper.programId\n    );\n\n    const withdrawMint = rewarder.rewardsTokenMint;\n    const mmATAs = await getOrCreateATAs({\n      provider: this.provider,\n      mints: {\n        quarry: quarryMint,\n        rewards: withdrawMint,\n      },\n      owner: stake.mm,\n    });\n\n    const ownerATAs = await getOrCreateATAs({\n      provider: this.provider,\n      mints: {\n        rewards: withdrawMint,\n      },\n      owner: mmOwner,\n    });\n    const feeATA = await getOrCreateATA({\n      provider: this.provider,\n      mint: withdrawMint,\n      owner: this.key,\n    });\n\n    return new TransactionEnvelope(this.provider, [\n      ...mmATAs.instructions,\n      ...ownerATAs.instructions,\n      ...(feeATA.instruction ? [feeATA.instruction] : []),\n      this.program.instruction.claimRewards({\n        accounts: {\n          mintWrapper: rewarder.mintWrapper,\n          mintWrapperProgram: this.mergeMine.sdk.programs.MintWrapper.programId,\n          minter,\n          rewardsTokenMint: withdrawMint,\n          rewardsTokenAccount: mmATAs.accounts.rewards,\n          claimFeeTokenAccount: rewarder.claimFeeTokenAccount,\n          stakeTokenAccount: mmATAs.accounts.quarry,\n          stake,\n        },\n      }),\n    ]).combine(await this.withdrawTokens(withdrawMint, stake.mm));\n  }\n\n  async getReplicaStakeAccounts(\n    rewarder: PublicKey,\n    mergeMiner: PublicKey\n  ): Promise<QuarryStakeAccounts> {\n    const poolData = await this.data();\n\n    const [quarry] = await findQuarryAddress(rewarder, poolData.replicaMint);\n    const [miner] = await findMinerAddress(quarry, mergeMiner);\n    const minerVault = await getATAAddress({\n      mint: poolData.replicaMint,\n      owner: miner,\n    });\n    return {\n      mm: mergeMiner,\n      rewarder,\n      quarry,\n      miner,\n      minerVault,\n      ...this.commonAccounts,\n    };\n  }\n\n  async getPrimaryStakeAccounts(\n    rewarder: PublicKey,\n    mergeMiner: PublicKey\n  ): Promise<QuarryStakeAccounts> {\n    const poolData = await this.data();\n\n    const [quarry] = await findQuarryAddress(rewarder, poolData.primaryMint);\n    const [miner] = await findMinerAddress(quarry, mergeMiner);\n    const minerVault = await getATAAddress({\n      mint: poolData.primaryMint,\n      owner: miner,\n    });\n    return {\n      mm: mergeMiner,\n      rewarder,\n      quarry,\n      miner,\n      minerVault,\n      ...this.commonAccounts,\n    };\n  }\n\n  get commonAccounts(): Pick<\n    QuarryStakeAccounts,\n    \"pool\" | \"tokenProgram\" | \"mineProgram\"\n  > {\n    return {\n      pool: this.key,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      mineProgram: this.mergeMine.programs.Mine.programId,\n    };\n  }\n}\n"]}