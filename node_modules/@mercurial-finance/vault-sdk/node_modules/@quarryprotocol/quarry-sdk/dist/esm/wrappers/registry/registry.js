import { __awaiter } from "tslib";
import { TransactionEnvelope } from "@saberhq/solana-contrib";
import { SystemProgram } from "@solana/web3.js";
import { findQuarryAddress } from "../mine";
import { findRegistryAddress } from "./pda";
export class QuarryRegistry {
    constructor(sdk) {
        this.sdk = sdk;
        this.program = sdk.programs.Registry;
    }
    get provider() {
        return this.sdk.provider;
    }
    /**
     * Creates a new Registry.
     * @returns
     */
    newRegistry({ numQuarries, rewarderKey, payer = this.provider.wallet.publicKey, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const [registry, bump] = yield findRegistryAddress(rewarderKey, this.program.programId);
            const createRegistryTX = new TransactionEnvelope(this.provider, [
                this.program.instruction.newRegistry(numQuarries, bump, {
                    accounts: {
                        rewarder: rewarderKey,
                        registry,
                        payer,
                        systemProgram: SystemProgram.programId,
                    },
                }),
            ]);
            return {
                tx: createRegistryTX,
                registry,
            };
        });
    }
    syncQuarry({ tokenMint, rewarderKey, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const [registry] = yield findRegistryAddress(rewarderKey, this.program.programId);
            const [quarry] = yield findQuarryAddress(rewarderKey, tokenMint, this.sdk.programs.Mine.programId);
            return new TransactionEnvelope(this.provider, [
                this.program.instruction.syncQuarry({
                    accounts: { quarry, registry },
                }),
            ]);
        });
    }
}
//# sourceMappingURL=registry.js.map