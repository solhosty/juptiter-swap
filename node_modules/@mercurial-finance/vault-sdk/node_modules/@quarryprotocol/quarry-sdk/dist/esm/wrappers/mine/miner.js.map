{"version":3,"file":"miner.js","sourceRoot":"","sources":["../../../../src/wrappers/mine/miner.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Provider } from \"@saberhq/solana-contrib\";\nimport { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport type { TokenAmount } from \"@saberhq/token-utils\";\nimport { getOrCreateATA, TOKEN_PROGRAM_ID } from \"@saberhq/token-utils\";\nimport type { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { SystemProgram } from \"@solana/web3.js\";\n\nimport type { MineProgram, MinerData } from \"../../programs/mine\";\nimport type { QuarrySDK } from \"../../sdk\";\nimport { findMinterAddress } from \"../mintWrapper/pda\";\nimport type { QuarryWrapper } from \"./quarry\";\nimport type { PendingMiner } from \"./types\";\n\ntype MineUserStakeAccounts = Parameters<\n  MineProgram[\"instruction\"][\"stakeTokens\"][\"accounts\"]\n>[0];\n\ntype MineUserClaimAccounts = Parameters<\n  MineProgram[\"instruction\"][\"claimRewards\"][\"accounts\"]\n>[0][\"claim\"];\n\nexport class MinerWrapper {\n  /**\n   *\n   * @param quarry\n   * @param authority\n   * @param minerKey\n   * @param tokenVaultKey (associated w/ minerKey)\n   * @param stakedTokenATA Staked token ATA (associated w/ authority)\n   */\n  constructor(\n    readonly quarry: QuarryWrapper,\n    readonly authority: PublicKey,\n    readonly minerKey: PublicKey,\n    readonly tokenVaultKey: PublicKey,\n    readonly stakedTokenATA: PublicKey\n  ) {}\n\n  /**\n   * The program.\n   */\n  get program(): MineProgram {\n    return this.quarry.program;\n  }\n\n  /**\n   * The provider.\n   */\n  get provider(): Provider {\n    return this.quarry.provider;\n  }\n\n  /**\n   * The mining SDK.\n   */\n  get sdk(): QuarrySDK {\n    return this.quarry.sdk;\n  }\n\n  /**\n   * Creates the miner of the provided wallet.\n   */\n  initialize(): PendingMiner {\n    const instruction = this.program.instruction.createMinerV2({\n      accounts: {\n        authority: this.authority,\n        miner: this.minerKey,\n        quarry: this.quarry.key,\n        systemProgram: SystemProgram.programId,\n        payer: this.provider.wallet.publicKey,\n        minerVault: this.tokenVaultKey,\n        rewarder: this.quarry.quarryData.rewarder,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        tokenMint: this.quarry.token.mintAccount,\n      },\n    });\n    return {\n      miner: this.minerKey,\n      wrapper: this,\n      tx: new TransactionEnvelope(this.provider, [instruction]),\n    };\n  }\n\n  /**\n   * Generates stake accounts for the user.\n   * @returns\n   */\n  get userStakeAccounts(): MineUserStakeAccounts {\n    const minerVault = this.tokenVaultKey;\n    return {\n      ...this.userClaimAccounts,\n      tokenAccount: this.stakedTokenATA,\n      minerVault,\n    };\n  }\n\n  /**\n   * Generates stake accounts for the user.\n   * @returns\n   */\n  get userClaimAccounts(): MineUserClaimAccounts {\n    const authority = this.authority;\n    const miner = this.minerKey;\n    return {\n      authority,\n      miner,\n      quarry: this.quarry.key,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      rewarder: this.quarry.quarryData.rewarder,\n\n      // dummies for backwards compatibility\n      unusedMinerVault: TOKEN_PROGRAM_ID,\n      unusedTokenAccount: TOKEN_PROGRAM_ID,\n    };\n  }\n\n  private _performStakeAction(\n    amount: TokenAmount,\n    action: \"stakeTokens\" | \"withdrawTokens\"\n  ): TransactionEnvelope {\n    const instruction = this.program.instruction[action](amount.toU64(), {\n      accounts: this.userStakeAccounts,\n    });\n    return new TransactionEnvelope(this.provider, [instruction]);\n  }\n\n  private async _getOrCreateStakedAssociatedTokenAccountInternal() {\n    return await getOrCreateATA({\n      provider: this.provider,\n      mint: this.quarry.token.mintAccount,\n      owner: this.authority,\n    });\n  }\n\n  /**\n   * Creates the ATA of the user's staked token if it doesn't exist.\n   */\n  async createATAIfNotExists(): Promise<TransactionEnvelope | null> {\n    const { instruction } =\n      await this._getOrCreateStakedAssociatedTokenAccountInternal();\n    if (!instruction) {\n      return null;\n    }\n    return new TransactionEnvelope(this.provider, [instruction]);\n  }\n\n  /**\n   * Stakes the current wallet's tokens into the pool.\n   * @param amount\n   * @returns\n   */\n  stake(amount: TokenAmount): TransactionEnvelope {\n    return this._performStakeAction(amount, \"stakeTokens\");\n  }\n\n  /**\n   * Withdraws the current wallet's tokens from the pool.\n   * @param amount\n   * @returns\n   */\n  withdraw(amount: TokenAmount): TransactionEnvelope {\n    return this._performStakeAction(amount, \"withdrawTokens\");\n  }\n\n  /**\n   * Fetches the data associated with the miner.\n   * @returns\n   */\n  async fetchData(): Promise<MinerData> {\n    return await this.program.account.miner.fetch(this.minerKey);\n  }\n\n  /**\n   * Claims an amount of tokens.\n   * @returns\n   */\n  async claimV1(): Promise<TransactionEnvelope> {\n    const instructions: TransactionInstruction[] = [];\n    const { address: rewardsTokenAccount, instruction: ataInstruction } =\n      await getOrCreateATA({\n        provider: this.provider,\n        mint: this.quarry.rewarderData.rewardsTokenMint,\n        owner: this.authority,\n      });\n    if (ataInstruction) {\n      instructions.push(ataInstruction);\n    }\n\n    const [minter] = await findMinterAddress(\n      this.quarry.rewarderData.mintWrapper,\n      this.quarry.quarryData.rewarder,\n      this.sdk.mintWrapper.program.programId\n    );\n\n    const ix = this.quarry.program.instruction.claimRewards({\n      accounts: {\n        mintWrapper: this.quarry.rewarderData.mintWrapper,\n        minter,\n        rewardsTokenMint: this.quarry.rewarderData.rewardsTokenMint,\n        rewardsTokenAccount,\n        claim: this.userClaimAccounts,\n        mintWrapperProgram: this.sdk.programs.MintWrapper.programId,\n        claimFeeTokenAccount: this.quarry.rewarderData.claimFeeTokenAccount,\n      },\n    });\n    instructions.push(ix);\n\n    return this.sdk.newTx(instructions);\n  }\n\n  /**\n   * Claims an amount of tokens.\n   * @returns\n   */\n  async claim(): Promise<TransactionEnvelope> {\n    const instructions: TransactionInstruction[] = [];\n    const { address: rewardsTokenAccount, instruction: ataInstruction } =\n      await getOrCreateATA({\n        provider: this.provider,\n        mint: this.quarry.rewarderData.rewardsTokenMint,\n        owner: this.authority,\n      });\n    if (ataInstruction) {\n      instructions.push(ataInstruction);\n    }\n\n    const [minter] = await findMinterAddress(\n      this.quarry.rewarderData.mintWrapper,\n      this.quarry.quarryData.rewarder,\n      this.sdk.mintWrapper.program.programId\n    );\n\n    const ix = this.quarry.program.instruction.claimRewardsV2({\n      accounts: {\n        mintWrapper: this.quarry.rewarderData.mintWrapper,\n        minter,\n        rewardsTokenMint: this.quarry.rewarderData.rewardsTokenMint,\n        rewardsTokenAccount,\n        claim: this.userClaimAccounts,\n        mintWrapperProgram: this.sdk.programs.MintWrapper.programId,\n        claimFeeTokenAccount: this.quarry.rewarderData.claimFeeTokenAccount,\n      },\n    });\n    instructions.push(ix);\n\n    return this.sdk.newTx(instructions);\n  }\n}\n"]}