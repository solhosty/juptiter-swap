import { __awaiter } from "tslib";
import { newProgramMap } from "@saberhq/anchor-contrib";
import { SolanaAugmentedProvider } from "@saberhq/solana-contrib";
import { Keypair } from "@solana/web3.js";
import { QUARRY_ADDRESSES, QUARRY_IDLS } from "./constants";
import { MergeMine, MineWrapper, MintWrapper, QuarryRegistry, } from "./wrappers";
import { Operator } from "./wrappers/operator";
import { RedeemerWrapper } from "./wrappers/redeemer";
/**
 * Quarry SDK.
 */
export class QuarrySDK {
    constructor(provider, programs) {
        this.provider = provider;
        this.programs = programs;
    }
    /**
     * Creates a new instance of the SDK with the given keypair.
     */
    withSigner(signer) {
        return QuarrySDK.load({
            provider: this.provider.withSigner(signer),
        });
    }
    get programList() {
        return Object.values(this.programs);
    }
    get mintWrapper() {
        return new MintWrapper(this);
    }
    get mine() {
        return new MineWrapper(this);
    }
    get registry() {
        return new QuarryRegistry(this);
    }
    get mergeMine() {
        return new MergeMine(this);
    }
    /**
     * Constructs a new transaction envelope.
     * @param instructions
     * @param signers
     * @returns
     */
    newTx(instructions, signers) {
        return this.provider.newTX(instructions, signers);
    }
    /**
     * Loads the SDK.
     * @returns
     */
    static load({ provider, addresses = QUARRY_ADDRESSES, }) {
        const allAddresses = Object.assign(Object.assign({}, QUARRY_ADDRESSES), addresses);
        const programs = newProgramMap(provider, QUARRY_IDLS, allAddresses);
        return new QuarrySDK(new SolanaAugmentedProvider(provider), programs);
    }
    loadRedeemer({ iouMint, redemptionMint, }) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield RedeemerWrapper.load({ iouMint, redemptionMint, sdk: this });
        });
    }
    createRedeemer({ iouMint, redemptionMint, }) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield RedeemerWrapper.createRedeemer({
                iouMint,
                redemptionMint,
                sdk: this,
            });
        });
    }
    /**
     * Loads an operator.
     * @param key
     * @returns
     */
    loadOperator(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield Operator.load({
                sdk: this,
                key,
            });
        });
    }
    /**
     * Creates an Operator.
     * @returns
     */
    createOperator({ rewarder, baseKP = Keypair.generate(), admin = this.provider.wallet.publicKey, payer = this.provider.wallet.publicKey, }) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield Operator.createOperator({
                sdk: this,
                rewarder,
                baseKP,
                admin,
                payer,
            });
        });
    }
}
//# sourceMappingURL=sdk.js.map