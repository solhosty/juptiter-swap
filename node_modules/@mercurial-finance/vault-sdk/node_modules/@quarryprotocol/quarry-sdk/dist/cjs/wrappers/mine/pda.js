"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findMinerAddress = exports.findQuarryAddress = exports.findRewarderAddress = void 0;
const tslib_1 = require("tslib");
const anchor_1 = require("@project-serum/anchor");
const web3_js_1 = require("@solana/web3.js");
const constants_1 = require("../../constants");
const findRewarderAddress = (base, programID = constants_1.QUARRY_ADDRESSES.Mine) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    return yield web3_js_1.PublicKey.findProgramAddress([Buffer.from(anchor_1.utils.bytes.utf8.encode("Rewarder")), base.toBytes()], programID);
});
exports.findRewarderAddress = findRewarderAddress;
const findQuarryAddress = (rewarder, tokenMint, programID = constants_1.QUARRY_ADDRESSES.Mine) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    return yield web3_js_1.PublicKey.findProgramAddress([
        Buffer.from(anchor_1.utils.bytes.utf8.encode("Quarry")),
        rewarder.toBytes(),
        tokenMint.toBytes(),
    ], programID);
});
exports.findQuarryAddress = findQuarryAddress;
const findMinerAddress = (quarry, authority, programID = constants_1.QUARRY_ADDRESSES.Mine) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    return yield web3_js_1.PublicKey.findProgramAddress([
        Buffer.from(anchor_1.utils.bytes.utf8.encode("Miner")),
        quarry.toBytes(),
        authority.toBytes(),
    ], programID);
});
exports.findMinerAddress = findMinerAddress;
//# sourceMappingURL=pda.js.map