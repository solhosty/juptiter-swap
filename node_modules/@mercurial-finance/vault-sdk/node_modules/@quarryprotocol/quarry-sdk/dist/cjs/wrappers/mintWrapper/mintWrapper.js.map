{"version":3,"file":"mintWrapper.js","sourceRoot":"","sources":["../../../../src/wrappers/mintWrapper/mintWrapper.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AugmentedProvider,\n  TransactionEnvelope,\n} from \"@saberhq/solana-contrib\";\nimport type { TokenAmount, u64 } from \"@saberhq/token-utils\";\nimport {\n  createInitMintInstructions,\n  getOrCreateATA,\n  TOKEN_PROGRAM_ID,\n} from \"@saberhq/token-utils\";\nimport type { AccountInfo, PublicKey, Signer } from \"@solana/web3.js\";\nimport { Keypair, SystemProgram } from \"@solana/web3.js\";\n\nimport type {\n  MinterData,\n  MintWrapperData,\n  MintWrapperProgram,\n} from \"../../programs/mintWrapper\";\nimport type { QuarrySDK } from \"../../sdk\";\nimport { findMinterAddress, findMintWrapperAddress } from \"./pda\";\nimport type { PendingMintAndWrapper, PendingMintWrapper } from \"./types\";\n\nexport class MintWrapper {\n  readonly program: MintWrapperProgram;\n\n  constructor(readonly sdk: QuarrySDK) {\n    this.program = sdk.programs.MintWrapper;\n  }\n\n  get provider(): AugmentedProvider {\n    return this.sdk.provider;\n  }\n\n  async newWrapperAndMintV1({\n    mintKP = Keypair.generate(),\n    decimals = 6,\n    ...newWrapperArgs\n  }: {\n    mintKP?: Signer;\n    decimals?: number;\n\n    hardcap: u64;\n    baseKP?: Signer;\n    tokenProgram?: PublicKey;\n    admin?: PublicKey;\n    payer?: PublicKey;\n  }): Promise<PendingMintAndWrapper> {\n    const provider = this.provider;\n    const { mintWrapper, tx: initMintProxyTX } = await this.newWrapperV1({\n      ...newWrapperArgs,\n      tokenMint: mintKP.publicKey,\n    });\n    const initMintTX = await createInitMintInstructions({\n      provider,\n      mintAuthority: mintWrapper,\n      freezeAuthority: mintWrapper,\n      mintKP,\n      decimals,\n    });\n    return {\n      mintWrapper,\n      mint: mintKP.publicKey,\n      tx: initMintTX.combine(initMintProxyTX),\n    };\n  }\n\n  async newWrapperV1({\n    hardcap,\n    tokenMint,\n    baseKP = Keypair.generate(),\n    tokenProgram = TOKEN_PROGRAM_ID,\n    admin = this.provider.wallet.publicKey,\n    payer = this.provider.wallet.publicKey,\n  }: {\n    hardcap: u64;\n    tokenMint: PublicKey;\n    baseKP?: Signer;\n    tokenProgram?: PublicKey;\n    admin?: PublicKey;\n    payer?: PublicKey;\n  }): Promise<PendingMintWrapper> {\n    const [mintWrapper, bump] = await findMintWrapperAddress(\n      baseKP.publicKey,\n      this.program.programId\n    );\n    return {\n      mintWrapper,\n      tx: this.provider.newTX(\n        [\n          this.program.instruction.newWrapper(bump, hardcap, {\n            accounts: {\n              base: baseKP.publicKey,\n              mintWrapper,\n              admin,\n              tokenMint,\n              tokenProgram,\n              payer,\n              systemProgram: SystemProgram.programId,\n            },\n          }),\n        ],\n        [baseKP]\n      ),\n    };\n  }\n\n  async newWrapper({\n    hardcap,\n    tokenMint,\n    baseKP = Keypair.generate(),\n    tokenProgram = TOKEN_PROGRAM_ID,\n    admin = this.provider.wallet.publicKey,\n    payer = this.provider.wallet.publicKey,\n  }: {\n    hardcap: u64;\n    tokenMint: PublicKey;\n    baseKP?: Signer;\n    tokenProgram?: PublicKey;\n    admin?: PublicKey;\n    payer?: PublicKey;\n  }): Promise<PendingMintWrapper> {\n    const [mintWrapper] = await findMintWrapperAddress(\n      baseKP.publicKey,\n      this.program.programId\n    );\n    return {\n      mintWrapper,\n      tx: this.provider.newTX(\n        [\n          this.program.instruction.newWrapperV2(hardcap, {\n            accounts: {\n              base: baseKP.publicKey,\n              mintWrapper,\n              admin,\n              tokenMint,\n              tokenProgram,\n              payer,\n              systemProgram: SystemProgram.programId,\n            },\n          }),\n        ],\n        [baseKP]\n      ),\n    };\n  }\n\n  async newWrapperAndMint({\n    mintKP = Keypair.generate(),\n    decimals = 6,\n    ...newWrapperArgs\n  }: {\n    mintKP?: Signer;\n    decimals?: number;\n\n    hardcap: u64;\n    baseKP?: Signer;\n    tokenProgram?: PublicKey;\n    admin?: PublicKey;\n    payer?: PublicKey;\n  }): Promise<PendingMintAndWrapper> {\n    const provider = this.provider;\n    const { mintWrapper, tx: initMintProxyTX } = await this.newWrapper({\n      ...newWrapperArgs,\n      tokenMint: mintKP.publicKey,\n    });\n    const initMintTX = await createInitMintInstructions({\n      provider,\n      mintAuthority: mintWrapper,\n      freezeAuthority: mintWrapper,\n      mintKP,\n      decimals,\n    });\n    return {\n      mintWrapper,\n      mint: mintKP.publicKey,\n      tx: initMintTX.combine(initMintProxyTX),\n    };\n  }\n\n  /**\n   * Fetches info on a Mint Wrapper.\n   * @param minter\n   * @returns\n   */\n  async fetchMintWrapper(wrapper: PublicKey): Promise<MintWrapperData | null> {\n    const accountInfo = await this.provider.connection.getAccountInfo(wrapper);\n    if (!accountInfo) {\n      return null;\n    }\n    return this.program.coder.accounts.decode<MintWrapperData>(\n      \"MintWrapper\",\n      accountInfo.data\n    );\n  }\n\n  /**\n   * Fetches info on a minter.\n   * @param minter\n   * @returns\n   */\n  async fetchMinter(\n    wrapper: PublicKey,\n    authority: PublicKey\n  ): Promise<MinterData | null> {\n    const [minterAddress] = await findMinterAddress(\n      wrapper,\n      authority,\n      this.program.programId\n    );\n    const accountInfo = await this.provider.connection.getAccountInfo(\n      minterAddress\n    );\n    if (!accountInfo) {\n      return null;\n    }\n    return this.program.coder.accounts.decode<MinterData>(\n      \"Minter\",\n      accountInfo.data\n    );\n  }\n\n  async newMinterV1(\n    wrapper: PublicKey,\n    authority: PublicKey\n  ): Promise<TransactionEnvelope> {\n    const [minter, bump] = await findMinterAddress(\n      wrapper,\n      authority,\n      this.program.programId\n    );\n    return this.provider.newTX([\n      this.program.instruction.newMinter(bump, {\n        accounts: {\n          auth: {\n            mintWrapper: wrapper,\n            admin: this.provider.wallet.publicKey,\n          },\n          newMinterAuthority: authority,\n          minter,\n          payer: this.provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n      }),\n    ]);\n  }\n\n  async newMinter(\n    wrapper: PublicKey,\n    authority: PublicKey\n  ): Promise<TransactionEnvelope> {\n    const [minter] = await findMinterAddress(\n      wrapper,\n      authority,\n      this.program.programId\n    );\n    return this.provider.newTX([\n      this.program.instruction.newMinterV2({\n        accounts: {\n          auth: {\n            mintWrapper: wrapper,\n            admin: this.provider.wallet.publicKey,\n          },\n          newMinterAuthority: authority,\n          minter,\n          payer: this.provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Updates a minter's allowance.\n   * @param minter\n   * @param allowance\n   * @returns\n   */\n  async minterUpdate(\n    wrapper: PublicKey,\n    authority: PublicKey,\n    allowance: u64\n  ): Promise<TransactionEnvelope> {\n    const [minter] = await findMinterAddress(\n      wrapper,\n      authority,\n      this.program.programId\n    );\n    return this.provider.newTX([\n      this.program.instruction.minterUpdate(allowance, {\n        accounts: {\n          auth: {\n            mintWrapper: wrapper,\n            admin: this.provider.wallet.publicKey,\n          },\n          minter,\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Creates a new Minter with an allowance.\n   * @param wrapper\n   * @param authority\n   * @param allowance\n   * @returns\n   */\n  async newMinterWithAllowance(\n    wrapper: PublicKey,\n    authority: PublicKey,\n    allowance: u64\n  ): Promise<TransactionEnvelope> {\n    const newMinter = await this.newMinter(wrapper, authority);\n    const updateAllowance = await this.minterUpdate(\n      wrapper,\n      authority,\n      allowance\n    );\n    return newMinter.combine(updateAllowance);\n  }\n\n  transferAdmin(wrapper: PublicKey, nextAdmin: PublicKey): TransactionEnvelope {\n    return this.provider.newTX([\n      this.program.instruction.transferAdmin({\n        accounts: {\n          mintWrapper: wrapper,\n          admin: this.provider.wallet.publicKey,\n          nextAdmin,\n        },\n      }),\n    ]);\n  }\n\n  acceptAdmin(wrapper: PublicKey): TransactionEnvelope {\n    return this.provider.newTX([\n      this.program.instruction.acceptAdmin({\n        accounts: {\n          mintWrapper: wrapper,\n          pendingAdmin: this.provider.wallet.publicKey,\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Mints tokens to an address as a Minter on the Mint Wrapper.\n   */\n  async performMintTo({\n    amount,\n    mintWrapper,\n    minterAuthority = this.provider.wallet.publicKey,\n    destOwner = this.provider.wallet.publicKey,\n  }: {\n    amount: TokenAmount;\n    mintWrapper: PublicKey;\n    minterAuthority?: PublicKey;\n    destOwner?: PublicKey;\n  }): Promise<TransactionEnvelope> {\n    const ata = await getOrCreateATA({\n      provider: this.provider,\n      mint: amount.token.mintAccount,\n      owner: destOwner,\n    });\n    const [minter] = await findMinterAddress(mintWrapper, minterAuthority);\n    return this.sdk.provider.newTX([\n      ata.instruction,\n      this.program.instruction.performMint(amount.toU64(), {\n        accounts: {\n          mintWrapper,\n          minterAuthority,\n          tokenMint: amount.token.mintAccount,\n          destination: ata.address,\n          minter,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Performs a mint of tokens to an account.\n   * @returns\n   */\n  async performMint({\n    amount,\n    minter,\n  }: {\n    amount: TokenAmount;\n    minter: {\n      accountId: PublicKey;\n      accountInfo: AccountInfo<MinterData>;\n    };\n  }): Promise<TransactionEnvelope> {\n    const minterData = minter.accountInfo.data;\n    const ata = await getOrCreateATA({\n      provider: this.provider,\n      mint: amount.token.mintAccount,\n      owner: this.provider.wallet.publicKey,\n    });\n    return this.provider.newTX([\n      ata.instruction,\n      this.program.instruction.performMint(amount.toU64(), {\n        accounts: {\n          mintWrapper: minterData.mintWrapper,\n          minterAuthority: minterData.minterAuthority,\n          tokenMint: amount.token.mintAccount,\n          destination: ata.address,\n          minter: minter.accountId,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n      }),\n    ]);\n  }\n}\n"]}