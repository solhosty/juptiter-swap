"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Payroll = exports.SECONDS_PER_YEAR = exports.MAX_U64_BN = exports.BASE_TEN = exports.ZERO = void 0;
const tslib_1 = require("tslib");
const token_utils_1 = require("@saberhq/token-utils");
const bn_js_1 = tslib_1.__importDefault(require("bn.js"));
exports.ZERO = new bn_js_1.default(0);
exports.BASE_TEN = new bn_js_1.default(10);
exports.MAX_U64_BN = new bn_js_1.default(token_utils_1.MAX_U64.toString());
exports.SECONDS_PER_YEAR = new bn_js_1.default(365 * 86400);
class Payroll {
    constructor(famineTs, lastCheckpointTs, annualRewardsRate, rewardsPerTokenStored, totalTokensDeposited) {
        this.famineTs = famineTs;
        this.lastCheckpointTs = lastCheckpointTs;
        this.annualRewardsRate = annualRewardsRate;
        this.rewardsPerTokenStored = rewardsPerTokenStored;
        this.totalTokensDeposited = totalTokensDeposited;
    }
    /**
     * Calculates the amount of tokens that this user can receive.
     * @param currentTs
     * @returns
     */
    calculateRewardPerToken(currentTs) {
        if (this.totalTokensDeposited.isZero()) {
            return this.rewardsPerTokenStored;
        }
        const lastTimeRewardsApplicable = bn_js_1.default.min(currentTs, this.famineTs);
        const timeWorked = bn_js_1.default.max(exports.ZERO, lastTimeRewardsApplicable.sub(this.lastCheckpointTs));
        const reward = timeWorked
            .mul(exports.MAX_U64_BN)
            .mul(this.annualRewardsRate)
            .div(exports.SECONDS_PER_YEAR)
            .div(this.totalTokensDeposited);
        return this.rewardsPerTokenStored.add(reward);
    }
    /**
     * Calculates the amount of tokens that this user can claim.
     * @param currentTs
     * @param tokensDeposited
     * @param rewardsPerTokenPaid
     * @param rewardsEarned
     * @returns
     */
    calculateRewardsEarned(currentTs, tokensDeposited, rewardsPerTokenPaid, rewardsEarned) {
        const netNewRewards = this.calculateRewardPerToken(currentTs).sub(rewardsPerTokenPaid);
        const earnedRewards = tokensDeposited.mul(netNewRewards).div(exports.MAX_U64_BN);
        return earnedRewards.add(rewardsEarned);
    }
}
exports.Payroll = Payroll;
//# sourceMappingURL=payroll.js.map