"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuarryRegistry = void 0;
const tslib_1 = require("tslib");
const solana_contrib_1 = require("@saberhq/solana-contrib");
const web3_js_1 = require("@solana/web3.js");
const mine_1 = require("../mine");
const pda_1 = require("./pda");
class QuarryRegistry {
    constructor(sdk) {
        this.sdk = sdk;
        this.program = sdk.programs.Registry;
    }
    get provider() {
        return this.sdk.provider;
    }
    /**
     * Creates a new Registry.
     * @returns
     */
    newRegistry({ numQuarries, rewarderKey, payer = this.provider.wallet.publicKey, }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [registry, bump] = yield (0, pda_1.findRegistryAddress)(rewarderKey, this.program.programId);
            const createRegistryTX = new solana_contrib_1.TransactionEnvelope(this.provider, [
                this.program.instruction.newRegistry(numQuarries, bump, {
                    accounts: {
                        rewarder: rewarderKey,
                        registry,
                        payer,
                        systemProgram: web3_js_1.SystemProgram.programId,
                    },
                }),
            ]);
            return {
                tx: createRegistryTX,
                registry,
            };
        });
    }
    syncQuarry({ tokenMint, rewarderKey, }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [registry] = yield (0, pda_1.findRegistryAddress)(rewarderKey, this.program.programId);
            const [quarry] = yield (0, mine_1.findQuarryAddress)(rewarderKey, tokenMint, this.sdk.programs.Mine.programId);
            return new solana_contrib_1.TransactionEnvelope(this.provider, [
                this.program.instruction.syncQuarry({
                    accounts: { quarry, registry },
                }),
            ]);
        });
    }
}
exports.QuarryRegistry = QuarryRegistry;
//# sourceMappingURL=registry.js.map