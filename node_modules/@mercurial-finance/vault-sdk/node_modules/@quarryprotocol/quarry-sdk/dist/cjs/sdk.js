"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuarrySDK = void 0;
const tslib_1 = require("tslib");
const anchor_contrib_1 = require("@saberhq/anchor-contrib");
const solana_contrib_1 = require("@saberhq/solana-contrib");
const web3_js_1 = require("@solana/web3.js");
const constants_1 = require("./constants");
const wrappers_1 = require("./wrappers");
const operator_1 = require("./wrappers/operator");
const redeemer_1 = require("./wrappers/redeemer");
/**
 * Quarry SDK.
 */
class QuarrySDK {
    constructor(provider, programs) {
        this.provider = provider;
        this.programs = programs;
    }
    /**
     * Creates a new instance of the SDK with the given keypair.
     */
    withSigner(signer) {
        return QuarrySDK.load({
            provider: this.provider.withSigner(signer),
        });
    }
    get programList() {
        return Object.values(this.programs);
    }
    get mintWrapper() {
        return new wrappers_1.MintWrapper(this);
    }
    get mine() {
        return new wrappers_1.MineWrapper(this);
    }
    get registry() {
        return new wrappers_1.QuarryRegistry(this);
    }
    get mergeMine() {
        return new wrappers_1.MergeMine(this);
    }
    /**
     * Constructs a new transaction envelope.
     * @param instructions
     * @param signers
     * @returns
     */
    newTx(instructions, signers) {
        return this.provider.newTX(instructions, signers);
    }
    /**
     * Loads the SDK.
     * @returns
     */
    static load({ provider, addresses = constants_1.QUARRY_ADDRESSES, }) {
        const allAddresses = Object.assign(Object.assign({}, constants_1.QUARRY_ADDRESSES), addresses);
        const programs = (0, anchor_contrib_1.newProgramMap)(provider, constants_1.QUARRY_IDLS, allAddresses);
        return new QuarrySDK(new solana_contrib_1.SolanaAugmentedProvider(provider), programs);
    }
    loadRedeemer({ iouMint, redemptionMint, }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield redeemer_1.RedeemerWrapper.load({ iouMint, redemptionMint, sdk: this });
        });
    }
    createRedeemer({ iouMint, redemptionMint, }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield redeemer_1.RedeemerWrapper.createRedeemer({
                iouMint,
                redemptionMint,
                sdk: this,
            });
        });
    }
    /**
     * Loads an operator.
     * @param key
     * @returns
     */
    loadOperator(key) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield operator_1.Operator.load({
                sdk: this,
                key,
            });
        });
    }
    /**
     * Creates an Operator.
     * @returns
     */
    createOperator({ rewarder, baseKP = web3_js_1.Keypair.generate(), admin = this.provider.wallet.publicKey, payer = this.provider.wallet.publicKey, }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield operator_1.Operator.createOperator({
                sdk: this,
                rewarder,
                baseKP,
                admin,
                payer,
            });
        });
    }
}
exports.QuarrySDK = QuarrySDK;
//# sourceMappingURL=sdk.js.map