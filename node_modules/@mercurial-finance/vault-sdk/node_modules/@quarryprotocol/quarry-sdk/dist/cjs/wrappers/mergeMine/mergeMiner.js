"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MergeMiner = void 0;
const tslib_1 = require("tslib");
const solana_contrib_1 = require("@saberhq/solana-contrib");
const token_utils_1 = require("@saberhq/token-utils");
const web3_js_1 = require("@solana/web3.js");
const __1 = require("../..");
const __2 = require("..");
class MergeMiner {
    constructor(mergeMine, pool, mm) {
        this.mergeMine = mergeMine;
        this.pool = pool;
        this.mm = mm;
    }
    get provider() {
        return this.mergeMine.provider;
    }
    get program() {
        return this.mergeMine.programs.MergeMine;
    }
    get primaryMint() {
        return this.pool.data.primaryMint;
    }
    get replicaMint() {
        return this.pool.data.replicaMint;
    }
    /**
     * Deposit primary tokens into the merge miner.
     * @param amount
     * @returns
     */
    deposit({ amount, rewarder, }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const owner = this.provider.wallet.publicKey;
            const { address: ata, instruction } = yield (0, token_utils_1.getOrCreateATA)({
                provider: this.provider,
                mint: this.primaryMint,
                owner,
            });
            if (instruction) {
                throw new Error("User has no tokens to deposit");
            }
            const mmPrimaryTokenAccount = yield (0, token_utils_1.getATAAddress)({
                mint: this.primaryMint,
                owner: this.mm.key,
            });
            return new solana_contrib_1.TransactionEnvelope(this.provider, [
                token_utils_1.SPLToken.createTransferInstruction(token_utils_1.TOKEN_PROGRAM_ID, ata, mmPrimaryTokenAccount, owner, [], amount.toU64()),
            ]).combine(yield this.stakePrimaryMiner(rewarder));
        });
    }
    /**
     * Deposits tokens into the primary quarry.
     * (Not recommended-- you probably want {@link MergeMiner#deposit}.)
     * @returns
     */
    stakePrimaryMiner(rewarder) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const stake = yield this.getPrimaryStakeAccounts(rewarder);
            const mmPrimaryTokenAccount = yield (0, token_utils_1.getATAAddress)({
                mint: this.primaryMint,
                owner: this.mm.key,
            });
            return new solana_contrib_1.TransactionEnvelope(this.provider, [
                this.program.instruction.stakePrimaryMiner({
                    accounts: {
                        mmOwner: this.provider.wallet.publicKey,
                        mmPrimaryTokenAccount,
                        stake,
                    },
                }),
            ]);
        });
    }
    /**
     * Stakes replica tokens into a miner.
     * @returns
     */
    stakeReplicaMiner(rewarder) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const stake = yield this.getReplicaStakeAccounts(rewarder);
            const [quarry] = yield (0, __2.findQuarryAddress)(rewarder, this.replicaMint);
            const [miner] = yield (0, __2.findMinerAddress)(quarry, this.mm.key);
            const mmReplicaMintTokenAccount = yield (0, token_utils_1.getOrCreateATA)({
                provider: this.provider,
                mint: this.replicaMint,
                owner: this.mm.key,
            });
            const txEnv = new solana_contrib_1.TransactionEnvelope(this.provider, [
                this.program.instruction.stakeReplicaMiner({
                    accounts: {
                        mmOwner: this.provider.wallet.publicKey,
                        replicaMint: this.replicaMint,
                        replicaMintTokenAccount: mmReplicaMintTokenAccount.address,
                        stake,
                    },
                }),
            ]);
            if (mmReplicaMintTokenAccount.instruction) {
                txEnv.instructions.unshift(mmReplicaMintTokenAccount.instruction);
            }
            // initialize the miner if it does not exist
            if (!(yield this.provider.getAccountInfo(miner))) {
                const minerReplicaMintTokenAccount = yield (0, token_utils_1.getOrCreateATA)({
                    provider: this.provider,
                    mint: this.replicaMint,
                    owner: miner,
                });
                txEnv.instructions.unshift(this.program.instruction.initMinerV2({
                    accounts: {
                        pool: this.pool.key,
                        mm: this.mm.key,
                        miner,
                        quarry,
                        rewarder,
                        tokenMint: this.replicaMint,
                        minerVault: minerReplicaMintTokenAccount.address,
                        payer: this.provider.wallet.publicKey,
                        mineProgram: __1.QUARRY_ADDRESSES.Mine,
                        systemProgram: web3_js_1.SystemProgram.programId,
                        tokenProgram: token_utils_1.TOKEN_PROGRAM_ID,
                    },
                }));
                if (minerReplicaMintTokenAccount.instruction) {
                    txEnv.instructions.unshift(minerReplicaMintTokenAccount.instruction);
                }
            }
            else {
                console.log("HERE");
            }
            return txEnv;
        });
    }
    /**
     * Withdraw staked tokens from a merge miner.
     * @param amount
     * @returns
     */
    withdraw({ amount, rewarder, }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const withdrawPrimary = yield this.unstakePrimaryMiner(rewarder, amount);
            const withdrawPrimaryFromMM = yield this.withdrawTokens(amount.token.mintAccount);
            return solana_contrib_1.TransactionEnvelope.combineAll(withdrawPrimary, withdrawPrimaryFromMM);
        });
    }
    /**
     * Unstakes all replica tokens from a quarry.
     * You must call this function for each replica miner before unstaking the primary.
     * @returns
     */
    unstakeAllReplica(rewarder) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const stake = yield this.getReplicaStakeAccounts(rewarder);
            const replicaMintTokenAccount = yield (0, token_utils_1.getATAAddress)({
                mint: this.replicaMint,
                owner: this.mm.key,
            });
            return new solana_contrib_1.TransactionEnvelope(this.provider, [
                this.program.instruction.unstakeAllReplicaMiner({
                    accounts: {
                        mmOwner: this.provider.wallet.publicKey,
                        replicaMint: this.replicaMint,
                        replicaMintTokenAccount,
                        stake,
                    },
                }),
            ]);
        });
    }
    /**
     * Withdraws primary tokens from the quarry.
     * (Not recommended-- you probably want {@link MergeMiner#withdraw}.)
     * @returns
     */
    unstakePrimaryMiner(rewarder, amount) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const stake = yield this.getPrimaryStakeAccounts(rewarder);
            const mmPrimaryTokenAccount = yield (0, token_utils_1.getATAAddress)({
                mint: this.primaryMint,
                owner: this.mm.key,
            });
            return new solana_contrib_1.TransactionEnvelope(this.provider, [
                this.program.instruction.unstakePrimaryMiner(amount.toU64(), {
                    accounts: {
                        mmOwner: this.provider.wallet.publicKey,
                        mmPrimaryTokenAccount,
                        stake,
                    },
                }),
            ]);
        });
    }
    /**
     * Withdraws unstaked primary tokens from the merge miner.
     * (Not recommended-- you probably want {@link MergeMiner#withdraw}.)
     * @returns
     */
    withdrawPrimaryFromMM() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const owner = this.provider.wallet.publicKey;
            const mmPrimaryAccount = yield (0, token_utils_1.getATAAddress)({
                mint: this.primaryMint,
                owner: this.mm.key,
            });
            const ownerPrimaryATA = yield (0, token_utils_1.getOrCreateATA)({
                provider: this.provider,
                mint: this.primaryMint,
                owner,
            });
            const withdrawPrimaryFromMMIx = this.program.instruction.withdrawTokens({
                accounts: {
                    owner,
                    pool: this.pool.key,
                    mm: this.mm.key,
                    mmTokenAccount: mmPrimaryAccount,
                    withdrawMint: this.primaryMint,
                    tokenDestination: ownerPrimaryATA.address,
                    tokenProgram: token_utils_1.TOKEN_PROGRAM_ID,
                },
            });
            return new solana_contrib_1.TransactionEnvelope(this.provider, [
                ...(ownerPrimaryATA.instruction ? [ownerPrimaryATA.instruction] : []),
                withdrawPrimaryFromMMIx,
            ]);
        });
    }
    /**
     * Withdraws a specific mint from the merge miner.
     * @param withdrawMint
     * @returns
     */
    withdrawTokens(withdrawMint) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const owner = this.provider.wallet.publicKey;
            const mmPrimaryAccount = yield (0, token_utils_1.getATAAddress)({
                mint: withdrawMint,
                owner: this.mm.key,
            });
            const ownerPrimaryATA = yield (0, token_utils_1.getATAAddress)({
                mint: withdrawMint,
                owner,
            });
            const withdrawTokensIX = this.program.instruction.withdrawTokens({
                accounts: {
                    owner,
                    pool: this.pool.key,
                    mm: this.mm.key,
                    mmTokenAccount: mmPrimaryAccount,
                    tokenDestination: ownerPrimaryATA,
                    tokenProgram: token_utils_1.TOKEN_PROGRAM_ID,
                    withdrawMint,
                },
            });
            return new solana_contrib_1.TransactionEnvelope(this.provider, [withdrawTokensIX]);
        });
    }
    /**
     * Claims rewards for a primary account.
     * @param rewarder
     * @returns
     */
    claimPrimaryRewards(rewarder) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.claimRewardsCommon(this.primaryMint, yield this.getPrimaryStakeAccounts(rewarder));
        });
    }
    /**
     * Claims rewards for a replica account.
     * @returns
     */
    claimReplicaRewards(rewarder) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.claimRewardsCommon(this.replicaMint, yield this.getReplicaStakeAccounts(rewarder));
        });
    }
    /**
     * Claims internal mining rewards.
     * @param amount
     * @returns
     */
    claimRewardsCommon(quarryMint, stake, mmOwner = this.provider.wallet.publicKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const rewarderKey = stake.rewarder;
            const rewarder = yield this.mergeMine.sdk.programs.Mine.account.rewarder.fetch(rewarderKey);
            const [minter] = yield (0, __2.findMinterAddress)(rewarder.mintWrapper, rewarderKey, this.mergeMine.sdk.programs.MintWrapper.programId);
            const mm = this.mm.key;
            const withdrawMint = rewarder.rewardsTokenMint;
            const mmATAs = yield (0, token_utils_1.getOrCreateATAs)({
                provider: this.provider,
                mints: {
                    quarry: quarryMint,
                    rewards: withdrawMint,
                },
                owner: mm,
            });
            const ownerATAs = yield (0, token_utils_1.getOrCreateATAs)({
                provider: this.provider,
                mints: {
                    rewards: withdrawMint,
                },
                owner: mmOwner,
            });
            const feeATA = yield (0, token_utils_1.getOrCreateATA)({
                provider: this.provider,
                mint: withdrawMint,
                owner: this.pool.key,
            });
            return new solana_contrib_1.TransactionEnvelope(this.provider, [
                ...mmATAs.instructions,
                ...ownerATAs.instructions,
                ...(feeATA.instruction ? [feeATA.instruction] : []),
                this.program.instruction.claimRewards({
                    accounts: {
                        mintWrapper: rewarder.mintWrapper,
                        mintWrapperProgram: this.mergeMine.sdk.programs.MintWrapper.programId,
                        minter,
                        rewardsTokenMint: withdrawMint,
                        rewardsTokenAccount: mmATAs.accounts.rewards,
                        claimFeeTokenAccount: rewarder.claimFeeTokenAccount,
                        stakeTokenAccount: mmATAs.accounts.quarry,
                        stake,
                    },
                }),
            ]).combine(yield this.withdrawTokens(withdrawMint));
        });
    }
    getReplicaStakeAccounts(rewarder) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [quarry] = yield (0, __2.findQuarryAddress)(rewarder, this.replicaMint);
            const [miner] = yield (0, __2.findMinerAddress)(quarry, this.mm.key);
            const minerVault = yield (0, token_utils_1.getATAAddress)({
                mint: this.replicaMint,
                owner: miner,
            });
            return Object.assign(Object.assign({}, this.commonStakeAccounts), { rewarder,
                quarry,
                miner,
                minerVault });
        });
    }
    getPrimaryStakeAccounts(rewarder) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [quarry] = yield (0, __2.findQuarryAddress)(rewarder, this.primaryMint);
            const [miner] = yield (0, __2.findMinerAddress)(quarry, this.mm.key);
            const minerVault = yield (0, token_utils_1.getATAAddress)({
                mint: this.primaryMint,
                owner: miner,
            });
            return Object.assign(Object.assign({}, this.commonStakeAccounts), { rewarder,
                quarry,
                miner,
                minerVault });
        });
    }
    get commonStakeAccounts() {
        return {
            pool: this.mm.data.pool,
            mm: this.mm.key,
            tokenProgram: token_utils_1.TOKEN_PROGRAM_ID,
            mineProgram: this.mergeMine.sdk.mine.program.programId,
        };
    }
}
exports.MergeMiner = MergeMiner;
//# sourceMappingURL=mergeMiner.js.map