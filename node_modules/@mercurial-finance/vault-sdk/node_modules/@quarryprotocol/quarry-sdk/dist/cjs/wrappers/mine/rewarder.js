"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RewarderWrapper = void 0;
const tslib_1 = require("tslib");
const solana_contrib_1 = require("@saberhq/solana-contrib");
const web3_js_1 = require("@solana/web3.js");
const sdk_1 = require("../../sdk");
const pda_1 = require("./pda");
const quarry_1 = require("./quarry");
class RewarderWrapper {
    constructor(mineWrapper, rewarderKey, rewarderData) {
        this.mineWrapper = mineWrapper;
        this.rewarderKey = rewarderKey;
        this.rewarderData = rewarderData;
        this.sdk = mineWrapper.sdk;
        this.program = mineWrapper.program;
    }
    get provider() {
        return this.sdk.provider;
    }
    static fromData(provider, rewarder) {
        return new RewarderWrapper(sdk_1.QuarrySDK.load({ provider }).mine, rewarder.publicKey, rewarder.account);
    }
    /**
     * Gets the quarry associated with the given token.
     * @param token
     * @returns
     */
    getQuarry(token) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const quarryKey = yield this.getQuarryKey(token);
            return yield quarry_1.QuarryWrapper.load({
                sdk: this.sdk,
                token,
                key: quarryKey,
            });
        });
    }
    /**
     * Gets the public key of a quarry for a token.
     * @param token
     * @returns
     */
    getQuarryKey(token) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.getQuarryKeyForMint(token.mintAccount);
        });
    }
    /**
     * Gets the public key of a quarry for a token mint.
     * @param token
     * @returns
     */
    getQuarryKeyForMint(mint) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [quarryKey] = yield (0, pda_1.findQuarryAddress)(this.rewarderKey, mint, this.program.programId);
            return quarryKey;
        });
    }
    /**
     * Creates a new quarry. Only the rewarder can call this.
     * @deprecated Use {@link createQuarry}.
     * @param param0
     * @returns
     */
    createQuarryV1({ token, authority = this.provider.wallet.publicKey, }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [quarryKey, bump] = yield (0, pda_1.findQuarryAddress)(this.rewarderKey, token.mintAccount, this.program.programId);
            const ix = this.program.instruction.createQuarry(bump, {
                accounts: {
                    quarry: quarryKey,
                    auth: {
                        authority,
                        rewarder: this.rewarderKey,
                    },
                    tokenMint: token.mintAccount,
                    payer: this.provider.wallet.publicKey,
                    systemProgram: web3_js_1.SystemProgram.programId,
                    unusedAccount: web3_js_1.SystemProgram.programId,
                },
            });
            return {
                rewarder: this.rewarderKey,
                quarry: quarryKey,
                tx: this.sdk.newTx([ix]),
            };
        });
    }
    /**
     * Creates a new quarry. Only the rewarder can call this.
     * @param param0
     * @returns
     */
    createQuarry({ token, authority = this.provider.wallet.publicKey, }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [quarryKey] = yield (0, pda_1.findQuarryAddress)(this.rewarderKey, token.mintAccount, this.program.programId);
            const ix = this.program.instruction.createQuarryV2({
                accounts: {
                    quarry: quarryKey,
                    auth: {
                        authority,
                        rewarder: this.rewarderKey,
                    },
                    tokenMint: token.mintAccount,
                    payer: this.provider.wallet.publicKey,
                    systemProgram: web3_js_1.SystemProgram.programId,
                },
            });
            return {
                rewarder: this.rewarderKey,
                quarry: quarryKey,
                tx: this.sdk.newTx([ix]),
            };
        });
    }
    /**
     * Updates annual rewards rate on the Rewarder.
     * One must sync after this.
     * @param param0
     */
    setAnnualRewards({ newAnnualRate, authority = this.provider.wallet.publicKey, }) {
        return new solana_contrib_1.TransactionEnvelope(this.sdk.provider, [
            this.program.instruction.setAnnualRewards(newAnnualRate, {
                accounts: {
                    auth: {
                        rewarder: this.rewarderKey,
                        authority,
                    },
                },
            }),
        ]);
    }
    /**
     * Updates to annual rewards rate on the quarry, and update rewards on quarries assocated with each mint provided.
     * @param param0
     */
    setAndSyncAnnualRewards(newAnnualRate, mints) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const tx = yield this.syncQuarryRewards(mints);
            return this.setAnnualRewards({ newAnnualRate }).combine(tx);
        });
    }
    /**
     * Synchronizes quarry rewards.
     * @param mints
     * @returns
     */
    syncQuarryRewards(mints) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const instructions = [];
            yield Promise.all(mints.map((m) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const quarry = yield this.getQuarryKeyForMint(m);
                instructions.push(this.program.instruction.updateQuarryRewards({
                    accounts: {
                        rewarder: this.rewarderKey,
                        quarry,
                    },
                }));
            })));
            return this.sdk.newTx(instructions);
        });
    }
    /**
     * Transfers the authority to a different account.
     * @param param0
     */
    transferAuthority({ authority = this.sdk.provider.wallet.publicKey, nextAuthority, }) {
        return new solana_contrib_1.TransactionEnvelope(this.sdk.provider, [
            this.program.instruction.transferAuthority(nextAuthority, {
                accounts: {
                    authority,
                    rewarder: this.rewarderKey,
                },
            }),
        ]);
    }
    /**
     * Sets timestamp on when rewards will cease
     */
    setFamine({ newFamineTs, quarry, authority = this.sdk.provider.wallet.publicKey, }) {
        return new solana_contrib_1.TransactionEnvelope(this.sdk.provider, [
            this.program.instruction.setFamine(newFamineTs, {
                accounts: {
                    auth: {
                        authority,
                        rewarder: this.rewarderKey,
                    },
                    quarry,
                },
            }),
        ]);
    }
    /**
     * Pause the rewarder
     */
    pause(authority = this.sdk.provider.wallet.publicKey) {
        return new solana_contrib_1.TransactionEnvelope(this.sdk.provider, [
            this.program.instruction.pause({
                accounts: { pauseAuthority: authority, rewarder: this.rewarderKey },
            }),
        ]);
    }
    /**
     * Unpause the rewarder
     */
    unpause(authority = this.sdk.provider.wallet.publicKey) {
        return new solana_contrib_1.TransactionEnvelope(this.sdk.provider, [
            this.program.instruction.unpause({
                accounts: { pauseAuthority: authority, rewarder: this.rewarderKey },
            }),
        ]);
    }
}
exports.RewarderWrapper = RewarderWrapper;
//# sourceMappingURL=rewarder.js.map