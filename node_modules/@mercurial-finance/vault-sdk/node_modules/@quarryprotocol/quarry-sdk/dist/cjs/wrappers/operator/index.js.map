{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/wrappers/operator/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport { u64 } from \"@saberhq/token-utils\";\nimport type { PublicKey, Signer } from \"@solana/web3.js\";\nimport { Keypair, SystemProgram } from \"@solana/web3.js\";\n\nimport type { OperatorData, QuarryOperatorProgram, QuarrySDK } from \"../..\";\nimport { findQuarryAddress } from \"..\";\nimport { findOperatorAddress } from \"./pda\";\n\n/**\n * Operator helper functions.\n */\nexport class Operator {\n  constructor(\n    readonly sdk: QuarrySDK,\n    readonly key: PublicKey,\n    readonly data: OperatorData\n  ) {}\n\n  get program(): QuarryOperatorProgram {\n    return this.sdk.programs.Operator;\n  }\n\n  /**\n   * Reloads the Operator's data.\n   * @returns\n   */\n  async reload(): Promise<Operator> {\n    const data = await this.program.account.operator.fetch(this.key);\n    return new Operator(this.sdk, this.key, data);\n  }\n\n  static async load({\n    sdk,\n    key,\n  }: {\n    sdk: QuarrySDK;\n    key: PublicKey;\n  }): Promise<Operator | null> {\n    const program = sdk.programs.Operator;\n    const data = (await program.account.operator.fetchNullable(\n      key\n    )) as OperatorData;\n    if (!data) {\n      return null;\n    }\n    return new Operator(sdk, key, data);\n  }\n\n  static async createOperator({\n    sdk,\n    rewarder,\n    baseKP = Keypair.generate(),\n    admin = sdk.provider.wallet.publicKey,\n    payer = sdk.provider.wallet.publicKey,\n  }: {\n    sdk: QuarrySDK;\n    rewarder: PublicKey;\n    admin?: PublicKey;\n    baseKP?: Signer;\n    payer?: PublicKey;\n  }): Promise<{\n    key: PublicKey;\n    tx: TransactionEnvelope;\n  }> {\n    const [operatorKey] = await findOperatorAddress(\n      baseKP.publicKey,\n      sdk.programs.Operator.programId\n    );\n    return {\n      key: operatorKey,\n      tx: new TransactionEnvelope(\n        sdk.provider,\n        [\n          sdk.programs.Operator.instruction.createOperatorV2({\n            accounts: {\n              base: baseKP.publicKey,\n              operator: operatorKey,\n              rewarder,\n              admin,\n\n              payer,\n              systemProgram: SystemProgram.programId,\n              quarryMineProgram: sdk.programs.Mine.programId,\n            },\n          }),\n        ],\n        [baseKP]\n      ),\n    };\n  }\n\n  setAdmin(delegate: PublicKey): TransactionEnvelope {\n    return new TransactionEnvelope(this.sdk.provider, [\n      this.program.instruction.setAdmin({\n        accounts: {\n          operator: this.key,\n          admin: this.sdk.provider.wallet.publicKey,\n          delegate,\n        },\n      }),\n    ]);\n  }\n\n  setRateSetter(delegate: PublicKey): TransactionEnvelope {\n    return new TransactionEnvelope(this.sdk.provider, [\n      this.program.instruction.setRateSetter({\n        accounts: {\n          operator: this.key,\n          admin: this.sdk.provider.wallet.publicKey,\n          delegate,\n        },\n      }),\n    ]);\n  }\n\n  setQuarryCreator(delegate: PublicKey): TransactionEnvelope {\n    return new TransactionEnvelope(this.sdk.provider, [\n      this.program.instruction.setQuarryCreator({\n        accounts: {\n          operator: this.key,\n          admin: this.sdk.provider.wallet.publicKey,\n          delegate,\n        },\n      }),\n    ]);\n  }\n\n  setShareAllocator(delegate: PublicKey): TransactionEnvelope {\n    return new TransactionEnvelope(this.sdk.provider, [\n      this.program.instruction.setShareAllocator({\n        accounts: {\n          operator: this.key,\n          admin: this.sdk.provider.wallet.publicKey,\n          delegate,\n        },\n      }),\n    ]);\n  }\n\n  get withDelegateAccounts(): {\n    operator: PublicKey;\n    delegate: PublicKey;\n    rewarder: PublicKey;\n    quarryMineProgram: PublicKey;\n  } {\n    return {\n      operator: this.key,\n      delegate: this.sdk.provider.wallet.publicKey,\n      rewarder: this.data.rewarder,\n      quarryMineProgram: this.sdk.programs.Mine.programId,\n    };\n  }\n\n  delegateSetAnnualRewards(newAnnualRate: u64): TransactionEnvelope {\n    return new TransactionEnvelope(this.sdk.provider, [\n      this.program.instruction.delegateSetAnnualRewards(newAnnualRate, {\n        accounts: {\n          withDelegate: this.withDelegateAccounts,\n        },\n      }),\n    ]);\n  }\n\n  delegateSetFamine(newFamineTs: u64, quarry: PublicKey): TransactionEnvelope {\n    return new TransactionEnvelope(this.sdk.provider, [\n      this.program.instruction.delegateSetFamine(newFamineTs, {\n        accounts: {\n          withDelegate: this.withDelegateAccounts,\n          quarry,\n        },\n      }),\n    ]);\n  }\n\n  async delegateCreateQuarry({\n    tokenMint,\n    payer = this.sdk.provider.wallet.publicKey,\n  }: {\n    tokenMint: PublicKey;\n    payer?: PublicKey;\n  }): Promise<{ tx: TransactionEnvelope; quarry: PublicKey }> {\n    const [quarry] = await findQuarryAddress(\n      this.data.rewarder,\n      tokenMint,\n      this.sdk.programs.Mine.programId\n    );\n    return {\n      quarry,\n      tx: new TransactionEnvelope(this.sdk.provider, [\n        this.program.instruction.delegateCreateQuarryV2({\n          accounts: {\n            withDelegate: this.withDelegateAccounts,\n            quarry,\n            tokenMint,\n            payer,\n            systemProgram: SystemProgram.programId,\n          },\n        }),\n      ]),\n    };\n  }\n\n  delegateSetRewardsShare({\n    share,\n    quarry,\n  }: {\n    share: number;\n    quarry: PublicKey;\n  }): TransactionEnvelope {\n    return new TransactionEnvelope(this.sdk.provider, [\n      this.program.instruction.delegateSetRewardsShare(new u64(share), {\n        accounts: {\n          withDelegate: this.withDelegateAccounts,\n          quarry,\n        },\n      }),\n    ]);\n  }\n}\n"]}