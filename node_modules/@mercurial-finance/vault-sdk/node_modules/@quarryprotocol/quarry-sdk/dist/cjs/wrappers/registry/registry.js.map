{"version":3,"file":"registry.js","sourceRoot":"","sources":["../../../../src/wrappers/registry/registry.ts"],"names":[],"mappings":";;;;AACA,4DAA8D;AAE9D,6CAAgD;AAIhD,kCAA4C;AAC5C,+BAA4C;AAE5C,MAAa,cAAc;IAEzB,YAAqB,GAAc;QAAd,QAAG,GAAH,GAAG,CAAW;QACjC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC;IACvC,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACG,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,EACX,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,GAKvC;;YACC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,MAAM,IAAA,yBAAmB,EAChD,WAAW,EACX,IAAI,CAAC,OAAO,CAAC,SAAS,CACvB,CAAC;YACF,MAAM,gBAAgB,GAAG,IAAI,oCAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAC9D,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,EAAE;oBACtD,QAAQ,EAAE;wBACR,QAAQ,EAAE,WAAW;wBACrB,QAAQ;wBACR,KAAK;wBACL,aAAa,EAAE,uBAAa,CAAC,SAAS;qBACvC;iBACF,CAAC;aACH,CAAC,CAAC;YACH,OAAO;gBACL,EAAE,EAAE,gBAAgB;gBACpB,QAAQ;aACT,CAAC;QACJ,CAAC;KAAA;IAEK,UAAU,CAAC,EACf,SAAS,EACT,WAAW,GAIZ;;YACC,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,IAAA,yBAAmB,EAC1C,WAAW,EACX,IAAI,CAAC,OAAO,CAAC,SAAS,CACvB,CAAC;YACF,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,IAAA,wBAAiB,EACtC,WAAW,EACX,SAAS,EACT,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CACjC,CAAC;YACF,OAAO,IAAI,oCAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAC5C,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC;oBAClC,QAAQ,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE;iBAC/B,CAAC;aACH,CAAC,CAAC;QACL,CAAC;KAAA;CACF;AAjED,wCAiEC","sourcesContent":["import type { Provider } from \"@saberhq/solana-contrib\";\nimport { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport type { PublicKey } from \"@solana/web3.js\";\nimport { SystemProgram } from \"@solana/web3.js\";\n\nimport type { RegistryProgram } from \"../../programs\";\nimport type { QuarrySDK } from \"../../sdk\";\nimport { findQuarryAddress } from \"../mine\";\nimport { findRegistryAddress } from \"./pda\";\n\nexport class QuarryRegistry {\n  readonly program: RegistryProgram;\n  constructor(readonly sdk: QuarrySDK) {\n    this.program = sdk.programs.Registry;\n  }\n\n  get provider(): Provider {\n    return this.sdk.provider;\n  }\n\n  /**\n   * Creates a new Registry.\n   * @returns\n   */\n  async newRegistry({\n    numQuarries,\n    rewarderKey,\n    payer = this.provider.wallet.publicKey,\n  }: {\n    numQuarries: number;\n    rewarderKey: PublicKey;\n    payer?: PublicKey;\n  }): Promise<{ tx: TransactionEnvelope; registry: PublicKey }> {\n    const [registry, bump] = await findRegistryAddress(\n      rewarderKey,\n      this.program.programId\n    );\n    const createRegistryTX = new TransactionEnvelope(this.provider, [\n      this.program.instruction.newRegistry(numQuarries, bump, {\n        accounts: {\n          rewarder: rewarderKey,\n          registry,\n          payer,\n          systemProgram: SystemProgram.programId,\n        },\n      }),\n    ]);\n    return {\n      tx: createRegistryTX,\n      registry,\n    };\n  }\n\n  async syncQuarry({\n    tokenMint,\n    rewarderKey,\n  }: {\n    tokenMint: PublicKey;\n    rewarderKey: PublicKey;\n  }): Promise<TransactionEnvelope> {\n    const [registry] = await findRegistryAddress(\n      rewarderKey,\n      this.program.programId\n    );\n    const [quarry] = await findQuarryAddress(\n      rewarderKey,\n      tokenMint,\n      this.sdk.programs.Mine.programId\n    );\n    return new TransactionEnvelope(this.provider, [\n      this.program.instruction.syncQuarry({\n        accounts: { quarry, registry },\n      }),\n    ]);\n  }\n}\n"]}