"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Operator = void 0;
const tslib_1 = require("tslib");
const solana_contrib_1 = require("@saberhq/solana-contrib");
const token_utils_1 = require("@saberhq/token-utils");
const web3_js_1 = require("@solana/web3.js");
const __1 = require("..");
const pda_1 = require("./pda");
/**
 * Operator helper functions.
 */
class Operator {
    constructor(sdk, key, data) {
        this.sdk = sdk;
        this.key = key;
        this.data = data;
    }
    get program() {
        return this.sdk.programs.Operator;
    }
    /**
     * Reloads the Operator's data.
     * @returns
     */
    reload() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const data = yield this.program.account.operator.fetch(this.key);
            return new Operator(this.sdk, this.key, data);
        });
    }
    static load({ sdk, key, }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const program = sdk.programs.Operator;
            const data = (yield program.account.operator.fetchNullable(key));
            if (!data) {
                return null;
            }
            return new Operator(sdk, key, data);
        });
    }
    static createOperator({ sdk, rewarder, baseKP = web3_js_1.Keypair.generate(), admin = sdk.provider.wallet.publicKey, payer = sdk.provider.wallet.publicKey, }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [operatorKey] = yield (0, pda_1.findOperatorAddress)(baseKP.publicKey, sdk.programs.Operator.programId);
            return {
                key: operatorKey,
                tx: new solana_contrib_1.TransactionEnvelope(sdk.provider, [
                    sdk.programs.Operator.instruction.createOperatorV2({
                        accounts: {
                            base: baseKP.publicKey,
                            operator: operatorKey,
                            rewarder,
                            admin,
                            payer,
                            systemProgram: web3_js_1.SystemProgram.programId,
                            quarryMineProgram: sdk.programs.Mine.programId,
                        },
                    }),
                ], [baseKP]),
            };
        });
    }
    setAdmin(delegate) {
        return new solana_contrib_1.TransactionEnvelope(this.sdk.provider, [
            this.program.instruction.setAdmin({
                accounts: {
                    operator: this.key,
                    admin: this.sdk.provider.wallet.publicKey,
                    delegate,
                },
            }),
        ]);
    }
    setRateSetter(delegate) {
        return new solana_contrib_1.TransactionEnvelope(this.sdk.provider, [
            this.program.instruction.setRateSetter({
                accounts: {
                    operator: this.key,
                    admin: this.sdk.provider.wallet.publicKey,
                    delegate,
                },
            }),
        ]);
    }
    setQuarryCreator(delegate) {
        return new solana_contrib_1.TransactionEnvelope(this.sdk.provider, [
            this.program.instruction.setQuarryCreator({
                accounts: {
                    operator: this.key,
                    admin: this.sdk.provider.wallet.publicKey,
                    delegate,
                },
            }),
        ]);
    }
    setShareAllocator(delegate) {
        return new solana_contrib_1.TransactionEnvelope(this.sdk.provider, [
            this.program.instruction.setShareAllocator({
                accounts: {
                    operator: this.key,
                    admin: this.sdk.provider.wallet.publicKey,
                    delegate,
                },
            }),
        ]);
    }
    get withDelegateAccounts() {
        return {
            operator: this.key,
            delegate: this.sdk.provider.wallet.publicKey,
            rewarder: this.data.rewarder,
            quarryMineProgram: this.sdk.programs.Mine.programId,
        };
    }
    delegateSetAnnualRewards(newAnnualRate) {
        return new solana_contrib_1.TransactionEnvelope(this.sdk.provider, [
            this.program.instruction.delegateSetAnnualRewards(newAnnualRate, {
                accounts: {
                    withDelegate: this.withDelegateAccounts,
                },
            }),
        ]);
    }
    delegateSetFamine(newFamineTs, quarry) {
        return new solana_contrib_1.TransactionEnvelope(this.sdk.provider, [
            this.program.instruction.delegateSetFamine(newFamineTs, {
                accounts: {
                    withDelegate: this.withDelegateAccounts,
                    quarry,
                },
            }),
        ]);
    }
    delegateCreateQuarry({ tokenMint, payer = this.sdk.provider.wallet.publicKey, }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [quarry] = yield (0, __1.findQuarryAddress)(this.data.rewarder, tokenMint, this.sdk.programs.Mine.programId);
            return {
                quarry,
                tx: new solana_contrib_1.TransactionEnvelope(this.sdk.provider, [
                    this.program.instruction.delegateCreateQuarryV2({
                        accounts: {
                            withDelegate: this.withDelegateAccounts,
                            quarry,
                            tokenMint,
                            payer,
                            systemProgram: web3_js_1.SystemProgram.programId,
                        },
                    }),
                ]),
            };
        });
    }
    delegateSetRewardsShare({ share, quarry, }) {
        return new solana_contrib_1.TransactionEnvelope(this.sdk.provider, [
            this.program.instruction.delegateSetRewardsShare(new token_utils_1.u64(share), {
                accounts: {
                    withDelegate: this.withDelegateAccounts,
                    quarry,
                },
            }),
        ]);
    }
}
exports.Operator = Operator;
//# sourceMappingURL=index.js.map