"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findMergeMinerAddress = exports.findReplicaMintAddress = exports.findPoolAddress = void 0;
const tslib_1 = require("tslib");
const anchor_1 = require("@project-serum/anchor");
const web3_js_1 = require("@solana/web3.js");
const constants_1 = require("../../constants");
/**
 * Finds the address of the Pool.
 * @returns
 */
const findPoolAddress = ({ programId = constants_1.QUARRY_ADDRESSES.MergeMine, primaryMint, }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    return yield web3_js_1.PublicKey.findProgramAddress([anchor_1.utils.bytes.utf8.encode("MergePool"), primaryMint.toBuffer()], programId);
});
exports.findPoolAddress = findPoolAddress;
/**
 * Finds the address of the Pool.
 * @returns
 */
const findReplicaMintAddress = ({ programId = constants_1.QUARRY_ADDRESSES.MergeMine, primaryMint, }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const [pool] = yield (0, exports.findPoolAddress)({ programId, primaryMint });
    return yield web3_js_1.PublicKey.findProgramAddress([anchor_1.utils.bytes.utf8.encode("ReplicaMint"), pool.toBuffer()], programId);
});
exports.findReplicaMintAddress = findReplicaMintAddress;
/**
 * Finds the address of the Merge Miner.
 * @returns
 */
const findMergeMinerAddress = ({ programId = constants_1.QUARRY_ADDRESSES.MergeMine, pool, owner, }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    return yield web3_js_1.PublicKey.findProgramAddress([anchor_1.utils.bytes.utf8.encode("MergeMiner"), pool.toBuffer(), owner.toBuffer()], programId);
});
exports.findMergeMinerAddress = findMergeMinerAddress;
//# sourceMappingURL=pda.js.map