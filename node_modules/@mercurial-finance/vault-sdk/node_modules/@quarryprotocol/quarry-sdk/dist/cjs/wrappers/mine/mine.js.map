{"version":3,"file":"mine.js","sourceRoot":"","sources":["../../../../src/wrappers/mine/mine.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AugmentedProvider,\n  TransactionEnvelope,\n} from \"@saberhq/solana-contrib\";\nimport { getOrCreateATA, TOKEN_PROGRAM_ID } from \"@saberhq/token-utils\";\nimport type {\n  PublicKey,\n  Signer,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { Keypair, SystemProgram, SYSVAR_CLOCK_PUBKEY } from \"@solana/web3.js\";\n\nimport { QUARRY_CODERS } from \"../../constants\";\nimport type { MineProgram } from \"../../programs/mine\";\nimport type { QuarrySDK } from \"../../sdk\";\nimport { findRewarderAddress } from \"./pda\";\nimport { RewarderWrapper } from \"./rewarder\";\n\nexport class MineWrapper {\n  constructor(readonly sdk: QuarrySDK) {}\n\n  get provider(): AugmentedProvider {\n    return this.sdk.provider;\n  }\n\n  get program(): MineProgram {\n    return this.sdk.programs.Mine;\n  }\n\n  /**\n   *\n   * @deprecated Use {@link createRewarder}.\n   * @param param0\n   * @returns\n   */\n  async createRewarderV1({\n    mintWrapper,\n    baseKP = Keypair.generate(),\n    authority = this.provider.wallet.publicKey,\n  }: {\n    mintWrapper: PublicKey;\n    baseKP?: Signer;\n    authority?: PublicKey;\n  }): Promise<{\n    key: PublicKey;\n    tx: TransactionEnvelope;\n  }> {\n    const [rewarderKey, bump] = await findRewarderAddress(\n      baseKP.publicKey,\n      this.program.programId\n    );\n\n    const mintWrapperDataRaw = await this.provider.getAccountInfo(mintWrapper);\n    if (!mintWrapperDataRaw) {\n      throw new Error(\n        `mint wrapper does not exist at ${mintWrapper.toString()}`\n      );\n    }\n    const mintWrapperData =\n      QUARRY_CODERS.MintWrapper.accounts.mintWrapper.parse(\n        mintWrapperDataRaw.accountInfo.data\n      );\n\n    const { address: claimFeeTokenAccount, instruction: createATAInstruction } =\n      await getOrCreateATA({\n        provider: this.provider,\n        mint: mintWrapperData.tokenMint,\n        owner: rewarderKey,\n      });\n\n    return {\n      key: rewarderKey,\n      tx: this.provider.newTX(\n        [\n          createATAInstruction,\n          this.program.instruction.newRewarder(bump, {\n            accounts: {\n              base: baseKP.publicKey,\n              initialAuthority: authority,\n              rewarder: rewarderKey,\n              payer: this.provider.wallet.publicKey,\n              systemProgram: SystemProgram.programId,\n              unusedAccount: SYSVAR_CLOCK_PUBKEY,\n              mintWrapper,\n              rewardsTokenMint: mintWrapperData.tokenMint,\n              claimFeeTokenAccount,\n            },\n          }),\n        ],\n        [baseKP]\n      ),\n    };\n  }\n\n  /**\n   * Creates a new Rewarder.\n   * @param param0\n   * @returns\n   */\n  async createRewarder({\n    mintWrapper,\n    baseKP = Keypair.generate(),\n    authority = this.provider.wallet.publicKey,\n  }: {\n    mintWrapper: PublicKey;\n    baseKP?: Signer;\n    authority?: PublicKey;\n  }): Promise<{\n    key: PublicKey;\n    tx: TransactionEnvelope;\n  }> {\n    const [rewarderKey] = await findRewarderAddress(\n      baseKP.publicKey,\n      this.program.programId\n    );\n\n    const mintWrapperDataRaw = await this.provider.getAccountInfo(mintWrapper);\n    if (!mintWrapperDataRaw) {\n      throw new Error(\n        `mint wrapper does not exist at ${mintWrapper.toString()}`\n      );\n    }\n\n    const mintWrapperData =\n      QUARRY_CODERS.MintWrapper.accounts.mintWrapper.parse(\n        mintWrapperDataRaw.accountInfo.data\n      );\n\n    const { address: claimFeeTokenAccount, instruction: createATAInstruction } =\n      await getOrCreateATA({\n        provider: this.provider,\n        mint: mintWrapperData.tokenMint,\n        owner: rewarderKey,\n      });\n\n    return {\n      key: rewarderKey,\n      tx: this.provider.newTX(\n        [\n          createATAInstruction,\n          this.program.instruction.newRewarderV2({\n            accounts: {\n              base: baseKP.publicKey,\n              initialAuthority: authority,\n              rewarder: rewarderKey,\n              payer: this.provider.wallet.publicKey,\n              systemProgram: SystemProgram.programId,\n              mintWrapper,\n              rewardsTokenMint: mintWrapperData.tokenMint,\n              claimFeeTokenAccount,\n            },\n          }),\n        ],\n        [baseKP]\n      ),\n    };\n  }\n\n  /**\n   * Loads the rewarder wrapper.\n   * @param rewarder\n   * @returns\n   */\n  async loadRewarderWrapper(rewarder: PublicKey): Promise<RewarderWrapper> {\n    const rewarderData = await this.program.account.rewarder.fetch(rewarder);\n    return new RewarderWrapper(this, rewarder, rewarderData);\n  }\n\n  /**\n   * Rescue stuck tokens in a miner.\n   * @returns\n   */\n  async rescueTokens({\n    mint,\n    miner,\n    minerTokenAccount,\n    owner = this.provider.wallet.publicKey,\n  }: {\n    mint: PublicKey;\n    miner: PublicKey;\n    minerTokenAccount: PublicKey;\n    owner?: PublicKey;\n  }): Promise<TransactionEnvelope> {\n    const instructions: TransactionInstruction[] = [];\n    const { address: destinationTokenAccount, instruction: ataInstruction } =\n      await getOrCreateATA({\n        provider: this.provider,\n        mint,\n        owner,\n      });\n    if (ataInstruction) {\n      instructions.push(ataInstruction);\n    }\n\n    instructions.push(\n      this.program.instruction.rescueTokens({\n        accounts: {\n          authority: owner,\n          miner,\n          minerTokenAccount,\n          destinationTokenAccount,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        },\n      })\n    );\n\n    return this.sdk.newTx(instructions);\n  }\n}\n"]}