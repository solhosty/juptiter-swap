{"version":3,"file":"mergeMiner.js","sourceRoot":"","sources":["../../../../src/wrappers/mergeMine/mergeMiner.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Provider } from \"@saberhq/solana-contrib\";\nimport { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport type { TokenAmount } from \"@saberhq/token-utils\";\nimport {\n  getATAAddress,\n  getOrCreateATA,\n  getOrCreateATAs,\n  SPLToken,\n  TOKEN_PROGRAM_ID,\n} from \"@saberhq/token-utils\";\nimport type { PublicKey } from \"@solana/web3.js\";\nimport { SystemProgram } from \"@solana/web3.js\";\n\nimport { QUARRY_ADDRESSES } from \"../..\";\nimport type {\n  MergeMinerData,\n  MergePoolData,\n  QuarryMergeMineProgram,\n  QuarryStakeAccounts,\n} from \"../../programs\";\nimport { findMinerAddress, findMinterAddress, findQuarryAddress } from \"..\";\nimport type { MergeMine } from \"./quarryMergeMine\";\n\nexport class MergeMiner {\n  constructor(\n    readonly mergeMine: MergeMine,\n    readonly pool: {\n      key: PublicKey;\n      data: MergePoolData;\n    },\n    readonly mm: {\n      key: PublicKey;\n      data: MergeMinerData;\n    }\n  ) {}\n\n  get provider(): Provider {\n    return this.mergeMine.provider;\n  }\n\n  get program(): QuarryMergeMineProgram {\n    return this.mergeMine.programs.MergeMine;\n  }\n\n  get primaryMint(): PublicKey {\n    return this.pool.data.primaryMint;\n  }\n\n  get replicaMint(): PublicKey {\n    return this.pool.data.replicaMint;\n  }\n\n  /**\n   * Deposit primary tokens into the merge miner.\n   * @param amount\n   * @returns\n   */\n  async deposit({\n    amount,\n    rewarder,\n  }: {\n    amount: TokenAmount;\n    rewarder: PublicKey;\n  }): Promise<TransactionEnvelope> {\n    const owner = this.provider.wallet.publicKey;\n    const { address: ata, instruction } = await getOrCreateATA({\n      provider: this.provider,\n      mint: this.primaryMint,\n      owner,\n    });\n    if (instruction) {\n      throw new Error(\"User has no tokens to deposit\");\n    }\n    const mmPrimaryTokenAccount = await getATAAddress({\n      mint: this.primaryMint,\n      owner: this.mm.key,\n    });\n\n    return new TransactionEnvelope(this.provider, [\n      SPLToken.createTransferInstruction(\n        TOKEN_PROGRAM_ID,\n        ata,\n        mmPrimaryTokenAccount,\n        owner,\n        [],\n        amount.toU64()\n      ),\n    ]).combine(await this.stakePrimaryMiner(rewarder));\n  }\n\n  /**\n   * Deposits tokens into the primary quarry.\n   * (Not recommended-- you probably want {@link MergeMiner#deposit}.)\n   * @returns\n   */\n  async stakePrimaryMiner(rewarder: PublicKey): Promise<TransactionEnvelope> {\n    const stake = await this.getPrimaryStakeAccounts(rewarder);\n    const mmPrimaryTokenAccount = await getATAAddress({\n      mint: this.primaryMint,\n      owner: this.mm.key,\n    });\n    return new TransactionEnvelope(this.provider, [\n      this.program.instruction.stakePrimaryMiner({\n        accounts: {\n          mmOwner: this.provider.wallet.publicKey,\n          mmPrimaryTokenAccount,\n          stake,\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Stakes replica tokens into a miner.\n   * @returns\n   */\n  async stakeReplicaMiner(rewarder: PublicKey): Promise<TransactionEnvelope> {\n    const stake = await this.getReplicaStakeAccounts(rewarder);\n    const [quarry] = await findQuarryAddress(rewarder, this.replicaMint);\n    const [miner] = await findMinerAddress(quarry, this.mm.key);\n\n    const mmReplicaMintTokenAccount = await getOrCreateATA({\n      provider: this.provider,\n      mint: this.replicaMint,\n      owner: this.mm.key,\n    });\n    const txEnv = new TransactionEnvelope(this.provider, [\n      this.program.instruction.stakeReplicaMiner({\n        accounts: {\n          mmOwner: this.provider.wallet.publicKey,\n          replicaMint: this.replicaMint,\n          replicaMintTokenAccount: mmReplicaMintTokenAccount.address,\n          stake,\n        },\n      }),\n    ]);\n    if (mmReplicaMintTokenAccount.instruction) {\n      txEnv.instructions.unshift(mmReplicaMintTokenAccount.instruction);\n    }\n\n    // initialize the miner if it does not exist\n    if (!(await this.provider.getAccountInfo(miner))) {\n      const minerReplicaMintTokenAccount = await getOrCreateATA({\n        provider: this.provider,\n        mint: this.replicaMint,\n        owner: miner,\n      });\n      txEnv.instructions.unshift(\n        this.program.instruction.initMinerV2({\n          accounts: {\n            pool: this.pool.key,\n            mm: this.mm.key,\n            miner,\n            quarry,\n            rewarder,\n            tokenMint: this.replicaMint,\n            minerVault: minerReplicaMintTokenAccount.address,\n            payer: this.provider.wallet.publicKey,\n            mineProgram: QUARRY_ADDRESSES.Mine,\n            systemProgram: SystemProgram.programId,\n            tokenProgram: TOKEN_PROGRAM_ID,\n          },\n        })\n      );\n      if (minerReplicaMintTokenAccount.instruction) {\n        txEnv.instructions.unshift(minerReplicaMintTokenAccount.instruction);\n      }\n    } else {\n      console.log(\"HERE\");\n    }\n\n    return txEnv;\n  }\n\n  /**\n   * Withdraw staked tokens from a merge miner.\n   * @param amount\n   * @returns\n   */\n  async withdraw({\n    amount,\n    rewarder,\n  }: {\n    amount: TokenAmount;\n    rewarder: PublicKey;\n  }): Promise<TransactionEnvelope> {\n    const withdrawPrimary = await this.unstakePrimaryMiner(rewarder, amount);\n    const withdrawPrimaryFromMM = await this.withdrawTokens(\n      amount.token.mintAccount\n    );\n    return TransactionEnvelope.combineAll(\n      withdrawPrimary,\n      withdrawPrimaryFromMM\n    );\n  }\n\n  /**\n   * Unstakes all replica tokens from a quarry.\n   * You must call this function for each replica miner before unstaking the primary.\n   * @returns\n   */\n  async unstakeAllReplica(rewarder: PublicKey): Promise<TransactionEnvelope> {\n    const stake = await this.getReplicaStakeAccounts(rewarder);\n    const replicaMintTokenAccount = await getATAAddress({\n      mint: this.replicaMint,\n      owner: this.mm.key,\n    });\n    return new TransactionEnvelope(this.provider, [\n      this.program.instruction.unstakeAllReplicaMiner({\n        accounts: {\n          mmOwner: this.provider.wallet.publicKey,\n          replicaMint: this.replicaMint,\n          replicaMintTokenAccount,\n          stake,\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Withdraws primary tokens from the quarry.\n   * (Not recommended-- you probably want {@link MergeMiner#withdraw}.)\n   * @returns\n   */\n  async unstakePrimaryMiner(\n    rewarder: PublicKey,\n    amount: TokenAmount\n  ): Promise<TransactionEnvelope> {\n    const stake = await this.getPrimaryStakeAccounts(rewarder);\n    const mmPrimaryTokenAccount = await getATAAddress({\n      mint: this.primaryMint,\n      owner: this.mm.key,\n    });\n    return new TransactionEnvelope(this.provider, [\n      this.program.instruction.unstakePrimaryMiner(amount.toU64(), {\n        accounts: {\n          mmOwner: this.provider.wallet.publicKey,\n          mmPrimaryTokenAccount,\n          stake,\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Withdraws unstaked primary tokens from the merge miner.\n   * (Not recommended-- you probably want {@link MergeMiner#withdraw}.)\n   * @returns\n   */\n  async withdrawPrimaryFromMM(): Promise<TransactionEnvelope> {\n    const owner = this.provider.wallet.publicKey;\n    const mmPrimaryAccount = await getATAAddress({\n      mint: this.primaryMint,\n      owner: this.mm.key,\n    });\n    const ownerPrimaryATA = await getOrCreateATA({\n      provider: this.provider,\n      mint: this.primaryMint,\n      owner,\n    });\n    const withdrawPrimaryFromMMIx = this.program.instruction.withdrawTokens({\n      accounts: {\n        owner,\n        pool: this.pool.key,\n        mm: this.mm.key,\n        mmTokenAccount: mmPrimaryAccount,\n        withdrawMint: this.primaryMint,\n        tokenDestination: ownerPrimaryATA.address,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n    });\n    return new TransactionEnvelope(this.provider, [\n      ...(ownerPrimaryATA.instruction ? [ownerPrimaryATA.instruction] : []),\n      withdrawPrimaryFromMMIx,\n    ]);\n  }\n\n  /**\n   * Withdraws a specific mint from the merge miner.\n   * @param withdrawMint\n   * @returns\n   */\n  async withdrawTokens(withdrawMint: PublicKey): Promise<TransactionEnvelope> {\n    const owner = this.provider.wallet.publicKey;\n    const mmPrimaryAccount = await getATAAddress({\n      mint: withdrawMint,\n      owner: this.mm.key,\n    });\n    const ownerPrimaryATA = await getATAAddress({\n      mint: withdrawMint,\n      owner,\n    });\n    const withdrawTokensIX = this.program.instruction.withdrawTokens({\n      accounts: {\n        owner,\n        pool: this.pool.key,\n        mm: this.mm.key,\n        mmTokenAccount: mmPrimaryAccount,\n        tokenDestination: ownerPrimaryATA,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        withdrawMint,\n      },\n    });\n    return new TransactionEnvelope(this.provider, [withdrawTokensIX]);\n  }\n\n  /**\n   * Claims rewards for a primary account.\n   * @param rewarder\n   * @returns\n   */\n  async claimPrimaryRewards(rewarder: PublicKey): Promise<TransactionEnvelope> {\n    return await this.claimRewardsCommon(\n      this.primaryMint,\n      await this.getPrimaryStakeAccounts(rewarder)\n    );\n  }\n\n  /**\n   * Claims rewards for a replica account.\n   * @returns\n   */\n  async claimReplicaRewards(rewarder: PublicKey): Promise<TransactionEnvelope> {\n    return await this.claimRewardsCommon(\n      this.replicaMint,\n      await this.getReplicaStakeAccounts(rewarder)\n    );\n  }\n\n  /**\n   * Claims internal mining rewards.\n   * @param amount\n   * @returns\n   */\n  async claimRewardsCommon(\n    quarryMint: PublicKey,\n    stake: QuarryStakeAccounts,\n    mmOwner: PublicKey = this.provider.wallet.publicKey\n  ): Promise<TransactionEnvelope> {\n    const rewarderKey = stake.rewarder;\n    const rewarder =\n      await this.mergeMine.sdk.programs.Mine.account.rewarder.fetch(\n        rewarderKey\n      );\n    const [minter] = await findMinterAddress(\n      rewarder.mintWrapper,\n      rewarderKey,\n      this.mergeMine.sdk.programs.MintWrapper.programId\n    );\n\n    const mm = this.mm.key;\n    const withdrawMint = rewarder.rewardsTokenMint;\n    const mmATAs = await getOrCreateATAs({\n      provider: this.provider,\n      mints: {\n        quarry: quarryMint,\n        rewards: withdrawMint,\n      },\n      owner: mm,\n    });\n\n    const ownerATAs = await getOrCreateATAs({\n      provider: this.provider,\n      mints: {\n        rewards: withdrawMint,\n      },\n      owner: mmOwner,\n    });\n    const feeATA = await getOrCreateATA({\n      provider: this.provider,\n      mint: withdrawMint,\n      owner: this.pool.key,\n    });\n\n    return new TransactionEnvelope(this.provider, [\n      ...mmATAs.instructions,\n      ...ownerATAs.instructions,\n      ...(feeATA.instruction ? [feeATA.instruction] : []),\n      this.program.instruction.claimRewards({\n        accounts: {\n          mintWrapper: rewarder.mintWrapper,\n          mintWrapperProgram: this.mergeMine.sdk.programs.MintWrapper.programId,\n          minter,\n          rewardsTokenMint: withdrawMint,\n          rewardsTokenAccount: mmATAs.accounts.rewards,\n          claimFeeTokenAccount: rewarder.claimFeeTokenAccount,\n          stakeTokenAccount: mmATAs.accounts.quarry,\n          stake,\n        },\n      }),\n    ]).combine(await this.withdrawTokens(withdrawMint));\n  }\n\n  async getReplicaStakeAccounts(\n    rewarder: PublicKey\n  ): Promise<QuarryStakeAccounts> {\n    const [quarry] = await findQuarryAddress(rewarder, this.replicaMint);\n    const [miner] = await findMinerAddress(quarry, this.mm.key);\n    const minerVault = await getATAAddress({\n      mint: this.replicaMint,\n      owner: miner,\n    });\n    return {\n      ...this.commonStakeAccounts,\n      rewarder,\n      quarry,\n      miner,\n      minerVault,\n    };\n  }\n\n  async getPrimaryStakeAccounts(\n    rewarder: PublicKey\n  ): Promise<QuarryStakeAccounts> {\n    const [quarry] = await findQuarryAddress(rewarder, this.primaryMint);\n    const [miner] = await findMinerAddress(quarry, this.mm.key);\n    const minerVault = await getATAAddress({\n      mint: this.primaryMint,\n      owner: miner,\n    });\n    return {\n      ...this.commonStakeAccounts,\n      rewarder,\n      quarry,\n      miner,\n      minerVault,\n    };\n  }\n\n  get commonStakeAccounts(): Pick<\n    QuarryStakeAccounts,\n    \"pool\" | \"mm\" | \"tokenProgram\" | \"mineProgram\"\n  > {\n    return {\n      pool: this.mm.data.pool,\n      mm: this.mm.key,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      mineProgram: this.mergeMine.sdk.mine.program.programId,\n    };\n  }\n}\n"]}