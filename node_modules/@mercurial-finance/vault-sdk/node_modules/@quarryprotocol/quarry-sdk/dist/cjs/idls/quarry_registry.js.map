{"version":3,"file":"quarry_registry.js","sourceRoot":"","sources":["../../../src/idls/quarry_registry.ts"],"names":[],"mappings":"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","sourcesContent":["import { generateErrorMap } from \"@saberhq/anchor-contrib\";\n\nexport type QuarryRegistryIDL = {\n  version: \"5.0.2\";\n  name: \"quarry_registry\";\n  instructions: [\n    {\n      name: \"newRegistry\";\n      accounts: [\n        {\n          name: \"rewarder\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"registry\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"QuarryRegistry\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                account: \"Rewarder\";\n                path: \"rewarder\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"maxQuarries\";\n          type: \"u16\";\n        },\n        {\n          name: \"bump\";\n          type: \"u8\";\n        }\n      ];\n    },\n    {\n      name: \"syncQuarry\";\n      accounts: [\n        {\n          name: \"quarry\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"registry\";\n          isMut: true;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    }\n  ];\n  accounts: [\n    {\n      name: \"Registry\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"bump\";\n            type: \"u8\";\n          },\n          {\n            name: \"rewarder\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"tokens\";\n            type: {\n              vec: \"publicKey\";\n            };\n          }\n        ];\n      };\n    }\n  ];\n};\nexport type AnchorQuarryRegistry = {\n  version: \"5.0.2\";\n  name: \"quarry_registry\";\n  instructions: [\n    {\n      name: \"newRegistry\";\n      accounts: [\n        {\n          name: \"rewarder\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"registry\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"AnchorQuarryRegistry\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                account: \"Rewarder\";\n                path: \"rewarder\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"maxQuarries\";\n          type: \"u16\";\n        },\n        {\n          name: \"bump\";\n          type: \"u8\";\n        }\n      ];\n    },\n    {\n      name: \"syncQuarry\";\n      accounts: [\n        {\n          name: \"quarry\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"registry\";\n          isMut: true;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    }\n  ];\n  accounts: [\n    {\n      name: \"registry\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"bump\";\n            type: \"u8\";\n          },\n          {\n            name: \"rewarder\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"tokens\";\n            type: {\n              vec: \"publicKey\";\n            };\n          }\n        ];\n      };\n    }\n  ];\n};\n\nexport const AnchorQuarryRegistryIDL: AnchorQuarryRegistry = {\n  version: \"5.0.2\",\n  name: \"quarry_registry\",\n  instructions: [\n    {\n      name: \"newRegistry\",\n      accounts: [\n        {\n          name: \"rewarder\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"registry\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"AnchorQuarryRegistry\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                account: \"Rewarder\",\n                path: \"rewarder\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"maxQuarries\",\n          type: \"u16\",\n        },\n        {\n          name: \"bump\",\n          type: \"u8\",\n        },\n      ],\n    },\n    {\n      name: \"syncQuarry\",\n      accounts: [\n        {\n          name: \"quarry\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"registry\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: \"registry\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"bump\",\n            type: \"u8\",\n          },\n          {\n            name: \"rewarder\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"tokens\",\n            type: {\n              vec: \"publicKey\",\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\nexport const QuarryRegistryJSON: QuarryRegistryIDL = {\n  version: \"5.0.2\",\n  name: \"quarry_registry\",\n  instructions: [\n    {\n      name: \"newRegistry\",\n      accounts: [\n        {\n          name: \"rewarder\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"registry\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"QuarryRegistry\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                account: \"Rewarder\",\n                path: \"rewarder\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"maxQuarries\",\n          type: \"u16\",\n        },\n        {\n          name: \"bump\",\n          type: \"u8\",\n        },\n      ],\n    },\n    {\n      name: \"syncQuarry\",\n      accounts: [\n        {\n          name: \"quarry\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"registry\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: \"Registry\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"bump\",\n            type: \"u8\",\n          },\n          {\n            name: \"rewarder\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"tokens\",\n            type: {\n              vec: \"publicKey\",\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\nexport const QuarryRegistryErrors = generateErrorMap(QuarryRegistryJSON);\n"]}