{"version":3,"file":"pda.js","sourceRoot":"","sources":["../../../../src/wrappers/mergeMine/pda.ts"],"names":[],"mappings":";;;;AAAA,kDAA8C;AAC9C,6CAA4C;AAE5C,+CAAmD;AAEnD;;;GAGG;AACI,MAAM,eAAe,GAAG,CAAO,EACpC,SAAS,GAAG,4BAAgB,CAAC,SAAS,EACtC,WAAW,GAIZ,EAAgC,EAAE;IACjC,OAAO,MAAM,mBAAS,CAAC,kBAAkB,CACvC,CAAC,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,WAAW,CAAC,QAAQ,EAAE,CAAC,EAC9D,SAAS,CACV,CAAC;AACJ,CAAC,CAAA,CAAC;AAXW,QAAA,eAAe,mBAW1B;AAEF;;;GAGG;AACI,MAAM,sBAAsB,GAAG,CAAO,EAC3C,SAAS,GAAG,4BAAgB,CAAC,SAAS,EACtC,WAAW,GAIZ,EAAgC,EAAE;IACjC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,IAAA,uBAAe,EAAC,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC,CAAC;IACjE,OAAO,MAAM,mBAAS,CAAC,kBAAkB,CACvC,CAAC,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,EACzD,SAAS,CACV,CAAC;AACJ,CAAC,CAAA,CAAC;AAZW,QAAA,sBAAsB,0BAYjC;AAEF;;;GAGG;AACI,MAAM,qBAAqB,GAAG,CAAO,EAC1C,SAAS,GAAG,4BAAgB,CAAC,SAAS,EACtC,IAAI,EACJ,KAAK,GAKN,EAAgC,EAAE;IACjC,OAAO,MAAM,mBAAS,CAAC,kBAAkB,CACvC,CAAC,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,EAC1E,SAAS,CACV,CAAC;AACJ,CAAC,CAAA,CAAC;AAbW,QAAA,qBAAqB,yBAahC","sourcesContent":["import { utils } from \"@project-serum/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport { QUARRY_ADDRESSES } from \"../../constants\";\n\n/**\n * Finds the address of the Pool.\n * @returns\n */\nexport const findPoolAddress = async ({\n  programId = QUARRY_ADDRESSES.MergeMine,\n  primaryMint,\n}: {\n  programId?: PublicKey;\n  primaryMint: PublicKey;\n}): Promise<[PublicKey, number]> => {\n  return await PublicKey.findProgramAddress(\n    [utils.bytes.utf8.encode(\"MergePool\"), primaryMint.toBuffer()],\n    programId\n  );\n};\n\n/**\n * Finds the address of the Pool.\n * @returns\n */\nexport const findReplicaMintAddress = async ({\n  programId = QUARRY_ADDRESSES.MergeMine,\n  primaryMint,\n}: {\n  programId?: PublicKey;\n  primaryMint: PublicKey;\n}): Promise<[PublicKey, number]> => {\n  const [pool] = await findPoolAddress({ programId, primaryMint });\n  return await PublicKey.findProgramAddress(\n    [utils.bytes.utf8.encode(\"ReplicaMint\"), pool.toBuffer()],\n    programId\n  );\n};\n\n/**\n * Finds the address of the Merge Miner.\n * @returns\n */\nexport const findMergeMinerAddress = async ({\n  programId = QUARRY_ADDRESSES.MergeMine,\n  pool,\n  owner,\n}: {\n  programId?: PublicKey;\n  pool: PublicKey;\n  owner: PublicKey;\n}): Promise<[PublicKey, number]> => {\n  return await PublicKey.findProgramAddress(\n    [utils.bytes.utf8.encode(\"MergeMiner\"), pool.toBuffer(), owner.toBuffer()],\n    programId\n  );\n};\n"]}