{"version":3,"file":"quarry.js","sourceRoot":"","sources":["../../../../src/wrappers/mine/quarry.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Provider } from \"@saberhq/solana-contrib\";\nimport { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport type { ProgramAccount } from \"@saberhq/token-utils\";\nimport {\n  getATAAddress,\n  getOrCreateATA,\n  Token,\n  u64,\n} from \"@saberhq/token-utils\";\nimport type { PublicKey } from \"@solana/web3.js\";\n\nimport type {\n  MineProgram,\n  MinerData,\n  QuarryData,\n  RewarderData,\n} from \"../../programs/mine\";\nimport { QuarrySDK } from \"../../sdk\";\nimport { MinerWrapper } from \"./miner\";\nimport { Payroll } from \"./payroll\";\nimport { findMinerAddress } from \"./pda\";\nimport type { PendingMiner } from \"./types\";\n\nexport class QuarryWrapper {\n  constructor(\n    readonly sdk: QuarrySDK,\n    /**\n     * The token being staked.\n     */\n    readonly token: Token,\n    /**\n     * The data of the rewarder.\n     */\n    readonly rewarderData: RewarderData,\n    /**\n     * The data of the quarry.\n     */\n    readonly quarryData: QuarryData,\n    /**\n     * The key of the quarry.\n     */\n    readonly key: PublicKey\n  ) {}\n\n  static fromData(\n    provider: Provider,\n    rewarder: ProgramAccount<RewarderData>,\n    quarry: ProgramAccount<QuarryData>\n  ): QuarryWrapper {\n    return new QuarryWrapper(\n      QuarrySDK.load({ provider }),\n      Token.fromMint(\n        quarry.account.tokenMintKey,\n        quarry.account.tokenMintDecimals\n      ),\n      rewarder.account,\n      quarry.account,\n      quarry.publicKey\n    );\n  }\n\n  /**\n   * The program.\n   */\n  get program(): MineProgram {\n    return this.sdk.programs.Mine;\n  }\n\n  /**\n   * The provider.\n   */\n  get provider(): Provider {\n    return this.sdk.provider;\n  }\n\n  /**\n   * Loads a quarry\n   * @returns\n   */\n  static async load({\n    sdk,\n    token,\n    key,\n  }: {\n    sdk: QuarrySDK;\n    /**\n     * The quarry's key\n     */\n    key: PublicKey;\n    /**\n     * The token being staked.\n     */\n    token: Token;\n  }): Promise<QuarryWrapper> {\n    const program = sdk.programs.Mine;\n    const quarryData = await program.account.quarry.fetch(key);\n    const rewarderData = await program.account.rewarder.fetch(\n      quarryData.rewarder\n    );\n    return new QuarryWrapper(sdk, token, rewarderData, quarryData, key);\n  }\n\n  /**\n   * Get the computed rewards rate of the quarry.\n   *\n   * This is used for tests, so you probably don't want this.\n   * You want quarryData.annualRewardsRate.\n   *\n   * @returns annualRewardsRate\n   */\n  computeAnnualRewardsRate(): u64 {\n    const rewarder = this.rewarderData;\n    const totalRewardsShares = rewarder.totalRewardsShares;\n    if (totalRewardsShares.isZero()) {\n      return new u64(0);\n    }\n    const numerator = rewarder.annualRewardsRate.mul(\n      this.quarryData.rewardsShare\n    );\n    return numerator.div(totalRewardsShares);\n  }\n\n  /**\n   * Get the public key of the miner assocaited with the authority account\n   * @param authority who owns the miner\n   * @returns miner public key\n   */\n  async getMinerAddress(authority: PublicKey): Promise<PublicKey> {\n    const [key] = await findMinerAddress(\n      this.key,\n      authority,\n      this.program.programId\n    );\n    return key;\n  }\n\n  /**\n   * Get the miner data associated with the authority account\n   * @param authority\n   * @returns\n   */\n  async getMiner(authority: PublicKey): Promise<MinerData | null> {\n    try {\n      return await this.program.account.miner.fetch(\n        await this.getMinerAddress(authority)\n      );\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * Get the miner associated with the authority account\n   * @param authority\n   * @returns\n   */\n  async getMinerActions(\n    authority: PublicKey = this.provider.wallet.publicKey\n  ): Promise<MinerWrapper> {\n    const miner = await this.getMinerAddress(authority);\n    const stakedTokenATA = await getATAAddress({\n      mint: this.quarryData.tokenMintKey,\n      owner: authority,\n    });\n    const tokenVaultKey = await getATAAddress({\n      mint: this.quarryData.tokenMintKey,\n      owner: miner,\n    });\n    return this.createMinerWrapper(\n      authority,\n      miner,\n      tokenVaultKey,\n      stakedTokenATA\n    );\n  }\n\n  /**\n   * Creates a miner wrapper\n   * @param authority\n   * @param minerKey\n   * @param tokenVaultKey\n   * @param stakedTokenATA\n   * @returns\n   */\n  createMinerWrapper(\n    authority: PublicKey,\n    minerKey: PublicKey,\n    tokenVaultKey: PublicKey,\n    stakedTokenATA: PublicKey\n  ): MinerWrapper {\n    return new MinerWrapper(\n      this,\n      authority,\n      minerKey,\n      tokenVaultKey,\n      stakedTokenATA\n    );\n  }\n\n  /**\n   * Sets the rewards share of this mine.\n   */\n  setRewardsShare(share: u64): TransactionEnvelope {\n    return new TransactionEnvelope(this.provider, [\n      this.program.instruction.setRewardsShare(share, {\n        accounts: {\n          auth: {\n            authority: this.provider.wallet.publicKey,\n            rewarder: this.quarryData.rewarder,\n          },\n          quarry: this.key,\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Sets the famine timestampe for this mine.\n   */\n  setFamine(famineTs: u64): TransactionEnvelope {\n    return new TransactionEnvelope(this.provider, [\n      this.program.instruction.setFamine(famineTs, {\n        accounts: {\n          auth: {\n            authority: this.provider.wallet.publicKey,\n            rewarder: this.quarryData.rewarder,\n          },\n          quarry: this.key,\n        },\n      }),\n    ]);\n  }\n\n  /**\n   * Creates the miner of the provided wallet.\n   */\n  async createMiner({\n    authority = this.provider.wallet.publicKey,\n  }: {\n    authority?: PublicKey;\n  } = {}): Promise<PendingMiner> {\n    const [miner] = await findMinerAddress(\n      this.key,\n      authority,\n      this.program.programId\n    );\n    const { address: minerVault, instruction: createATATX } =\n      await getOrCreateATA({\n        provider: this.provider,\n        mint: this.quarryData.tokenMintKey,\n        owner: miner,\n      });\n    const stakedTokenATA = await getATAAddress({\n      mint: this.quarryData.tokenMintKey,\n      owner: authority,\n    });\n    const wrapper = this.createMinerWrapper(\n      authority,\n      miner,\n      minerVault,\n      stakedTokenATA\n    );\n    const result = wrapper.initialize();\n    if (createATATX) {\n      result.tx.instructions.unshift(createATATX);\n    }\n    return result;\n  }\n\n  /**\n   * Payroll helper\n   */\n  get payroll(): Payroll {\n    const data = this.quarryData;\n    return new Payroll(\n      data.famineTs,\n      data.lastUpdateTs,\n      data.annualRewardsRate,\n      data.rewardsPerTokenStored,\n      data.totalTokensDeposited\n    );\n  }\n}\n"]}