{"version":3,"file":"quarryMergeMine.js","sourceRoot":"","sources":["../../../../src/wrappers/mergeMine/quarryMergeMine.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Provider } from \"@saberhq/solana-contrib\";\nimport { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport {\n  deserializeMint,\n  getOrCreateATA,\n  getOrCreateATAs,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@saberhq/token-utils\";\nimport type { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\n\nimport type { Programs } from \"../../constants\";\nimport { QUARRY_ADDRESSES } from \"../../constants\";\nimport type {\n  MergeMinerData,\n  MergePoolData,\n  QuarryMergeMineProgram,\n} from \"../../programs\";\nimport type { QuarrySDK } from \"../../sdk\";\nimport { findMinerAddress, findQuarryAddress } from \"../mine/pda\";\nimport { MergeMiner } from \"./mergeMiner\";\nimport { MergePool } from \"./mergePool\";\nimport {\n  findMergeMinerAddress,\n  findPoolAddress,\n  findReplicaMintAddress,\n} from \"./pda\";\n\nexport class MergeMine {\n  constructor(readonly sdk: QuarrySDK) {}\n\n  get programs(): Programs {\n    return this.sdk.programs;\n  }\n\n  get program(): QuarryMergeMineProgram {\n    return this.programs.MergeMine;\n  }\n\n  get provider(): Provider {\n    return this.sdk.provider;\n  }\n\n  /**\n   * Creates a new pool.\n   * @returns\n   */\n  async newPool({\n    primaryMint,\n    payer = this.provider.wallet.publicKey,\n  }: {\n    /**\n     * Primary mint.\n     */\n    primaryMint: PublicKey;\n    payer?: PublicKey;\n  }): Promise<{\n    key: PublicKey;\n    tx: TransactionEnvelope;\n    replicaToken: Token;\n  }> {\n    const [primaryMintRaw] = await Promise.all([\n      this.provider.getAccountInfo(primaryMint),\n    ]);\n    if (!primaryMintRaw) {\n      throw new Error(`Could not find primary mint: ${primaryMint.toString()}`);\n    }\n\n    const parsedMint = deserializeMint(primaryMintRaw.accountInfo.data);\n\n    const [pool] = await findPoolAddress({\n      programId: this.program.programId,\n      primaryMint,\n    });\n    const [replicaMint] = await findReplicaMintAddress({\n      programId: this.program.programId,\n      primaryMint,\n    });\n\n    const newPoolIx = this.program.instruction.newPoolV2({\n      accounts: {\n        pool,\n        payer,\n        primaryMint,\n        replicaMint,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: SYSVAR_RENT_PUBKEY,\n      },\n    });\n\n    const createPool = new TransactionEnvelope(this.provider, [newPoolIx]);\n\n    return {\n      key: pool,\n      tx: createPool,\n      replicaToken: Token.fromMint(replicaMint, parsedMint.decimals),\n    };\n  }\n\n  async fetchMergePoolData(\n    key: PublicKey\n  ): Promise<{ key: PublicKey; data: MergePoolData }> {\n    return {\n      key,\n      data: await this.program.account.mergePool.fetch(key),\n    };\n  }\n\n  async fetchMergeMinerData(\n    key: PublicKey\n  ): Promise<{ key: PublicKey; data: MergeMinerData }> {\n    return {\n      key,\n      data: await this.program.account.mergeMiner.fetch(key),\n    };\n  }\n\n  async findPoolAddress({\n    primaryMint,\n  }: {\n    primaryMint: PublicKey;\n  }): Promise<PublicKey> {\n    const [pool] = await findPoolAddress({\n      programId: this.program.programId,\n      primaryMint,\n    });\n    return pool;\n  }\n\n  async findMergeMinerAddress({\n    owner = this.provider.wallet.publicKey,\n    pool,\n  }: {\n    owner?: PublicKey;\n    pool: PublicKey;\n  }): Promise<PublicKey> {\n    const [mm] = await findMergeMinerAddress({\n      programId: this.program.programId,\n      pool,\n      owner,\n    });\n    return mm;\n  }\n\n  /**\n   * Creates a new MM.\n   * @param param0\n   * @returns\n   */\n  async newMM({\n    owner = this.provider.wallet.publicKey,\n    payer = this.provider.wallet.publicKey,\n    pool: {\n      key: poolKey,\n      data: { primaryMint },\n    },\n    rewarder,\n    rewardsMint,\n  }: {\n    owner?: PublicKey;\n    payer?: PublicKey;\n    pool: {\n      key: PublicKey;\n      data: Pick<MergePoolData, \"primaryMint\">;\n    };\n    /**\n     * Rewarder to deposit into.\n     */\n    rewarder: PublicKey;\n    /**\n     * Mint received as rewards from the initial rewarder.\n     */\n    rewardsMint: PublicKey;\n  }): Promise<{ key: PublicKey; tx: TransactionEnvelope | null }> {\n    const [mm] = await findMergeMinerAddress({\n      programId: this.program.programId,\n      pool: poolKey,\n      owner,\n    });\n\n    // mm ATAs\n    const { instructions } = await getOrCreateATAs({\n      provider: this.provider,\n      mints: {\n        rewards: rewardsMint,\n        primary: primaryMint,\n      },\n      owner: mm,\n    });\n\n    const allInstructions = [...instructions];\n    const mergeMinerAccountInfo =\n      await this.sdk.provider.connection.getAccountInfo(mm);\n    if (!mergeMinerAccountInfo) {\n      allInstructions.push(\n        this.program.instruction.initMergeMinerV2({\n          accounts: {\n            pool: poolKey,\n            owner,\n            mm,\n            payer,\n            systemProgram: SystemProgram.programId,\n          },\n        })\n      );\n    }\n\n    const { ixs: initPrimaryIxs } = await this.getOrCreatePrimary({\n      mint: primaryMint,\n      pool: poolKey,\n      mm,\n      payer,\n      rewarder,\n    });\n    allInstructions.push(...initPrimaryIxs);\n\n    return {\n      key: mm,\n      tx: allInstructions.length\n        ? new TransactionEnvelope(this.provider, allInstructions)\n        : null,\n    };\n  }\n\n  async getOrCreatePrimary({\n    mint,\n    pool,\n    mm,\n    payer = this.provider.wallet.publicKey,\n    rewarder,\n  }: {\n    mint: PublicKey;\n    pool: PublicKey;\n    mm: PublicKey;\n    payer?: PublicKey;\n    rewarder: PublicKey;\n  }): Promise<{\n    miner: PublicKey;\n    ixs: TransactionInstruction[];\n  }> {\n    const [quarryKey] = await findQuarryAddress(rewarder, mint);\n    const [minerKey] = await findMinerAddress(quarryKey, mm);\n\n    const ixs: TransactionInstruction[] = [];\n    const minerAccountInfo = await this.sdk.provider.connection.getAccountInfo(\n      minerKey\n    );\n    if (minerAccountInfo) {\n      return { miner: minerKey, ixs };\n    }\n\n    const minerATA = await getOrCreateATA({\n      provider: this.provider,\n      mint,\n      owner: minerKey,\n    });\n    if (minerATA.instruction) {\n      ixs.push(minerATA.instruction);\n    }\n    ixs.push(\n      this.program.instruction.initMinerV2({\n        accounts: {\n          mineProgram: this.sdk.mine.program.programId,\n          pool,\n          mm,\n          systemProgram: SystemProgram.programId,\n          payer,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          rewarder,\n          miner: minerKey,\n          quarry: quarryKey,\n          tokenMint: mint,\n          minerVault: minerATA.address,\n        },\n      })\n    );\n\n    return {\n      miner: minerKey,\n      ixs,\n    };\n  }\n\n  async initMiner({\n    mint,\n    pool,\n    mm,\n    payer = this.provider.wallet.publicKey,\n    rewarder,\n  }: {\n    mint: PublicKey;\n    pool: PublicKey;\n    mm: PublicKey;\n    payer?: PublicKey;\n    rewarder: PublicKey;\n  }): Promise<{ tx: TransactionEnvelope; miner: PublicKey }> {\n    const [quarryKey] = await findQuarryAddress(rewarder, mint);\n    const [minerKey] = await findMinerAddress(quarryKey, mm);\n    const minerATA = await getOrCreateATA({\n      provider: this.provider,\n      mint,\n      owner: minerKey,\n    });\n    const initMinerIX = this.program.instruction.initMinerV2({\n      accounts: {\n        mineProgram: this.sdk.mine.program.programId,\n        pool,\n        mm,\n        systemProgram: SystemProgram.programId,\n        payer,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        rewarder,\n        miner: minerKey,\n        quarry: quarryKey,\n        tokenMint: mint,\n        minerVault: minerATA.address,\n      },\n    });\n    return {\n      tx: new TransactionEnvelope(this.provider, [\n        ...(minerATA.instruction ? [minerATA.instruction] : []),\n        initMinerIX,\n      ]),\n      miner: minerKey,\n    };\n  }\n\n  /**\n   * Loads a mm.\n   * @returns\n   */\n  async loadMM({ mmKey }: { mmKey: PublicKey }): Promise<MergeMiner> {\n    const mm = await this.fetchMergeMinerData(mmKey);\n    const pool = await this.fetchMergePoolData(mm.data.pool);\n    return new MergeMiner(this, pool, mm);\n  }\n\n  /**\n   * Loads a mp.\n   * @returns\n   */\n  loadMP({ mpKey }: { mpKey: PublicKey }): MergePool {\n    return new MergePool(this, mpKey);\n  }\n\n  /**\n   * Rescue stuck tokens in a merge miner.\n   * @returns\n   */\n  rescueTokens({\n    mergePool,\n    mergeMiner,\n    miner,\n    minerTokenAccount,\n    destinationTokenAccount,\n  }: {\n    mergePool: PublicKey;\n    mergeMiner: PublicKey;\n    miner: PublicKey;\n    minerTokenAccount: PublicKey;\n    destinationTokenAccount: PublicKey;\n  }): TransactionEnvelope {\n    const withdrawTokensIX = this.program.instruction.rescueTokens({\n      accounts: {\n        mmOwner: this.provider.wallet.publicKey,\n        mergePool,\n        mm: mergeMiner,\n        miner,\n        minerTokenAccount,\n        destinationTokenAccount,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        quarryMineProgram: QUARRY_ADDRESSES.Mine,\n      },\n    });\n    return new TransactionEnvelope(this.provider, [withdrawTokensIX]);\n  }\n}\n"]}