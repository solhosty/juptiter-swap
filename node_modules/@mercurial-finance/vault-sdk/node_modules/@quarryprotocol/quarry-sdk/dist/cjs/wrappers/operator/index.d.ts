import { TransactionEnvelope } from "@saberhq/solana-contrib";
import { u64 } from "@saberhq/token-utils";
import type { PublicKey, Signer } from "@solana/web3.js";
import type { OperatorData, QuarryOperatorProgram, QuarrySDK } from "../..";
/**
 * Operator helper functions.
 */
export declare class Operator {
    readonly sdk: QuarrySDK;
    readonly key: PublicKey;
    readonly data: OperatorData;
    constructor(sdk: QuarrySDK, key: PublicKey, data: OperatorData);
    get program(): QuarryOperatorProgram;
    /**
     * Reloads the Operator's data.
     * @returns
     */
    reload(): Promise<Operator>;
    static load({ sdk, key, }: {
        sdk: QuarrySDK;
        key: PublicKey;
    }): Promise<Operator | null>;
    static createOperator({ sdk, rewarder, baseKP, admin, payer, }: {
        sdk: QuarrySDK;
        rewarder: PublicKey;
        admin?: PublicKey;
        baseKP?: Signer;
        payer?: PublicKey;
    }): Promise<{
        key: PublicKey;
        tx: TransactionEnvelope;
    }>;
    setAdmin(delegate: PublicKey): TransactionEnvelope;
    setRateSetter(delegate: PublicKey): TransactionEnvelope;
    setQuarryCreator(delegate: PublicKey): TransactionEnvelope;
    setShareAllocator(delegate: PublicKey): TransactionEnvelope;
    get withDelegateAccounts(): {
        operator: PublicKey;
        delegate: PublicKey;
        rewarder: PublicKey;
        quarryMineProgram: PublicKey;
    };
    delegateSetAnnualRewards(newAnnualRate: u64): TransactionEnvelope;
    delegateSetFamine(newFamineTs: u64, quarry: PublicKey): TransactionEnvelope;
    delegateCreateQuarry({ tokenMint, payer, }: {
        tokenMint: PublicKey;
        payer?: PublicKey;
    }): Promise<{
        tx: TransactionEnvelope;
        quarry: PublicKey;
    }>;
    delegateSetRewardsShare({ share, quarry, }: {
        share: number;
        quarry: PublicKey;
    }): TransactionEnvelope;
}
//# sourceMappingURL=index.d.ts.map