import { TransactionEnvelope } from "@saberhq/solana-contrib";
import type { PublicKey, TransactionInstruction } from "@solana/web3.js";
import type { QuarrySDK } from "../..";
import type { PendingRedeemer, RedeemerData, RedeemerProgram, RedeemTokenArgs } from "../../programs/redeemer";
export * from "./pda";
export declare class RedeemerWrapper {
    readonly sdk: QuarrySDK;
    readonly iouMint: PublicKey;
    readonly redemptionMint: PublicKey;
    readonly key: PublicKey;
    readonly data: RedeemerData;
    constructor(sdk: QuarrySDK, iouMint: PublicKey, redemptionMint: PublicKey, key: PublicKey, data: RedeemerData);
    get program(): RedeemerProgram;
    static load({ sdk, iouMint, redemptionMint, }: {
        sdk: QuarrySDK;
        iouMint: PublicKey;
        redemptionMint: PublicKey;
    }): Promise<RedeemerWrapper>;
    static createRedeemer({ sdk, iouMint, redemptionMint, }: {
        sdk: QuarrySDK;
        iouMint: PublicKey;
        redemptionMint: PublicKey;
    }): Promise<PendingRedeemer>;
    /**
     * redeemTokensIx
     */
    redeemTokensIx(args: RedeemTokenArgs): Promise<TransactionInstruction>;
    redeemTokens(args: RedeemTokenArgs): Promise<TransactionEnvelope>;
    getVaultAddress(): Promise<PublicKey>;
    getRedeemTokenAccounts(args: Omit<RedeemTokenArgs, "tokenAmount">): Promise<{
        redeemer: PublicKey;
        iouMint: PublicKey;
        redemptionMint: PublicKey;
        redemptionVault: PublicKey;
        tokenProgram: PublicKey;
        sourceAuthority: PublicKey;
        iouSource: PublicKey;
        redemptionDestination: PublicKey;
    }>;
}
//# sourceMappingURL=index.d.ts.map