var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { PublicKey, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';
import * as solend from '@mercurial-finance/solend-sdk';
import * as anchor from '@project-serum/anchor';
import { TOKEN_PROGRAM_ID } from '@solana/spl-token';
import { SEEDS } from '../constants';
// not using now
export default class SolendWithLMHandler {
    constructor(strategyProgram) {
        this.strategyProgram = strategyProgram;
    }
    getReserveState(program, reserve) {
        return __awaiter(this, void 0, void 0, function* () {
            const state = yield (() => __awaiter(this, void 0, void 0, function* () {
                const account = yield program.provider.connection.getAccountInfo(reserve);
                const solendParse = solend.parseReserve(account.owner, account);
                return solendParse.info;
            }))();
            return {
                collateral: {
                    mintPubkey: state.collateral.mintPubkey,
                    mintTotalSupply: state.collateral.mintTotalSupply.toNumber(),
                    supplyPubkey: state.collateral.mintTotalSupply.toString(),
                },
                state,
            };
        });
    }
    withdraw(walletPubKey, program, strategy, vault, tokenVault, vaultState, userToken, userLp, amount, preInstructions, postInstructions, opt) {
        return __awaiter(this, void 0, void 0, function* () {
            const { collateral, state } = yield this.getReserveState(program, strategy.state.reserve);
            let [collateralVault] = yield PublicKey.findProgramAddress([Buffer.from(SEEDS.COLLATERAL_VAULT_PREFIX), new PublicKey(strategy.pubkey).toBuffer()], program.programId);
            const { liquidity, lendingMarket } = state;
            const [lendingMarketAuthority] = yield PublicKey.findProgramAddress([lendingMarket.toBuffer()], this.strategyProgram);
            const accounts = [
                { pubkey: liquidity.supplyPubkey, isWritable: true },
                { pubkey: lendingMarket },
                { pubkey: lendingMarketAuthority },
                { pubkey: collateral.mintPubkey, isWritable: true },
                { pubkey: SYSVAR_CLOCK_PUBKEY },
            ];
            const remainingAccounts = [];
            for (const account of accounts) {
                remainingAccounts.push({
                    pubkey: account.pubkey,
                    isWritable: !!account.isWritable,
                    isSigner: false,
                });
            }
            const { pythOracle, switchboardOracle } = liquidity;
            if (!pythOracle || !switchboardOracle) {
                throw new Error('Incorrect pythOracle or switchboardOracle pubkey');
            }
            const txAccounts = {
                vault,
                strategy: strategy.pubkey,
                reserve: strategy.state.reserve,
                strategyProgram: this.strategyProgram,
                collateralVault,
                feeVault: vaultState.feeVault,
                tokenVault,
                userToken,
                userLp,
                tokenProgram: TOKEN_PROGRAM_ID,
            };
            if (opt === null || opt === void 0 ? void 0 : opt.affiliate) {
                const tx = yield opt.affiliate.affiliateProgram.methods
                    .withdrawDirectlyFromStrategy(amount, new anchor.BN(0))
                    .accounts(Object.assign(Object.assign({}, txAccounts), { partner: opt.affiliate.partner, user: opt.affiliate.user, vaultProgram: program.programId, vaultLpMint: vaultState.lpMint, owner: walletPubKey }))
                    .remainingAccounts(remainingAccounts)
                    .preInstructions(preInstructions.concat([
                    solend.refreshReserveInstruction(strategy.state.reserve, this.strategyProgram, pythOracle, switchboardOracle),
                ]))
                    .postInstructions(postInstructions)
                    .transaction();
                return tx;
            }
            const tx = yield program.methods
                .withdrawDirectlyFromStrategy(amount, new anchor.BN(0))
                .accounts(Object.assign(Object.assign({}, txAccounts), { lpMint: vaultState.lpMint, user: walletPubKey }))
                .remainingAccounts(remainingAccounts)
                .preInstructions(preInstructions.concat([
                solend.refreshReserveInstruction(strategy.state.reserve, this.strategyProgram, pythOracle, switchboardOracle),
            ]))
                .postInstructions(postInstructions)
                .transaction();
            return tx;
        });
    }
}
//# sourceMappingURL=solendWithLM.js.map