var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { MangoClient, MANGO_V4_ID } from '@mercurial-finance/mango-v4';
import { AccountRetriever } from '@mercurial-finance/mango-v4/dist/client';
import * as anchor from '@project-serum/anchor';
import { TOKEN_PROGRAM_ID } from '@solana/spl-token';
import { PublicKey } from '@solana/web3.js';
import { SEEDS } from '../constants';
import { getOrCreateATAInstruction } from '../utils';
const MANGO_GROUP_PK = new PublicKey('78b8f4cGCwmZ9ysPFMWLaLTkkaYnUjwMJYStWe5RTSSX');
export default class MangoHandler {
    constructor(cluster, program) {
        this.cluster = cluster;
        this.mangoClient = MangoClient.connect(program.provider, this.cluster, MANGO_V4_ID[cluster]);
        this.connection = program.provider.connection;
    }
    withdraw(walletPubKey, program, strategy, vault, tokenVault, vaultState, userToken, userLp, amount, preInstructions, postInstructions, opt) {
        return __awaiter(this, void 0, void 0, function* () {
            const group = yield this.mangoClient.getGroup(MANGO_GROUP_PK);
            yield group.reloadAll(this.mangoClient);
            const bank = yield group.getFirstBankByMint(vaultState.tokenMint);
            const strategyBuffer = new PublicKey(strategy.pubkey).toBuffer();
            const [strategyOwner] = PublicKey.findProgramAddressSync([Buffer.from(SEEDS.MANGO), strategyBuffer], program.programId);
            const [mangoAccountPK] = PublicKey.findProgramAddressSync([Buffer.from(SEEDS.MANGO_ACCOUNT), bank.group.toBuffer(), strategyOwner.toBuffer(), Buffer.from([0, 0, 0, 0])], // Mango account number (0u32)
            this.mangoClient.programId);
            const [tokenAccount, createTokenAccountIx] = yield getOrCreateATAInstruction(vaultState.tokenMint, strategyOwner, this.connection, {
                payer: walletPubKey,
            });
            createTokenAccountIx && preInstructions.push(createTokenAccountIx);
            const mangoAccount = yield this.mangoClient.getMangoAccount(mangoAccountPK);
            const healthRemainingAccounts = yield this.mangoClient.buildHealthRemainingAccounts(AccountRetriever.Fixed, group, [mangoAccount], [bank]);
            const accountData = [
                { pubkey: bank.group },
                { pubkey: mangoAccountPK, isWritable: true },
                { pubkey: strategyOwner },
                { pubkey: bank.vault, isWritable: true },
                { pubkey: bank.oracle },
                { pubkey: tokenAccount, isWritable: true },
                ...healthRemainingAccounts.map((accountPK) => ({
                    pubkey: accountPK,
                })),
            ];
            const remainingAccounts = [];
            for (const account of accountData) {
                remainingAccounts.push({
                    pubkey: account.pubkey,
                    isWritable: !!(account === null || account === void 0 ? void 0 : account.isWritable),
                    isSigner: false,
                });
            }
            const [collateralVault] = PublicKey.findProgramAddressSync([Buffer.from(SEEDS.COLLATERAL_VAULT_PREFIX), new PublicKey(strategy.pubkey).toBuffer()], program.programId);
            const txAccounts = {
                vault,
                strategy: strategy.pubkey,
                reserve: strategy.state.reserve,
                strategyProgram: this.mangoClient.programId,
                collateralVault,
                feeVault: vaultState.feeVault,
                tokenVault,
                userToken,
                userLp,
                tokenProgram: TOKEN_PROGRAM_ID,
            };
            if (opt === null || opt === void 0 ? void 0 : opt.affiliate) {
                const tx = yield opt.affiliate.affiliateProgram.methods
                    .withdrawDirectlyFromStrategy(amount, new anchor.BN(0))
                    .preInstructions(preInstructions)
                    .postInstructions(postInstructions)
                    .remainingAccounts(remainingAccounts)
                    .accounts(Object.assign(Object.assign({}, txAccounts), { partner: opt.affiliate.partner, user: opt.affiliate.user, vaultProgram: program.programId, vaultLpMint: vaultState.lpMint, owner: walletPubKey }))
                    .transaction();
                return tx;
            }
            const tx = yield program.methods
                .withdrawDirectlyFromStrategy(amount, new anchor.BN(0))
                .preInstructions(preInstructions)
                .postInstructions(postInstructions)
                .remainingAccounts(remainingAccounts)
                .accounts(Object.assign(Object.assign({}, txAccounts), { lpMint: vaultState.lpMint, user: walletPubKey }))
                .transaction();
            return tx;
        });
    }
}
//# sourceMappingURL=mangoV4.js.map