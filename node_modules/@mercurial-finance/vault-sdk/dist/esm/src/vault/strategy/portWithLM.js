var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { PublicKey, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';
import { TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';
import * as anchor from '@project-serum/anchor';
import * as quarry from '@quarryprotocol/quarry-sdk';
import { Token } from '@solana/spl-token';
import * as port from '@mercurial-finance/port-sdk';
import { REWARDER, SEEDS } from '../constants';
export default class PortWithLMHandler {
    constructor(strategyProgram) {
        this.strategyProgram = strategyProgram;
        //@ts-ignore
        this.quarrySDK = quarry.QuarrySDK.load({ provider });
    }
    getReserveState(program, reserve) {
        return __awaiter(this, void 0, void 0, function* () {
            const account = yield program.provider.connection.getAccountInfo(reserve);
            const state = port.ReserveLayout.decode(account.data);
            return {
                collateral: {
                    mintPubkey: state.collateral.mintPubkey,
                    mintTotalSupply: state.collateral.mintTotalSupply.toU64().toNumber(),
                    supplyPubkey: state.collateral.supplyPubkey.toString(),
                },
                state,
            };
        });
    }
    withdraw(walletPubKey, program, strategy, vault, tokenVault, vaultState, userToken, userLp, amount, preInstructions, postInstructions, opt) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!walletPubKey)
                throw new Error('No user wallet public key');
            const { state } = yield this.getReserveState(program, new PublicKey(strategy.state.reserve));
            const { collateral: portCollateral, lendingMarket, liquidity } = state;
            const strategyBuffer = new PublicKey(strategy.pubkey).toBuffer();
            let [collateralVault] = yield PublicKey.findProgramAddress([Buffer.from(SEEDS.COLLATERAL_VAULT_PREFIX), strategyBuffer], program.programId);
            const rewarder = new PublicKey(REWARDER);
            const [quarryPda] = yield PublicKey.findProgramAddress([Buffer.from(SEEDS.QUARRY), rewarder.toBuffer(), portCollateral.mintPubkey.toBuffer()], quarry.QUARRY_ADDRESSES.Mine);
            const [miner] = yield PublicKey.findProgramAddress([Buffer.from(SEEDS.MINER), quarryPda.toBuffer(), new PublicKey(vault).toBuffer()], quarry.QUARRY_ADDRESSES.Mine);
            const minerVault = yield Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, portCollateral.mintPubkey, miner, true);
            const [lendingMarketAuthority] = yield PublicKey.findProgramAddress([lendingMarket.toBuffer()], this.strategyProgram);
            const accountData = [
                { pubkey: liquidity.supplyPubkey, isWritable: true },
                { pubkey: lendingMarket },
                { pubkey: lendingMarketAuthority },
                { pubkey: portCollateral.mintPubkey, isWritable: true },
                { pubkey: SYSVAR_CLOCK_PUBKEY },
                { pubkey: quarry.QUARRY_ADDRESSES.Mine },
                { pubkey: miner, isWritable: true },
                { pubkey: quarryPda, isWritable: true },
                { pubkey: rewarder, isWritable: true },
                { pubkey: minerVault, isWritable: true },
            ];
            const remainingAccounts = [];
            for (const account of accountData) {
                remainingAccounts.push({
                    pubkey: account.pubkey,
                    isWritable: !!account.isWritable,
                    isSigner: false,
                });
            }
            const updateRewardIx = this.quarrySDK.mine.program.instruction.updateQuarryRewards({
                accounts: {
                    rewarder,
                    quarry: quarryPda,
                },
            });
            // port.ReserveData.decode liquidity.oraclePubkey null account as a 1111111111111, so we need to convert it back to null
            // when pass to refreshReserveInstruction
            const oracle = PublicKey.default.toBase58() === liquidity.oraclePubkey.toBase58() ? null : liquidity.oraclePubkey;
            const txAccounts = {
                vault,
                strategy: strategy.pubkey,
                reserve: strategy.state.reserve,
                strategyProgram: this.strategyProgram,
                collateralVault,
                feeVault: vaultState.feeVault,
                tokenVault,
                userToken,
                userLp,
                tokenProgram: TOKEN_PROGRAM_ID,
            };
            if (opt === null || opt === void 0 ? void 0 : opt.affiliate) {
                const tx = yield opt.affiliate.affiliateProgram.methods
                    .withdrawDirectlyFromStrategy(new anchor.BN(amount), new anchor.BN(0))
                    .accounts(Object.assign(Object.assign({}, txAccounts), { partner: opt.affiliate.partner, user: opt.affiliate.user, vaultProgram: program.programId, vaultLpMint: vaultState.lpMint, owner: walletPubKey }))
                    .remainingAccounts(remainingAccounts)
                    .preInstructions(preInstructions.concat([
                    updateRewardIx,
                    port.refreshReserveInstruction(new PublicKey(strategy.state.reserve), oracle),
                ]))
                    .postInstructions(postInstructions)
                    .transaction();
                return tx;
            }
            const tx = yield program.methods
                .withdrawDirectlyFromStrategy(new anchor.BN(amount), new anchor.BN(0))
                .accounts(Object.assign(Object.assign({}, txAccounts), { lpMint: vaultState.lpMint, user: walletPubKey }))
                .remainingAccounts(remainingAccounts)
                .preInstructions(preInstructions.concat([
                updateRewardIx,
                port.refreshReserveInstruction(new PublicKey(strategy.state.reserve), oracle),
            ]))
                .postInstructions(postInstructions)
                .transaction();
            return tx;
        });
    }
}
//# sourceMappingURL=portWithLM.js.map