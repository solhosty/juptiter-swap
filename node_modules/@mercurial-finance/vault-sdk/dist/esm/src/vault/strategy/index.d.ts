/// <reference types="bn.js" />
import { BN } from '@project-serum/anchor';
import { Cluster, PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';
import type { AffiliateVaultProgram, VaultProgram, VaultState } from '../types';
export declare type StrategyType = 'portFinanceWithoutLm' | 'portFinanceWithLm' | 'solendWithoutLm' | 'solendWithLm' | 'francium' | 'apricotWithoutLM' | 'mango' | 'tulip' | 'vault' | 'drift' | 'frakt' | 'cypher' | 'psylend';
export declare type StrategyState = {
    reserve: PublicKey;
    collateralVault: PublicKey;
    strategyType: object;
    bumps: Uint8Array;
    currentLiquidity: BN;
    vault: PublicKey;
};
export declare type Strategy = {
    pubkey: PublicKey;
    state: StrategyState;
};
export declare type ReserveState = {
    collateral: {
        mintPubkey: PublicKey;
        mintTotalSupply: number;
        supplyPubkey: String;
    };
    state: unknown;
};
export interface StrategyHandler {
    strategyProgram?: PublicKey;
    withdraw(walletPubKey: PublicKey, program: VaultProgram, strategy: any, vault: PublicKey, tokenVault: PublicKey, vaultState: VaultState, userToken: PublicKey, userLp: PublicKey, amount: BN, preInstructions: TransactionInstruction[], postInstructions: TransactionInstruction[], opt?: {
        affiliate?: {
            affiliateId: PublicKey;
            affiliateProgram: AffiliateVaultProgram;
            partner: PublicKey;
            user: PublicKey;
        };
    }): Promise<Transaction>;
}
export declare const getStrategyType: (strategyResponse: any) => StrategyType;
export declare const getStrategyHandler: (strategyType: StrategyType, cluster: Cluster, program: VaultProgram) => StrategyHandler | null;
//# sourceMappingURL=index.d.ts.map