var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as mango from '@blockworks-foundation/mango-client';
import * as anchor from '@project-serum/anchor';
import { TOKEN_PROGRAM_ID } from '@solana/spl-token';
import { PublicKey } from '@solana/web3.js';
import { SEEDS } from '../constants';
export default class MangoHandler {
    withdraw(walletPubKey, program, strategy, vault, tokenVault, vaultState, userToken, userLp, amount, preInstructions, postInstructions, opt) {
        return __awaiter(this, void 0, void 0, function* () {
            const [mangoAccountPK] = yield PublicKey.findProgramAddress([MangoHandler.MangoGrouPK.toBuffer(), vault.toBuffer(), Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])], MangoHandler.MangoProgramId);
            const mangoClient = new mango.MangoClient(program.provider.connection, MangoHandler.MangoProgramId);
            const rootBankPK = strategy.state.reserve;
            const mangoGroupState = yield mangoClient.getMangoGroup(MangoHandler.MangoGrouPK);
            yield mangoGroupState.loadRootBanks(program.provider.connection);
            const rootBankIdx = mangoGroupState.getRootBankIndex(new PublicKey(rootBankPK));
            const rootBankState = mangoGroupState.rootBankAccounts[rootBankIdx];
            if (!rootBankState)
                throw new Error('Root bank state not found');
            const nodeBankPK = rootBankState.nodeBanks[0];
            const nodeBankState = rootBankState.nodeBankAccounts.find((t) => t.publicKey.toBase58() === nodeBankPK.toBase58());
            if (!nodeBankState)
                throw new Error('Node bank state not found');
            const accountData = [
                { pubkey: MangoHandler.MangoGrouPK, isWritable: true },
                { pubkey: mangoAccountPK, isWritable: true },
                { pubkey: mangoGroupState.mangoCache, isWritable: true },
                { pubkey: nodeBankPK, isWritable: true },
                { pubkey: nodeBankState.vault, isWritable: true },
                { pubkey: mangoGroupState.signerKey, isWritable: true },
                { pubkey: PublicKey.default },
            ];
            const remainingAccounts = [];
            for (const account of accountData) {
                remainingAccounts.push({
                    pubkey: account.pubkey,
                    isWritable: !!account.isWritable,
                    isSigner: false,
                });
            }
            const [collateralVault] = yield PublicKey.findProgramAddress([Buffer.from(SEEDS.COLLATERAL_VAULT_PREFIX), new PublicKey(strategy.pubkey).toBuffer()], program.programId);
            const txAccounts = {
                vault,
                strategy: strategy.pubkey,
                reserve: strategy.state.reserve,
                strategyProgram: MangoHandler.MangoProgramId,
                collateralVault,
                feeVault: vaultState.feeVault,
                tokenVault,
                userToken,
                userLp,
                tokenProgram: TOKEN_PROGRAM_ID,
            };
            if (opt === null || opt === void 0 ? void 0 : opt.affiliate) {
                const tx = yield opt.affiliate.affiliateProgram.methods
                    .withdrawDirectlyFromStrategy(amount, new anchor.BN(0))
                    .preInstructions(preInstructions)
                    .postInstructions(postInstructions)
                    .remainingAccounts(remainingAccounts)
                    .accounts(Object.assign(Object.assign({}, txAccounts), { partner: opt.affiliate.partner, user: opt.affiliate.user, vaultProgram: program.programId, vaultLpMint: vaultState.lpMint, owner: walletPubKey }))
                    .transaction();
                return tx;
            }
            const tx = yield program.methods
                .withdrawDirectlyFromStrategy(amount, new anchor.BN(0))
                .preInstructions(preInstructions)
                .postInstructions(postInstructions)
                .remainingAccounts(remainingAccounts)
                .accounts(Object.assign(Object.assign({}, txAccounts), { lpMint: vaultState.lpMint, user: walletPubKey }))
                .transaction();
            return tx;
        });
    }
}
MangoHandler.MangoProgramId = new PublicKey('mv3ekLzLbnVPNxjSKvqBpU3ZeZXPQdEC3bp5MDEBG68');
MangoHandler.MangoGrouPK = new PublicKey('98pjRuQjK3qA6gXts96PqZT4Ze5QmnCmt3QYjhbUSPue');
//# sourceMappingURL=mango.js.map