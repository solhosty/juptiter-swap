/// <reference types="bn.js" />
import { BN } from '@project-serum/anchor';
import { PublicKey, TransactionInstruction, Connection, Transaction, Cluster } from '@solana/web3.js';
import { TokenInfo } from '@solana/spl-token-registry';
import { AffiliateInfo, VaultImplementation, VaultState } from './types';
import { StrategyState } from './strategy';
export default class VaultImpl implements VaultImplementation {
    private connection;
    private cluster;
    private program;
    private affiliateId;
    private affiliateProgram;
    private allowOwnerOffCurve?;
    seedBaseKey?: PublicKey;
    tokenInfo: TokenInfo;
    vaultPda: PublicKey;
    tokenVaultPda: PublicKey;
    vaultState: VaultState;
    lpSupply: BN;
    private constructor();
    static createPermissionlessVaultInstruction(connection: Connection, payer: PublicKey, tokenInfo: TokenInfo, opt?: {
        cluster?: Cluster;
        programId?: string;
    }): Promise<TransactionInstruction>;
    static fetchMultipleUserBalance(connection: Connection, lpMintList: Array<PublicKey>, owner: PublicKey): Promise<Array<BN>>;
    static createMultiple(connection: Connection, tokenInfos: Array<TokenInfo>, opt?: {
        seedBaseKey?: PublicKey;
        allowOwnerOffCurve?: boolean;
        cluster?: Cluster;
        programId?: string;
        affiliateId?: PublicKey;
        affiliateProgramId?: string;
    }): Promise<Array<VaultImpl>>;
    static create(connection: Connection, tokenInfo: TokenInfo, opt?: {
        seedBaseKey?: PublicKey;
        allowOwnerOffCurve?: boolean;
        cluster?: Cluster;
        programId?: string;
        affiliateId?: PublicKey;
        affiliateProgramId?: string;
    }): Promise<VaultImpl>;
    getUserBalance(owner: PublicKey): Promise<BN>;
    /** To refetch the latest lpSupply */
    /** Use vaultImpl.lpSupply to use cached result */
    getVaultSupply(): Promise<BN>;
    getWithdrawableAmount(): Promise<BN>;
    refreshVaultState(): Promise<void>;
    private createATAPreInstructions;
    private createAffiliateATAPreInstructions;
    deposit(owner: PublicKey, baseTokenAmount: BN): Promise<Transaction>;
    getStrategiesState(): Promise<Array<StrategyState>>;
    private getStrategyWithHighestLiquidity;
    withdraw(owner: PublicKey, baseTokenAmount: BN, opt?: {
        strategy?: PublicKey;
    }): Promise<Transaction>;
    private withdrawFromVaultReserve;
    getAffiliateInfo(): Promise<AffiliateInfo>;
}
//# sourceMappingURL=index.d.ts.map