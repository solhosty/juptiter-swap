"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_js_1 = require("@solana/web3.js");
const spl_token_1 = require("@solana/spl-token");
const anchor = __importStar(require("@project-serum/anchor"));
const quarry = __importStar(require("@quarryprotocol/quarry-sdk"));
const spl_token_2 = require("@solana/spl-token");
const port = __importStar(require("@mercurial-finance/port-sdk"));
const constants_1 = require("../constants");
class PortWithLMHandler {
    constructor(strategyProgram) {
        this.strategyProgram = strategyProgram;
        //@ts-ignore
        this.quarrySDK = quarry.QuarrySDK.load({ provider });
    }
    getReserveState(program, reserve) {
        return __awaiter(this, void 0, void 0, function* () {
            const account = yield program.provider.connection.getAccountInfo(reserve);
            const state = port.ReserveLayout.decode(account.data);
            return {
                collateral: {
                    mintPubkey: state.collateral.mintPubkey,
                    mintTotalSupply: state.collateral.mintTotalSupply.toU64().toNumber(),
                    supplyPubkey: state.collateral.supplyPubkey.toString(),
                },
                state,
            };
        });
    }
    withdraw(walletPubKey, program, strategy, vault, tokenVault, vaultState, userToken, userLp, amount, preInstructions, postInstructions, opt) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!walletPubKey)
                throw new Error('No user wallet public key');
            const { state } = yield this.getReserveState(program, new web3_js_1.PublicKey(strategy.state.reserve));
            const { collateral: portCollateral, lendingMarket, liquidity } = state;
            const strategyBuffer = new web3_js_1.PublicKey(strategy.pubkey).toBuffer();
            let [collateralVault] = yield web3_js_1.PublicKey.findProgramAddress([Buffer.from(constants_1.SEEDS.COLLATERAL_VAULT_PREFIX), strategyBuffer], program.programId);
            const rewarder = new web3_js_1.PublicKey(constants_1.REWARDER);
            const [quarryPda] = yield web3_js_1.PublicKey.findProgramAddress([Buffer.from(constants_1.SEEDS.QUARRY), rewarder.toBuffer(), portCollateral.mintPubkey.toBuffer()], quarry.QUARRY_ADDRESSES.Mine);
            const [miner] = yield web3_js_1.PublicKey.findProgramAddress([Buffer.from(constants_1.SEEDS.MINER), quarryPda.toBuffer(), new web3_js_1.PublicKey(vault).toBuffer()], quarry.QUARRY_ADDRESSES.Mine);
            const minerVault = yield spl_token_2.Token.getAssociatedTokenAddress(spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID, spl_token_1.TOKEN_PROGRAM_ID, portCollateral.mintPubkey, miner, true);
            const [lendingMarketAuthority] = yield web3_js_1.PublicKey.findProgramAddress([lendingMarket.toBuffer()], this.strategyProgram);
            const accountData = [
                { pubkey: liquidity.supplyPubkey, isWritable: true },
                { pubkey: lendingMarket },
                { pubkey: lendingMarketAuthority },
                { pubkey: portCollateral.mintPubkey, isWritable: true },
                { pubkey: web3_js_1.SYSVAR_CLOCK_PUBKEY },
                { pubkey: quarry.QUARRY_ADDRESSES.Mine },
                { pubkey: miner, isWritable: true },
                { pubkey: quarryPda, isWritable: true },
                { pubkey: rewarder, isWritable: true },
                { pubkey: minerVault, isWritable: true },
            ];
            const remainingAccounts = [];
            for (const account of accountData) {
                remainingAccounts.push({
                    pubkey: account.pubkey,
                    isWritable: !!account.isWritable,
                    isSigner: false,
                });
            }
            const updateRewardIx = this.quarrySDK.mine.program.instruction.updateQuarryRewards({
                accounts: {
                    rewarder,
                    quarry: quarryPda,
                },
            });
            // port.ReserveData.decode liquidity.oraclePubkey null account as a 1111111111111, so we need to convert it back to null
            // when pass to refreshReserveInstruction
            const oracle = web3_js_1.PublicKey.default.toBase58() === liquidity.oraclePubkey.toBase58() ? null : liquidity.oraclePubkey;
            const txAccounts = {
                vault,
                strategy: strategy.pubkey,
                reserve: strategy.state.reserve,
                strategyProgram: this.strategyProgram,
                collateralVault,
                feeVault: vaultState.feeVault,
                tokenVault,
                userToken,
                userLp,
                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
            };
            if (opt === null || opt === void 0 ? void 0 : opt.affiliate) {
                const tx = yield opt.affiliate.affiliateProgram.methods
                    .withdrawDirectlyFromStrategy(new anchor.BN(amount), new anchor.BN(0))
                    .accounts(Object.assign(Object.assign({}, txAccounts), { partner: opt.affiliate.partner, user: opt.affiliate.user, vaultProgram: program.programId, vaultLpMint: vaultState.lpMint, owner: walletPubKey }))
                    .remainingAccounts(remainingAccounts)
                    .preInstructions(preInstructions.concat([
                    updateRewardIx,
                    port.refreshReserveInstruction(new web3_js_1.PublicKey(strategy.state.reserve), oracle),
                ]))
                    .postInstructions(postInstructions)
                    .transaction();
                return tx;
            }
            const tx = yield program.methods
                .withdrawDirectlyFromStrategy(new anchor.BN(amount), new anchor.BN(0))
                .accounts(Object.assign(Object.assign({}, txAccounts), { lpMint: vaultState.lpMint, user: walletPubKey }))
                .remainingAccounts(remainingAccounts)
                .preInstructions(preInstructions.concat([
                updateRewardIx,
                port.refreshReserveInstruction(new web3_js_1.PublicKey(strategy.state.reserve), oracle),
            ]))
                .postInstructions(postInstructions)
                .transaction();
            return tx;
        });
    }
}
exports.default = PortWithLMHandler;
//# sourceMappingURL=portWithLM.js.map