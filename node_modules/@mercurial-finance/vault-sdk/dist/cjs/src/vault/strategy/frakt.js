"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_js_1 = require("@solana/web3.js");
const spl_token_1 = require("@solana/spl-token");
const bn_js_1 = __importDefault(require("bn.js"));
const constants_1 = require("../constants");
const utils_1 = require("../utils");
const FRAKT_PROGRAM_ID = new web3_js_1.PublicKey('A66HabVL3DzNzeJgcHYtRRNW1ZRMKwBfrdSR4kLsZ9DJ');
const FRAKT_ADMIN_FEE_PUBKEY = new web3_js_1.PublicKey('9aTtUqAnuSMndCpjcPosRNf3fCkrTQAV8C8GERf3tZi3');
class FraktHandler {
    constructor(program) {
        this.connection = program.provider.connection;
    }
    withdraw(walletPubKey, program, strategy, vault, tokenVault, vaultState, userToken, userLp, amount, preInstructions, postInstructions, opt) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!walletPubKey)
                throw new Error('No user wallet public key');
            const [liqOwner] = yield web3_js_1.PublicKey.findProgramAddress([Buffer.from(constants_1.SEEDS.FRAKT_LENDING), strategy.state.reserve.toBuffer()], FRAKT_PROGRAM_ID);
            const strategyBuffer = new web3_js_1.PublicKey(strategy.pubkey).toBuffer();
            const strategyReserveBuffer = new web3_js_1.PublicKey(strategy.state.reserve).toBuffer();
            const [collateralVault] = yield web3_js_1.PublicKey.findProgramAddress([Buffer.from(constants_1.SEEDS.COLLATERAL_VAULT_PREFIX), strategyBuffer], program.programId);
            const [strategyOwner] = yield web3_js_1.PublicKey.findProgramAddress([Buffer.from(constants_1.SEEDS.FRAKT), strategyBuffer], program.programId);
            const [tokenAccount, createTokenAccountIx] = yield (0, utils_1.getOrCreateATAInstruction)(vaultState.tokenMint, strategyOwner, this.connection, {
                payer: walletPubKey,
            });
            createTokenAccountIx && preInstructions.push(createTokenAccountIx);
            const [deposit] = yield web3_js_1.PublicKey.findProgramAddress([Buffer.from(constants_1.SEEDS.DEPOSIT), strategyReserveBuffer, new web3_js_1.PublicKey(strategyOwner).toBuffer()], FRAKT_PROGRAM_ID);
            const accounts = [
                { pubkey: strategyOwner, isWritable: true },
                { pubkey: tokenAccount, isWritable: true },
                { pubkey: liqOwner, isWritable: true },
                { pubkey: deposit, isWritable: true },
                { pubkey: FRAKT_ADMIN_FEE_PUBKEY, isWritable: true },
                { pubkey: web3_js_1.SystemProgram.programId },
                { pubkey: web3_js_1.SYSVAR_CLOCK_PUBKEY },
            ];
            const remainingAccounts = [];
            for (const account of accounts) {
                remainingAccounts.push({
                    pubkey: account.pubkey,
                    isWritable: !!account.isWritable,
                    isSigner: false,
                });
            }
            // prevent duplicate as spot market account pubkey will be add on program side
            const remainingAccountsWithoutReserve = remainingAccounts.filter(({ pubkey }) => !pubkey.equals(strategy.state.reserve));
            const txAccounts = {
                vault,
                strategy: new web3_js_1.PublicKey(strategy.pubkey),
                reserve: new web3_js_1.PublicKey(strategy.state.reserve),
                strategyProgram: FRAKT_PROGRAM_ID,
                collateralVault,
                feeVault: vaultState.feeVault,
                tokenVault,
                userToken,
                userLp,
                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
            };
            if (opt === null || opt === void 0 ? void 0 : opt.affiliate) {
                const tx = yield opt.affiliate.affiliateProgram.methods
                    .withdrawDirectlyFromStrategy(new bn_js_1.default(amount), new bn_js_1.default(0))
                    .accounts(Object.assign(Object.assign({}, txAccounts), { partner: opt.affiliate.partner, user: opt.affiliate.user, vaultProgram: program.programId, vaultLpMint: vaultState.lpMint, owner: walletPubKey }))
                    .remainingAccounts(remainingAccountsWithoutReserve)
                    .preInstructions(preInstructions)
                    .postInstructions(postInstructions)
                    .transaction();
                return tx;
            }
            const tx = yield program.methods
                .withdrawDirectlyFromStrategy(new bn_js_1.default(amount), new bn_js_1.default(0))
                .accounts(Object.assign(Object.assign({}, txAccounts), { lpMint: vaultState.lpMint, user: walletPubKey }))
                .remainingAccounts(remainingAccountsWithoutReserve)
                .preInstructions(preInstructions)
                .postInstructions(postInstructions)
                .transaction();
            return tx;
        });
    }
}
exports.default = FraktHandler;
//# sourceMappingURL=frakt.js.map