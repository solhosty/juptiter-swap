"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStrategyHandler = exports.getStrategyType = void 0;
const constants_1 = require("../constants");
const apricotWithoutLM_1 = __importDefault(require("./apricotWithoutLM"));
const francium_1 = __importDefault(require("./francium"));
const mangoV4_1 = __importDefault(require("./mangoV4"));
const tulip_1 = __importDefault(require("./tulip"));
const drift_1 = __importDefault(require("./drift"));
const portWithLM_1 = __importDefault(require("./portWithLM"));
const portWithoutLM_1 = __importDefault(require("./portWithoutLM"));
const solendWithLM_1 = __importDefault(require("./solendWithLM"));
const solendWithoutLM_1 = __importDefault(require("./solendWithoutLM"));
const vault_1 = __importDefault(require("./vault"));
const frakt_1 = __importDefault(require("./frakt"));
const cypher_1 = __importDefault(require("./cypher"));
const psylend_1 = __importDefault(require("./psylend"));
const getStrategyType = (strategyResponse) => {
    return Object.keys(strategyResponse)[0];
};
exports.getStrategyType = getStrategyType;
const getStrategyHandler = (strategyType, cluster, program) => {
    const strategyProgramAddresses = constants_1.StrategyProgram[cluster !== null && cluster !== void 0 ? cluster : 'mainnet-beta'];
    switch (strategyType) {
        case 'solendWithoutLm':
            return new solendWithoutLM_1.default(strategyProgramAddresses.solend);
        case 'solendWithLm':
            return new solendWithLM_1.default(strategyProgramAddresses.solend);
        case 'portFinanceWithoutLm':
            return new portWithoutLM_1.default(strategyProgramAddresses.portFinance);
        case 'portFinanceWithLm':
            return new portWithLM_1.default(strategyProgramAddresses.portFinance);
        case 'francium':
            return new francium_1.default();
        case 'apricotWithoutLM':
            return new apricotWithoutLM_1.default();
        case 'mango':
            return new mangoV4_1.default(cluster, program);
        case 'tulip':
            return new tulip_1.default();
        case 'vault':
            return new vault_1.default();
        case 'drift':
            return new drift_1.default(cluster, program);
        case 'frakt':
            return new frakt_1.default(program);
        case 'cypher':
            return new cypher_1.default(cluster, program);
        case 'psylend':
            return new psylend_1.default(cluster, program);
        default:
            return null;
    }
};
exports.getStrategyHandler = getStrategyHandler;
//# sourceMappingURL=index.js.map