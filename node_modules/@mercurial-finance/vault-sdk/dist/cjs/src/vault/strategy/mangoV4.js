"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mango_v4_1 = require("@mercurial-finance/mango-v4");
const client_1 = require("@mercurial-finance/mango-v4/dist/client");
const anchor = __importStar(require("@project-serum/anchor"));
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const constants_1 = require("../constants");
const utils_1 = require("../utils");
const MANGO_GROUP_PK = new web3_js_1.PublicKey('78b8f4cGCwmZ9ysPFMWLaLTkkaYnUjwMJYStWe5RTSSX');
class MangoHandler {
    constructor(cluster, program) {
        this.cluster = cluster;
        this.mangoClient = mango_v4_1.MangoClient.connect(program.provider, this.cluster, mango_v4_1.MANGO_V4_ID[cluster]);
        this.connection = program.provider.connection;
    }
    withdraw(walletPubKey, program, strategy, vault, tokenVault, vaultState, userToken, userLp, amount, preInstructions, postInstructions, opt) {
        return __awaiter(this, void 0, void 0, function* () {
            const group = yield this.mangoClient.getGroup(MANGO_GROUP_PK);
            yield group.reloadAll(this.mangoClient);
            const bank = yield group.getFirstBankByMint(vaultState.tokenMint);
            const strategyBuffer = new web3_js_1.PublicKey(strategy.pubkey).toBuffer();
            const [strategyOwner] = web3_js_1.PublicKey.findProgramAddressSync([Buffer.from(constants_1.SEEDS.MANGO), strategyBuffer], program.programId);
            const [mangoAccountPK] = web3_js_1.PublicKey.findProgramAddressSync([Buffer.from(constants_1.SEEDS.MANGO_ACCOUNT), bank.group.toBuffer(), strategyOwner.toBuffer(), Buffer.from([0, 0, 0, 0])], // Mango account number (0u32)
            this.mangoClient.programId);
            const [tokenAccount, createTokenAccountIx] = yield (0, utils_1.getOrCreateATAInstruction)(vaultState.tokenMint, strategyOwner, this.connection, {
                payer: walletPubKey,
            });
            createTokenAccountIx && preInstructions.push(createTokenAccountIx);
            const mangoAccount = yield this.mangoClient.getMangoAccount(mangoAccountPK);
            const healthRemainingAccounts = yield this.mangoClient.buildHealthRemainingAccounts(client_1.AccountRetriever.Fixed, group, [mangoAccount], [bank]);
            const accountData = [
                { pubkey: bank.group },
                { pubkey: mangoAccountPK, isWritable: true },
                { pubkey: strategyOwner },
                { pubkey: bank.vault, isWritable: true },
                { pubkey: bank.oracle },
                { pubkey: tokenAccount, isWritable: true },
                ...healthRemainingAccounts.map((accountPK) => ({
                    pubkey: accountPK,
                })),
            ];
            const remainingAccounts = [];
            for (const account of accountData) {
                remainingAccounts.push({
                    pubkey: account.pubkey,
                    isWritable: !!(account === null || account === void 0 ? void 0 : account.isWritable),
                    isSigner: false,
                });
            }
            const [collateralVault] = web3_js_1.PublicKey.findProgramAddressSync([Buffer.from(constants_1.SEEDS.COLLATERAL_VAULT_PREFIX), new web3_js_1.PublicKey(strategy.pubkey).toBuffer()], program.programId);
            const txAccounts = {
                vault,
                strategy: strategy.pubkey,
                reserve: strategy.state.reserve,
                strategyProgram: this.mangoClient.programId,
                collateralVault,
                feeVault: vaultState.feeVault,
                tokenVault,
                userToken,
                userLp,
                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
            };
            if (opt === null || opt === void 0 ? void 0 : opt.affiliate) {
                const tx = yield opt.affiliate.affiliateProgram.methods
                    .withdrawDirectlyFromStrategy(amount, new anchor.BN(0))
                    .preInstructions(preInstructions)
                    .postInstructions(postInstructions)
                    .remainingAccounts(remainingAccounts)
                    .accounts(Object.assign(Object.assign({}, txAccounts), { partner: opt.affiliate.partner, user: opt.affiliate.user, vaultProgram: program.programId, vaultLpMint: vaultState.lpMint, owner: walletPubKey }))
                    .transaction();
                return tx;
            }
            const tx = yield program.methods
                .withdrawDirectlyFromStrategy(amount, new anchor.BN(0))
                .preInstructions(preInstructions)
                .postInstructions(postInstructions)
                .remainingAccounts(remainingAccounts)
                .accounts(Object.assign(Object.assign({}, txAccounts), { lpMint: vaultState.lpMint, user: walletPubKey }))
                .transaction();
            return tx;
        });
    }
}
exports.default = MangoHandler;
//# sourceMappingURL=mangoV4.js.map