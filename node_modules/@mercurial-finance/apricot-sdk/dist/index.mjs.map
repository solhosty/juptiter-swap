{"version":3,"sources":["../src/addresses.ts","../src/constants/commands.ts","../src/constants/configs.ts","../src/types.ts","../src/utils/index.ts"],"sourcesContent":["import { AppConfig, TokenID } from \"./types\";\nimport { AccountMeta, PublicKey } from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { LP_SWAP_METAS, LP_TO_TARGET_SWAP, OrcaLpSwapInfo } from \"./constants\";\nimport invariant from \"tiny-invariant\";\n\n// mostly computes addresses\nexport class Addresses {\n    config: AppConfig;\n    constructor(config: AppConfig) {\n      this.config = config;\n    }\n\n    getProgramKey() {\n      return this.config.programPubkey;\n    }\n\n    getAdminKey() {\n      return this.config.adminPubkey;\n    }\n\n    mintKeyStrToPoolId(mintKeyStr: string) : number {\n      return this.config.mintKeyStrToPoolId(mintKeyStr);\n    }\n\n    getBasePda() {\n      return PublicKey.findProgramAddress([Buffer.from(\"2\")], this.config.programPubkey);\n    }\n    getPricePda() {\n      return PublicKey.findProgramAddress([Buffer.from(\"PRICE\")], this.config.programPubkey);\n    }\n    getPoolListKey(basePda: PublicKey) {\n      return PublicKey.createWithSeed(basePda, \"PoolList\", this.config.programPubkey);\n    }\n    POOL_SUMMARIES_SEED = \"PoolSummaries\";\n    getPoolSummariesKey() {\n      return PublicKey.createWithSeed(this.config.adminPubkey, this.POOL_SUMMARIES_SEED, this.config.programPubkey);\n    }\n\n    getPriceSummariesKey(basePda: PublicKey) {\n      return PublicKey.createWithSeed(basePda, \"PriceSummaries\", this.config.programPubkey);\n    }\n    static USER_STATS_SEED =  \"UserPagesStats\";\n    getUserPagesStatsKey() {\n      return PublicKey.createWithSeed(this.config.adminPubkey, Addresses.USER_STATS_SEED, this.config.programPubkey);\n    }\n    getUsersPageKey(basePda: PublicKey, page_id: number) {\n      return PublicKey.createWithSeed(basePda, \"UsersPage_\"+page_id, this.config.programPubkey);\n    }\n\n    getLmAptVault(): PublicKey {\n      return this.config.lmAptVault;\n    }\n\n    getAssetPoolKey(basePda: PublicKey, mintKeyStr: string) {\n      const poolSeedStr = this.mintKeyStrToPoolSeedStr(mintKeyStr);\n      return PublicKey.createWithSeed(basePda, poolSeedStr, this.config.programPubkey);\n    }\n    getAssetPriceKey(pricePda: PublicKey, mintKeyStr: string) {\n      const poolSeedStr = this.mintKeyStrToPoolSeedStr(mintKeyStr);\n      return PublicKey.createWithSeed(pricePda, poolSeedStr, this.config.programPubkey);\n    }\n    getAssetPoolSplKey(basePda:PublicKey, mintKeyStr: string) {\n      const poolSeedStr = this.mintKeyStrToPoolSeedStr(mintKeyStr);\n      return PublicKey.createWithSeed(basePda, poolSeedStr, TOKEN_PROGRAM_ID);\n    }\n    async getAssetPoolStakeTableKey(mintKeyStr: string) {\n      const [basePda] = await this.getBasePda();\n      const stakeSeedStr = this.mintKeyStrToStakeTableSeedStr(mintKeyStr);\n      return PublicKey.createWithSeed(basePda, stakeSeedStr, this.config.programPubkey);\n    }\n    getUserInfoKey(walletKey: PublicKey) {\n      return PublicKey.createWithSeed(walletKey, \"UserInfo\", this.config.programPubkey);\n    }\n    poolIdToSeedStr(pool_id: number) {\n      const char1 = String.fromCharCode(pool_id / 16 + \"a\".charCodeAt(0));\n      const char2 = String.fromCharCode(pool_id % 16 + \"a\".charCodeAt(0));\n      return \"POOL__\" + char1 + char2;\n    }\n    poolIdToStakeTableSeedStr(pool_id: number) {\n      const char1 = String.fromCharCode(pool_id / 16 + \"a\".charCodeAt(0));\n      const char2 = String.fromCharCode(pool_id % 16 + \"a\".charCodeAt(0));\n      return \"STAK__\" + char1 + char2;\n    }\n\n    mintKeyStrToPoolSeedStr(mintKeyStr: string) {\n      const poolId = this.config.mintKeyStrToPoolId(mintKeyStr);\n      return this.poolIdToSeedStr(poolId);\n    }\n\n    mintKeyStrToStakeTableSeedStr(mintKeyStr: string) {\n      const poolId = this.config.mintKeyStrToPoolId(mintKeyStr);\n      return this.poolIdToStakeTableSeedStr(poolId);\n    }\n\n    getLpTargetSwap(tokenId: TokenID) : number {\n      return LP_TO_TARGET_SWAP[tokenId]!;\n    }\n\n    async getLpDepositKeys(tokenId: TokenID) : Promise<AccountMeta[]> {\n      const [ownerKey, _bump] = await this.getBasePda();\n      const lpSwapInfo = LP_SWAP_METAS[tokenId]!;\n      invariant(lpSwapInfo);\n      return await lpSwapInfo.getLpDepositKeys(ownerKey);\n    }\n\n    async getLpWithdrawKeys(tokenId: TokenID) : Promise<AccountMeta[]> {\n      const [ownerKey, _bump] = await this.getBasePda();\n      const lpSwapInfo = LP_SWAP_METAS[tokenId]!;\n      invariant(lpSwapInfo);\n      return await lpSwapInfo.getLpWithdrawKeys(ownerKey);\n    }\n\n    async getLpStakeKeys(tokenId: TokenID) : Promise<AccountMeta[]> {\n      const [ownerKey, _bump] = await this.getBasePda();\n      const lpSwapInfo = LP_SWAP_METAS[tokenId]!;\n      invariant(lpSwapInfo);\n      const keys = await lpSwapInfo.getLpStakeKeys(ownerKey);\n      return keys;\n    }\n\n    async getLpFirstStakeKeys(tokenId: TokenID): Promise<AccountMeta[]> {\n      const [ownerKey, _bump] = await this.getBasePda();\n      const lpSwapInfo = LP_SWAP_METAS[tokenId]! as OrcaLpSwapInfo;\n      invariant(lpSwapInfo);\n      invariant(lpSwapInfo.isDoubleDipSupported);\n      return await lpSwapInfo.getFirstStakeKeys(ownerKey);\n    }\n\n    async getLpSecondStakeKeys(tokenId: TokenID): Promise<AccountMeta[]> {\n      const [ownerKey, _bump] = await this.getBasePda();\n      const lpSwapInfo = LP_SWAP_METAS[tokenId]! as OrcaLpSwapInfo;\n      invariant(lpSwapInfo);\n      invariant(lpSwapInfo.isDoubleDipSupported);\n      return await lpSwapInfo.getSecondStakeKeys(ownerKey);\n    }\n\n    async getFloatingLpTokenAccount(tokenId: TokenID) {\n      const lpSwapInfo = LP_SWAP_METAS[tokenId] as OrcaLpSwapInfo;\n      invariant(lpSwapInfo instanceof OrcaLpSwapInfo);\n      const [ownerKey] = await this.getBasePda();\n      const { pdaFarmTokenAccount: floatingLpSplKey } = await lpSwapInfo.getPdaKeys(ownerKey);\n      return floatingLpSplKey;\n    }\n}\n","export const CMD_REFRESH_USER = 0x0a;\n\nexport const CMD_ADD_USER_AND_DEPOSIT = 0x10;\nexport const CMD_DEPOSIT = 0x11;\nexport const CMD_WITHDRAW = 0x12;\nexport const CMD_BORROW = 0x13;\nexport const CMD_REPAY = 0x14;\nexport const CMD_EXTERN_LIQUIDATE = 0x15;\n// DEPRECATED self-liquidate\nexport const CMD_UPDATE_USER_CONFIG = 0x17;\nexport const CMD_MARGIN_SWAP = 0x18;\nexport const CMD_UPDATE_USER_ASSET_CONFIG = 0x19;\nexport const CMD_WITHDRAW_AND_REMOVE_USER = 0x1a;\n// export const CMD_TOKEN_DEPOSIT = 0x1b;\n// export const CMD_TOKEN_WITHDRAW = 0x1c;\nexport const CMD_LP_CREATE = 0x1d;\nexport const CMD_LP_REDEEM = 0x1e;\nexport const CMD_LP_OP_CHECK = 0x21;\nexport const CMD_LP_OP_ENDCHECK = 0x22;\nexport const CMD_LP_STAKE = 0x23;\nexport const CMD_LP_UNSTAKE = 0x24;\nexport const CMD_CLAIM_APT_LM_REWARD = 0x29;\nexport const CMD_MAKE_LM_REWARD_AVAILABLE = 0x2a;\nexport const CMD_LP_STAKE_SECOND = 0x81;\nexport const CMD_LP_UNSTAKE_SECOND = 0x82;\n// other trivia\n// swap identifiers\nexport const SWAP_FAKE = 0x00;\nexport const SWAP_SERUM = 0x01;\nexport const SWAP_RAYDIUM = 0x02;\nexport const SWAP_SABER = 0x03;\nexport const SWAP_MERCURIAL = 0x04;\nexport const SWAP_ORCA = 0x05;\n\nexport const INVALID_PAGE = 65535;\nexport const AMOUNT_MULTIPLIER = 16777216;\nexport const MAX_ASSIST_ACTIONS = 6;\nexport const ASSIST_MODE_STABLE_ONLY = 2;\n","import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { PublicKey, SystemProgram, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport invariant from 'tiny-invariant';\nimport { getAssociatedTokenPubkey } from '..';\nimport {\n  TokenID,\n  TokenCategory,\n  AppConfig,\n  Dex,\n  PoolId,\n  LpSwapKeyInfo,\n  DualRewardInfo,\n} from '../types';\nimport { SWAP_ORCA, SWAP_SABER, SWAP_RAYDIUM } from './commands';\nimport { Decimal } from 'decimal.js';\nexport const FAKE_KEY = SystemProgram.programId;\n\nexport const SAFE_LIMIT: Decimal = new Decimal(0.9);\nexport const FORCE_ASSIST_LIMIT: Decimal = new Decimal(1.0);\nexport const LIQUIDATION_LIMIT: Decimal = new Decimal(1.01);\n\n// prettier-ignore\nexport const MINTS: { [key in TokenID]: PublicKey } = {\n  [TokenID.APT]: new PublicKey(\"APTtJyaRX5yGTsJU522N4VYWg3vCvSb65eam5GrPT5Rt\"),\n  [TokenID.BTC]: new PublicKey(\"9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E\"),\n  [TokenID.ETH]: new PublicKey(\"2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk\"),\n  [TokenID.SOL]: new PublicKey(\"So11111111111111111111111111111111111111112\"),\n  [TokenID.mSOL]: new PublicKey(\"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\"),\n  [TokenID.stSOL]: new PublicKey(\"7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj\"),\n  [TokenID.whETH]: new PublicKey(\"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\"),\n  [TokenID.scnSOL]: new PublicKey(\"5oVNBeEEQvYi1cX3ir8Dx5n1P7pdxydbGF2X4TxVusJm\"),\n\n  [TokenID.RAY]: new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\"),\n  [TokenID.ORCA]: new PublicKey(\"orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE\"),\n  [TokenID.SBR]: new PublicKey(\"Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1\"),\n  [TokenID.MERC]: new PublicKey(\"MERt85fc5boKw3BW1eYdxonEuJNvXbiMbs6hvheau5K\"),\n  [TokenID.MNDE]: new PublicKey(\"MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey\"),\n  [TokenID.FTT]: new PublicKey(\"AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3\"),\n  [TokenID.SRM]: new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"),\n  [TokenID.wLDO]: new PublicKey(\"HZRCwxP2Vq9PCpPXooayhJ2bxTpo5xfpQrwB1svh332p\"),\n  [TokenID.SOCN]: new PublicKey(\"11111111111111111111111111111111\"), // fake address\n  [TokenID.wLUNA]: new PublicKey(\"F6v4wfAdJB8D8p77bMXZgYt8TDKsYxLYxH5AFhUkYx9W\"),\n\n  [TokenID.USDT]: new PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"),\n  [TokenID.USDC]: new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"),\n  [TokenID.UST]: new PublicKey(\"CXLBjMMcwkc17GfJtBos6rQCo1ypeH6eDbB82Kby4MRm\"),\n  [TokenID.USTv2]: new PublicKey(\"9vMJfxuKxXBoEa7rM12mYLMwTacLMLDJqHozw96WQL8i\"),\n\n  [TokenID.USDT_USDC_SABER]: new PublicKey(\"2poo1w1DL6yd2WNTCnNTzDqkC6MBXq7axo77P16yrBuf\"),\n  [TokenID.mSOL_SOL_SABER]: new PublicKey('SoLEao8wTzSfqhuou8rcYsVoLjthVmiXuEjzdNPMnCz'),\n  [TokenID.stSOL_SOL_SABER]: new PublicKey('stSjCmjQ96BiGhTk8gkU22j1739R8YBQVMq7KXWTqUV'),\n  [TokenID.USDC_USDT_ORCA]: new PublicKey(\"H2uzgruPvonVpCRhwwdukcpXK8TG17swFNzYFr2rtPxy\"),\n  [TokenID.UST_USDC_SABER]: new PublicKey(\"UST32f2JtPGocLzsL41B3VBBoJzTm1mK1j3rwyM3Wgc\"),\n  [TokenID.SOL_USDC_RAYDIUM]: new PublicKey(\"8HoQnePLqPj4M7PUDzfw8e3Ymdwgc7NLGnaTUapubyvu\"),\n  [TokenID.RAY_USDC_RAYDIUM]: new PublicKey(\"FbC6K13MzHvN42bXrtGaWsvZY9fxrackRSZcBGfjPc7m\"),\n  [TokenID.SOL_USDT_RAYDIUM]: new PublicKey(\"Epm4KfTj4DMrvqn6Bwg2Tr2N8vhQuNbuK8bESFp4k33K\"),\n  [TokenID.SOL_USDC_ORCA]: new PublicKey(\"APDFRM3HMr8CAGXwKHiu2f5ePSpaiEJhaURwhsRrUUt9\"),\n  [TokenID.mSOL_SOL_ORCA]: new PublicKey(\"29cdoMgu6MS2VXpcMo1sqRdWEzdUR9tjvoh8fcK8Z87R\"),\n  [TokenID.ORCA_USDC_ORCA]: new PublicKey(\"n8Mpu28RjeYD7oUX3LG1tPxzhRZh3YYLRSHcHRdS3Zx\"),\n  [TokenID.ORCA_SOL_ORCA]: new PublicKey(\"2uVjAuRXavpM6h1scGQaxqb6HVaNRn6T2X7HHXTabz25\"),\n  [TokenID.ETH_USDC_ORCA]: new PublicKey(\"3e1W6Aqcbuk2DfHUwRiRcyzpyYRRjg6yhZZcyEARydUX\"),\n  [TokenID.SOL_USDT_ORCA]: new PublicKey(\"FZthQCuYHhcfiDma7QrX7buDHwrZEd7vL8SjS6LQa3Tx\"),\n  [TokenID.mSOL_SOL_RAYDIUM]: new PublicKey(\"5ijRoAHVgd5T5CNtK5KDRUBZ7Bffb69nktMj5n6ks6m4\"),\n  [TokenID.ETH_SOL_ORCA]: new PublicKey(\"71FymgN2ZUf7VvVTLE8jYEnjP3jSK1Frp2XT1nHs8Hob\"),\n  [TokenID.BTC_mSOL_ORCA]: new PublicKey(\"8nKJ4z9FSw6wrVZKASqBiS9DS1CiNsRnqwCCKVQjqdkB\"),\n  [TokenID.mSOL_USDC_ORCA]: new PublicKey(\"8PSfyiTVwPb6Rr2iZ8F3kNpbg65BCfJM9v8LfB916r44\"),\n  [TokenID.USTv2_USDC_SABER]: new PublicKey(\"USTCmQpbUGj5iTsXdnTYHZupY1QpftDZhLokSVk6UWi\"),\n  [TokenID.APT_USDC_ORCA]: new PublicKey(\"HNrYngS1eoqkjWro9D3Y5Z9sWBDzPNK2tX4rfV2Up177\"),\n  [TokenID.RAY_USDT_RAYDIUM]: new PublicKey(\"C3sT1R3nsw4AVdepvLTLKr5Gvszr7jufyBWUCvy4TUvT\"),\n  [TokenID.RAY_ETH_RAYDIUM]: new PublicKey(\"mjQH33MqZv5aKAbKHi8dG3g3qXeRQqq1GFcXceZkNSr\"),\n  [TokenID.RAY_SOL_RAYDIUM]: new PublicKey(\"89ZKE4aoyfLBe2RuV6jM3JGNhaV18Nxh8eNtjRcndBip\"),\n  [TokenID.SRM_USDC_RAYDIUM]: new PublicKey(\"9XnZd82j34KxNLgQfz29jGbYdxsYznTWRpvZE3SRE7JG\"),\n  [TokenID.stSOL_USTv2_ORCA]: new PublicKey('HTZd53fYwYQRyAjiaPsZy9Gf41gobFdqkF4oKe3XLi95'),\n  [TokenID.ORCA_whETH_ORCA]: new PublicKey('GsfyYHkSgC3Ta6aWR9MjB2sxoBrkGGeR2tAwXbpphf3'),\n};\n\n// prettier-ignore\nexport const DECIMAL_MULT: { [key in TokenID]: number } = {\n  [TokenID.APT] : 1e6,\n  [TokenID.BTC] : 1e6,\n  [TokenID.ETH] : 1e6,\n  [TokenID.SOL] : 1e9,\n  [TokenID.mSOL]: 1e9,\n  [TokenID.stSOL]: 1e9,\n  [TokenID.whETH]: 1e8,\n  [TokenID.scnSOL]: 1e9,\n\n  [TokenID.RAY] : 1e6,\n  [TokenID.ORCA] : 1e6,\n  [TokenID.SBR] : 1e6,\n  [TokenID.MERC] : 1e6,\n  [TokenID.MNDE] : 1e9,\n  [TokenID.FTT]: 1e6,\n  [TokenID.SRM]: 1e6,\n  [TokenID.wLDO]: 1e8,\n  [TokenID.SOCN]: 1e9,\n  [TokenID.wLUNA]: 1e6,\n\n  [TokenID.USDT]: 1e6,\n  [TokenID.USDC]: 1e6,\n  [TokenID.UST] : 1e9,\n  [TokenID.USTv2] : 1e6,\n\n  [TokenID.USDT_USDC_SABER]: 1e6,\n  [TokenID.mSOL_SOL_SABER]: 1e9,\n  [TokenID.stSOL_SOL_SABER]: 1e9,\n  [TokenID.USDC_USDT_ORCA]: 1e6,\n  [TokenID.UST_USDC_SABER]: 1e9,\n  [TokenID.SOL_USDC_RAYDIUM]: 1e9,\n  [TokenID.RAY_USDC_RAYDIUM]: 1e6,\n  [TokenID.SOL_USDT_RAYDIUM]: 1e9,\n  [TokenID.SOL_USDC_ORCA]: 1e6,\n  [TokenID.mSOL_SOL_ORCA]: 1e6,\n  [TokenID.ORCA_USDC_ORCA]: 1e6,\n  [TokenID.ORCA_SOL_ORCA]: 1e6,\n  [TokenID.ETH_USDC_ORCA]: 1e6,\n  [TokenID.SOL_USDT_ORCA]: 1e6,\n  [TokenID.mSOL_SOL_RAYDIUM]: 1e9,\n  [TokenID.ETH_SOL_ORCA]: 1e6,\n  [TokenID.BTC_mSOL_ORCA]: 1e6,\n  [TokenID.mSOL_USDC_ORCA]: 1e6,\n  [TokenID.USTv2_USDC_SABER]: 1e6,\n  [TokenID.APT_USDC_ORCA]: 1e6,\n  [TokenID.RAY_USDT_RAYDIUM]: 1e6,\n  [TokenID.RAY_ETH_RAYDIUM]: 1e6,\n  [TokenID.RAY_SOL_RAYDIUM]: 1e6,\n  [TokenID.SRM_USDC_RAYDIUM]: 1e6,\n  [TokenID.stSOL_USTv2_ORCA]: 1e6,\n  [TokenID.ORCA_whETH_ORCA]: 1e6,\n};\n\n// prettier-ignore\nconst POOL_IDS: { [key in TokenID]?: PoolId } = {\n  [TokenID.BTC]: 0,\n  [TokenID.ETH]: 1,\n  [TokenID.USDT]: 2,\n  [TokenID.USDC]: 3,\n  [TokenID.SOL]: 4,\n  [TokenID.USDT_USDC_SABER]: 5,\n  [TokenID.UST]: 6,\n  // pool 7 deprecated\n  [TokenID.USDC_USDT_ORCA]: 8,\n  [TokenID.SOL_USDC_RAYDIUM]: 9,\n  [TokenID.RAY_USDC_RAYDIUM]: 10,\n  [TokenID.RAY]: 11,\n  [TokenID.mSOL]: 12,\n  [TokenID.ORCA]: 13,\n  [TokenID.SOL_USDT_RAYDIUM]: 14,\n  [TokenID.SOL_USDC_ORCA]: 15,\n  [TokenID.mSOL_SOL_ORCA]: 16,\n  [TokenID.ORCA_USDC_ORCA]: 17,\n  [TokenID.ORCA_SOL_ORCA]: 18,\n  [TokenID.ETH_USDC_ORCA]: 19,\n  [TokenID.SOL_USDT_ORCA]: 20,\n  [TokenID.USTv2]: 21,\n  [TokenID.mSOL_SOL_RAYDIUM]: 22,\n  [TokenID.ETH_SOL_ORCA]: 23,\n  [TokenID.BTC_mSOL_ORCA]: 24,\n  [TokenID.mSOL_USDC_ORCA]: 25,\n  [TokenID.USTv2_USDC_SABER]: 26,\n  [TokenID.APT]: 27,\n  [TokenID.APT_USDC_ORCA]: 28,\n  [TokenID.FTT]: 29,\n  [TokenID.SRM]: 30,\n  [TokenID.RAY_USDT_RAYDIUM]: 31,\n  [TokenID.RAY_ETH_RAYDIUM]: 32,\n  [TokenID.RAY_SOL_RAYDIUM]: 33,\n  [TokenID.SRM_USDC_RAYDIUM]: 34,\n  [TokenID.stSOL]: 35,\n  [TokenID.whETH]: 36,\n  [TokenID.scnSOL]: 37,\n  [TokenID.stSOL_USTv2_ORCA]: 38,\n  [TokenID.ORCA_whETH_ORCA]: 39,\n  [TokenID.mSOL_SOL_SABER]: 40,\n  [TokenID.stSOL_SOL_SABER]: 41,\n};\n\n// prettier-ignore\nconst LTVS: { [key in TokenID]?: number } = {\n  [TokenID.APT]: 0,\n  [TokenID.BTC]: 0.85,\n  [TokenID.ETH]: 0.85,\n  [TokenID.mSOL]: 0.8,\n  [TokenID.SOL]: 0.8,\n  [TokenID.stSOL]: 0.8,\n  [TokenID.whETH]: 0.85,\n  [TokenID.scnSOL]: 0.8,\n\n  [TokenID.RAY]: 0.8,\n  [TokenID.ORCA]: 0.8,\n  [TokenID.FTT]: 0.8,\n  [TokenID.SRM]: 0.8,\n\n  [TokenID.USDT]: 0.90,\n  [TokenID.USDC]: 0.90,\n  [TokenID.UST]: 0.01,\n  [TokenID.USTv2]: 0.01,\n\n  [TokenID.USDT_USDC_SABER]: 0.8,\n  [TokenID.mSOL_SOL_SABER]: 0.8,\n  [TokenID.stSOL_SOL_SABER]: 0.8,\n  [TokenID.USDC_USDT_ORCA]: 0.8,\n  [TokenID.SOL_USDC_RAYDIUM]: 0.8,\n  [TokenID.RAY_USDC_RAYDIUM]: 0.8,\n  [TokenID.SOL_USDT_RAYDIUM]: 0.8,\n  [TokenID.SOL_USDC_ORCA]: 0.8,\n  [TokenID.mSOL_SOL_ORCA]: 0.8,\n  [TokenID.ORCA_USDC_ORCA]: 0.8,\n  [TokenID.ORCA_SOL_ORCA]: 0.8,\n  [TokenID.ETH_USDC_ORCA]: 0.8,\n  [TokenID.SOL_USDT_ORCA]: 0.8,\n  [TokenID.mSOL_SOL_RAYDIUM]: 0.8,\n  [TokenID.ETH_SOL_ORCA]: 0.8,\n  [TokenID.BTC_mSOL_ORCA]: 0.8,\n  [TokenID.mSOL_USDC_ORCA]: 0.8,\n  [TokenID.USTv2_USDC_SABER]: 0.8,\n  [TokenID.APT_USDC_ORCA]: 0.4,\n  [TokenID.RAY_USDT_RAYDIUM]: 0.8,\n  [TokenID.RAY_ETH_RAYDIUM]: 0.8,\n  [TokenID.RAY_SOL_RAYDIUM]: 0.8,\n  [TokenID.SRM_USDC_RAYDIUM]: 0.8,\n  [TokenID.stSOL_USTv2_ORCA]: 0.8,\n  [TokenID.ORCA_whETH_ORCA]: 0.8,\n};\n\nexport class InterestRate {\n  multiplier: number;\n  jumpMultiplier: number;\n  constructor(\n    public baseRate: number,\n    public kink: number,\n    public kinkRate: number,\n    public fullRate: number,\n  ) {\n    invariant(baseRate >= 0);\n    invariant(kink > 0);\n    invariant(kink < 1);\n    invariant(kinkRate > 0);\n    invariant(fullRate > kinkRate);\n    this.multiplier = (kinkRate - baseRate) / kink;\n    this.jumpMultiplier = (fullRate - kinkRate) / (1 - kink);\n  }\n}\n\n// prettier-ignore\nconst INTEREST_RATES: {[key in TokenID]?: InterestRate} = {\n  [TokenID.BTC]: new InterestRate(0.02, 0.85, 0.20, 2.0),\n  [TokenID.ETH]: new InterestRate(0.02, 0.85, 0.20, 2.0),\n  [TokenID.SOL]: new InterestRate(0.02, 0.85, 0.20, 2.0),\n  [TokenID.mSOL]:new InterestRate(0.02, 0.85, 0.20, 2.0),\n  [TokenID.stSOL]: new InterestRate(0.02, 0.85, 0.20, 2.0),\n  [TokenID.whETH]: new InterestRate(0.02, 0.85, 0.20, 2.0),\n  [TokenID.scnSOL]: new InterestRate(0.02, 0.85, 0.20, 2.0),\n\n  [TokenID.APT]: new InterestRate(0.02, 0.85, 0.20, 2.0),\n  [TokenID.RAY]: new InterestRate(0.02, 0.85, 0.20, 2.0),\n  [TokenID.ORCA]:new InterestRate(0.02, 0.85, 0.20, 2.0),\n  [TokenID.SBR]: new InterestRate(0.02, 0.85, 0.20, 2.0),\n  [TokenID.FTT]: new InterestRate(0.02, 0.85, 0.20, 2.0),\n  [TokenID.SRM]: new InterestRate(0.02, 0.85, 0.20, 2.0),\n\n  [TokenID.USDT]:new InterestRate(0.01, 0.85, 0.08, 1.0),\n  [TokenID.USDC]:new InterestRate(0.01, 0.85, 0.08, 1.0),\n  [TokenID.UST]: new InterestRate(0.01, 0.85, 0.20, 30.0),\n  [TokenID.USTv2]: new InterestRate(0.01, 0.90, 0.20, 30.0),\n}\n\n// prettier-ignore\nconst FEES: { [key in TokenID]?: number } = {\n  [TokenID.BTC]: 0.2,\n  [TokenID.ETH]: 0.2,\n  [TokenID.mSOL]: 0.2,\n  [TokenID.SOL]: 0.2,\n  [TokenID.stSOL]: 0.2,\n  [TokenID.whETH]: 0.2,\n  [TokenID.scnSOL]: 0.2,\n\n  [TokenID.APT]: 0.2,\n  [TokenID.RAY]: 0.2,\n  [TokenID.ORCA]: 0.2,\n  [TokenID.FTT]: 0.2,\n  [TokenID.SRM]: 0.2,\n\n  [TokenID.USDT]: 0.2,\n  [TokenID.USDC]: 0.2,\n  [TokenID.UST]: 0.2,\n  [TokenID.USTv2]: 0.2,\n\n  [TokenID.USDT_USDC_SABER]: 0.0,   // no farming nor borrowing\n  [TokenID.mSOL_SOL_SABER]: 0.0,   // no farming nor borrowing\n  [TokenID.stSOL_SOL_SABER]: 0.0,   // no farming nor borrowing\n  [TokenID.USDC_USDT_ORCA]: 0.2,\n  [TokenID.SOL_USDC_RAYDIUM]: 0.2,\n  [TokenID.RAY_USDC_RAYDIUM]: 0.2,\n  [TokenID.SOL_USDT_RAYDIUM]: 0.2,\n  [TokenID.SOL_USDC_ORCA]: 0.2,\n  [TokenID.mSOL_SOL_ORCA]: 0.2,\n  [TokenID.ORCA_USDC_ORCA]: 0.2,\n  [TokenID.ORCA_SOL_ORCA]: 0.2,\n  [TokenID.ETH_USDC_ORCA]: 0.2,\n  [TokenID.SOL_USDT_ORCA]: 0.2,\n  [TokenID.mSOL_SOL_RAYDIUM]: 0.0, // no reward\n  [TokenID.ETH_SOL_ORCA]: 0.2,\n  [TokenID.BTC_mSOL_ORCA]: 0.2,\n  [TokenID.mSOL_USDC_ORCA]: 0.2,\n  [TokenID.USTv2_USDC_SABER]: 0.2,\n  [TokenID.APT_USDC_ORCA]: 0.2,\n  [TokenID.RAY_USDT_RAYDIUM]: 0.2,\n  [TokenID.RAY_ETH_RAYDIUM]: 0.2,\n  [TokenID.RAY_SOL_RAYDIUM]: 0.2,\n  [TokenID.SRM_USDC_RAYDIUM]: 0.2,\n  [TokenID.stSOL_USTv2_ORCA]: 0.2,\n  [TokenID.ORCA_whETH_ORCA]: 0.2,\n};\n\n// prettier-ignore\nexport const CATEGORY: { [key in TokenID]: TokenCategory } = {\n  [TokenID.BTC] : TokenCategory.Volatile,\n  [TokenID.ETH] : TokenCategory.Volatile,\n  [TokenID.SOL] : TokenCategory.Volatile,\n  [TokenID.mSOL] : TokenCategory.Volatile,\n  [TokenID.stSOL]: TokenCategory.Volatile,\n  [TokenID.whETH]: TokenCategory.Volatile,\n  [TokenID.scnSOL]: TokenCategory.Volatile,\n\n  [TokenID.APT] : TokenCategory.Volatile,\n  [TokenID.RAY] : TokenCategory.Volatile,\n  [TokenID.ORCA] : TokenCategory.Volatile,\n  [TokenID.SBR] : TokenCategory.Volatile,\n  [TokenID.MERC] : TokenCategory.Volatile,\n  [TokenID.MNDE] : TokenCategory.Volatile,\n  [TokenID.FTT] : TokenCategory.Volatile,\n  [TokenID.SRM] : TokenCategory.Volatile,\n  [TokenID.wLDO] : TokenCategory.Volatile,\n  [TokenID.SOCN] : TokenCategory.Volatile,\n  [TokenID.wLUNA]: TokenCategory.Volatile,\n\n  [TokenID.USDT]: TokenCategory.Stable,\n  [TokenID.USDC]: TokenCategory.Stable,\n  [TokenID.UST] : TokenCategory.Stable,\n  [TokenID.USTv2] : TokenCategory.Stable,\n\n  [TokenID.USDT_USDC_SABER]: TokenCategory.Lp,\n  [TokenID.mSOL_SOL_SABER]: TokenCategory.Lp,\n  [TokenID.stSOL_SOL_SABER]: TokenCategory.Lp,\n  [TokenID.USDC_USDT_ORCA]: TokenCategory.Lp,\n  [TokenID.UST_USDC_SABER]: TokenCategory.Lp,\n  [TokenID.SOL_USDC_RAYDIUM]: TokenCategory.Lp,\n  [TokenID.RAY_USDC_RAYDIUM]: TokenCategory.Lp,\n  [TokenID.SOL_USDT_RAYDIUM]: TokenCategory.Lp,\n  [TokenID.SOL_USDC_ORCA]: TokenCategory.Lp,\n  [TokenID.mSOL_SOL_ORCA]: TokenCategory.Lp,\n  [TokenID.ORCA_USDC_ORCA]: TokenCategory.Lp,\n  [TokenID.ORCA_SOL_ORCA]: TokenCategory.Lp,\n  [TokenID.ETH_USDC_ORCA]: TokenCategory.Lp,\n  [TokenID.SOL_USDT_ORCA]: TokenCategory.Lp,\n  [TokenID.mSOL_SOL_RAYDIUM]: TokenCategory.Lp,\n  [TokenID.ETH_SOL_ORCA]: TokenCategory.Lp,\n  [TokenID.BTC_mSOL_ORCA]: TokenCategory.Lp,\n  [TokenID.mSOL_USDC_ORCA]: TokenCategory.Lp,\n  [TokenID.USTv2_USDC_SABER]: TokenCategory.Lp,\n  [TokenID.APT_USDC_ORCA]: TokenCategory.Lp,\n  [TokenID.RAY_USDT_RAYDIUM]: TokenCategory.Lp,\n  [TokenID.RAY_ETH_RAYDIUM]: TokenCategory.Lp,\n  [TokenID.RAY_SOL_RAYDIUM]: TokenCategory.Lp,\n  [TokenID.SRM_USDC_RAYDIUM]: TokenCategory.Lp,\n  [TokenID.stSOL_USTv2_ORCA]: TokenCategory.Lp,\n  [TokenID.ORCA_whETH_ORCA]: TokenCategory.Lp,\n};\n\n// prettier-ignore\nexport const LIQUIDATION_DISCOUNT: { [key in TokenID]?: number } = {\n  [TokenID.BTC] : 0.04,\n  [TokenID.ETH] : 0.04,\n  [TokenID.SOL] : 0.04,\n  [TokenID.mSOL] : 0.04,\n  [TokenID.stSOL]: 0.04,\n  [TokenID.whETH]: 0.04,\n  [TokenID.scnSOL]: 0.04,\n\n  [TokenID.RAY] : 0.04,\n  [TokenID.APT] : 0,\n  [TokenID.ORCA] : 0.04,\n  [TokenID.FTT] : 0.04,\n  [TokenID.SRM] : 0.04,\n\n  [TokenID.USDT]: 0.04,\n  [TokenID.USDC]: 0.04,\n  [TokenID.UST] : 0.04,\n  [TokenID.USTv2] : 0.04,\n\n  [TokenID.USDT_USDC_SABER]: 0,\n  [TokenID.mSOL_SOL_SABER]: 0,\n  [TokenID.stSOL_SOL_SABER]: 0,\n  [TokenID.USDC_USDT_ORCA]: 0,\n  [TokenID.UST_USDC_SABER]: 0,\n  [TokenID.SOL_USDC_RAYDIUM]: 0,\n  [TokenID.RAY_USDC_RAYDIUM]: 0,\n  [TokenID.SOL_USDT_RAYDIUM]: 0,\n  [TokenID.SOL_USDC_ORCA]: 0,\n  [TokenID.mSOL_SOL_ORCA]: 0,\n  [TokenID.ORCA_USDC_ORCA]: 0,\n  [TokenID.ORCA_SOL_ORCA]: 0,\n  [TokenID.ETH_USDC_ORCA]: 0,\n  [TokenID.SOL_USDT_ORCA]: 0,\n  [TokenID.mSOL_SOL_RAYDIUM]: 0,\n  [TokenID.ETH_SOL_ORCA]: 0,\n  [TokenID.BTC_mSOL_ORCA]: 0,\n  [TokenID.mSOL_USDC_ORCA]: 0,\n  [TokenID.USTv2_USDC_SABER]: 0,\n  [TokenID.APT_USDC_ORCA]: 0,\n  [TokenID.RAY_USDT_RAYDIUM]: 0,\n  [TokenID.RAY_ETH_RAYDIUM]: 0,\n  [TokenID.RAY_SOL_RAYDIUM]: 0,\n  [TokenID.SRM_USDC_RAYDIUM]: 0,\n  [TokenID.stSOL_USTv2_ORCA]: 0,\n  [TokenID.ORCA_whETH_ORCA]: 0,\n};\n\n// prettier-ignore\nexport const LP_TO_LR: { [key in TokenID]?: [TokenID, TokenID] } = {\n  [TokenID.USDT_USDC_SABER] : [TokenID.USDT, TokenID.USDC],\n  [TokenID.mSOL_SOL_SABER] : [TokenID.mSOL, TokenID.SOL],\n  [TokenID.stSOL_SOL_SABER] : [TokenID.stSOL, TokenID.SOL],\n  [TokenID.USDC_USDT_ORCA] : [TokenID.USDC, TokenID.USDT],\n  [TokenID.UST_USDC_SABER] : [TokenID.UST, TokenID.USDC],\n  [TokenID.SOL_USDC_RAYDIUM]: [TokenID.SOL, TokenID.USDC],\n  [TokenID.RAY_USDC_RAYDIUM]: [TokenID.RAY, TokenID.USDC],\n  [TokenID.SOL_USDT_RAYDIUM]: [TokenID.SOL, TokenID.USDT],\n  [TokenID.SOL_USDC_ORCA]: [TokenID.SOL, TokenID.USDC],\n  [TokenID.mSOL_SOL_ORCA]: [TokenID.mSOL, TokenID.SOL],\n  [TokenID.ORCA_USDC_ORCA]: [TokenID.ORCA, TokenID.USDC],\n  [TokenID.ORCA_SOL_ORCA]: [TokenID.ORCA, TokenID.SOL],\n  [TokenID.ETH_USDC_ORCA]: [TokenID.ETH, TokenID.USDC],\n  [TokenID.SOL_USDT_ORCA]: [TokenID.SOL, TokenID.USDT],\n  [TokenID.mSOL_SOL_RAYDIUM]: [TokenID.mSOL, TokenID.SOL],\n  [TokenID.ETH_SOL_ORCA]: [TokenID.ETH, TokenID.SOL],\n  [TokenID.BTC_mSOL_ORCA]: [TokenID.BTC, TokenID.mSOL],\n  [TokenID.mSOL_USDC_ORCA]: [TokenID.mSOL, TokenID.USDC],\n  [TokenID.USTv2_USDC_SABER]: [TokenID.USTv2, TokenID.USDC],\n  [TokenID.APT_USDC_ORCA]: [TokenID.APT, TokenID.USDC],\n  [TokenID.RAY_USDT_RAYDIUM]: [TokenID.RAY, TokenID.USDT],\n  [TokenID.RAY_ETH_RAYDIUM]: [TokenID.RAY, TokenID.ETH],\n  [TokenID.RAY_SOL_RAYDIUM]: [TokenID.RAY, TokenID.SOL],\n  [TokenID.SRM_USDC_RAYDIUM]: [TokenID.SRM, TokenID.USDC],\n  [TokenID.stSOL_USTv2_ORCA]: [TokenID.stSOL, TokenID.USTv2],\n  [TokenID.ORCA_whETH_ORCA]: [TokenID.ORCA, TokenID.whETH],\n};\n\n// prettier-ignore\nexport const LP_TO_TARGET_SWAP: { [key in TokenID]?: number } = {\n  [TokenID.USDT_USDC_SABER] : SWAP_SABER,\n  [TokenID.mSOL_SOL_SABER] : SWAP_SABER,\n  [TokenID.stSOL_SOL_SABER] : SWAP_SABER,\n  [TokenID.USDC_USDT_ORCA] : SWAP_ORCA,\n  [TokenID.UST_USDC_SABER] : SWAP_SABER,\n  [TokenID.SOL_USDC_RAYDIUM]: SWAP_RAYDIUM,\n  [TokenID.RAY_USDC_RAYDIUM]: SWAP_RAYDIUM,\n  [TokenID.SOL_USDT_RAYDIUM]: SWAP_RAYDIUM,\n  [TokenID.SOL_USDC_ORCA]: SWAP_ORCA,\n  [TokenID.mSOL_SOL_ORCA]: SWAP_ORCA,\n  [TokenID.ORCA_USDC_ORCA]: SWAP_ORCA,\n  [TokenID.ORCA_SOL_ORCA]: SWAP_ORCA,\n  [TokenID.ETH_USDC_ORCA]: SWAP_ORCA,\n  [TokenID.SOL_USDT_ORCA]: SWAP_ORCA,\n  [TokenID.mSOL_SOL_RAYDIUM]: SWAP_RAYDIUM,\n  [TokenID.ETH_SOL_ORCA]: SWAP_ORCA,\n  [TokenID.BTC_mSOL_ORCA]: SWAP_ORCA,\n  [TokenID.mSOL_USDC_ORCA]: SWAP_ORCA,\n  [TokenID.USTv2_USDC_SABER]: SWAP_SABER,\n  [TokenID.APT_USDC_ORCA]: SWAP_ORCA,\n  [TokenID.RAY_USDT_RAYDIUM]: SWAP_RAYDIUM,\n  [TokenID.RAY_ETH_RAYDIUM]: SWAP_RAYDIUM,\n  [TokenID.RAY_SOL_RAYDIUM]: SWAP_RAYDIUM,\n  [TokenID.SRM_USDC_RAYDIUM]: SWAP_RAYDIUM,\n  [TokenID.stSOL_USTv2_ORCA]: SWAP_ORCA,\n  [TokenID.ORCA_whETH_ORCA]: SWAP_ORCA,\n};\n\n// prettier-ignore\nexport const LP_TO_DEX: { [key in TokenID]?: Dex } = {\n  [TokenID.USDT_USDC_SABER] : Dex.Saber,\n  [TokenID.mSOL_SOL_SABER] : Dex.Saber,\n  [TokenID.stSOL_SOL_SABER] : Dex.Saber,\n  [TokenID.USDC_USDT_ORCA] : Dex.Orca,\n  [TokenID.UST_USDC_SABER] : Dex.Saber,\n  [TokenID.SOL_USDC_RAYDIUM]: Dex.Raydium,\n  [TokenID.RAY_USDC_RAYDIUM]: Dex.Raydium,\n  [TokenID.SOL_USDT_RAYDIUM]: Dex.Raydium,\n  [TokenID.SOL_USDC_ORCA]: Dex.Orca,\n  [TokenID.mSOL_SOL_ORCA]: Dex.Orca,\n  [TokenID.ORCA_USDC_ORCA]: Dex.Orca,\n  [TokenID.ORCA_SOL_ORCA]: Dex.Orca,\n  [TokenID.ETH_USDC_ORCA]: Dex.Orca,\n  [TokenID.SOL_USDT_ORCA]: Dex.Orca,\n  [TokenID.mSOL_SOL_RAYDIUM]: Dex.Raydium,\n  [TokenID.ETH_SOL_ORCA]: Dex.Orca,\n  [TokenID.BTC_mSOL_ORCA]: Dex.Orca,\n  [TokenID.mSOL_USDC_ORCA]: Dex.Orca,\n  [TokenID.USTv2_USDC_SABER]: Dex.Saber,\n  [TokenID.APT_USDC_ORCA]: Dex.Orca,\n  [TokenID.RAY_USDT_RAYDIUM]: Dex.Raydium,\n  [TokenID.RAY_ETH_RAYDIUM]: Dex.Raydium,\n  [TokenID.RAY_SOL_RAYDIUM]: Dex.Raydium,\n  [TokenID.SRM_USDC_RAYDIUM]: Dex.Raydium,\n  [TokenID.stSOL_USTv2_ORCA]: Dex.Orca,\n  [TokenID.ORCA_whETH_ORCA]: Dex.Orca,\n};\n\n// prettier-ignore\nexport const LP_TO_NEED_2ND_STAKE: { [key in TokenID]?: boolean } = {\n  [TokenID.USDT_USDC_SABER] : false,\n  [TokenID.mSOL_SOL_SABER] : false,\n  [TokenID.stSOL_SOL_SABER] : false,\n  [TokenID.USDC_USDT_ORCA] : false,\n  [TokenID.UST_USDC_SABER] : false,\n  [TokenID.SOL_USDC_RAYDIUM]: true,\n  [TokenID.RAY_USDC_RAYDIUM]: true,\n  [TokenID.SOL_USDT_RAYDIUM]: true,\n  [TokenID.SOL_USDC_ORCA]: false,\n  [TokenID.mSOL_SOL_ORCA]: true,\n  [TokenID.ORCA_USDC_ORCA]: false,\n  [TokenID.ORCA_SOL_ORCA]: false,\n  [TokenID.ETH_USDC_ORCA]: false,\n  [TokenID.SOL_USDT_ORCA]: false,\n  [TokenID.mSOL_SOL_RAYDIUM]: false,\n  [TokenID.ETH_SOL_ORCA]: false,\n  [TokenID.BTC_mSOL_ORCA]: true,\n  [TokenID.mSOL_USDC_ORCA]: true,\n  [TokenID.USTv2_USDC_SABER]: false,\n  [TokenID.APT_USDC_ORCA]: false,\n  [TokenID.RAY_USDT_RAYDIUM]: true,\n  [TokenID.RAY_ETH_RAYDIUM]: true,\n  [TokenID.RAY_SOL_RAYDIUM]: true,\n  [TokenID.SRM_USDC_RAYDIUM]: true,\n  [TokenID.stSOL_USTv2_ORCA]: false,\n  [TokenID.ORCA_whETH_ORCA]: false,\n};\n\n// meta-info used by Addresses to compute keys needed when interacting with various Solana swaps\n// check out Addresses to see how they are used\nexport const SWAP_METAS = {\n  [SWAP_SABER]: {\n    stake_program: new PublicKey('QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB'),\n    deposit_program: new PublicKey('SSwpkEEcbUqx4vtoEByFjSkhKdCT862DNVb52nZg1UZ'),\n    redeem_program: new PublicKey('RDM23yr8pr1kEAmhnFpaabPny6C9UVcEcok3Py5v86X'),\n  },\n  [SWAP_ORCA]: {\n    depositProgramPubkey: new PublicKey('9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP'),\n    farmProgramPubkey: new PublicKey('82yxjeMsvaURa4MbZZ7WZZHfobirZYkH1zF8fmeGtyaQ'),\n  },\n  [SWAP_RAYDIUM]: {\n    depositProgramPubkey: new PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'),\n    stakeProgramPubkey: new PublicKey('EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q'),\n    stakeProgramV5Pubkey: new PublicKey('9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z'),\n  },\n};\n\nconst isPublicOrAlpha = (ownerKey: PublicKey) => {\n  const isPublic = ownerKey.toString() === '7Ne6h2w3LpTNTa7CNYcUs7UkjeJT3oW7jcrXWfVScTXW';\n  const isAlpha = ownerKey.toString() === 'GipxmFXdiJaSevu6StymY2aphKVxgYmAmf2dT3fTEASc';\n  if (!isAlpha && !isPublic) {\n    throw new Error(`Unknown ownerKey: ${ownerKey.toString()}`);\n  }\n  return { isPublic, isAlpha };\n};\n\n// prettier-ignore\nexport const DUAL_REWARD_CONFIGS: {[key in TokenID]?: DualRewardInfo} = {\n  [TokenID.mSOL]:     { tokenId: TokenID.MNDE,    multiplier: new Decimal(0.195) },\n  [TokenID.stSOL]:    { tokenId: TokenID.wLDO,    multiplier: new Decimal(10.0 / 250.0) },\n  [TokenID.scnSOL]:   { tokenId: TokenID.SOCN,    multiplier: new Decimal(65.0 / 125.0) },\n  [TokenID.USTv2]:    { tokenId: TokenID.wLUNA,   multiplier: new Decimal(1.1 / 250.0) },\n}\n\n// prettier-ignore\ntype SaberLpArgs = {\n    swap:           PublicKey;\n    swapAuthority:  PublicKey;\n    tokenAVault:    PublicKey;\n    tokenBVault:    PublicKey;\n    tokenAfees:     PublicKey;\n    tokenBfees:     PublicKey;\n\n    // for stake/unstake\n    quarry:       PublicKey;\n    rewarder:     PublicKey;\n    mint:         PublicKey;\n};\n\n// prettier-ignore\nexport class SaberLpSwapInfo implements LpSwapKeyInfo {\n  swap:           PublicKey;\n  swapAuthority:  PublicKey;\n  tokenAVault:    PublicKey;\n  tokenBVault:    PublicKey;\n  tokenAfees:     PublicKey;\n  tokenBfees:     PublicKey;\n\n  // for stake/unstake\n  quarry:       PublicKey;\n  rewarder:     PublicKey;\n  mint:         PublicKey;\n  constructor(args: SaberLpArgs) {\n    this.swap = args.swap;\n    this.swapAuthority = args.swapAuthority;\n    this.tokenAVault = args.tokenAVault;\n    this.tokenBVault = args.tokenBVault;\n    this.tokenAfees = args.tokenAfees;\n    this.tokenBfees = args.tokenBfees;\n    //\n    this.quarry = args.quarry;\n    this.rewarder = args.rewarder;\n    this.mint = args.mint;\n  }\n  async getMinerKey(ownerKey: PublicKey): Promise<[PublicKey, number]> {\n    const [key, bump] = await PublicKey.findProgramAddress(\n      [Buffer.from('Miner'), this.quarry.toBuffer(), ownerKey.toBuffer()],\n      SWAP_METAS[SWAP_SABER].stake_program,\n    );\n    return [key, bump];\n  }\n\n  async getMinerVault(ownerKey: PublicKey): Promise<PublicKey> {\n    const [minerKey] = await this.getMinerKey(ownerKey);\n    return await Token.getAssociatedTokenAddress(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      this.mint,\n      minerKey,\n      true,\n    );\n  }\n\n  // prettier-ignore\n  async getLpDepositKeys(_ownerKey: PublicKey) {\n    /*\n    - saber_lp_program\n    - swap\n    - swap authority\n    - swap_token_a_vault\n    - swap_token_b_vault\n    - pool_mint\n    - clock\n    */\n    const smeta = SWAP_METAS[SWAP_SABER];\n    return [\n      {pubkey: smeta.deposit_program,         isSigner: false, isWritable: false},\n\n      {pubkey: this.swap,                     isSigner: false, isWritable: false},\n      {pubkey: this.swapAuthority,            isSigner: false, isWritable: false},\n\n      {pubkey: this.tokenAVault,              isSigner: false, isWritable: true},\n      {pubkey: this.tokenBVault,              isSigner: false, isWritable: true},\n\n      {pubkey: this.mint,                     isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY,           isSigner: false, isWritable: false},\n    ];\n  }\n  // prettier-ignore\n  async getLpWithdrawKeys () {\n    /*\n    - saber_lp_program\n    - swap\n    - swap authority\n    - lp_mint\n    - swap_token_a_vault\n    - swap_token_b_vault\n    - swap_token_a_fees\n    - swap_token_b_fees\n    - clock\n    */\n    const smeta = SWAP_METAS[SWAP_SABER];\n    return [\n      {pubkey: smeta.deposit_program,   isSigner: false, isWritable: false},\n\n      {pubkey: this.swap,               isSigner: false, isWritable: false},\n      {pubkey: this.swapAuthority,      isSigner: false, isWritable: false},\n\n      {pubkey: this.mint,               isSigner: false, isWritable: true},\n\n      {pubkey: this.tokenAVault,        isSigner: false, isWritable: true},\n      {pubkey: this.tokenBVault,        isSigner: false, isWritable: true},\n\n      {pubkey: this.tokenAfees,         isSigner: false, isWritable: true},\n      {pubkey: this.tokenBfees,         isSigner: false, isWritable: true},\n\n      {pubkey: SYSVAR_CLOCK_PUBKEY,     isSigner: false, isWritable: false},\n    ];\n  }\n\n  // prettier-ignore\n  async getLpStakeKeys(ownerKey: PublicKey) {\n    /*\n    - saber_stake_program,\n    - miner\n    - quarry\n    - miner_vault\n    - token_program\n    - rewarder\n    - clock\n      */\n    const smeta = SWAP_METAS[SWAP_SABER];\n    const [minerKey, _minerBump] = await this.getMinerKey(ownerKey);\n    const minerVault = await this.getMinerVault(ownerKey);\n    return [\n      {pubkey: smeta.stake_program,     isSigner: false, isWritable: false},\n      {pubkey: minerKey,                isSigner: false, isWritable: true},\n      {pubkey: this.quarry,             isSigner: false, isWritable: true},\n      {pubkey: minerVault,              isSigner: false, isWritable: true},\n      {pubkey: TOKEN_PROGRAM_ID,        isSigner: false, isWritable: false},\n      {pubkey: this.rewarder,           isSigner: false, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY,     isSigner: false, isWritable: false},\n    ];\n  }\n\n  getLRVaults(): [PublicKey, PublicKey] {\n    // only USDT_USDC_SABER has this inverted order\n    const isUSDT_USDC = this.mint.toString() === MINTS.USDT_USDC_SABER.toString();\n    if (isUSDT_USDC) {\n      return [this.tokenBVault, this.tokenAVault];\n    } else {\n      return [this.tokenAVault, this.tokenBVault];\n    }\n  }\n}\n\n// prettier-ignore\ntype OrcaLpArgs = {\n  lpMintPubkey:           PublicKey;\n\n  swapPubkey:             PublicKey;\n  swapAuthority:          PublicKey;\n\n  swapTokenAAccount:      PublicKey;\n  swapTokenBAccount:      PublicKey;\n\n  globalLpVault:          PublicKey;\n  farmTokenMint:          PublicKey;\n  globalFarmState:        PublicKey;\n  globalRewardTokenVault: PublicKey;\n  rewardTokenAuthority:   PublicKey;\n  feeAccount:             PublicKey;\n  publicRewardTokAcc:     PublicKey;\n  alphaRewardTokAcc:      PublicKey;\n\n  isDoubleDipSupported?:  boolean;\n  globalLp3Vault?:        PublicKey;\n  farmTokenLp3Mint?:      PublicKey;\n  globalDoubleDipFarmState?: PublicKey;\n  globalDoubleDipRewardTokenVault?: PublicKey;\n  doubleDipRewardTokenAuthority?: PublicKey;\n  publicDoubleDipRewardAcc?: PublicKey;\n  alphaDoubleDipRewardAcc?: PublicKey;\n  doubleDipRewardMint?:   PublicKey;\n};\n\n// prettier-ignore\nexport class OrcaLpSwapInfo implements LpSwapKeyInfo {\n  lpMintPubkey:           PublicKey;\n\n  swapPubkey:             PublicKey;\n  swapAuthority:          PublicKey;\n\n  swapTokenAAccount:      PublicKey;\n  swapTokenBAccount:      PublicKey;\n\n  globalLpVault:          PublicKey;\n  farmTokenMint:          PublicKey;\n  globalFarmState:        PublicKey;\n  globalRewardTokenVault: PublicKey;\n  rewardTokenAuthority:   PublicKey;\n  feeAccount:             PublicKey;\n  publicRewardTokAcc:     PublicKey;\n  alphaRewardTokAcc:      PublicKey;\n\n  isDoubleDipSupported = false;\n  globalLp3Vault?:                  PublicKey;\n  farmTokenLp3Mint?:                PublicKey;\n  globalDoubleDipFarmState?:        PublicKey;\n  globalDoubleDipRewardTokenVault?: PublicKey;\n  doubleDipRewardTokenAuthority?:   PublicKey;\n  publicDoubleDipRewardAcc?:        PublicKey;\n  alphaDoubleDipRewardAcc?:         PublicKey;\n  doubleDipRewardMint?:             PublicKey;\n  constructor(args: OrcaLpArgs) {\n    this.lpMintPubkey = args.lpMintPubkey;\n    this.swapPubkey = args.swapPubkey;\n    this.swapAuthority = args.swapAuthority;\n    this.swapTokenAAccount = args.swapTokenAAccount;\n    this.swapTokenBAccount = args.swapTokenBAccount;\n    this.globalLpVault = args.globalLpVault;\n    this.farmTokenMint = args.farmTokenMint;\n    this.globalFarmState = args.globalFarmState;\n    this.globalRewardTokenVault = args.globalRewardTokenVault;\n    this.rewardTokenAuthority = args.rewardTokenAuthority;\n    this.feeAccount = args.feeAccount;\n    this.publicRewardTokAcc = args.publicRewardTokAcc;\n    this.alphaRewardTokAcc = args.alphaRewardTokAcc;\n\n    this.isDoubleDipSupported = !!args.isDoubleDipSupported;\n    this.globalLp3Vault = args.globalLp3Vault;\n    this.farmTokenLp3Mint = args.farmTokenLp3Mint;\n    this.globalDoubleDipFarmState = args.globalDoubleDipFarmState;\n    this.globalDoubleDipRewardTokenVault = args.globalDoubleDipRewardTokenVault;\n    this.doubleDipRewardTokenAuthority = args.doubleDipRewardTokenAuthority;\n    this.publicDoubleDipRewardAcc = args.publicDoubleDipRewardAcc;\n    this.alphaDoubleDipRewardAcc = args.alphaDoubleDipRewardAcc;\n    this.doubleDipRewardMint = args.doubleDipRewardMint;\n    if (this.isDoubleDipSupported) {\n      invariant(\n        this.globalLp3Vault &&\n          this.farmTokenLp3Mint &&\n          this.globalDoubleDipFarmState &&\n          this.globalDoubleDipRewardTokenVault &&\n          this.doubleDipRewardTokenAuthority &&\n          this.publicDoubleDipRewardAcc &&\n          this.alphaDoubleDipRewardAcc &&\n          this.doubleDipRewardMint,\n      );\n    }\n  }\n\n  async getPdaKeys(ownerKey: PublicKey) {\n    const smeta = SWAP_METAS[SWAP_ORCA];\n    let pdaRewardTokenAccount: PublicKey;\n    const { isPublic } = isPublicOrAlpha(ownerKey);\n    if (isPublic) {\n      pdaRewardTokenAccount = this.publicRewardTokAcc;\n    } else {\n      pdaRewardTokenAccount = this.alphaRewardTokAcc;\n    }\n\n    const pdaFarmTokenAccount = await getAssociatedTokenPubkey(ownerKey, this.farmTokenMint, true);\n    const pdaFarmState = (\n      await PublicKey.findProgramAddress(\n        [this.globalFarmState.toBuffer(), ownerKey.toBuffer(), TOKEN_PROGRAM_ID.toBuffer()],\n        smeta.farmProgramPubkey,\n      )\n    )[0];\n\n    return {\n      pdaFarmTokenAccount,\n      pdaRewardTokenAccount,\n      pdaFarmState,\n    };\n  }\n\n  async getPdaDoubleDipKeys(ownerKey: PublicKey) {\n    if (!this.isDoubleDipSupported) {\n      throw new Error('Double dip not supported for getting pda keys');\n    }\n    const smeta = SWAP_METAS[SWAP_ORCA];\n    let pdaDoubleDipRewardTokenAccount: PublicKey;\n    const { isPublic } = isPublicOrAlpha(ownerKey);\n    if (isPublic) {\n      pdaDoubleDipRewardTokenAccount = this.publicDoubleDipRewardAcc!;\n    } else {\n      pdaDoubleDipRewardTokenAccount = this.alphaDoubleDipRewardAcc!;\n    }\n\n    const pdaDoubleDipFarmTokenAccount = await getAssociatedTokenPubkey(\n      ownerKey,\n      this.farmTokenLp3Mint!,\n      true,\n    );\n    const pdaDoubleDipFarmState = (\n      await PublicKey.findProgramAddress(\n        [\n          this.globalDoubleDipFarmState!.toBuffer(),\n          ownerKey.toBuffer(),\n          TOKEN_PROGRAM_ID.toBuffer(),\n        ],\n        smeta.farmProgramPubkey,\n      )\n    )[0];\n\n    return {\n      pdaDoubleDipFarmTokenAccount,\n      pdaDoubleDipRewardTokenAccount,\n      pdaDoubleDipFarmState,\n    };\n  }\n\n  // prettier-ignore\n  async getLpDepositKeys (_ownerKey: PublicKey) {\n    const smeta = SWAP_METAS[SWAP_ORCA];\n    return [\n      { pubkey: smeta.depositProgramPubkey, isSigner: false, isWritable: false },\n      { pubkey: this.swapPubkey,            isSigner: false, isWritable: false },\n      { pubkey: this.swapAuthority,         isSigner: false, isWritable: false },\n      { pubkey: this.swapTokenAAccount,     isSigner: false, isWritable: true },\n      { pubkey: this.swapTokenBAccount,     isSigner: false, isWritable: true },\n      { pubkey: this.lpMintPubkey,          isSigner: false, isWritable: true }\n    ];\n  }\n\n  // prettier-ignore\n  async getLpWithdrawKeys(_ownerKey: PublicKey) {\n    const smeta = SWAP_METAS[SWAP_ORCA];\n    return [\n      { pubkey: smeta.depositProgramPubkey, isSigner: false, isWritable: false },\n      { pubkey: this.swapPubkey,            isSigner: false, isWritable: false },\n      { pubkey: this.swapAuthority,         isSigner: false, isWritable: false },\n      { pubkey: this.lpMintPubkey,          isSigner: false, isWritable: true },\n      { pubkey: this.swapTokenAAccount,     isSigner: false, isWritable: true },\n      { pubkey: this.swapTokenBAccount,     isSigner: false, isWritable: true },\n      { pubkey: this.feeAccount,            isSigner: false, isWritable: true }\n    ];\n  }\n\n  async getLpStakeKeys(ownerKey: PublicKey) {\n    /*\n    For double-dipped transactions, we have removed staking instruction out of the corresponding lp-create and lp-redeem\n    transaction, and all into the second stake operation\n    */\n    if (this.isDoubleDipSupported) {\n      return [];\n    }\n    return await this.getFirstStakeKeys(ownerKey);\n  }\n\n  // prettier-ignore\n  async getFirstStakeKeys(ownerKey: PublicKey) {\n    const smeta = SWAP_METAS[SWAP_ORCA];\n    const pdaKeys = await this.getPdaKeys(ownerKey);\n    return [\n      { pubkey: smeta.farmProgramPubkey,        isSigner: false, isWritable: false },\n      { pubkey: this.globalLpVault,             isSigner: false, isWritable: true },\n      { pubkey: this.farmTokenMint,             isSigner: false, isWritable: true },\n      { pubkey: pdaKeys.pdaFarmTokenAccount,    isSigner: false, isWritable: true },\n      { pubkey: this.globalFarmState,           isSigner: false, isWritable: true },\n      { pubkey: pdaKeys.pdaFarmState,           isSigner: false, isWritable: true },\n      { pubkey: this.globalRewardTokenVault,    isSigner: false, isWritable: true },\n      { pubkey: pdaKeys.pdaRewardTokenAccount,  isSigner: false, isWritable: true },\n      { pubkey: this.rewardTokenAuthority,      isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID,               isSigner: false, isWritable: false },\n    ];\n  }\n\n  async getSecondStakeKeys(ownerKey: PublicKey) {\n    const smeta = SWAP_METAS[SWAP_ORCA];\n    const pdaKeys = await this.getPdaDoubleDipKeys(ownerKey);\n    return [\n      { pubkey: smeta.farmProgramPubkey, isSigner: false, isWritable: false },\n      { pubkey: this.globalLp3Vault!, isSigner: false, isWritable: true },\n      { pubkey: this.farmTokenLp3Mint!, isSigner: false, isWritable: true },\n      { pubkey: pdaKeys.pdaDoubleDipFarmTokenAccount!, isSigner: false, isWritable: true },\n      { pubkey: this.globalDoubleDipFarmState!, isSigner: false, isWritable: true },\n      { pubkey: pdaKeys.pdaDoubleDipFarmState!, isSigner: false, isWritable: true },\n      { pubkey: this.globalDoubleDipRewardTokenVault!, isSigner: false, isWritable: true },\n      { pubkey: pdaKeys.pdaDoubleDipRewardTokenAccount!, isSigner: false, isWritable: true },\n      { pubkey: this.doubleDipRewardTokenAuthority!, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n  }\n\n  getLRVaults(): [PublicKey, PublicKey] {\n    return [this.swapTokenAAccount, this.swapTokenBAccount];\n  }\n}\n\ntype RaydiumStakeKeys = {\n  poolIdPubkey: PublicKey;\n  poolAuthorityPubkey: PublicKey;\n\n  poolLPVault: PublicKey;\n};\n\ntype RaydiumRewardKeys = {\n  rewardToken: TokenID;\n  userRewardAlphaAccountPubkey: PublicKey;\n  userRewardPublicAccountPubkey: PublicKey;\n  rewardVault: PublicKey;\n};\n\ntype RaydiumLpArgs = {\n  lpMintPubkey: PublicKey;\n\n  ammIdPubkey: PublicKey;\n  ammAuthPubkey: PublicKey;\n  ammOpenOrdersPubkey: PublicKey;\n  ammTargetOrderPubkey: PublicKey;\n\n  poolCoinTokenPubkey: PublicKey;\n  poolPcTokenPubkey: PublicKey;\n  poolWithdrawQueue: PublicKey;\n  poolTempLpTokenAccount: PublicKey;\n\n  serumProgramId: PublicKey;\n  serumMarketPubkey: PublicKey;\n  serumCoinVaultAccount: PublicKey;\n  serumPcVaultAccount: PublicKey;\n  serumVaultSigner: PublicKey;\n\n  rewardAccounts?: RaydiumRewardKeys[];\n\n  stakeKeys: RaydiumStakeKeys | null;\n  stakeProgram?: PublicKey;\n\n  serumEventQueueAccount?: PublicKey;\n  serumBidsAccount?: PublicKey;\n  serumAsksAccount?: PublicKey;\n};\n\nexport class RaydiumLpSwapInfo implements LpSwapKeyInfo {\n  lpMintPubkey: PublicKey;\n\n  ammIdPubkey: PublicKey;\n  ammAuthPubkey: PublicKey;\n  ammOpenOrdersPubkey: PublicKey;\n  ammTargetOrderPubkey: PublicKey;\n\n  poolCoinTokenPubkey: PublicKey;\n  poolPcTokenPubkey: PublicKey;\n  poolWithdrawQueue: PublicKey;\n  poolTempLpTokenAccount: PublicKey;\n\n  serumProgramId: PublicKey;\n  serumMarketPubkey: PublicKey;\n  serumCoinVaultAccount: PublicKey;\n  serumPcVaultAccount: PublicKey;\n  serumVaultSigner: PublicKey;\n\n  rewardAccounts?: RaydiumRewardKeys[];\n\n  stakeKeys: RaydiumStakeKeys | null;\n  stakeProgram: PublicKey;\n\n  serumEventQueueAccount?: PublicKey;\n  serumBidsAccount?: PublicKey;\n  serumAsksAccount?: PublicKey;\n  constructor(args: RaydiumLpArgs) {\n    this.lpMintPubkey = args.lpMintPubkey;\n\n    this.ammIdPubkey = args.ammIdPubkey;\n    this.ammAuthPubkey = args.ammAuthPubkey;\n    this.ammOpenOrdersPubkey = args.ammOpenOrdersPubkey;\n    this.ammTargetOrderPubkey = args.ammTargetOrderPubkey;\n\n    this.poolCoinTokenPubkey = args.poolCoinTokenPubkey;\n    this.poolPcTokenPubkey = args.poolPcTokenPubkey;\n    this.poolWithdrawQueue = args.poolWithdrawQueue;\n    this.poolTempLpTokenAccount = args.poolTempLpTokenAccount;\n\n    this.serumProgramId = args.serumProgramId;\n    this.serumMarketPubkey = args.serumMarketPubkey;\n    this.serumCoinVaultAccount = args.serumCoinVaultAccount;\n    this.serumPcVaultAccount = args.serumPcVaultAccount;\n    this.serumVaultSigner = args.serumVaultSigner;\n\n    this.rewardAccounts = args.rewardAccounts;\n    this.stakeKeys = args.stakeKeys;\n    this.stakeProgram = args.stakeProgram || SWAP_METAS[SWAP_RAYDIUM].stakeProgramV5Pubkey;\n\n    this.serumEventQueueAccount = args.serumEventQueueAccount;\n    this.serumBidsAccount = args.serumBidsAccount;\n    this.serumAsksAccount = args.serumAsksAccount;\n  }\n  // prettier-ignore\n  async getLpDepositKeys (_ownerKey: PublicKey) {\n    const smeta = SWAP_METAS[SWAP_RAYDIUM];\n    return [\n      { pubkey: smeta.depositProgramPubkey,     isSigner: false, isWritable: false },\n      { pubkey: this.ammIdPubkey,               isSigner: false, isWritable: true },\n      { pubkey: this.ammAuthPubkey,             isSigner: false, isWritable: false },\n      { pubkey: this.ammOpenOrdersPubkey,       isSigner: false, isWritable: false },\n      { pubkey: this.ammTargetOrderPubkey,      isSigner: false, isWritable: true },\n      { pubkey: this.lpMintPubkey,              isSigner: false, isWritable: true },\n      { pubkey: this.poolCoinTokenPubkey,       isSigner: false, isWritable: true },\n      { pubkey: this.poolPcTokenPubkey,         isSigner: false, isWritable: true },\n      { pubkey: this.serumMarketPubkey,         isSigner: false, isWritable: false },\n    ];\n  }\n  // prettier-ignore\n  async getLpWithdrawKeys(_ownerKey: PublicKey) {\n    const smeta = SWAP_METAS[SWAP_RAYDIUM];\n    return [\n      { pubkey: smeta.depositProgramPubkey,     isSigner: false, isWritable: false },\n      { pubkey: this.ammIdPubkey,               isSigner: false, isWritable: true },\n      { pubkey: this.ammAuthPubkey,             isSigner: false, isWritable: false },\n      { pubkey: this.ammOpenOrdersPubkey,       isSigner: false, isWritable: true },\n      { pubkey: this.ammTargetOrderPubkey,      isSigner: false, isWritable: true },\n      { pubkey: this.lpMintPubkey,              isSigner: false, isWritable: true },\n      { pubkey: this.poolCoinTokenPubkey,       isSigner: false, isWritable: true },\n      { pubkey: this.poolPcTokenPubkey,         isSigner: false, isWritable: true },\n      { pubkey: this.poolWithdrawQueue,         isSigner: false, isWritable: true },\n      { pubkey: this.poolTempLpTokenAccount,    isSigner: false, isWritable: true },\n\n      { pubkey: this.serumProgramId,            isSigner: false, isWritable: false },\n      { pubkey: this.serumMarketPubkey,         isSigner: false, isWritable: true },\n      { pubkey: this.serumCoinVaultAccount,     isSigner: false, isWritable: true },\n      { pubkey: this.serumPcVaultAccount,       isSigner: false, isWritable: true },\n      { pubkey: this.serumVaultSigner,          isSigner: false, isWritable: false },\n      ... (this.serumEventQueueAccount ? [\n        { pubkey: this.serumEventQueueAccount!,  isSigner: false, isWritable: true },\n        { pubkey: this.serumBidsAccount!,        isSigner: false, isWritable: true },\n        { pubkey: this.serumAsksAccount!,        isSigner: false, isWritable: true },\n      ] : []),\n    ];\n  }\n  async getLpStakeKeys(ownerKey: PublicKey) {\n    if (!this.stakeKeys) {\n      return [];\n    } else {\n      invariant(this.rewardAccounts);\n      const stkeys = this.stakeKeys;\n      const userLedger = await this.getAssociatedLedger(ownerKey);\n      console.log(`user ledger: ${userLedger.toBase58()}`);\n\n      const { isPublic } = isPublicOrAlpha(ownerKey);\n      const userRewardFirstAccount = isPublic\n        ? this.rewardAccounts![0].userRewardPublicAccountPubkey\n        : this.rewardAccounts![0].userRewardAlphaAccountPubkey;\n\n      // prettier-ignore\n      const keys = [\n        { pubkey: this.stakeProgram,                  isSigner: false, isWritable: false, },\n        { pubkey: stkeys.poolIdPubkey,                isSigner: false, isWritable: true },\n        { pubkey: stkeys.poolAuthorityPubkey,         isSigner: false, isWritable: false },\n        { pubkey: userLedger,                         isSigner: false, isWritable: true },\n  \n        { pubkey: stkeys.poolLPVault,                 isSigner: false, isWritable: true },\n\n        { pubkey: userRewardFirstAccount,             isSigner: false, isWritable: true },\n        { pubkey: this.rewardAccounts![0].rewardVault,isSigner: false, isWritable: true },\n\n        // Below account are not listed on solscan.io but explorer.solana.com, so you should better check both sites.\n        { pubkey: SYSVAR_CLOCK_PUBKEY,                isSigner: false, isWritable: false },\n        { pubkey: TOKEN_PROGRAM_ID,                   isSigner: false, isWritable: false },\n      ];\n      if (this.rewardAccounts.length > 1) {\n        for (let i = 1; i < this.rewardAccounts.length; i++) {\n          const userRewardAccount = isPublic\n            ? this.rewardAccounts![i].userRewardPublicAccountPubkey\n            : this.rewardAccounts![i].userRewardAlphaAccountPubkey;\n          keys.push(\n            ...[\n              { pubkey: userRewardAccount, isSigner: false, isWritable: true },\n              { pubkey: this.rewardAccounts![i].rewardVault, isSigner: false, isWritable: true },\n            ],\n          );\n        }\n      }\n\n      return keys;\n    }\n  }\n  async getUserRewardAccountsToClaim(ownerKey: PublicKey) {\n    const { isPublic } = isPublicOrAlpha(ownerKey);\n    return this.rewardAccounts!.reduce((pre, cur) => {\n      pre[cur.rewardToken] = isPublic\n        ? cur.userRewardPublicAccountPubkey\n        : cur.userRewardAlphaAccountPubkey;\n      return pre;\n    }, {} as Record<TokenID, PublicKey>);\n  }\n  getLRVaults(): [PublicKey, PublicKey] {\n    return [this.poolCoinTokenPubkey, this.poolPcTokenPubkey];\n  }\n  async getAssociatedLedger(owner: PublicKey) {\n    const poolId = this.stakeKeys?.poolIdPubkey;\n    invariant(poolId);\n    const [publicKey] = await PublicKey.findProgramAddress(\n      [poolId.toBuffer(), owner.toBuffer(), Buffer.from('staker_info_v2_associated_seed', 'utf-8')],\n      this.stakeProgram,\n    );\n    return publicKey;\n  }\n}\n\n// prettier-ignore\nexport const SABER_LP_METAS: {[key in TokenID]? : SaberLpSwapInfo } = {\n  [TokenID.USDT_USDC_SABER]: new SaberLpSwapInfo({\n    swap:           new PublicKey(\"YAkoNb6HKmSxQN9L8hiBE5tPJRsniSSMzND1boHmZxe\"),\n    swapAuthority:  new PublicKey(\"5C1k9yV7y4CjMnKv8eGYDgWND8P89Pdfj79Trk2qmfGo\"),\n    tokenAVault:    new PublicKey(\"CfWX7o2TswwbxusJ4hCaPobu2jLCb1hfXuXJQjVq3jQF\"), // USDC\n    tokenBVault:    new PublicKey(\"EnTrdMMpdhugeH6Ban6gYZWXughWxKtVGfCwFn78ZmY3\"), // USDT\n    tokenAfees:     new PublicKey(\"XZuQG7CQrAA6y6tHM9CLrDjDUWwuUU2SBoV7pLaGDQT\"), // USDC\n    tokenBfees:     new PublicKey(\"63aJYYuZddSnCGyE8FNrCVQWnXhjh6CQSRwcDeSMhdVC\"), // USDT\n\n    // for stake/unstake\n    quarry:       new PublicKey(\"Hs1X5YtXwZACueUtS9azZyXFDWVxAMLvm3tttubpK7ph\"),\n    rewarder:     new PublicKey(\"rXhAofQCT7NN9TUqigyEAUzV1uLL4boeD8CRkNBSkYk\"),\n    mint:         new PublicKey(MINTS[TokenID.USDT_USDC_SABER]),\n  }),\n  [TokenID.mSOL_SOL_SABER]: new SaberLpSwapInfo({\n    swap:           new PublicKey(\"Lee1XZJfJ9Hm2K1qTyeCz1LXNc1YBZaKZszvNY4KCDw\"),\n    swapAuthority:  new PublicKey(\"2Sj4MZvmLhud4uRmGHJvDxq612nmF4JJsU1R4ZjNNGMS\"),\n    tokenAVault:    new PublicKey(\"9DgFSWkPDGijNKcLGbr3p5xoJbHsPgXUTr6QvGBJ5vGN\"),\n    tokenBVault:    new PublicKey(\"2hNHZg7XBhuhHVZ3JDEi4buq2fPQwuWBdQ9xkH7t1GQX\"),\n    tokenAfees:     new PublicKey(\"HzZRDMiJSqS5oxzfu17c35DChnkx58LZtas16Pgmuunn\"),\n    tokenBfees:     new PublicKey(\"3oebZVvPqba2egfdcbNXa1uS13SfSebxMaNVE82FMk7R\"),\n\n    // for stake/unstake\n    quarry:       new PublicKey(\"7193EeecxsPPv9TMoQATTN8i1eTqEUSNU8aDLuFCQy68\"),\n    rewarder:     new PublicKey(\"rXhAofQCT7NN9TUqigyEAUzV1uLL4boeD8CRkNBSkYk\"),\n    mint:         new PublicKey(MINTS[TokenID.mSOL_SOL_SABER]),\n  }),\n  [TokenID.stSOL_SOL_SABER]: new SaberLpSwapInfo({\n    swap:           new PublicKey(\"Lid8SLUxQ9RmF7XMqUA8c24RitTwzja8VSKngJxRcUa\"),\n    swapAuthority:  new PublicKey(\"8eyi347MTDeH5F6eVv2qjPxVnU685FFZLDGcj5QWHZ6y\"),\n    tokenAVault:    new PublicKey(\"4PgzyzLtds9bKZ2to9PMnKqJzKEUpjvNUaeN23phegax\"),\n    tokenBVault:    new PublicKey(\"AtymwxoVN9peZo7EXTcDz9jKVc4vRmisJKKrNfe3ewBa\"),\n    tokenAfees:     new PublicKey(\"2AbLYRQa7PV6gG6XgMjaey18RtPh85sXFmMmP4HsDdQK\"),\n    tokenBfees:     new PublicKey(\"Cv3YNq8iY1ttMS3iDgwBxd7QxnMC2pwcXUomtR7CTD8W\"),\n\n    // for stake/unstake\n    quarry:       new PublicKey(\"2isVhcqVVpsAeZ94d1DGVErCQ7uZQNSJ85xikN8awHeC\"),\n    rewarder:     new PublicKey(\"rXhAofQCT7NN9TUqigyEAUzV1uLL4boeD8CRkNBSkYk\"),\n    mint:         new PublicKey(MINTS[TokenID.stSOL_SOL_SABER]),\n  }),\n  [TokenID.USTv2_USDC_SABER]: new SaberLpSwapInfo({\n    swap:           new PublicKey(\"KwnjUuZhTMTSGAaavkLEmSyfobY16JNH4poL9oeeEvE\"),\n    swapAuthority:  new PublicKey(\"9osV5a7FXEjuMujxZJGBRXVAyQ5fJfBFNkyAf6fSz9kw\"),\n    tokenAVault:    new PublicKey(\"J63v6qEZmQpDqCD8bd4PXu2Pq5ZbyXrFcSa3Xt1HdAPQ\"),\n    tokenBVault:    new PublicKey(\"BnKQtTdLw9qPCDgZkWX3sURkBAoKCUYL1yahh6Mw7mRK\"),\n    tokenAfees:     new PublicKey(\"BYgyVxdrGa3XNj1cx1XHAVyRG8qYhBnv1DS59Bsvmg5h\"),\n    tokenBfees:     new PublicKey(\"G9nt2GazsDj3Ey3KdA49Sfaq9K95Dc72Ejps4NKTP2SR\"),\n\n    // for stake/unstake\n    quarry:       new PublicKey(\"BYEUtsLjYAVHRiRR3Avjqnd2RQLRL8n933N52p9kSX2y\"),\n    rewarder:     new PublicKey(\"rXhAofQCT7NN9TUqigyEAUzV1uLL4boeD8CRkNBSkYk\"),\n    mint:         new PublicKey(MINTS[TokenID.USTv2_USDC_SABER]),\n  }),\n}\n\n// prettier-ignore\nexport const ORCA_LP_METAS: {[key in TokenID]? : OrcaLpSwapInfo } = {\n  [TokenID.USDC_USDT_ORCA]: new OrcaLpSwapInfo({\n    lpMintPubkey:           new PublicKey(MINTS[TokenID.USDC_USDT_ORCA]),\n\n    swapPubkey:             new PublicKey(\"F13xvvx45jVGd84ynK3c8T89UejQVxjCLtmHfPmAXAHP\"),\n    swapAuthority:          new PublicKey(\"3cGHDS8uWhdxQj14vTmFtYHX3NMouPpE4o9MjQ43Bbf4\"),\n\n    swapTokenAAccount:      new PublicKey(\"6uUn2okWk5v4x9Gc4n2LLGHtWoa9tmizHq1363dW7t9W\"), // usdc\n    swapTokenBAccount:      new PublicKey(\"AiwmnLy7xPT28dqZpkRm6i1ZGwELUCzCsuN92v4JkSeU\"), // usdt\n\n    globalLpVault:          new PublicKey(\"9hPRfmQmZYiL4ZtuvGBk5SjMzmFCQ2h9a4GKoM82BR84\"),\n    farmTokenMint:          new PublicKey(\"GjpXgKwn4VW4J2pZdS3dovM58hiXWLJtopTfqG83zY2f\"),\n    globalFarmState:        new PublicKey(\"5psKJrxWnPmoAbCxk3An2CGh7wHAX2cWddf5vZuYbbVw\"),\n    globalRewardTokenVault: new PublicKey(\"AYbtHmuJxXpo91m988UdyTtzC6J72WvMAW7XkXqFhAbz\"),\n    rewardTokenAuthority:   new PublicKey(\"5YGvg6mfuvJtHdVWDXTs4sYy6GwQAUduK8qurDcL111S\"),\n    feeAccount:             new PublicKey(\"B4RNxMJGRzKFQyTq2Uwkmpyjtew13n7KtdqZy6qgENTu\"),\n    publicRewardTokAcc:     new PublicKey(\"FSQWYCVXiGXRfKd1NmchusEa9wADez9eQGt5RY5eDjiy\"),\n    alphaRewardTokAcc:      new PublicKey(\"GUFm5nznu9B8Anfg3pZDxSofs8pUMjQZdVYnhbdvnkeV\"),\n  }),\n  [TokenID.SOL_USDC_ORCA]: new OrcaLpSwapInfo({\n    lpMintPubkey:           new PublicKey(MINTS[TokenID.SOL_USDC_ORCA]),\n\n    swapPubkey:             new PublicKey(\"EGZ7tiLeH62TPV1gL8WwbXGzEPa9zmcpVnnkPKKnrE2U\"),\n    swapAuthority:          new PublicKey(\"JU8kmKzDHF9sXWsnoznaFDFezLsE5uomX2JkRMbmsQP\"),\n\n    swapTokenAAccount:      new PublicKey(\"ANP74VNsHwSrq9uUSjiSNyNWvf6ZPrKTmE4gHoNd13Lg\"),\n    swapTokenBAccount:      new PublicKey(\"75HgnSvXbWKZBpZHveX68ZzAhDqMzNDS29X6BGLtxMo1\"),\n\n    globalLpVault:          new PublicKey(\"7ipefo5V3QEJWeuT2PohFSEUaranZxMSeWQo2rcNigr3\"),\n    farmTokenMint:          new PublicKey(\"FFdjrSvNALfdgxANNpt3x85WpeVMdQSH5SEP2poM8fcK\"),\n    globalFarmState:        new PublicKey(\"85HrPbJtrN82aeB74WTwoFxcNgmf5aDNP2ENngbDpd5G\"),\n    globalRewardTokenVault: new PublicKey(\"kjjFC8RAF7GuBQ9iYgyTcPmvsRafJ2Ec2AmoS6DjakJ\"),\n    rewardTokenAuthority:   new PublicKey(\"MDcWkwPqr5HrA91g4GGax7bVP1NDDetnR12nGhoAdYj\"),\n    feeAccount:             new PublicKey(\"8JnSiuvQq3BVuCU3n4DrSTw9chBSPvEMswrhtifVkr1o\"),\n    publicRewardTokAcc:     new PublicKey(\"Hr5yQGW35HBP8fJLKfranRbbKzfSPHrhKFf1ZP68LmVp\"),\n    alphaRewardTokAcc:      new PublicKey(\"85hb3QUq7M8W3dMxCdxQ9vnezV7fRPBUGbq24XTEaLcg\"),\n  }),\n  [TokenID.mSOL_SOL_ORCA]: new OrcaLpSwapInfo({\n    lpMintPubkey:           new PublicKey(MINTS[TokenID.mSOL_SOL_ORCA]),\n\n    swapPubkey:             new PublicKey(\"9EQMEzJdE2LDAY1hw1RytpufdwAXzatYfQ3M2UuT9b88\"),\n    swapAuthority:          new PublicKey(\"6cwehd4xhKkJ2s7iGh4CaDb7KhMgqczSBnyNJieUYbHn\"),\n\n    swapTokenAAccount:      new PublicKey(\"6xmki5RtGNHrfhTiHFfp9k3RQ9t8qgL1cYP2YCG2h179\"),\n    swapTokenBAccount:      new PublicKey(\"Ew2coQtVGLeca31vqB2ssHntjzZgUy1ad9VuuAX8yw7p\"),\n\n    globalLpVault:          new PublicKey(\"DuTZUmTRydVc3EN78brdYFUfskn6s93zH4WhY3Fo53AJ\"),\n    farmTokenMint:          new PublicKey(\"3RTGL7gPF4V1ns1AeGFApT7cBEGVDfmJ77DqQi9AC6uG\"),\n    globalFarmState:        new PublicKey(\"JADWjBW1Xs8WhW8kj3GTCRQn3LR4gwvbFTEMwv9ZNxQh\"),\n    globalRewardTokenVault: new PublicKey(\"7dpUACKvEiuq5kyoGtgiA131hYwdxfFhEeD5TMT4mnzG\"),\n    rewardTokenAuthority:   new PublicKey(\"CtXKDXJ4wzgto48QQFANestEgtov5dJRrs9qpRw7BV1h\"),\n    feeAccount:             new PublicKey(\"6j2tt2UVYMQwqG3hRtyydW3odzBFwy3pN33tyB3xCKQ6\"),\n    publicRewardTokAcc:     new PublicKey(\"CA59mFikUhJYLesKAxx8j8unHrxTfXSEPjzoXFyrG9M1\"),\n    alphaRewardTokAcc:      new PublicKey(\"3XNau9dqDSjAARS3cvTjzUv2nRU2FEzaGJd31f6NApUU\"),\n\n    isDoubleDipSupported:   LP_TO_NEED_2ND_STAKE[TokenID.mSOL_SOL_ORCA],\n    globalLp3Vault:         new PublicKey('AEZpFdJ5hA7MwVS7AReBbS9pMhoYRhLXgDyc1GWbSoXc'),\n    farmTokenLp3Mint:       new PublicKey('576ABEdvLG1iFU3bLC8AMJ3mo5LhfgPPhMtTeVAGG6u7'),\n    globalDoubleDipFarmState: new PublicKey('2SciNw7cEsKJc1PMRDzWCcEzvuScmEaUgmrJXCi9UFxY'),\n    globalDoubleDipRewardTokenVault: new PublicKey('DCHpFt1bCk9mTudj6VsKbADvUPT3tAJvJ2rcBZQry8Wz'),\n    doubleDipRewardTokenAuthority: new PublicKey('5uk8F4MaFSu1pF9Q7k8xcyWgqyo9q2dqr3Kb4Esvd1n3'),\n    publicDoubleDipRewardAcc: new PublicKey(\"5U5uowAVYyggB6DvVZE12cLZE7EjxkdKGt8VpvbsNbAy\"),\n    alphaDoubleDipRewardAcc: new PublicKey(\"GfSzQknESVecnF5z9G1gpEtcaxZkcT742uUdbhJoU5Ap\"),\n    doubleDipRewardMint:    new PublicKey(\"MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey\"),\n  }),\n  [TokenID.ORCA_USDC_ORCA]: new OrcaLpSwapInfo({\n    lpMintPubkey:           new PublicKey(MINTS[TokenID.ORCA_USDC_ORCA]),\n\n    swapPubkey:             new PublicKey(\"2p7nYbtPBgtmY69NsE8DAW6szpRJn7tQvDnqvoEWQvjY\"),\n    swapAuthority:          new PublicKey(\"3fr1AhdiAmWLeNrS24CMoAu9pPgbzVhwLtJ6QUPmw2ob\"),\n\n    swapTokenAAccount:      new PublicKey(\"9vYWHBPz817wJdQpE8u3h8UoY3sZ16ZXdCcvLB7jY4Dj\"),\n    swapTokenBAccount:      new PublicKey(\"6UczejMUv1tzdvUzKpULKHxrK9sqLm8edR1v9jinVWm9\"),\n\n    globalLpVault:          new PublicKey(\"45BAAQCZYd2kP3Z3WvRwdtfUhvuW4FvpqVK4m8qrR5x1\"),\n    farmTokenMint:          new PublicKey(\"Gc7W5U66iuHQcC1cQyeX9hxkPF2QUVJPTf1NWbW8fNrt\"),\n    globalFarmState:        new PublicKey(\"9S1BsxbDNQXQccjFamVEGgxiYQHTeudvhEYwFr4oWeaf\"),\n    globalRewardTokenVault: new PublicKey(\"DEiqe2Ta9TRMRtWdBqiFV13dhVrqCeG8MMmVwywvXvJo\"),\n    rewardTokenAuthority:   new PublicKey(\"66xaEjFoYfRcspc18oDj61mXDyznr9zam6tFNeqvs2jK\"),\n    feeAccount:             new PublicKey(\"7CXZED4jfRp3qdHB9Py3up6v1C4UhHofFvfT6RXbJLRN\"),\n    publicRewardTokAcc:     new PublicKey(\"G8cPgn6tiQQAQcTQupEi8fTBfo1RpqTii1hW65L4poTY\"),\n    alphaRewardTokAcc:      new PublicKey(\"8fFHftEm6PJBahCQukV6J27b7xzDeVPFdedjV1f4T36x\"),\n  }),\n  [TokenID.ORCA_SOL_ORCA]: new OrcaLpSwapInfo({\n    lpMintPubkey:           new PublicKey(MINTS[TokenID.ORCA_SOL_ORCA]),\n\n    swapPubkey:             new PublicKey(\"2ZnVuidTHpi5WWKUwFXauYGhvdT9jRKYv5MDahtbwtYr\"),\n    swapAuthority:          new PublicKey(\"2PH1quJj9MHQXATCmNZ6qQ2gZqM8R236DpKaz99ggVpm\"),\n\n    swapTokenAAccount:      new PublicKey(\"AioST8HKQJRqjE1mknk4Rydc8wVADhdQwRJmAAYX1T6Z\"),\n    swapTokenBAccount:      new PublicKey(\"73zdy95DynZP4exdpuXTDsexcrWbDJX9TFi2E6CDzXh4\"),\n\n    globalLpVault:          new PublicKey(\"7N7zxoDMMV1sCDiVEzinTyQxS2GoN388QprMCQX38BeT\"), // lp 1\n    farmTokenMint:          new PublicKey(\"B5waaKnsmtqFawPspUwcuy1cRjAC7u2LrHSwxPSxK4sZ\"),\n    globalFarmState:        new PublicKey(\"F6pi7SyXWx56fP96mYQ4Yfh4yZ7oGNtDjwSYHT5Mz7Ld\"),\n    globalRewardTokenVault: new PublicKey(\"CSbYA7Cd65Vis2oqX797zmnWmpgENmqrPdmPbTbRPykd\"),\n    rewardTokenAuthority:   new PublicKey(\"98RAHBKRTTC87nNwug1GEAnLVgouk9nRaa3u14jrp6Zz\"),\n    feeAccount:             new PublicKey(\"4Zc4kQZhRQeGztihvcGSWezJE1k44kKEgPCAkdeBfras\"),\n    publicRewardTokAcc:     new PublicKey(\"2G7ZWG9z6WtKJ5k5B32RTmLFB7hLVEnC5RmYD7gvCpG3\"),\n    alphaRewardTokAcc:      new PublicKey(\"8htfap3Gej5t4araQRHioggu2acsG3tQAc38PMtBhBhD\"),\n  }),\n  [TokenID.ETH_USDC_ORCA]: new OrcaLpSwapInfo({\n    lpMintPubkey:           new PublicKey(MINTS[TokenID.ETH_USDC_ORCA]),\n\n    swapPubkey:             new PublicKey(\"FgZut2qVQEyPBibaTJbbX2PxaMZvT1vjDebiVaDp5BWP\"),\n    swapAuthority:          new PublicKey(\"4dfCZR32xXhoTgMRhnViNaTFwiKP9A34TDjHCR3xM5rg\"),\n\n    swapTokenAAccount:      new PublicKey(\"H9h5yTBfCHcb4eRP87fXczzXgNaMzKihr7bf1sjw7iuZ\"),\n    swapTokenBAccount:      new PublicKey(\"JA98RXv2VdxQD8pRQq4dzJ1Bp4nH8nokCGmxvPWKJ3hx\"),\n\n    globalLpVault:          new PublicKey(\"6zoYTvgLd4UAhKSPwirEU9VNNNkpezwq8AM4jXW1Qop9\"), // lp 1\n    farmTokenMint:          new PublicKey(\"HDP2AYFmvLz6sWpoSuNS62JjvW4HjMKp7doXucqpWN56\"),\n    globalFarmState:        new PublicKey(\"FpezTR76RRjgpBb9HhR6ap8BgQfkHyNMQSqJDcoXpjAb\"),\n    globalRewardTokenVault: new PublicKey(\"9MWJmWVAGQ9C9SxwWKidStAA8HjDHpnZ7KfKgVJdrNtj\"),\n    rewardTokenAuthority:   new PublicKey(\"DFTLJrgsn7cLNX9hbqiUwM8C1y6f7AfyvEmbsFSkjQNR\"),\n    feeAccount:             new PublicKey(\"DLWewB12jzGn4wXJmFCddWDeof1Ma4cZYNRv9CP5hTvX\"),\n    publicRewardTokAcc:     new PublicKey(\"CtVJtQHSAcSQ3b4FD3A3Zk8vb2PaC4wn1oTnHtUMS8rf\"),\n    alphaRewardTokAcc:      new PublicKey(\"BSpFLmCAzJp5XMSfVXC2rq4LjJ2NSs2jqFS8agcENAkH\"),\n  }),\n  [TokenID.SOL_USDT_ORCA]: new OrcaLpSwapInfo({\n    lpMintPubkey:           new PublicKey(MINTS[TokenID.SOL_USDT_ORCA]),\n\n    swapPubkey:             new PublicKey(\"Dqk7mHQBx2ZWExmyrR2S8X6UG75CrbbpK2FSBZsNYsw6\"),\n    swapAuthority:          new PublicKey(\"2sxKY7hxVFrY5oNE2DgaPAJFamMzsmFLM2DgVcjK5yTy\"),\n\n    swapTokenAAccount:      new PublicKey(\"DTb8NKsfhEJGY1TrA7RXN6MBiTrjnkdMAfjPEjtmTT3M\"),\n    swapTokenBAccount:      new PublicKey(\"E8erPjPEorykpPjFV9yUYMYigEWKQUxuGfL2rJKLJ3KU\"),\n\n    globalLpVault:          new PublicKey(\"EXxH5tKDHLy68nWXS8w1BRUsiDEHMbKACLUmFWv8Q9tu\"), // lp 1\n    farmTokenMint:          new PublicKey(\"71vZ7Jvu8fTyFzpX399dmoSovoz24rVbipLrRn2wBNzW\"),\n    globalFarmState:        new PublicKey(\"4RRRJkscV2DmwJUxTQgRdYock75GfwYJn7LTxy9rGTmY\"),\n    globalRewardTokenVault: new PublicKey(\"H3ozvCeEwnsqnM2naCnXVxLLwH2XPC5kU8BH97XDpDwS\"),\n    rewardTokenAuthority:   new PublicKey(\"EavNUagNtD7DEdV4atcm3dEBXafARKCNJyNkyfz426m6\"),\n    feeAccount:             new PublicKey(\"BBKgw75FivTYXj85D2AWyVdaTdTWuSuHVXRm1Xu7fipb\"),\n    publicRewardTokAcc:     new PublicKey(\"9AfsnfPwRrJLjcCAasUcaYeVunpmxgev6yCVa6HiLkp7\"),\n    alphaRewardTokAcc:      new PublicKey(\"93xUo4bmSXdGxCNSDvk2xYH7YAY6KqDZ4mPMbwBuiyfm\"),\n  }),\n  [TokenID.ETH_SOL_ORCA]: new OrcaLpSwapInfo({\n    lpMintPubkey:           new PublicKey(MINTS[TokenID.ETH_SOL_ORCA]),\n\n    swapPubkey:             new PublicKey(\"EuK3xDa4rWuHeMQCBsHf1ETZNiEQb5C476oE9u9kp8Ji\"),\n    swapAuthority:          new PublicKey(\"DffrDbzPiswDJaiicBBo9CjqztKgFLrqXGwNJH4XQefZ\"),\n\n    swapTokenAAccount:      new PublicKey(\"7F2cLdio3i6CCJaypj9VfNDPW2DwT3vkDmZJDEfmxu6A\"),\n    swapTokenBAccount:      new PublicKey(\"5pUTGvN2AA2BEzBDU4CNDh3LHER15WS6J8oJf5XeZFD8\"),\n\n    globalLpVault:          new PublicKey(\"6ckhPnn6tCr88aq9SxhWaAA5G7izuXNKhVk1Xa62zhFD\"), // lp 1\n    farmTokenMint:          new PublicKey(\"CGFTRh4jKLPbS9r4hZtbDfaRuC7qcA8rZpbLnVTzJBer\"),\n    globalFarmState:        new PublicKey(\"3ARgavt1NhqLmJWj3wAJy6XBarG6pJbEKRv1wzzRbbaN\"),\n    globalRewardTokenVault: new PublicKey(\"FYTTVMqWPzbnhTsukgiWmPiNJam4yLTxHM9mpzdan2zo\"),\n    rewardTokenAuthority:   new PublicKey(\"HXY2Vvj2XyqiPNXV3PhM9YYKgfjqzXUX4tUFRnvqihdY\"),\n    feeAccount:             new PublicKey(\"unxKgWEc71ZiHwMqZs3VLqjcjmZhfTZEg94ZLGvjdMP\"),\n\n    publicRewardTokAcc:     new PublicKey(\"2NYnAKhCwCMoe5unHuaEQEYL1ugLypK8Hrx4Qp5ugSUf\"),\n    alphaRewardTokAcc:      new PublicKey(\"6uupGx988A2yiPEhZEayNSewkp45owfbQVrJcbcKoiC6\"),\n  }),\n  [TokenID.BTC_mSOL_ORCA]: new OrcaLpSwapInfo({\n    lpMintPubkey:           new PublicKey(MINTS[TokenID.BTC_mSOL_ORCA]),\n\n    swapPubkey:             new PublicKey(\"8DRw5wQE1pyg6RB1UwypGNFgb2Pzp2hpyDDNwo76Lcc8\"),\n    swapAuthority:          new PublicKey(\"3X1aLdyvcQNc8TvBMPiucMsRCnGMBnGsjJHpZEyCf3pn\"),\n\n    swapTokenAAccount:      new PublicKey(\"6D3sxC6yEe84FUnF5Kpbgx6gN57N9poJCKAtrCeCWdJo\"),\n    swapTokenBAccount:      new PublicKey(\"EPoVJLhi9QtVPVo8n31M5k5Knvb48j8zbYyRrUbrHwC5\"),\n\n    globalLpVault:          new PublicKey(\"75gpvckCXk49zTUwG8QrzUSP4NpWh3JXdyELBrnAhimL\"),\n    farmTokenMint:          new PublicKey(\"DzpLz78wuwyFsQToin8iDv6YK6aBEymRqQq82swiFh7r\"),\n    globalFarmState:        new PublicKey(\"GBrpFtiTabs14mc4Hi1RX9YiQY7res6JxrVfMTADfcQV\"),\n    globalRewardTokenVault: new PublicKey(\"CNe5S831UP4YkumU7UsusTkf7uxJnAVdmPe6jhF51k4y\"),\n    rewardTokenAuthority:   new PublicKey(\"8sVCTztvytajkdczYEZVkSmuoRLjnMezwpT46L5w4RWR\"),\n    feeAccount:             new PublicKey(\"AqiLHbUAy4UWWKGVVgbHsaUVCMg1zemNkgsYBPSirT92\"),\n\n    publicRewardTokAcc:     new PublicKey(\"7Sfy525w1dpCQqXb2sEKuacV57333VCSCKGuubsxXvCc\"),\n    alphaRewardTokAcc:      new PublicKey(\"Bag2RfLUzSXYbnsnVAFeYYzfG6M4EGseUJsmJnC64Vrn\"),\n\n    isDoubleDipSupported:   LP_TO_NEED_2ND_STAKE[TokenID.BTC_mSOL_ORCA],\n    globalLp3Vault:         new PublicKey('DuyHVLzsqg6SZeFNbpUWfJf67kvAXPWUdUGJYWJK5vTu'),\n    farmTokenLp3Mint:       new PublicKey('6uA1ADUJbvwYJZpzUn9z9LuyKoRVngBKcQTKdXsSivA8'),\n    globalDoubleDipFarmState: new PublicKey('Cn7QNyosNQ8DyKEeMDPmtg66R7vKMXigcQ561kTkFD8E'),\n    globalDoubleDipRewardTokenVault: new PublicKey('Ea3FYh9RMJxwsyu3xS7BesLMtpX32DURohiEigG2iJCx'),\n    doubleDipRewardTokenAuthority: new PublicKey('9Lg5wBjcYDgY8S2ZAEqjtXAQ4UdHuw65aP1WmmWss4QX'),\n    doubleDipRewardMint:    new PublicKey(\"MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey\"),\n\n    alphaDoubleDipRewardAcc: new PublicKey(\"J5cxhkPf25Ff4NT7WfWhLQzp58dksfhBT1vqprxBY7D3\"),\n    publicDoubleDipRewardAcc: new PublicKey(\"AoeNmMDdDBS7xyvXjtG79pCa8Duf4qFALs4KY49okdx2\"),\n  }),\n  [TokenID.mSOL_USDC_ORCA]: new OrcaLpSwapInfo({\n    lpMintPubkey:           new PublicKey(MINTS[TokenID.mSOL_USDC_ORCA]),\n\n    swapPubkey:             new PublicKey(\"Hme4Jnqhdz2jAPUMnS7jGE5zv6Y1ynqrUEhmUAWkXmzn\"),\n    swapAuthority:          new PublicKey(\"9Z7E42k46kxnBjAh8YGXDw3rRGwwxQUBYM7Ccrmwg6ZP\"),\n\n    swapTokenAAccount:      new PublicKey(\"GBa7G5f1FqAXEgByuHXsqsEdpyMjRgT9SNxZwmmnEJAY\"),\n    swapTokenBAccount:      new PublicKey(\"7hFgNawzzmpDM8TTVCKm8jykBrym8C3TQdb8TDAfAVkD\"),\n\n    globalLpVault:          new PublicKey(\"8F6NCo1PiakW7m3eeEZvdxsjXF5bkLD3QZsTxaNg9jvv\"),\n    farmTokenMint:          new PublicKey(\"5r3vDsNTGXXb9cGQfqyNuYD2bjhRPymGJBfDmKosR9Ev\"),\n    globalFarmState:        new PublicKey(\"EvtMzreDMq1U8ytV5fEmfoWNfPhrjZ87za835GuRvZCc\"),\n    globalRewardTokenVault: new PublicKey(\"A1enLcj9XmuVeYCQScEruwnfAz7ksQhbuGFUgvgeS1a6\"),\n    rewardTokenAuthority:   new PublicKey(\"9czgZkSxLFtxmvWSb1PEHmUyBuNpAUxj9XAcHKikYnzt\"),\n    feeAccount:             new PublicKey(\"3W3Skj2vQsNEMhGRQprFXQy3Q8ZbM6ojdgiDCokVPWno\"),\n\n    publicRewardTokAcc:     new PublicKey(\"B16JMAgpR84Dr6rucq4GYLZV7pdk1uPF533P9KVwNUq4\"),\n    alphaRewardTokAcc:      new PublicKey(\"C7L8DS3ytgueAkcFojeshc2SEtePDPDXjv6gajyinGyL\"),\n\n    isDoubleDipSupported:   LP_TO_NEED_2ND_STAKE[TokenID.mSOL_USDC_ORCA],\n    globalLp3Vault:         new PublicKey('CdbgqE5B9oADrSAWc51Mgw6c3B6nvYJ4c431rftpoVqZ'),\n    farmTokenLp3Mint:       new PublicKey('9y3QYM5mcaB8tU7oXRzAQnzHVa75P8riDuPievLp64cY'),\n    globalDoubleDipFarmState: new PublicKey('5fhDMuGKRDPWVWXf7BBEwifRFrp6XwXctDQoG7UHGVt6'),\n    globalDoubleDipRewardTokenVault: new PublicKey('XbkV9HZpLdv3CjMUfoq4t8nkxR6UguHb4oP8aAKBGV2'),\n    doubleDipRewardTokenAuthority: new PublicKey('FvXa954NiCqE2jAthxV5oVcuuPAJCggwYtAihYDRhVUw'),\n    doubleDipRewardMint:    new PublicKey(\"MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey\"),\n\n    alphaDoubleDipRewardAcc: new PublicKey(\"H6pK9gb58SxvyCRZzgCj4kuX758sjYAcqPJpY1aBJzLv\"),\n    publicDoubleDipRewardAcc: new PublicKey(\"3QaNhP4vT6PG3eoQwg2DRbH9ecmy7pR2f1PBPWCwDBYd\"),\n  }),\n  [TokenID.APT_USDC_ORCA]: new OrcaLpSwapInfo({\n    lpMintPubkey:           new PublicKey(MINTS[TokenID.APT_USDC_ORCA]),\n\n    swapPubkey:             new PublicKey(\"Fg3UabVqnfycMtkiTVoaia9eNafehtT9Y4TicH2iBtvK\"),\n    swapAuthority:          new PublicKey(\"JDEYn1JsacdxoB4v4mbctFSVrSUPttacX3gxWphFHJKZ\"),\n\n    swapTokenAAccount:      new PublicKey(\"636crNdZTf46gFUKuedaBCZDBMLahf7KGud2LyTMskU5\"),\n    swapTokenBAccount:      new PublicKey(\"DGEYFkEHyiuHWtHeCGiQGn1JbkGHqYrNwaP44miRbgxu\"),\n\n    globalLpVault:          new PublicKey(\"Ha7NSMkfjQt2pWF8JY5p89T38NpKdm5da4FR3sYednin\"), // lp 1\n    farmTokenMint:          new PublicKey(\"Dx7DYSuaBufhXyQG7155ePkLmHyn6w7WeKKtQB9zscZV\"),\n    globalFarmState:        new PublicKey(\"3YZ5GYL625vWibn7d8hMdrMBawy9HGUyeTe4AoXoME1Q\"),\n    globalRewardTokenVault: new PublicKey(\"HyCJbQkccvMwC5FHAYBMjQCKXEjDo9fbhBa5pj8sc2v5\"),\n    rewardTokenAuthority:   new PublicKey(\"53y344S5Cv32ViwajrHxnsgcmam7Mw2nydcRgJEkqdGd\"),\n    feeAccount:             new PublicKey(\"41H5mWwsZKewJeV4wWiNjQ3U4VYBnwqCpzvAWt86baHd\"),\n\n    publicRewardTokAcc:     new PublicKey(\"EgFva9mEFCV31AkhoZb6rN6zvbNGE1xdaRYAkKTtdNjN\"),\n    alphaRewardTokAcc:      new PublicKey(\"Cd5ijQFj1V7V5VwuoSkG6pEaPyeX2D9ZmqS7pE1RVdFX\"),\n  }),\n  [TokenID.stSOL_USTv2_ORCA]: new OrcaLpSwapInfo({\n    lpMintPubkey:           new PublicKey(MINTS[TokenID.stSOL_USTv2_ORCA]),\n\n    swapPubkey:             new PublicKey('9F3J6RY7PTkDb3SUUpg725uXyCceBGCpZrtmYGJwgMwF'),\n    swapAuthority:          new PublicKey('wJydc21tAMxYDif8uvy5rWNGWDFNZnPPmqCvegyZRod'),\n\n    swapTokenAAccount:      new PublicKey('GFso9SAGakm8ZFa3rmuonuerbcQ8ZbACNZN7idkKR5nw'),\n    swapTokenBAccount:      new PublicKey('EZ7pJskN2a4pDknrdkLzGDHpzjbfgdBj3Tt594K9HZbL'),\n\n    globalLpVault:          new PublicKey('EQBy5YqWkLxr1xx1CZh2dDdX57XR9Ata4jNJebtuR61h'),\n    farmTokenMint:          new PublicKey('3Q44iV4URXdbS4Tk1PGs5VdWQoCxHB7zdcdMnemo8jfH'),\n    globalFarmState:        new PublicKey('GxhewC22S6wsXT156yC9SARvDnijoc3YEYyLVcQFDUCx'),\n    globalRewardTokenVault: new PublicKey('FFjuVr4FYdRGkPwaQREVQWHsBFGwQ1LH6VkmVSJL5Vva'),\n    rewardTokenAuthority:   new PublicKey('8za7LwVuYbP2PivS3KbeohpUkSmRqLdTDxhrVzsHyFZf'),\n    feeAccount:             new PublicKey('5rCbmppxMBHwBjCkLUP6fireQ12cL8LRa26QRUimoxN6'),\n\n    // public needs to be created later\n    publicRewardTokAcc:     new PublicKey('6P4frmXufUBsT2s39zbQ5k5UDrzSpFcNKmZAgWZLHgMv'),\n    alphaRewardTokAcc:      new PublicKey('DpBG9h4UWMfwRKXUzN1zo3jEkJLGE5RVz5Zt6Qr4Xt7c'),\n  }),\n  [TokenID.ORCA_whETH_ORCA]: new OrcaLpSwapInfo({\n    lpMintPubkey:           new PublicKey(MINTS[TokenID.ORCA_whETH_ORCA]),\n\n    swapPubkey:             new PublicKey('D67u6UEuFp9Q4Fu2gnu5thxBoVj2eRgDDDirdWsMVsgm'),\n    swapAuthority:          new PublicKey('4kwchkCnCaZPkBdnk85j9bJ9F1P883rwjbvsXGV7H5rM'),\n\n    swapTokenAAccount:      new PublicKey('EMxDw1NjdddQjPk9gCUN4iDMy8HJ5siKYMVjGbjuUCrh'),\n    swapTokenBAccount:      new PublicKey('DQyhcuEvE1K9DSd51agcNLg4CDrgthnKMVhU7q6R55LV'),\n\n    globalLpVault:          new PublicKey('CYSwKVGEaPazRXUcCo2Ve9wyovK44E9ftLNSsvVqRuf1'),\n    farmTokenMint:          new PublicKey('A7EAHvFEWzW8qSTFNLrEHN894GAZWZesNiebttEwtUGJ'),\n    globalFarmState:        new PublicKey('AgWH92f8cPAuURyqehF6A9wFgupEsnDX3VP5eHyytabA'),\n    globalRewardTokenVault: new PublicKey('DoaerVHonB3FYpzKtqADug9UtrPLzgY1gbzZm6cRuymi'),\n    rewardTokenAuthority:   new PublicKey('B1pahxFpN3GX4TKsw7fEDLw5MuuzmHNUbVcPZ6bp7KBM'),\n    feeAccount:             new PublicKey('GdHXLai5M8FKedXUsECSzrV72nb1RTCCooFyTWT8WYmT'),\n\n    // public needs to be created later\n    publicRewardTokAcc:     new PublicKey('9jJVuB2UhzcGED6h476kieHwTVPmhY7EJsQyud38Q4r1'),\n    alphaRewardTokAcc:      new PublicKey('HqTUasro97QUByk1LEbXGJCh672Bu1b5gnj31tLbbJfi'),\n  }),\n}\n\n// prettier-ignore\nexport const RAYDIUM_LP_METAS: {[key in TokenID]? : RaydiumLpSwapInfo } = {\n  [TokenID.SOL_USDC_RAYDIUM]: new RaydiumLpSwapInfo({\n    lpMintPubkey: new PublicKey(MINTS[TokenID.SOL_USDC_RAYDIUM]),\n\n    ammIdPubkey: new PublicKey('58oQChx4yWmvKdwLLZzBi4ChoCc2fqCUWBkwMihLYQo2'),\n    ammAuthPubkey: new PublicKey('5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'),\n    ammOpenOrdersPubkey: new PublicKey('HRk9CMrpq7Jn9sh7mzxE8CChHG8dneX9p475QKz4Fsfc'),\n    ammTargetOrderPubkey: new PublicKey(\n      'CZza3Ej4Mc58MnxWA385itCC9jCo3L1D7zc3LKy1bZMR'\n    ),\n\n    poolCoinTokenPubkey: new PublicKey('DQyrAcCrDXQ7NeoqGgDCZwBvWDcYmFCjSb9JtteuvPpz'),\n    poolPcTokenPubkey: new PublicKey('HLmqeL62xR1QoZ1HKKbXRrdN1p3phKpxRMb2VVopvBBz'),\n    poolWithdrawQueue: new PublicKey('G7xeGGLevkRwB5f44QNgQtrPKBdMfkT6ZZwpS9xcC97n'),\n    poolTempLpTokenAccount: new PublicKey(\n      'Awpt6N7ZYPBa4vG4BQNFhFxDj4sxExAA9rpBAoBw2uok'\n    ),\n\n    serumProgramId: new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),\n    serumMarketPubkey: new PublicKey('9wFFyRfZBsuAha4YcuxcXLKwMxJR43S7fPfQLusDBzvT'),\n    serumCoinVaultAccount: new PublicKey(\n      '36c6YqAwyGKQG66XEp2dJc5JqjaBNv7sVghEtJv4c7u6'\n    ),\n    serumPcVaultAccount: new PublicKey('8CFo8bL8mZQK8abbFyypFMwEDd8tVJjHTTojMLgQTUSZ'),\n    serumVaultSigner: new PublicKey('F8Vyqk3unwxkXukZFQeYyGmFfTG3CAX4v24iyrjEYBJV'),\n\n    serumEventQueueAccount: new PublicKey('5KKsLVU6TcbVDK4BS6K1DGDxnh4Q9xjYJ8XaDCG5t8ht'),\n    serumBidsAccount: new PublicKey('14ivtgssEBoBjuZJtSAPKYgpUK7DmnSwuPMqJoVTSgKJ'),\n    serumAsksAccount: new PublicKey('CEQdAFKdycHugujQg9k2wbmxjcpdYZyVLfV9WerTnafJ'),\n\n    rewardAccounts: [\n      {\n        rewardToken: TokenID.RAY,\n        userRewardAlphaAccountPubkey: new PublicKey('3ycsskwZL584nSTikjMR9DhVKRHFpYUbbx4m93kn6Djx'),\n        userRewardPublicAccountPubkey: new PublicKey('44tSF4Sisrsy7YXmtSYnFLzQnZeVvwgd5PTMzRvAqtq4'),\n        rewardVault: new PublicKey('38YS2N7VUb856QDsXHS1h8zv5556YgEy9zKbbL2mefjf'), // ray\n      }, {\n        rewardToken: TokenID.SRM,\n        userRewardAlphaAccountPubkey: new PublicKey('21rySZr2pQCaoGjdJy6gPx31vi5igVsKFAMRtqhgPgVX'),\n        userRewardPublicAccountPubkey: new PublicKey('BzqrcDc7wpciqtsSj7MsDajDdjHuS7XBdqaprSm8GaiB'),\n        rewardVault: new PublicKey('ANDJUfDryy3jY6DngwGRXVyxCJBT5JfojLDXwZYSpnEL'), // srm\n      }\n    ],\n\n    stakeKeys: {\n      poolIdPubkey: new PublicKey('GUzaohfNuFbBqQTnPgPSNciv3aUvriXYjQduRE3ZkqFw'),\n      poolAuthorityPubkey: new PublicKey('DgbCWnbXg43nmeiAveMCkUUPEpAr3rZo3iop3TyP6S63'),\n\n      poolLPVault: new PublicKey('J6ECnRDZEXcxuruvErXDWsPZn9czowKynUr9eDSQ4QeN'),\n    },\n  }),\n  [TokenID.RAY_USDC_RAYDIUM]: new RaydiumLpSwapInfo({\n    lpMintPubkey: new PublicKey(MINTS[TokenID.RAY_USDC_RAYDIUM]), \n\n    ammIdPubkey: new PublicKey('6UmmUiYoBjSrhakAobJw8BvkmJtDVxaeBtbt7rxWo1mg'),\n    ammAuthPubkey: new PublicKey('5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'),\n    ammOpenOrdersPubkey: new PublicKey('J8u8nTHYtvudyqwLrXZboziN95LpaHFHpd97Jm5vtbkW'),\n    ammTargetOrderPubkey: new PublicKey(\n      '3cji8XW5uhtsA757vELVFAeJpskyHwbnTSceMFY5GjVT'\n    ),\n\n    poolCoinTokenPubkey: new PublicKey('FdmKUE4UMiJYFK5ogCngHzShuVKrFXBamPWcewDr31th'),\n    poolPcTokenPubkey: new PublicKey('Eqrhxd7bDUCH3MepKmdVkgwazXRzY6iHhEoBpY7yAohk'),\n    poolWithdrawQueue: new PublicKey('ERiPLHrxvjsoMuaWDWSTLdCMzRkQSo8SkLBLYEmSokyr'),\n    poolTempLpTokenAccount: new PublicKey(\n      'D1V5GMf3N26owUFcbz2qR5N4G81qPKQvS2Vc4SM73XGB'\n    ),\n\n    serumProgramId: new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),\n    serumMarketPubkey: new PublicKey('2xiv8A5xrJ7RnGdxXB42uFEkYHJjszEhaJyKKt4WaLep'),\n    serumCoinVaultAccount: new PublicKey(\n      'GGcdamvNDYFhAXr93DWyJ8QmwawUHLCyRqWL3KngtLRa'\n    ),\n    serumPcVaultAccount: new PublicKey('22jHt5WmosAykp3LPGSAKgY45p7VGh4DFWSwp21SWBVe'),\n    serumVaultSigner: new PublicKey('FmhXe9uG6zun49p222xt3nG1rBAkWvzVz7dxERQ6ouGw'),\n\n    serumEventQueueAccount: new PublicKey('H9dZt8kvz1Fe5FyRisb77KcYTaN8LEbuVAfJSnAaEABz'),\n    serumBidsAccount: new PublicKey('Hf84mYadE1VqSvVWAvCWc9wqLXak4RwXiPb4A91EAUn5'),\n    serumAsksAccount: new PublicKey('DC1HsWWRCXVg3wk2NndS5LTbce3axwUwUZH1RgnV4oDN'),\n\n    rewardAccounts: [\n      {\n        rewardToken: TokenID.RAY,\n        userRewardAlphaAccountPubkey: new PublicKey('496NG3Ym9UAmDoYe1YdJMnEhAGJhfrY4Wz2Poc85VcMZ'),\n        userRewardPublicAccountPubkey: new PublicKey('49i8NSa6z2DcWxBnnsZjyxKvLxEqXGZ833B4jUDNmxnT'),\n        rewardVault: new PublicKey('DpRueBHHhrQNvrjZX7CwGitJDJ8eZc3AHcyFMG4LqCQR'), // ray\n      },\n    ],\n\n    stakeKeys: {\n      poolIdPubkey: new PublicKey('CHYrUBX2RKX8iBg7gYTkccoGNBzP44LdaazMHCLcdEgS'),\n      poolAuthorityPubkey: new PublicKey('5KQFnDd33J5NaMC9hQ64P5XzaaSz8Pt7NBCkZFYn1po'),\n\n      poolLPVault: new PublicKey('BNnXLFGva3K8ACruAc1gaP49NCbLkyE6xWhGV4G2HLrs'),\n    },\n    stakeProgram: SWAP_METAS[SWAP_RAYDIUM].stakeProgramPubkey,\n  }),\n  [TokenID.SOL_USDT_RAYDIUM]: new RaydiumLpSwapInfo({\n    lpMintPubkey: new PublicKey(MINTS[TokenID.SOL_USDT_RAYDIUM]),\n\n    ammIdPubkey: new PublicKey('7XawhbbxtsRcQA8KTkHT9f9nc6d69UwqCDh6U5EEbEmX'),\n    ammAuthPubkey: new PublicKey('5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'),\n    ammOpenOrdersPubkey: new PublicKey('4NJVwEAoudfSvU5kdxKm5DsQe4AAqG6XxpZcNdQVinS4'),\n    ammTargetOrderPubkey: new PublicKey(\n      '9x4knb3nuNAzxsV7YFuGLgnYqKArGemY54r2vFExM1dp'\n    ),\n\n    poolCoinTokenPubkey: new PublicKey('876Z9waBygfzUrwwKFfnRcc7cfY4EQf6Kz1w7GRgbVYW'),\n    poolPcTokenPubkey: new PublicKey('CB86HtaqpXbNWbq67L18y5x2RhqoJ6smb7xHUcyWdQAQ'),\n    poolWithdrawQueue: new PublicKey('52AfgxYPTGruUA9XyE8eF46hdR6gMQiA6ShVoMMsC6jQ'),\n    poolTempLpTokenAccount: new PublicKey(\n      '2JKZRQc92TaH3fgTcUZyxfD7k7V7BMqhF24eussPtkwh'\n    ),\n\n    serumProgramId: new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),\n    serumMarketPubkey: new PublicKey('HWHvQhFmJB3NUcu1aihKmrKegfVxBEHzwVX6yZCKEsi1'),\n    serumCoinVaultAccount: new PublicKey(\n      '29cTsXahEoEBwbHwVc59jToybFpagbBMV6Lh45pWEmiK'\n    ),\n    serumPcVaultAccount: new PublicKey('EJwyNJJPbHH4pboWQf1NxegoypuY48umbfkhyfPew4E'),\n    serumVaultSigner: new PublicKey('CzZAjoEqA6sjqtaiZiPqDkmxG6UuZWxwRWCenbBMc8Xz'),\n\n    serumEventQueueAccount: new PublicKey('GR363LDmwe25NZQMGtD2uvsiX66FzYByeQLcNFr596FK'),\n    serumBidsAccount: new PublicKey('2juozaawVqhQHfYZ9HNcs66sPatFHSHeKG5LsTbrS2Dn'),\n    serumAsksAccount: new PublicKey('ANXcuziKhxusxtthGxPxywY7FLRtmmCwFWDmU5eBDLdH'),\n\n    rewardAccounts: [\n      {\n        rewardToken: TokenID.RAY,\n        userRewardAlphaAccountPubkey: new PublicKey('BrDvLLjYtTPyaBN2kDxRCSDzoNPdYiozPfggcgEJt3Pd'),\n        userRewardPublicAccountPubkey: new PublicKey('4aryP8pemzEuJjMteEPHFbM1SJdgoahx4AG1ZpdCvJZQ'),\n        rewardVault: new PublicKey('Bgj3meVYds8ficJc9xntbjmMBPVUuyn6CvDUm1AD39yq'), // ray\n      }, {\n        rewardToken: TokenID.SRM,\n        userRewardAlphaAccountPubkey: new PublicKey('6Cp9hLDQpbmiXZopk9oJMqGj8nSUbQpGLqm9VxYmZbFB'),\n        userRewardPublicAccountPubkey: new PublicKey('HBrRwtFzrL7CyngExF4N3LrKzSEf1ViFRLHJcVEwmphw'),\n        rewardVault: new PublicKey('DJifNDjNt7iHbkNHs9V6Wm5pdiuddtF9w3o4WEiraKrP'), // srm\n      }\n    ],\n\n    stakeKeys: {\n      poolIdPubkey: new PublicKey('5r878BSWPtoXgnqaeFJi7BCycKZ5CodBB2vS9SeiV8q'),\n      poolAuthorityPubkey: new PublicKey('DimG1WK9N7NdbhddweGTDDBRaBdCmcbPtoWZJ4Fi4rn4'),\n\n      poolLPVault: new PublicKey('jfhZy3B6sqeu95z71GukkxpkDtfHXJiFAMULM6STWxb'),\n    },\n  }),\n  [TokenID.mSOL_SOL_RAYDIUM]: new RaydiumLpSwapInfo({\n    lpMintPubkey: new PublicKey(MINTS[TokenID.mSOL_SOL_RAYDIUM]),\n\n    ammIdPubkey: new PublicKey('EGyhb2uLAsRUbRx9dNFBjMVYnFaASWMvD6RE1aEf2LxL'),\n    ammAuthPubkey: new PublicKey('5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'),\n    ammOpenOrdersPubkey: new PublicKey('6c1u1cNEELKPmuH352WPNNEPdfTyVPHsei39DUPemC42'),\n    ammTargetOrderPubkey: new PublicKey(\n      'CLuMpSesLPqdxewQTxfiLdifQfDfRsxkFhPgiChmdGfk'\n    ),\n\n    poolCoinTokenPubkey: new PublicKey('85SxT7AdDQvJg6pZLoDf7vPiuXLj5UYZLVVNWD1NjnFK'),\n    poolPcTokenPubkey: new PublicKey('BtGUR6y7uwJ6UGXNMcY3gCLm7dM3WaBdmgtKVgGnE1TJ'),\n    poolWithdrawQueue: new PublicKey('7vvoHxA6di9EvzJKL6bmojbZnH3YaRXu2LitufrQhM21'),\n    poolTempLpTokenAccount: new PublicKey(\n      'ACn8TZ27fQ85kgdPKUfkETB4dS5JPFoq53z7uCgtHDai'\n    ),\n\n    serumProgramId: new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),\n    serumMarketPubkey: new PublicKey('5cLrMai1DsLRYc1Nio9qMTicsWtvzjzZfJPXyAoF4t1Z'),\n    serumCoinVaultAccount: new PublicKey(\n      '2qmHPJn3URkrboLiJkQ5tBB4bmYWdb6MyhQzZ6ms7wf9'\n    ),\n    serumPcVaultAccount: new PublicKey('A6eEM36Vpyti2PoHK8h8Dqk5zu7YTaSRTQb7XXL8tcrV'),\n    serumVaultSigner: new PublicKey('EHMK3DdPiPBd9aBjeRU4aZjD7z568rmwHCSAAxRooPq6'),\n\n    stakeKeys: null,\n  }),\n  [TokenID.RAY_USDT_RAYDIUM]: new RaydiumLpSwapInfo({\n    lpMintPubkey: new PublicKey(MINTS[TokenID.RAY_USDT_RAYDIUM]),\n\n    ammIdPubkey: new PublicKey('DVa7Qmb5ct9RCpaU7UTpSaf3GVMYz17vNVU67XpdCRut'),\n    ammAuthPubkey: new PublicKey('5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'),\n    ammOpenOrdersPubkey: new PublicKey('7UF3m8hDGZ6bNnHzaT2YHrhp7A7n9qFfBj6QEpHPv5S8'),\n    ammTargetOrderPubkey: new PublicKey(\n      '3K2uLkKwVVPvZuMhcQAPLF8hw95somMeNwJS7vgWYrsJ'\n    ),\n\n    poolCoinTokenPubkey: new PublicKey('3wqhzSB9avepM9xMteiZnbJw75zmTBDVmPFLTQAGcSMN'),\n    poolPcTokenPubkey: new PublicKey('5GtSbKJEPaoumrDzNj4kGkgZtfDyUceKaHrPziazALC1'),\n    poolWithdrawQueue: new PublicKey('8VuvrSWfQP8vdbuMAP9AkfgLxU9hbRR6BmTJ8Gfas9aK'), \n    poolTempLpTokenAccount: new PublicKey(\n      'FBzqDD1cBgkZ1h6tiZNFpkh4sZyg6AG8K5P9DSuJoS5F'\n    ),\n\n    serumProgramId: new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),\n    serumMarketPubkey: new PublicKey('teE55QrL4a4QSfydR9dnHF97jgCfptpuigbb53Lo95g'),\n    serumCoinVaultAccount: new PublicKey(\n      '2kVNVEgHicvfwiyhT2T51YiQGMPFWLMSp8qXc1hHzkpU'\n    ),\n    serumPcVaultAccount: new PublicKey('5AXZV7XfR7Ctr6yjQ9m9dbgycKeUXWnWqHwBTZT6mqC7'),\n    serumVaultSigner: new PublicKey('HzWpBN6ucpsA9wcfmhLAFYqEUmHjE9n2cGHwunG5avpL'),\n\n    serumEventQueueAccount: new PublicKey('58KcficuUqPDcMittSddhT8LzsPJoH46YP4uURoMo5EB'),\n    serumBidsAccount: new PublicKey('AvKStCiY8LTp3oDFrMkiHHxxhxk4sQUWnGVcetm4kRpy'),\n    serumAsksAccount: new PublicKey('Hj9kckvMX96mQokfMBzNCYEYMLEBYKQ9WwSc1GxasW11'),\n\n    rewardAccounts: [\n      {\n        rewardToken: TokenID.RAY,\n        userRewardAlphaAccountPubkey: new PublicKey('Bq2M2YHcMVB9RDBjJsra4nP81qvJaAapY6fdCFoDNY61'),\n        userRewardPublicAccountPubkey: new PublicKey('3YUuGZJSF5Jdy3mXBXgWh86t2msj4d2WvNGawSsDZbHC'),\n        rewardVault: new PublicKey('HCHNuGzkqSnw9TbwpPv1gTnoqnqYepcojHw9DAToBrUj'), // ray\n      },\n    ],\n\n    stakeKeys: {\n      poolIdPubkey: new PublicKey('AvbVWpBi2e4C9HPmZgShGdPoNydG4Yw8GJvG9HUcLgce'),\n      poolAuthorityPubkey: new PublicKey('8JYVFy3pYsPSpPRsqf43KSJFnJzn83nnRLQgG88XKB8q'),\n\n      poolLPVault: new PublicKey('4u4AnMBHXehdpP5tbD6qzB5Q4iZmvKKR5aUr2gavG7aw'),\n    },\n    stakeProgram: SWAP_METAS[SWAP_RAYDIUM].stakeProgramPubkey,\n  }),\n  [TokenID.RAY_ETH_RAYDIUM]: new RaydiumLpSwapInfo({\n    lpMintPubkey: new PublicKey(MINTS[TokenID.RAY_ETH_RAYDIUM]),\n\n    ammIdPubkey: new PublicKey('8iQFhWyceGREsWnLM8NkG9GC8DvZunGZyMzuyUScgkMK'),\n    ammAuthPubkey: new PublicKey('5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'),\n    ammOpenOrdersPubkey: new PublicKey('7iztHknuo7FAXVrrpAjsHBEEjRTaNH4b3hecVApQnSwN'),\n    ammTargetOrderPubkey: new PublicKey(\n      'JChSqhn6yyEWqD95t8UR5DaZZtEZ1RGGjdwgMc8S6UUt'\n    ),\n\n    poolCoinTokenPubkey: new PublicKey('G3Szi8fUqxfZjZoNx17kQbxeMTyXt2ieRvju4f3eJt9j'),\n    poolPcTokenPubkey: new PublicKey('7MgaPPNa7ySdu5XV7ik29Xoav4qcDk4wznXZ2Muq9MnT'),\n    poolWithdrawQueue: new PublicKey('C9aijsE3tLbVyYaXXHi45qneDL5jfyN8befuJh8zzpou'), \n    poolTempLpTokenAccount: new PublicKey(\n      '3CDnyBsNnexdvfvo6ASde5Q4e72jzMQFHRRkSQr49vEG'\n    ),\n\n    serumProgramId: new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),\n    serumMarketPubkey: new PublicKey('6jx6aoNFbmorwyncVP5V5ESKfuFc9oUYebob1iF6tgN4'),\n    serumCoinVaultAccount: new PublicKey(\n      'EVVtYo4AeCbmn2dYS1UnhtfjpzCXCcN26G1HmuHwMo7w'\n    ),\n    serumPcVaultAccount: new PublicKey('6ZT6KwvjLnJLpFdVfiRD9ifVUo4gv4MUie7VvPTuk69v'),\n    serumVaultSigner: new PublicKey('HXbRDLcX2FyqWJY95apnsTgBoRHyp7SWYXcMYod6EBrQ'),\n\n    serumEventQueueAccount: new PublicKey('EgcugBBSwM2FxqLQx5S6zAiU9x9qRS8qMVRMDFFU4Zty'),\n    serumBidsAccount: new PublicKey('Hdvh4ZGL9MkiQApNqfZtdmd4jM6Sz8e9akCUuxxkYhb8'),\n    serumAsksAccount: new PublicKey('7vWmTv9Mh8XbAxcduEqed2dLtro4N7hFroqch6mMxYKM'),\n\n    rewardAccounts: [\n      {\n        rewardToken: TokenID.RAY,\n        userRewardAlphaAccountPubkey: new PublicKey('B2LykyWkPGVcqwRgozr4WRst5x9s5pCHhT9CA4NLwtui'),\n        userRewardPublicAccountPubkey: new PublicKey('5PzDUuUYWmkymdNznZmvWAj5nn89xwFbD844rMJveHY3'),\n        rewardVault: new PublicKey('7YfTgYQFGEJ4kb8jCF8cBrrUwEFskLin3EbvE1crqiQh'), // ray\n      },\n    ],\n\n    stakeKeys: {\n      poolIdPubkey: new PublicKey('B6fbnZZ7sbKHR18ffEDD5Nncgp54iKN1GbCgjTRdqhS1'),\n      poolAuthorityPubkey: new PublicKey('6amoZ7YBbsz3uUUbkeEH4vDTNwjvgjxTiu6nGi9z1JGe'),\n\n      poolLPVault: new PublicKey('BjAfXpHTHz2kipraNddS6WwQvGGtbvyobn7MxLEEYfrH'),\n    },\n    stakeProgram: SWAP_METAS[SWAP_RAYDIUM].stakeProgramPubkey,\n  }),\n  [TokenID.RAY_SOL_RAYDIUM]: new RaydiumLpSwapInfo({\n    lpMintPubkey: new PublicKey(MINTS[TokenID.RAY_SOL_RAYDIUM]),\n\n    ammIdPubkey: new PublicKey('AVs9TA4nWDzfPJE9gGVNJMVhcQy3V9PGazuz33BfG2RA'),\n    ammAuthPubkey: new PublicKey('5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'),\n    ammOpenOrdersPubkey: new PublicKey('6Su6Ea97dBxecd5W92KcVvv6SzCurE2BXGgFe9LNGMpE'),\n    ammTargetOrderPubkey: new PublicKey(\n      '5hATcCfvhVwAjNExvrg8rRkXmYyksHhVajWLa46iRsmE'\n    ),\n\n    poolCoinTokenPubkey: new PublicKey('Em6rHi68trYgBFyJ5261A2nhwuQWfLcirgzZZYoRcrkX'),\n    poolPcTokenPubkey: new PublicKey('3mEFzHsJyu2Cpjrz6zPmTzP7uoLFj9SbbecGVzzkL1mJ'),\n    poolWithdrawQueue: new PublicKey('FSHqX232PHE4ev9Dpdzrg9h2Tn1byChnX4tuoPUyjjdV'), \n    poolTempLpTokenAccount: new PublicKey(\n      '87CCkBfthmyqwPuCDwFmyqKWJfjYqPFhm5btkNyoALYZ'\n    ),\n\n    serumProgramId: new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),\n    serumMarketPubkey: new PublicKey('C6tp2RVZnxBPFbnAsfTjis8BN9tycESAT4SgDQgbbrsA'),\n    serumCoinVaultAccount: new PublicKey(\n      '6U6U59zmFWrPSzm9sLX7kVkaK78Kz7XJYkrhP1DjF3uF'\n    ),\n    serumPcVaultAccount: new PublicKey('4YEx21yeUAZxUL9Fs7YU9Gm3u45GWoPFs8vcJiHga2eQ'),\n    serumVaultSigner: new PublicKey('7SdieGqwPJo5rMmSQM9JmntSEMoimM4dQn7NkGbNFcrd'),\n\n    serumEventQueueAccount: new PublicKey('4HGvdannxvmAhszVVig9auH6HsqVH17qoavDiNcnm9nj'),\n    serumBidsAccount: new PublicKey('C1nEbACFaHMUiKAUsXVYPWZsuxunJeBkqXHPFr8QgSj9'),\n    serumAsksAccount: new PublicKey('4DNBdnTw6wmrK4NmdSTTxs1kEz47yjqLGuoqsMeHvkMF'),\n\n    rewardAccounts: [\n      {\n        rewardToken: TokenID.RAY,\n        userRewardAlphaAccountPubkey: new PublicKey('B7ewVyAG7YMDemDGKQNBxyGAuoN94w4J5K8NZa72A4BM'),\n        userRewardPublicAccountPubkey: new PublicKey('ChJUMQNtVNznGWaFUeNAqKD95hd1gmz9CRHobw3aMRbm'),\n        rewardVault: new PublicKey('6zA5RAQYgazm4dniS8AigjGFtRi4xneqjL7ehrSqCmhr'), // ray\n      },\n    ],\n\n    stakeKeys: {\n      poolIdPubkey: new PublicKey('HUDr9BDaAGqi37xbQHzxCyXvfMCKPTPNF8g9c9bPu1Fu'),\n      poolAuthorityPubkey: new PublicKey('9VbmvaaPeNAke2MAL3h2Fw82VubH1tBCzwBzaWybGKiG'),\n\n      poolLPVault: new PublicKey('A4xQv2BQPB1WxsjiCC7tcMH7zUq255uCBkevFj8qSCyJ'),\n    },\n    stakeProgram: SWAP_METAS[SWAP_RAYDIUM].stakeProgramPubkey,\n  }),\n  [TokenID.SRM_USDC_RAYDIUM]: new RaydiumLpSwapInfo({\n    lpMintPubkey: new PublicKey(MINTS[TokenID.SRM_USDC_RAYDIUM]),\n\n    ammIdPubkey: new PublicKey('8tzS7SkUZyHPQY7gLqsMCXZ5EDCgjESUHcB17tiR1h3Z'),\n    ammAuthPubkey: new PublicKey('5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'),\n    ammOpenOrdersPubkey: new PublicKey('GJwrRrNeeQKY2eGzuXGc3KBrBftYbidCYhmA6AZj2Zur'),\n    ammTargetOrderPubkey: new PublicKey(\n      '26LLpo8rscCpMxyAnJsqhqESPnzjMGiFdmXA4eF2Jrk5'\n    ),\n\n    poolCoinTokenPubkey: new PublicKey('zuLDJ5SEe76L3bpFp2Sm9qTTe5vpJL3gdQFT5At5xXG'),\n    poolPcTokenPubkey: new PublicKey('4usvfgPDwXBX2ySX11ubTvJ3pvJHbGEW2ytpDGCSv5cw'),\n    poolWithdrawQueue: new PublicKey('7c1VbXTB7Xqx5eQQeUxAu5o6GHPq3P1ByhDsnRRUWYxB'),\n    poolTempLpTokenAccount: new PublicKey(\n      '2sozAi6zXDUCCkpgG3usphzeCDm4e2jTFngbm5atSdC9'\n    ),\n\n    serumProgramId: new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),\n    serumMarketPubkey: new PublicKey('ByRys5tuUWDgL73G8JBAEfkdFf8JWBzPBDHsBVQ5vbQA'),\n    serumCoinVaultAccount: new PublicKey(\n      'Ecfy8et9Mft9Dkavnuh4mzHMa2KWYUbBTA5oDZNoWu84'\n    ),\n    serumPcVaultAccount: new PublicKey('hUgoKy5wjeFbZrXDW4ecr42T4F5Z1Tos31g68s5EHbP'),\n    serumVaultSigner: new PublicKey('GVV4ZT9pccwy9d17STafFDuiSqFbXuRTdvKQ1zJX6ttX'),\n\n    rewardAccounts: [\n      {\n        rewardToken: TokenID.RAY,\n        userRewardAlphaAccountPubkey: new PublicKey('4jnfVscrBTf77bjkR2JSHQT6q7N7BWFyufG6YdZCR8re'),\n        userRewardPublicAccountPubkey: new PublicKey('2qgtUtNopD3ZCrQCbVsvYd1BrPeWxn4TcrXjwvTzLCYi'),\n        rewardVault: new PublicKey('9gs6XnKs3RMMSSQAZm3VCbRpoNmPMrGaQQGMmRKjPeSU'), // ray\n      }, {\n        rewardToken: TokenID.SRM,\n        userRewardAlphaAccountPubkey: new PublicKey('6E4seHTUoufVwALGE8XBYEMh5n7t4irwYXD6jtqgqzeM'),\n        userRewardPublicAccountPubkey: new PublicKey('2iy54EuEMgUVFMaRzxusiMSawgcHUgR34SZWaKkMosMc'),\n        rewardVault: new PublicKey('BsuQ3XCCapopam8byEzHzazyxcRn5dCT3UX9kUzozhw'), // srm\n      }\n    ],\n\n    stakeKeys: {\n      poolIdPubkey: new PublicKey('27bysJaX5eu5Urb5kftR66otiVc6DKK7TnifKwnpNzYu'),\n      poolAuthorityPubkey: new PublicKey('HAWwtFc4MFNSXFyQbUZd2GefSwZLntCiumt1D6XM8jfk'),\n\n      poolLPVault: new PublicKey('HVEm5BG4jMHtwgrUtuiC9K17bjp9CjFpgqmzVABmzLxr'),\n    },\n  }),\n}\n\nexport const LP_SWAP_METAS: { [key in TokenID]?: LpSwapKeyInfo } = {};\n\nfor (const key in ORCA_LP_METAS) {\n  const tokId = key as TokenID;\n  invariant(tokId in TokenID, `Invalid tokId: ${key}`);\n  invariant(!(tokId in LP_SWAP_METAS), `${tokId} is duplicated`);\n  const value = ORCA_LP_METAS[tokId]!;\n  invariant(value);\n  LP_SWAP_METAS[tokId] = value;\n}\n\nfor (const key in SABER_LP_METAS) {\n  const tokId = key as TokenID;\n  invariant(tokId in TokenID, `Invalid tokId: ${key}`);\n  invariant(!(tokId in LP_SWAP_METAS), `${tokId} is duplicated`);\n  const value = SABER_LP_METAS[tokId]!;\n  invariant(value);\n  LP_SWAP_METAS[tokId] = value;\n}\n\nfor (const key in RAYDIUM_LP_METAS) {\n  const tokId = key as TokenID;\n  invariant(tokId in TokenID, `Invalid tokId: ${key}`);\n  invariant(!(tokId in LP_SWAP_METAS), `${tokId} is duplicated`);\n  const value = RAYDIUM_LP_METAS[tokId]!;\n  invariant(value);\n  LP_SWAP_METAS[tokId] = value;\n}\n\nexport const SWITCHBOARD_PRICE: { [key in TokenID]?: PublicKey } = {\n  [TokenID.BTC]: new PublicKey('74YzQPGUT9VnjrBz8MuyDLKgKpbDqGot5xZJvTtMi6Ng'),\n  [TokenID.ETH]: new PublicKey('QJc2HgGhdtW4e7zjvLB1TGRuwEpTre2agU5Lap2UqYz'),\n  [TokenID.SOL]: new PublicKey('AdtRGGhmqvom3Jemp5YNrxd9q9unX36BZk1pujkkXijL'),\n  [TokenID.mSOL]: new PublicKey('CEPVH2t11KS4CaL3w4YxT9tRiijoGA4VEbnQ97cEpDmQ'),\n  [TokenID.stSOL]: new PublicKey('9r2p6vyF8Wp5YB2DASK95yuXEakQth6wmUmV2DpH91WX'),\n  [TokenID.whETH]: new PublicKey('QJc2HgGhdtW4e7zjvLB1TGRuwEpTre2agU5Lap2UqYz'),\n  [TokenID.scnSOL]: new PublicKey('DpzEKDSszosuzRUdRYzEcEbt6iZ4xhVEANQSRAYDYw8h'),\n\n  [TokenID.APT]: new PublicKey('CvLZbNUPLkbMuVK9YPqhvLu4UkXmrJbF98odXtPL6VRu'),\n  [TokenID.RAY]: new PublicKey('CppyF6264uKZkGua1brTUa2fSVdMFSCszwzDs76HCuzU'),\n  [TokenID.ORCA]: new PublicKey('EHwSRkm2ErRjWxCxrTxrmC7sT2kGb5jJcsiindUHAX7W'),\n  [TokenID.SBR]: new PublicKey('Lp3VNoRQi699VZe6u59TV8J38ELEUzxkaisoWsDuJgB'),\n  // [TokenID.MERC]: new PublicKey(\"\"), // MERC not on sb\n  [TokenID.FTT]: new PublicKey('6SqRewrr5f4ycWy7NvLmNgpXJbhwXrtTc1erL9aq2gP3'),\n  [TokenID.SRM]: new PublicKey('BAoygKcKN7wk8yKzLD6sxzUQUqLvhBV1rjMA4UJqfZuH'),\n\n  [TokenID.USDT]: new PublicKey('5mp8kbkTYwWWCsKSte8rURjTuyinsqBpJ9xAQsewPDD'),\n  [TokenID.USDC]: new PublicKey('CZx29wKMUxaJDq6aLVQTdViPL754tTR64NAgQBUGxxHb'),\n  [TokenID.UST]: new PublicKey('8o8gN6VnW45R8pPfQzUJUwJi2adFmsWwfGcFNmicWt61'),\n  [TokenID.USTv2]: new PublicKey('8o8gN6VnW45R8pPfQzUJUwJi2adFmsWwfGcFNmicWt61'),\n};\n\nexport const PYTH_PRICE: { [key in TokenID]?: PublicKey } = {\n  [TokenID.BTC]: new PublicKey('GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU'),\n  [TokenID.ETH]: new PublicKey('JBu1AL4obBcCMqKBBxhpWCNUt136ijcuMZLFvTP7iWdB'),\n  [TokenID.SOL]: new PublicKey('H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG'),\n  [TokenID.mSOL]: new PublicKey('E4v1BBgoso9s64TQvmyownAVJbhbEPGyzA3qn4n46qj9'),\n  [TokenID.stSOL]: new PublicKey('Bt1hEbY62aMriY1SyQqbeZbm8VmSbQVGBFzSzMuVNWzN'),\n  [TokenID.whETH]: new PublicKey('JBu1AL4obBcCMqKBBxhpWCNUt136ijcuMZLFvTP7iWdB'),\n  // [TokenID.scnSOL]: new PublicKey(\"\"),\n\n  //[TokenID.APT]: new PublicKey(\"\"),\n  [TokenID.RAY]: new PublicKey('AnLf8tVYCM816gmBjiy8n53eXKKEDydT5piYjjQDPgTB'),\n  // [TokenID.ORCA]: new PublicKey(\"\"),\n  [TokenID.SBR]: new PublicKey('8Td9VML1nHxQK6M8VVyzsHo32D7VBk72jSpa9U861z2A'),\n  [TokenID.FTT]: new PublicKey('8JPJJkmDScpcNmBRKGZuPuG2GYAveQgP3t5gFuMymwvF'),\n  [TokenID.SRM]: new PublicKey('3NBReDRTLKMQEKiLD5tGcx4kXbTf88b7f2xLS9UuGjym'),\n\n  [TokenID.USDT]: new PublicKey('3vxLXJqLqF3JG5TCbYycbKWRBbCJQLxQmBGCkyqEEefL'),\n  [TokenID.USDC]: new PublicKey('Gnt27xtC473ZT2Mw5u8wZ68Z3gULkSTb5DuxJy7eJotD'),\n  [TokenID.UST]: new PublicKey('H8DvrfSaRfUyP1Ytse1exGf7VSinLWtmKNNaBhA4as9P'),\n  [TokenID.USTv2]: new PublicKey('H8DvrfSaRfUyP1Ytse1exGf7VSinLWtmKNNaBhA4as9P'),\n};\n\nexport const COINGECKO_PRICE_ID: { [key in TokenID]?: string } = {\n  [TokenID.MNDE]: 'marinade',\n  [TokenID.wLDO]: 'lido-dao',\n  [TokenID.wLUNA]: 'terra-luna',\n  [TokenID.SOCN]: 'temp-socn',\n};\n\nconst FIREBASE_READER_CONFIG = {\n  alpha: {\n    apiKey: 'AIzaSyDWBTlo8oeJGnpV0CnQEBpeloMbHgN6xY8',\n    authDomain: 'apricot-website-96904.firebaseapp.com',\n    projectId: 'apricot-website-96904',\n    storageBucket: 'apricot-website-96904.appspot.com',\n    messagingSenderId: '181748660172',\n    appId: '1:181748660172:web:fea7b301ef6a09c3d60f69',\n    measurementId: 'G-W2RX0BF87Q',\n  },\n  public: {\n    apiKey: 'AIzaSyAGpQxt6PUaLf1vhfhxL5hzWcP1QDIeOSc',\n    authDomain: 'apricot-public.firebaseapp.com',\n    projectId: 'apricot-public',\n    storageBucket: 'apricot-public.appspot.com',\n    messagingSenderId: '735163506624',\n    appId: '1:735163506624:web:e6406687d889d993e93225',\n    measurementId: 'G-VBTE0406R3',\n  },\n};\n\n// alpha mainnet is where we deploy tests\nexport const ALPHA_CONFIG = new AppConfig(\n  new PublicKey('5dtKmAzoJu4qDxMjjK7gWY2pPe6NWAX6HWQk5QUHaKQZ'),\n  new PublicKey('EFo9V7mFQgxz7xPMrJ6qLyrjfGXPgsEFEfGEtVQx2xKt'),\n  new PublicKey('3cWR2VDrVhQ43VX8B43MwTazfx66naioXurUh8vrkidt'),\n  new PublicKey('4DUvqxvab2BiJEYR7YHi3nM5tfyLNXFBQbJuExQPK9rf'),\n  new PublicKey('Ff9WeFriS8DoJkiZPEZRpmiFu5jzYx3xZzoGNpwWMp5J'),\n  new PublicKey('EQWujCg9fTnj2wi2oVWWkWsJmtRU2tpEUMhhiVSMtHCH'),\n  new PublicKey('Cuf4Hbuv9RDZ1vzuUE833MKzjeX7odsBeewEjhmVwVRk'),\n  MINTS,\n  DECIMAL_MULT,\n  CATEGORY,\n  POOL_IDS,\n  LIQUIDATION_DISCOUNT,\n  LTVS,\n  LP_TO_LR,\n  LP_TO_DEX,\n  LP_TO_TARGET_SWAP,\n  LP_TO_NEED_2ND_STAKE,\n  SWITCHBOARD_PRICE,\n  PYTH_PRICE,\n  INTEREST_RATES,\n  FEES,\n  LP_SWAP_METAS,\n  FIREBASE_READER_CONFIG.alpha,\n);\n\n// public mainnet is where the real thing is\nexport const PUBLIC_CONFIG = new AppConfig(\n  // not added yet\n  new PublicKey('6UeJYTLU1adaoHWeApWsoj1xNEDbWA2RhM2DLc8CrDDi'),\n  new PublicKey('6L2QoTpr8WUd76eLAGnvow8i3WQzRP36C1qdUna9iwMn'),\n  new PublicKey('F5m8gNjC6pjynywcbw9kK1miSNJMw1nQGeviWykfCCXd'),\n  new PublicKey('FsSq4dqugLgZbsyLNt7bngtBkDApXaHUFXVQ6od5TeQ3'),\n  new PublicKey('GttyqdmooMEcgWqZPrb8FcdwjgaTLweLzuvVpnCMq5q1'),\n  new PublicKey('4aWV85p4o115qVo5p9sgbAGqYXmh34838xFpwuN1nxEP'),\n  new PublicKey('C1k4CehboSgUkmL3BJfw32Xj9HPs9NKTzhT5WXsYwWh4'),\n  MINTS,\n  DECIMAL_MULT,\n  CATEGORY,\n  POOL_IDS,\n  LIQUIDATION_DISCOUNT,\n  LTVS,\n  LP_TO_LR,\n  LP_TO_DEX,\n  LP_TO_TARGET_SWAP,\n  LP_TO_NEED_2ND_STAKE,\n  SWITCHBOARD_PRICE,\n  PYTH_PRICE,\n  INTEREST_RATES,\n  FEES,\n  LP_SWAP_METAS,\n  FIREBASE_READER_CONFIG.public,\n);\n","import { Decimal } from 'decimal.js';\nimport { AccountMeta, PublicKey } from '@solana/web3.js';\nimport invariant from 'tiny-invariant';\nimport { InterestRate } from './constants';\n\nexport enum TokenID {\n  APT = 'APT',\n  BTC = 'BTC',\n  ETH = 'ETH',\n  USDT = 'USDT',\n  USDC = 'USDC',\n  UST = 'UST',\n  SOL = 'SOL',\n  SBR = 'SBR',\n  ORCA = 'ORCA',\n  RAY = 'RAY',\n  MERC = 'MERC',\n  MNDE = 'MNDE',\n  mSOL = 'mSOL',\n  USTv2 = 'USTv2',\n  FTT = 'FTT',\n  SRM = 'SRM',\n  stSOL = 'stSOL',\n  whETH = 'whETH',\n  wLDO = 'wLDO',\n  scnSOL = 'scnSOL',\n  SOCN = 'SOCN',\n  wLUNA = 'wLUNA',\n  USDT_USDC_SABER = 'USDT_USDC_SABER',\n  USTv2_USDC_SABER = 'USTv2_USDC_SABER',\n  UST_USDC_SABER = 'UST_USDC_SABER',\n  mSOL_SOL_SABER = 'mSOL_SOL_SABER',\n  stSOL_SOL_SABER = 'stSOL_SOL_SABER',\n  SOL_USDC_RAYDIUM = 'SOL_USDC_RAYDIUM',\n  RAY_USDC_RAYDIUM = 'RAY_USDC_RAYDIUM',\n  SOL_USDT_RAYDIUM = 'SOL_USDT_RAYDIUM',\n  mSOL_SOL_RAYDIUM = 'mSOL_SOL_RAYDIUM',\n  RAY_USDT_RAYDIUM = 'RAY_USDT_RAYDIUM',\n  RAY_ETH_RAYDIUM = 'RAY_ETH_RAYDIUM',\n  RAY_SOL_RAYDIUM = 'RAY_SOL_RAYDIUM',\n  SRM_USDC_RAYDIUM = 'SRM_USDC_RAYDIUM',\n  USDC_USDT_ORCA = 'USDC_USDT_ORCA',\n  SOL_USDC_ORCA = 'SOL_USDC_ORCA',\n  mSOL_SOL_ORCA = 'mSOL_SOL_ORCA',\n  ORCA_USDC_ORCA = 'ORCA_USDC_ORCA',\n  ORCA_SOL_ORCA = 'ORCA_SOL_ORCA',\n  ETH_USDC_ORCA = 'ETH_USDC_ORCA',\n  SOL_USDT_ORCA = 'SOL_USDT_ORCA',\n  ETH_SOL_ORCA = 'ETH_SOL_ORCA',\n  BTC_mSOL_ORCA = 'BTC_mSOL_ORCA',\n  mSOL_USDC_ORCA = 'mSOL_USDC_ORCA',\n  APT_USDC_ORCA = 'APT_USDC_ORCA',\n  stSOL_USTv2_ORCA = 'stSOL_USTv2_ORCA',\n  ORCA_whETH_ORCA = 'ORCA_whETH_ORCA',\n}\n\nexport type PoolId = number;\n\nexport enum TokenCategory {\n  Volatile = 'volatile',\n  Stable = 'stable',\n  Lp = 'lp',\n}\n\nexport enum PoolFlag {\n  AllowBorrow = 1,\n  IsLp = 2,\n  IsStable = 4,\n}\n\nexport interface LpSwapKeyInfo {\n  getLpDepositKeys: (ownerKey: PublicKey) => Promise<AccountMeta[]>;\n  getLpWithdrawKeys: (ownerKey: PublicKey) => Promise<AccountMeta[]>;\n  getLpStakeKeys: (ownerKey: PublicKey) => Promise<AccountMeta[]>;\n  getLRVaults: () => [PublicKey, PublicKey];\n}\n\nexport enum Dex {\n  Serum,\n  Raydium,\n  Saber,\n  Mercurial,\n  Orca,\n}\n\nexport class PoolConfig {\n  constructor(\n    public tokenId: TokenID,\n    public poolId: PoolId,\n    public ltv: number,\n    public mint: PublicKey,\n    public liquidationDiscount: number,\n    public tokenCategory: TokenCategory,\n    public lpLeftRightTokenId: [TokenID, TokenID] | null,\n    public lpLeftRightPoolId: [PoolId, PoolId] | null,\n    public lpDex: Dex | null,\n    public lpTargetSwap: number | null,\n    public lpSwapKeyInfo: LpSwapKeyInfo | null,\n    public lpNeedSndStake: boolean | null,\n    public interestRate: InterestRate | null,\n    public reserveRatio: number,\n  ) {\n    invariant(tokenId);\n    invariant(poolId >= 0);\n    invariant(ltv >= 0);\n    invariant(mint);\n    invariant(liquidationDiscount >= 0);\n    invariant(reserveRatio >= 0);\n    invariant(reserveRatio <= 0.2);\n    if (tokenCategory === TokenCategory.Lp) {\n      invariant(lpLeftRightTokenId !== null && lpLeftRightTokenId !== undefined);\n      invariant(lpLeftRightPoolId !== null && lpLeftRightPoolId !== undefined);\n      invariant(lpDex !== null && lpDex !== undefined);\n      invariant(lpTargetSwap !== null && lpTargetSwap !== undefined);\n      const [lTokId, rTokId] = lpLeftRightTokenId;\n      const [lPoolId, rPoolId] = lpLeftRightPoolId;\n      invariant(lTokId, `${tokenId} missing lTokId`);\n      invariant(rTokId, `${tokenId} missing rTokId`);\n      invariant(lPoolId >= 0, `${tokenId} missing lPoolId`);\n      invariant(rPoolId >= 0, `${tokenId} missing rPoolId`);\n      invariant(lpSwapKeyInfo, `${tokenId} is missing lpSwapKeyInfo`);\n      invariant(\n        lpNeedSndStake === true || lpNeedSndStake === false,\n        `${tokenId} missing lpNeedSndStake`,\n      );\n    } else {\n      invariant(interestRate);\n    }\n  }\n\n  isStable() {\n    return this.tokenCategory === TokenCategory.Stable;\n  }\n  isLp() {\n    return this.tokenCategory === TokenCategory.Lp;\n  }\n  isVolatile() {\n    return this.tokenCategory === TokenCategory.Volatile;\n  }\n}\n\nfunction getLpLRPoolIds(\n  tokId: TokenID,\n  lpToLR: { [key in TokenID]?: [TokenID, TokenID] | undefined },\n  tokenIdToPoolId: { [key in TokenID]?: PoolId | undefined },\n): [PoolId, PoolId] {\n  const [leftTokId, rightTokId] = lpToLR[tokId]!;\n  return [tokenIdToPoolId[leftTokId]!, tokenIdToPoolId[rightTokId]!];\n}\n\nexport class AppConfig {\n  poolConfigs: { [key in TokenID]?: PoolConfig };\n  constructor(\n    public programPubkey: PublicKey,\n    public adminPubkey: PublicKey,\n    public farmerPubkey: PublicKey,\n    public assistKey: PublicKey,\n    public refresherKey: PublicKey,\n    public retroAptVault: PublicKey,\n    public lmAptVault: PublicKey,\n    // maps from TokenID to mint/decimalMult/poolId/ltv\n    public mints: { [key in TokenID]: PublicKey },\n    public decimalMults: { [key in TokenID]: number },\n    public categories: { [key in TokenID]: TokenCategory },\n\n    public tokenIdToPoolId: { [key in TokenID]?: PoolId | undefined },\n    public discounts: { [key in TokenID]?: number | undefined },\n    public ltvs: { [key in TokenID]?: number | undefined },\n    public lpToLR: { [key in TokenID]?: [TokenID, TokenID] | undefined },\n    public lpToDex: { [key in TokenID]?: Dex | undefined },\n    public lpToTargetSwap: { [key in TokenID]?: number | undefined },\n    public lpToNeedSndStake: { [key in TokenID]?: boolean },\n    public switchboardPriceKeys: { [key in TokenID]?: PublicKey },\n    public pythPriceKeys: { [key in TokenID]?: PublicKey },\n    public interestRates: { [key in TokenID]?: InterestRate },\n    public fees: { [key in TokenID]?: number },\n    public lpSwapInfo: { [key in TokenID]?: LpSwapKeyInfo },\n    public firebaseConfig: object,\n  ) {\n    this.mints = mints;\n    this.tokenIdToPoolId = tokenIdToPoolId;\n    const poolIds = Object.values(tokenIdToPoolId);\n    const idSet = new Set(poolIds);\n    invariant(\n      poolIds.length === idSet.size,\n      `poolIds length: ${poolIds.length} != idSet.size: ${idSet.size}`,\n    );\n    this.poolConfigs = {};\n    for (const tokenId in tokenIdToPoolId) {\n      const tokId = tokenId as TokenID;\n      this.poolConfigs[tokId] = new PoolConfig(\n        tokId,\n        tokenIdToPoolId[tokId]!,\n        ltvs[tokId]!,\n        mints[tokId],\n        discounts[tokId]!,\n        categories[tokId],\n        categories[tokId] === TokenCategory.Lp ? lpToLR[tokId]! : null,\n        categories[tokId] === TokenCategory.Lp\n          ? getLpLRPoolIds(tokId, lpToLR, tokenIdToPoolId)\n          : null,\n        categories[tokId] === TokenCategory.Lp ? lpToDex[tokId]! : null,\n        categories[tokId] === TokenCategory.Lp ? lpToTargetSwap[tokId]! : null,\n        lpSwapInfo[tokId]!,\n        categories[tokId] === TokenCategory.Lp ? lpToNeedSndStake[tokId]! : null,\n        categories[tokId] === TokenCategory.Lp ? null : interestRates[tokId]!,\n        fees[tokId]!,\n      );\n    }\n  }\n  mintKeyStrToPoolId(mint_key_str: string): number {\n    for (const [tokenType, pubkey] of Object.entries(this.mints)) {\n      if (pubkey.toString() === mint_key_str) {\n        const result = this.tokenIdToPoolId[tokenType as TokenID];\n        invariant(result !== undefined);\n        return result;\n      }\n    }\n    invariant(false);\n  }\n  getPoolIdList(): number[] {\n    return Object.values(this.tokenIdToPoolId);\n  }\n  getTokenIdByPoolId(targetPoolId: number): TokenID {\n    for (const [tokenId, poolId] of Object.entries(this.tokenIdToPoolId)) {\n      if (poolId === targetPoolId) return tokenId as TokenID;\n    }\n    throw new Error(`poolId ${targetPoolId} not valid`);\n  }\n  getLtvByPoolId(poolId: number) {\n    const tokenId = this.getTokenIdByPoolId(poolId);\n    return this.ltvs[tokenId];\n  }\n  getDecimalMultByPoolId(poolId: number) {\n    const tokenId = this.getTokenIdByPoolId(poolId);\n    return this.decimalMults[tokenId];\n  }\n  getMintByPoolId(poolId: number) {\n    const tokenId = this.getTokenIdByPoolId(poolId);\n    return this.mints[tokenId];\n  }\n  getPoolConfigList(): PoolConfig[] {\n    return Object.values(this.poolConfigs);\n  }\n  getPoolConfigByPoolId(poolId: number): PoolConfig {\n    const tokenId = this.getTokenIdByPoolId(poolId);\n    return this.poolConfigs[tokenId]!;\n  }\n}\n\n// prettier-ignore\nexport interface AssetPool {\n  coin_name         : string;\n\n  mint_key          : PublicKey;\n  mint_decimal_mult : Decimal;\n  pool_id           : number;\n\n  deposit_amount    : Decimal;\n  deposit_index     : Decimal;\n\n  borrow_amount     : Decimal;\n  borrow_index      : Decimal;\n\n  reserve_factor    : Decimal;\n  fee_amount        : Decimal;\n  fee_withdrawn_amt : Decimal;\n  fee_rate          : Decimal;\n\n  last_update_time  : Decimal;\n\n  spl_key           : PublicKey;\n  atoken_mint_key   : PublicKey;\n  price_key         : PublicKey;\n  pyth_price_key    : PublicKey;\n\n  serum_next_cl_id  : Decimal;\n  ltv               : Decimal;\n  safe_factor       : Decimal;\n  flags             : number;\n\n  base_rate         : Decimal;\n  multiplier1       : Decimal;\n  multiplier2       : Decimal;\n  kink              : Decimal;\n  borrow_rate       : Decimal;\n  deposit_rate      : Decimal;\n\n  reward_multiplier       : Decimal;\n  reward_deposit_intra    : Decimal;\n\n  reward_per_year         : Decimal;\n  reward_per_year_deposit : Decimal;\n  reward_per_year_borrow  : Decimal;\n  reward_per_year_per_d   : Decimal;\n  reward_per_year_per_b   : Decimal;\n\n  reward_deposit_index    : Decimal;\n  reward_borrow_index     : Decimal;\n\n  deposit_cap       : Decimal;\n  is_disabled       : boolean;\n  farm_yield        : Decimal;\n}\n\nexport interface AssetPrice {\n  price_in_usd: Decimal;\n}\n\n// prettier-ignore\nexport interface UserInfo {\n  page_id         : number;\n  num_assets      : number;\n  user_asset_info : UserAssetInfo[];\n  reward          : unknown;\n  last_vest_cutoff_time : Decimal;\n  last_update_time: Decimal;\n  assist          : Assist;\n}\n\n// prettier-ignore\nexport interface JsonUserInfo {\n  page_id         : number;\n  num_assets      : number;\n  user_asset_info : JsonUserAssetInfo[];\n  reward          : unknown;\n  last_vest_cutoff_time : number;\n  last_update_time: number;\n  assist          : Assist;\n}\n\n// prettier-ignore\nexport interface UserAssetInfo {\n  pool_id               : number;\n  use_as_collateral     : number;\n\n  deposit_amount        : Decimal;\n  deposit_interests     : Decimal;\n  deposit_index         : Decimal;\n  reward_deposit_amount : Decimal;\n  reward_deposit_index  : Decimal;\n\n  borrow_amount         : Decimal;\n  borrow_interests      : Decimal;\n  borrow_index          : Decimal;\n  reward_borrow_amount  : Decimal;\n  reward_borrow_index   : Decimal;\n}\n\n// prettier-ignore\nexport interface JsonUserAssetInfo {\n  pool_id               : number;\n  use_as_collateral     : number;\n\n  deposit_amount        : number;\n  deposit_interests     : number;\n  deposit_index         : number;\n  reward_deposit_amount : number;\n  reward_deposit_index  : number;\n\n  borrow_amount         : number;\n  borrow_interests      : number;\n  borrow_index          : number;\n  reward_borrow_amount  : number;\n  reward_borrow_index   : number;\n}\n\n// prettier-ignore\nexport interface Assist {\n  assist_mode           : number;\n  self_deleverage_factor: number;\n  post_deleverage_factor: number;\n  sell_sequence         : Uint8Array;\n  buy_sequence          : Uint8Array;\n  // skip tprice triggered actions\n  num_actions           : number;\n  num_executed          : number;\n  //actions: unknown[];\n}\n\nexport interface ApiAssetPool {\n  tokenName: string;\n  mintKey: PublicKey;\n  poolKey: PublicKey;\n  allowBorrow: boolean;\n  isLp: boolean;\n  isStable: boolean;\n  depositAmount: Decimal;\n  depositValue?: Decimal;\n  depositRate: Decimal;\n  borrowAmount: Decimal;\n  borrowValue?: Decimal;\n  borrowRate: Decimal;\n  lastPoolUpdate: Date;\n  lastPriceUpdate?: Date;\n  farmYieldRate: Decimal;\n  liquidityMiningReward: ApiAssetPoolRewardInfo;\n  dualIncentiveReward?: ApiAssetPoolRewardInfo;\n}\n\nexport interface ApiAssetPoolRewardInfo {\n  tokenName: string;\n  tokenMint: PublicKey;\n  amountPerDay: Decimal;\n  amountPerWeek: Decimal;\n  amountPerMonth: Decimal;\n  amountPerYear: Decimal;\n  amountPerYearForDeposit: Decimal;\n  amountPerYearForBorrow: Decimal;\n  aprForDeposit?: Decimal;\n  aprForBorrow?: Decimal;\n}\n\nexport interface ApiBorrowPowerInfo {\n  totalDeposit: Decimal;\n  totalCollateral: Decimal;\n  maxBorrowAllowed: Decimal;\n  totalBorrow: Decimal;\n  collateralRatio: Decimal;\n  safeLimit: Decimal;\n  forceAssistLimit: Decimal;\n  liquidationLimit: Decimal;\n  assistTriggerLimit?: Decimal;\n  assistTargetLimit?: Decimal;\n}\n\nexport interface ApiUserAssetInfo {\n  tokenId: TokenID;\n  useAsCollateral: boolean;\n  ltv: Decimal;\n  depositAmount: Decimal;\n  depositValue?: Decimal;\n  borrowAmount: Decimal;\n  borrowValue?: Decimal;\n}\n\nexport interface ApiUserInfo {\n  userWallet: string;\n  userAssetInfo: ApiUserAssetInfo[];\n  borrowPowerInfo?: ApiBorrowPowerInfo;\n}\n\nexport interface AptUserRewardInfo {\n  // TODO\n}\n\nexport interface DualRewardInfo {\n  tokenId: TokenID;\n  multiplier: Decimal;\n}\n\nexport interface AdhocSwapInfo {\n  targetSwap: number;\n  getSwapKeys: (isBuy: boolean) => AccountMeta[];\n}\n\nexport enum RPC {\n  GenesysGo = 'GenesysGo',\n  Triton = 'Triton',\n  Serum = 'Serum',\n}\n","import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\n\nexport function assert(cond: boolean, msg?: string): asserts cond {\n  if (!cond) {\n    throw new Error(msg);\n  }\n}\n\nexport const getAssociatedTokenPubkey = async (\n  ownerPubkey: PublicKey,\n  mintPubkey: PublicKey,\n  allowOwnerOffCurve = false,\n) => {\n  let address;\n  if (allowOwnerOffCurve) {\n    [address] = await PublicKey.findProgramAddress(\n      [ownerPubkey.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mintPubkey.toBuffer()],\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n    );\n  } else {\n    address = await Token.getAssociatedTokenAddress(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      mintPubkey,\n      ownerPubkey,\n      allowOwnerOffCurve,\n    );\n  }\n  return address;\n};\n\nexport const delay = async (ms: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n};\n"],"mappings":"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","names":["PublicKey","TOKEN_PROGRAM_ID","invariant","TokenID","TokenCategory","PoolFlag","Dex","RPC","invariant","invariant","PublicKey","TOKEN_PROGRAM_ID","ASSOCIATED_TOKEN_PROGRAM_ID","Token","TOKEN_PROGRAM_ID","PublicKey"]}