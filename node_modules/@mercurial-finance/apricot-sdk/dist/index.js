"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }// src/addresses.ts
var _web3js = require('@solana/web3.js');
var _spltoken = require('@solana/spl-token');

// src/constants/commands.ts
var CMD_REFRESH_USER = 10;
var CMD_ADD_USER_AND_DEPOSIT = 16;
var CMD_DEPOSIT = 17;
var CMD_WITHDRAW = 18;
var CMD_BORROW = 19;
var CMD_REPAY = 20;
var CMD_EXTERN_LIQUIDATE = 21;
var CMD_UPDATE_USER_CONFIG = 23;
var CMD_MARGIN_SWAP = 24;
var CMD_UPDATE_USER_ASSET_CONFIG = 25;
var CMD_WITHDRAW_AND_REMOVE_USER = 26;
var CMD_LP_CREATE = 29;
var CMD_LP_REDEEM = 30;
var CMD_LP_OP_CHECK = 33;
var CMD_LP_OP_ENDCHECK = 34;
var CMD_LP_STAKE = 35;
var CMD_LP_UNSTAKE = 36;
var CMD_CLAIM_APT_LM_REWARD = 41;
var CMD_MAKE_LM_REWARD_AVAILABLE = 42;
var CMD_LP_STAKE_SECOND = 129;
var CMD_LP_UNSTAKE_SECOND = 130;
var SWAP_FAKE = 0;
var SWAP_SERUM = 1;
var SWAP_RAYDIUM = 2;
var SWAP_SABER = 3;
var SWAP_MERCURIAL = 4;
var SWAP_ORCA = 5;
var INVALID_PAGE = 65535;
var AMOUNT_MULTIPLIER = 16777216;
var MAX_ASSIST_ACTIONS = 6;
var ASSIST_MODE_STABLE_ONLY = 2;

// src/constants/configs.ts


var _tinyinvariant = require('tiny-invariant'); var _tinyinvariant2 = _interopRequireDefault(_tinyinvariant);

// src/types.ts

var TokenID = /* @__PURE__ */ ((TokenID2) => {
  TokenID2["APT"] = "APT";
  TokenID2["BTC"] = "BTC";
  TokenID2["ETH"] = "ETH";
  TokenID2["USDT"] = "USDT";
  TokenID2["USDC"] = "USDC";
  TokenID2["UST"] = "UST";
  TokenID2["SOL"] = "SOL";
  TokenID2["SBR"] = "SBR";
  TokenID2["ORCA"] = "ORCA";
  TokenID2["RAY"] = "RAY";
  TokenID2["MERC"] = "MERC";
  TokenID2["MNDE"] = "MNDE";
  TokenID2["mSOL"] = "mSOL";
  TokenID2["USTv2"] = "USTv2";
  TokenID2["FTT"] = "FTT";
  TokenID2["SRM"] = "SRM";
  TokenID2["stSOL"] = "stSOL";
  TokenID2["whETH"] = "whETH";
  TokenID2["wLDO"] = "wLDO";
  TokenID2["scnSOL"] = "scnSOL";
  TokenID2["SOCN"] = "SOCN";
  TokenID2["wLUNA"] = "wLUNA";
  TokenID2["USDT_USDC_SABER"] = "USDT_USDC_SABER";
  TokenID2["USTv2_USDC_SABER"] = "USTv2_USDC_SABER";
  TokenID2["UST_USDC_SABER"] = "UST_USDC_SABER";
  TokenID2["mSOL_SOL_SABER"] = "mSOL_SOL_SABER";
  TokenID2["stSOL_SOL_SABER"] = "stSOL_SOL_SABER";
  TokenID2["SOL_USDC_RAYDIUM"] = "SOL_USDC_RAYDIUM";
  TokenID2["RAY_USDC_RAYDIUM"] = "RAY_USDC_RAYDIUM";
  TokenID2["SOL_USDT_RAYDIUM"] = "SOL_USDT_RAYDIUM";
  TokenID2["mSOL_SOL_RAYDIUM"] = "mSOL_SOL_RAYDIUM";
  TokenID2["RAY_USDT_RAYDIUM"] = "RAY_USDT_RAYDIUM";
  TokenID2["RAY_ETH_RAYDIUM"] = "RAY_ETH_RAYDIUM";
  TokenID2["RAY_SOL_RAYDIUM"] = "RAY_SOL_RAYDIUM";
  TokenID2["SRM_USDC_RAYDIUM"] = "SRM_USDC_RAYDIUM";
  TokenID2["USDC_USDT_ORCA"] = "USDC_USDT_ORCA";
  TokenID2["SOL_USDC_ORCA"] = "SOL_USDC_ORCA";
  TokenID2["mSOL_SOL_ORCA"] = "mSOL_SOL_ORCA";
  TokenID2["ORCA_USDC_ORCA"] = "ORCA_USDC_ORCA";
  TokenID2["ORCA_SOL_ORCA"] = "ORCA_SOL_ORCA";
  TokenID2["ETH_USDC_ORCA"] = "ETH_USDC_ORCA";
  TokenID2["SOL_USDT_ORCA"] = "SOL_USDT_ORCA";
  TokenID2["ETH_SOL_ORCA"] = "ETH_SOL_ORCA";
  TokenID2["BTC_mSOL_ORCA"] = "BTC_mSOL_ORCA";
  TokenID2["mSOL_USDC_ORCA"] = "mSOL_USDC_ORCA";
  TokenID2["APT_USDC_ORCA"] = "APT_USDC_ORCA";
  TokenID2["stSOL_USTv2_ORCA"] = "stSOL_USTv2_ORCA";
  TokenID2["ORCA_whETH_ORCA"] = "ORCA_whETH_ORCA";
  return TokenID2;
})(TokenID || {});
var TokenCategory = /* @__PURE__ */ ((TokenCategory2) => {
  TokenCategory2["Volatile"] = "volatile";
  TokenCategory2["Stable"] = "stable";
  TokenCategory2["Lp"] = "lp";
  return TokenCategory2;
})(TokenCategory || {});
var PoolFlag = /* @__PURE__ */ ((PoolFlag2) => {
  PoolFlag2[PoolFlag2["AllowBorrow"] = 1] = "AllowBorrow";
  PoolFlag2[PoolFlag2["IsLp"] = 2] = "IsLp";
  PoolFlag2[PoolFlag2["IsStable"] = 4] = "IsStable";
  return PoolFlag2;
})(PoolFlag || {});
var Dex = /* @__PURE__ */ ((Dex2) => {
  Dex2[Dex2["Serum"] = 0] = "Serum";
  Dex2[Dex2["Raydium"] = 1] = "Raydium";
  Dex2[Dex2["Saber"] = 2] = "Saber";
  Dex2[Dex2["Mercurial"] = 3] = "Mercurial";
  Dex2[Dex2["Orca"] = 4] = "Orca";
  return Dex2;
})(Dex || {});
var PoolConfig = class {
  constructor(tokenId, poolId, ltv, mint, liquidationDiscount, tokenCategory, lpLeftRightTokenId, lpLeftRightPoolId, lpDex, lpTargetSwap, lpSwapKeyInfo, lpNeedSndStake, interestRate, reserveRatio) {
    this.tokenId = tokenId;
    this.poolId = poolId;
    this.ltv = ltv;
    this.mint = mint;
    this.liquidationDiscount = liquidationDiscount;
    this.tokenCategory = tokenCategory;
    this.lpLeftRightTokenId = lpLeftRightTokenId;
    this.lpLeftRightPoolId = lpLeftRightPoolId;
    this.lpDex = lpDex;
    this.lpTargetSwap = lpTargetSwap;
    this.lpSwapKeyInfo = lpSwapKeyInfo;
    this.lpNeedSndStake = lpNeedSndStake;
    this.interestRate = interestRate;
    this.reserveRatio = reserveRatio;
    _tinyinvariant2.default.call(void 0, tokenId);
    _tinyinvariant2.default.call(void 0, poolId >= 0);
    _tinyinvariant2.default.call(void 0, ltv >= 0);
    _tinyinvariant2.default.call(void 0, mint);
    _tinyinvariant2.default.call(void 0, liquidationDiscount >= 0);
    _tinyinvariant2.default.call(void 0, reserveRatio >= 0);
    _tinyinvariant2.default.call(void 0, reserveRatio <= 0.2);
    if (tokenCategory === "lp" /* Lp */) {
      _tinyinvariant2.default.call(void 0, lpLeftRightTokenId !== null && lpLeftRightTokenId !== void 0);
      _tinyinvariant2.default.call(void 0, lpLeftRightPoolId !== null && lpLeftRightPoolId !== void 0);
      _tinyinvariant2.default.call(void 0, lpDex !== null && lpDex !== void 0);
      _tinyinvariant2.default.call(void 0, lpTargetSwap !== null && lpTargetSwap !== void 0);
      const [lTokId, rTokId] = lpLeftRightTokenId;
      const [lPoolId, rPoolId] = lpLeftRightPoolId;
      _tinyinvariant2.default.call(void 0, lTokId, `${tokenId} missing lTokId`);
      _tinyinvariant2.default.call(void 0, rTokId, `${tokenId} missing rTokId`);
      _tinyinvariant2.default.call(void 0, lPoolId >= 0, `${tokenId} missing lPoolId`);
      _tinyinvariant2.default.call(void 0, rPoolId >= 0, `${tokenId} missing rPoolId`);
      _tinyinvariant2.default.call(void 0, lpSwapKeyInfo, `${tokenId} is missing lpSwapKeyInfo`);
      _tinyinvariant2.default.call(void 0, 
        lpNeedSndStake === true || lpNeedSndStake === false,
        `${tokenId} missing lpNeedSndStake`
      );
    } else {
      _tinyinvariant2.default.call(void 0, interestRate);
    }
  }
  isStable() {
    return this.tokenCategory === "stable" /* Stable */;
  }
  isLp() {
    return this.tokenCategory === "lp" /* Lp */;
  }
  isVolatile() {
    return this.tokenCategory === "volatile" /* Volatile */;
  }
};
function getLpLRPoolIds(tokId, lpToLR, tokenIdToPoolId) {
  const [leftTokId, rightTokId] = lpToLR[tokId];
  return [tokenIdToPoolId[leftTokId], tokenIdToPoolId[rightTokId]];
}
var AppConfig = class {
  constructor(programPubkey, adminPubkey, farmerPubkey, assistKey, refresherKey, retroAptVault, lmAptVault, mints, decimalMults, categories, tokenIdToPoolId, discounts, ltvs, lpToLR, lpToDex, lpToTargetSwap, lpToNeedSndStake, switchboardPriceKeys, pythPriceKeys, interestRates, fees, lpSwapInfo, firebaseConfig) {
    this.programPubkey = programPubkey;
    this.adminPubkey = adminPubkey;
    this.farmerPubkey = farmerPubkey;
    this.assistKey = assistKey;
    this.refresherKey = refresherKey;
    this.retroAptVault = retroAptVault;
    this.lmAptVault = lmAptVault;
    this.mints = mints;
    this.decimalMults = decimalMults;
    this.categories = categories;
    this.tokenIdToPoolId = tokenIdToPoolId;
    this.discounts = discounts;
    this.ltvs = ltvs;
    this.lpToLR = lpToLR;
    this.lpToDex = lpToDex;
    this.lpToTargetSwap = lpToTargetSwap;
    this.lpToNeedSndStake = lpToNeedSndStake;
    this.switchboardPriceKeys = switchboardPriceKeys;
    this.pythPriceKeys = pythPriceKeys;
    this.interestRates = interestRates;
    this.fees = fees;
    this.lpSwapInfo = lpSwapInfo;
    this.firebaseConfig = firebaseConfig;
    this.mints = mints;
    this.tokenIdToPoolId = tokenIdToPoolId;
    const poolIds = Object.values(tokenIdToPoolId);
    const idSet = new Set(poolIds);
    _tinyinvariant2.default.call(void 0, 
      poolIds.length === idSet.size,
      `poolIds length: ${poolIds.length} != idSet.size: ${idSet.size}`
    );
    this.poolConfigs = {};
    for (const tokenId in tokenIdToPoolId) {
      const tokId = tokenId;
      this.poolConfigs[tokId] = new PoolConfig(
        tokId,
        tokenIdToPoolId[tokId],
        ltvs[tokId],
        mints[tokId],
        discounts[tokId],
        categories[tokId],
        categories[tokId] === "lp" /* Lp */ ? lpToLR[tokId] : null,
        categories[tokId] === "lp" /* Lp */ ? getLpLRPoolIds(tokId, lpToLR, tokenIdToPoolId) : null,
        categories[tokId] === "lp" /* Lp */ ? lpToDex[tokId] : null,
        categories[tokId] === "lp" /* Lp */ ? lpToTargetSwap[tokId] : null,
        lpSwapInfo[tokId],
        categories[tokId] === "lp" /* Lp */ ? lpToNeedSndStake[tokId] : null,
        categories[tokId] === "lp" /* Lp */ ? null : interestRates[tokId],
        fees[tokId]
      );
    }
  }
  mintKeyStrToPoolId(mint_key_str) {
    for (const [tokenType, pubkey] of Object.entries(this.mints)) {
      if (pubkey.toString() === mint_key_str) {
        const result = this.tokenIdToPoolId[tokenType];
        _tinyinvariant2.default.call(void 0, result !== void 0);
        return result;
      }
    }
    _tinyinvariant2.default.call(void 0, false);
  }
  getPoolIdList() {
    return Object.values(this.tokenIdToPoolId);
  }
  getTokenIdByPoolId(targetPoolId) {
    for (const [tokenId, poolId] of Object.entries(this.tokenIdToPoolId)) {
      if (poolId === targetPoolId)
        return tokenId;
    }
    throw new Error(`poolId ${targetPoolId} not valid`);
  }
  getLtvByPoolId(poolId) {
    const tokenId = this.getTokenIdByPoolId(poolId);
    return this.ltvs[tokenId];
  }
  getDecimalMultByPoolId(poolId) {
    const tokenId = this.getTokenIdByPoolId(poolId);
    return this.decimalMults[tokenId];
  }
  getMintByPoolId(poolId) {
    const tokenId = this.getTokenIdByPoolId(poolId);
    return this.mints[tokenId];
  }
  getPoolConfigList() {
    return Object.values(this.poolConfigs);
  }
  getPoolConfigByPoolId(poolId) {
    const tokenId = this.getTokenIdByPoolId(poolId);
    return this.poolConfigs[tokenId];
  }
};
var RPC = /* @__PURE__ */ ((RPC2) => {
  RPC2["GenesysGo"] = "GenesysGo";
  RPC2["Triton"] = "Triton";
  RPC2["Serum"] = "Serum";
  return RPC2;
})(RPC || {});

// src/constants/configs.ts
var _decimaljs = require('decimal.js');
var FAKE_KEY = _web3js.SystemProgram.programId;
var SAFE_LIMIT = new (0, _decimaljs.Decimal)(0.9);
var FORCE_ASSIST_LIMIT = new (0, _decimaljs.Decimal)(1);
var LIQUIDATION_LIMIT = new (0, _decimaljs.Decimal)(1.01);
var MINTS = {
  ["APT" /* APT */]: new (0, _web3js.PublicKey)("APTtJyaRX5yGTsJU522N4VYWg3vCvSb65eam5GrPT5Rt"),
  ["BTC" /* BTC */]: new (0, _web3js.PublicKey)("9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E"),
  ["ETH" /* ETH */]: new (0, _web3js.PublicKey)("2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk"),
  ["SOL" /* SOL */]: new (0, _web3js.PublicKey)("So11111111111111111111111111111111111111112"),
  ["mSOL" /* mSOL */]: new (0, _web3js.PublicKey)("mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So"),
  ["stSOL" /* stSOL */]: new (0, _web3js.PublicKey)("7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj"),
  ["whETH" /* whETH */]: new (0, _web3js.PublicKey)("7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs"),
  ["scnSOL" /* scnSOL */]: new (0, _web3js.PublicKey)("5oVNBeEEQvYi1cX3ir8Dx5n1P7pdxydbGF2X4TxVusJm"),
  ["RAY" /* RAY */]: new (0, _web3js.PublicKey)("4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R"),
  ["ORCA" /* ORCA */]: new (0, _web3js.PublicKey)("orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE"),
  ["SBR" /* SBR */]: new (0, _web3js.PublicKey)("Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1"),
  ["MERC" /* MERC */]: new (0, _web3js.PublicKey)("MERt85fc5boKw3BW1eYdxonEuJNvXbiMbs6hvheau5K"),
  ["MNDE" /* MNDE */]: new (0, _web3js.PublicKey)("MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey"),
  ["FTT" /* FTT */]: new (0, _web3js.PublicKey)("AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3"),
  ["SRM" /* SRM */]: new (0, _web3js.PublicKey)("SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt"),
  ["wLDO" /* wLDO */]: new (0, _web3js.PublicKey)("HZRCwxP2Vq9PCpPXooayhJ2bxTpo5xfpQrwB1svh332p"),
  ["SOCN" /* SOCN */]: new (0, _web3js.PublicKey)("11111111111111111111111111111111"),
  ["wLUNA" /* wLUNA */]: new (0, _web3js.PublicKey)("F6v4wfAdJB8D8p77bMXZgYt8TDKsYxLYxH5AFhUkYx9W"),
  ["USDT" /* USDT */]: new (0, _web3js.PublicKey)("Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB"),
  ["USDC" /* USDC */]: new (0, _web3js.PublicKey)("EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"),
  ["UST" /* UST */]: new (0, _web3js.PublicKey)("CXLBjMMcwkc17GfJtBos6rQCo1ypeH6eDbB82Kby4MRm"),
  ["USTv2" /* USTv2 */]: new (0, _web3js.PublicKey)("9vMJfxuKxXBoEa7rM12mYLMwTacLMLDJqHozw96WQL8i"),
  ["USDT_USDC_SABER" /* USDT_USDC_SABER */]: new (0, _web3js.PublicKey)("2poo1w1DL6yd2WNTCnNTzDqkC6MBXq7axo77P16yrBuf"),
  ["mSOL_SOL_SABER" /* mSOL_SOL_SABER */]: new (0, _web3js.PublicKey)("SoLEao8wTzSfqhuou8rcYsVoLjthVmiXuEjzdNPMnCz"),
  ["stSOL_SOL_SABER" /* stSOL_SOL_SABER */]: new (0, _web3js.PublicKey)("stSjCmjQ96BiGhTk8gkU22j1739R8YBQVMq7KXWTqUV"),
  ["USDC_USDT_ORCA" /* USDC_USDT_ORCA */]: new (0, _web3js.PublicKey)("H2uzgruPvonVpCRhwwdukcpXK8TG17swFNzYFr2rtPxy"),
  ["UST_USDC_SABER" /* UST_USDC_SABER */]: new (0, _web3js.PublicKey)("UST32f2JtPGocLzsL41B3VBBoJzTm1mK1j3rwyM3Wgc"),
  ["SOL_USDC_RAYDIUM" /* SOL_USDC_RAYDIUM */]: new (0, _web3js.PublicKey)("8HoQnePLqPj4M7PUDzfw8e3Ymdwgc7NLGnaTUapubyvu"),
  ["RAY_USDC_RAYDIUM" /* RAY_USDC_RAYDIUM */]: new (0, _web3js.PublicKey)("FbC6K13MzHvN42bXrtGaWsvZY9fxrackRSZcBGfjPc7m"),
  ["SOL_USDT_RAYDIUM" /* SOL_USDT_RAYDIUM */]: new (0, _web3js.PublicKey)("Epm4KfTj4DMrvqn6Bwg2Tr2N8vhQuNbuK8bESFp4k33K"),
  ["SOL_USDC_ORCA" /* SOL_USDC_ORCA */]: new (0, _web3js.PublicKey)("APDFRM3HMr8CAGXwKHiu2f5ePSpaiEJhaURwhsRrUUt9"),
  ["mSOL_SOL_ORCA" /* mSOL_SOL_ORCA */]: new (0, _web3js.PublicKey)("29cdoMgu6MS2VXpcMo1sqRdWEzdUR9tjvoh8fcK8Z87R"),
  ["ORCA_USDC_ORCA" /* ORCA_USDC_ORCA */]: new (0, _web3js.PublicKey)("n8Mpu28RjeYD7oUX3LG1tPxzhRZh3YYLRSHcHRdS3Zx"),
  ["ORCA_SOL_ORCA" /* ORCA_SOL_ORCA */]: new (0, _web3js.PublicKey)("2uVjAuRXavpM6h1scGQaxqb6HVaNRn6T2X7HHXTabz25"),
  ["ETH_USDC_ORCA" /* ETH_USDC_ORCA */]: new (0, _web3js.PublicKey)("3e1W6Aqcbuk2DfHUwRiRcyzpyYRRjg6yhZZcyEARydUX"),
  ["SOL_USDT_ORCA" /* SOL_USDT_ORCA */]: new (0, _web3js.PublicKey)("FZthQCuYHhcfiDma7QrX7buDHwrZEd7vL8SjS6LQa3Tx"),
  ["mSOL_SOL_RAYDIUM" /* mSOL_SOL_RAYDIUM */]: new (0, _web3js.PublicKey)("5ijRoAHVgd5T5CNtK5KDRUBZ7Bffb69nktMj5n6ks6m4"),
  ["ETH_SOL_ORCA" /* ETH_SOL_ORCA */]: new (0, _web3js.PublicKey)("71FymgN2ZUf7VvVTLE8jYEnjP3jSK1Frp2XT1nHs8Hob"),
  ["BTC_mSOL_ORCA" /* BTC_mSOL_ORCA */]: new (0, _web3js.PublicKey)("8nKJ4z9FSw6wrVZKASqBiS9DS1CiNsRnqwCCKVQjqdkB"),
  ["mSOL_USDC_ORCA" /* mSOL_USDC_ORCA */]: new (0, _web3js.PublicKey)("8PSfyiTVwPb6Rr2iZ8F3kNpbg65BCfJM9v8LfB916r44"),
  ["USTv2_USDC_SABER" /* USTv2_USDC_SABER */]: new (0, _web3js.PublicKey)("USTCmQpbUGj5iTsXdnTYHZupY1QpftDZhLokSVk6UWi"),
  ["APT_USDC_ORCA" /* APT_USDC_ORCA */]: new (0, _web3js.PublicKey)("HNrYngS1eoqkjWro9D3Y5Z9sWBDzPNK2tX4rfV2Up177"),
  ["RAY_USDT_RAYDIUM" /* RAY_USDT_RAYDIUM */]: new (0, _web3js.PublicKey)("C3sT1R3nsw4AVdepvLTLKr5Gvszr7jufyBWUCvy4TUvT"),
  ["RAY_ETH_RAYDIUM" /* RAY_ETH_RAYDIUM */]: new (0, _web3js.PublicKey)("mjQH33MqZv5aKAbKHi8dG3g3qXeRQqq1GFcXceZkNSr"),
  ["RAY_SOL_RAYDIUM" /* RAY_SOL_RAYDIUM */]: new (0, _web3js.PublicKey)("89ZKE4aoyfLBe2RuV6jM3JGNhaV18Nxh8eNtjRcndBip"),
  ["SRM_USDC_RAYDIUM" /* SRM_USDC_RAYDIUM */]: new (0, _web3js.PublicKey)("9XnZd82j34KxNLgQfz29jGbYdxsYznTWRpvZE3SRE7JG"),
  ["stSOL_USTv2_ORCA" /* stSOL_USTv2_ORCA */]: new (0, _web3js.PublicKey)("HTZd53fYwYQRyAjiaPsZy9Gf41gobFdqkF4oKe3XLi95"),
  ["ORCA_whETH_ORCA" /* ORCA_whETH_ORCA */]: new (0, _web3js.PublicKey)("GsfyYHkSgC3Ta6aWR9MjB2sxoBrkGGeR2tAwXbpphf3")
};
var DECIMAL_MULT = {
  ["APT" /* APT */]: 1e6,
  ["BTC" /* BTC */]: 1e6,
  ["ETH" /* ETH */]: 1e6,
  ["SOL" /* SOL */]: 1e9,
  ["mSOL" /* mSOL */]: 1e9,
  ["stSOL" /* stSOL */]: 1e9,
  ["whETH" /* whETH */]: 1e8,
  ["scnSOL" /* scnSOL */]: 1e9,
  ["RAY" /* RAY */]: 1e6,
  ["ORCA" /* ORCA */]: 1e6,
  ["SBR" /* SBR */]: 1e6,
  ["MERC" /* MERC */]: 1e6,
  ["MNDE" /* MNDE */]: 1e9,
  ["FTT" /* FTT */]: 1e6,
  ["SRM" /* SRM */]: 1e6,
  ["wLDO" /* wLDO */]: 1e8,
  ["SOCN" /* SOCN */]: 1e9,
  ["wLUNA" /* wLUNA */]: 1e6,
  ["USDT" /* USDT */]: 1e6,
  ["USDC" /* USDC */]: 1e6,
  ["UST" /* UST */]: 1e9,
  ["USTv2" /* USTv2 */]: 1e6,
  ["USDT_USDC_SABER" /* USDT_USDC_SABER */]: 1e6,
  ["mSOL_SOL_SABER" /* mSOL_SOL_SABER */]: 1e9,
  ["stSOL_SOL_SABER" /* stSOL_SOL_SABER */]: 1e9,
  ["USDC_USDT_ORCA" /* USDC_USDT_ORCA */]: 1e6,
  ["UST_USDC_SABER" /* UST_USDC_SABER */]: 1e9,
  ["SOL_USDC_RAYDIUM" /* SOL_USDC_RAYDIUM */]: 1e9,
  ["RAY_USDC_RAYDIUM" /* RAY_USDC_RAYDIUM */]: 1e6,
  ["SOL_USDT_RAYDIUM" /* SOL_USDT_RAYDIUM */]: 1e9,
  ["SOL_USDC_ORCA" /* SOL_USDC_ORCA */]: 1e6,
  ["mSOL_SOL_ORCA" /* mSOL_SOL_ORCA */]: 1e6,
  ["ORCA_USDC_ORCA" /* ORCA_USDC_ORCA */]: 1e6,
  ["ORCA_SOL_ORCA" /* ORCA_SOL_ORCA */]: 1e6,
  ["ETH_USDC_ORCA" /* ETH_USDC_ORCA */]: 1e6,
  ["SOL_USDT_ORCA" /* SOL_USDT_ORCA */]: 1e6,
  ["mSOL_SOL_RAYDIUM" /* mSOL_SOL_RAYDIUM */]: 1e9,
  ["ETH_SOL_ORCA" /* ETH_SOL_ORCA */]: 1e6,
  ["BTC_mSOL_ORCA" /* BTC_mSOL_ORCA */]: 1e6,
  ["mSOL_USDC_ORCA" /* mSOL_USDC_ORCA */]: 1e6,
  ["USTv2_USDC_SABER" /* USTv2_USDC_SABER */]: 1e6,
  ["APT_USDC_ORCA" /* APT_USDC_ORCA */]: 1e6,
  ["RAY_USDT_RAYDIUM" /* RAY_USDT_RAYDIUM */]: 1e6,
  ["RAY_ETH_RAYDIUM" /* RAY_ETH_RAYDIUM */]: 1e6,
  ["RAY_SOL_RAYDIUM" /* RAY_SOL_RAYDIUM */]: 1e6,
  ["SRM_USDC_RAYDIUM" /* SRM_USDC_RAYDIUM */]: 1e6,
  ["stSOL_USTv2_ORCA" /* stSOL_USTv2_ORCA */]: 1e6,
  ["ORCA_whETH_ORCA" /* ORCA_whETH_ORCA */]: 1e6
};
var POOL_IDS = {
  ["BTC" /* BTC */]: 0,
  ["ETH" /* ETH */]: 1,
  ["USDT" /* USDT */]: 2,
  ["USDC" /* USDC */]: 3,
  ["SOL" /* SOL */]: 4,
  ["USDT_USDC_SABER" /* USDT_USDC_SABER */]: 5,
  ["UST" /* UST */]: 6,
  ["USDC_USDT_ORCA" /* USDC_USDT_ORCA */]: 8,
  ["SOL_USDC_RAYDIUM" /* SOL_USDC_RAYDIUM */]: 9,
  ["RAY_USDC_RAYDIUM" /* RAY_USDC_RAYDIUM */]: 10,
  ["RAY" /* RAY */]: 11,
  ["mSOL" /* mSOL */]: 12,
  ["ORCA" /* ORCA */]: 13,
  ["SOL_USDT_RAYDIUM" /* SOL_USDT_RAYDIUM */]: 14,
  ["SOL_USDC_ORCA" /* SOL_USDC_ORCA */]: 15,
  ["mSOL_SOL_ORCA" /* mSOL_SOL_ORCA */]: 16,
  ["ORCA_USDC_ORCA" /* ORCA_USDC_ORCA */]: 17,
  ["ORCA_SOL_ORCA" /* ORCA_SOL_ORCA */]: 18,
  ["ETH_USDC_ORCA" /* ETH_USDC_ORCA */]: 19,
  ["SOL_USDT_ORCA" /* SOL_USDT_ORCA */]: 20,
  ["USTv2" /* USTv2 */]: 21,
  ["mSOL_SOL_RAYDIUM" /* mSOL_SOL_RAYDIUM */]: 22,
  ["ETH_SOL_ORCA" /* ETH_SOL_ORCA */]: 23,
  ["BTC_mSOL_ORCA" /* BTC_mSOL_ORCA */]: 24,
  ["mSOL_USDC_ORCA" /* mSOL_USDC_ORCA */]: 25,
  ["USTv2_USDC_SABER" /* USTv2_USDC_SABER */]: 26,
  ["APT" /* APT */]: 27,
  ["APT_USDC_ORCA" /* APT_USDC_ORCA */]: 28,
  ["FTT" /* FTT */]: 29,
  ["SRM" /* SRM */]: 30,
  ["RAY_USDT_RAYDIUM" /* RAY_USDT_RAYDIUM */]: 31,
  ["RAY_ETH_RAYDIUM" /* RAY_ETH_RAYDIUM */]: 32,
  ["RAY_SOL_RAYDIUM" /* RAY_SOL_RAYDIUM */]: 33,
  ["SRM_USDC_RAYDIUM" /* SRM_USDC_RAYDIUM */]: 34,
  ["stSOL" /* stSOL */]: 35,
  ["whETH" /* whETH */]: 36,
  ["scnSOL" /* scnSOL */]: 37,
  ["stSOL_USTv2_ORCA" /* stSOL_USTv2_ORCA */]: 38,
  ["ORCA_whETH_ORCA" /* ORCA_whETH_ORCA */]: 39,
  ["mSOL_SOL_SABER" /* mSOL_SOL_SABER */]: 40,
  ["stSOL_SOL_SABER" /* stSOL_SOL_SABER */]: 41
};
var LTVS = {
  ["APT" /* APT */]: 0,
  ["BTC" /* BTC */]: 0.85,
  ["ETH" /* ETH */]: 0.85,
  ["mSOL" /* mSOL */]: 0.8,
  ["SOL" /* SOL */]: 0.8,
  ["stSOL" /* stSOL */]: 0.8,
  ["whETH" /* whETH */]: 0.85,
  ["scnSOL" /* scnSOL */]: 0.8,
  ["RAY" /* RAY */]: 0.8,
  ["ORCA" /* ORCA */]: 0.8,
  ["FTT" /* FTT */]: 0.8,
  ["SRM" /* SRM */]: 0.8,
  ["USDT" /* USDT */]: 0.9,
  ["USDC" /* USDC */]: 0.9,
  ["UST" /* UST */]: 0.01,
  ["USTv2" /* USTv2 */]: 0.01,
  ["USDT_USDC_SABER" /* USDT_USDC_SABER */]: 0.8,
  ["mSOL_SOL_SABER" /* mSOL_SOL_SABER */]: 0.8,
  ["stSOL_SOL_SABER" /* stSOL_SOL_SABER */]: 0.8,
  ["USDC_USDT_ORCA" /* USDC_USDT_ORCA */]: 0.8,
  ["SOL_USDC_RAYDIUM" /* SOL_USDC_RAYDIUM */]: 0.8,
  ["RAY_USDC_RAYDIUM" /* RAY_USDC_RAYDIUM */]: 0.8,
  ["SOL_USDT_RAYDIUM" /* SOL_USDT_RAYDIUM */]: 0.8,
  ["SOL_USDC_ORCA" /* SOL_USDC_ORCA */]: 0.8,
  ["mSOL_SOL_ORCA" /* mSOL_SOL_ORCA */]: 0.8,
  ["ORCA_USDC_ORCA" /* ORCA_USDC_ORCA */]: 0.8,
  ["ORCA_SOL_ORCA" /* ORCA_SOL_ORCA */]: 0.8,
  ["ETH_USDC_ORCA" /* ETH_USDC_ORCA */]: 0.8,
  ["SOL_USDT_ORCA" /* SOL_USDT_ORCA */]: 0.8,
  ["mSOL_SOL_RAYDIUM" /* mSOL_SOL_RAYDIUM */]: 0.8,
  ["ETH_SOL_ORCA" /* ETH_SOL_ORCA */]: 0.8,
  ["BTC_mSOL_ORCA" /* BTC_mSOL_ORCA */]: 0.8,
  ["mSOL_USDC_ORCA" /* mSOL_USDC_ORCA */]: 0.8,
  ["USTv2_USDC_SABER" /* USTv2_USDC_SABER */]: 0.8,
  ["APT_USDC_ORCA" /* APT_USDC_ORCA */]: 0.4,
  ["RAY_USDT_RAYDIUM" /* RAY_USDT_RAYDIUM */]: 0.8,
  ["RAY_ETH_RAYDIUM" /* RAY_ETH_RAYDIUM */]: 0.8,
  ["RAY_SOL_RAYDIUM" /* RAY_SOL_RAYDIUM */]: 0.8,
  ["SRM_USDC_RAYDIUM" /* SRM_USDC_RAYDIUM */]: 0.8,
  ["stSOL_USTv2_ORCA" /* stSOL_USTv2_ORCA */]: 0.8,
  ["ORCA_whETH_ORCA" /* ORCA_whETH_ORCA */]: 0.8
};
var InterestRate = class {
  constructor(baseRate, kink, kinkRate, fullRate) {
    this.baseRate = baseRate;
    this.kink = kink;
    this.kinkRate = kinkRate;
    this.fullRate = fullRate;
    _tinyinvariant2.default.call(void 0, baseRate >= 0);
    _tinyinvariant2.default.call(void 0, kink > 0);
    _tinyinvariant2.default.call(void 0, kink < 1);
    _tinyinvariant2.default.call(void 0, kinkRate > 0);
    _tinyinvariant2.default.call(void 0, fullRate > kinkRate);
    this.multiplier = (kinkRate - baseRate) / kink;
    this.jumpMultiplier = (fullRate - kinkRate) / (1 - kink);
  }
};
var INTEREST_RATES = {
  ["BTC" /* BTC */]: new InterestRate(0.02, 0.85, 0.2, 2),
  ["ETH" /* ETH */]: new InterestRate(0.02, 0.85, 0.2, 2),
  ["SOL" /* SOL */]: new InterestRate(0.02, 0.85, 0.2, 2),
  ["mSOL" /* mSOL */]: new InterestRate(0.02, 0.85, 0.2, 2),
  ["stSOL" /* stSOL */]: new InterestRate(0.02, 0.85, 0.2, 2),
  ["whETH" /* whETH */]: new InterestRate(0.02, 0.85, 0.2, 2),
  ["scnSOL" /* scnSOL */]: new InterestRate(0.02, 0.85, 0.2, 2),
  ["APT" /* APT */]: new InterestRate(0.02, 0.85, 0.2, 2),
  ["RAY" /* RAY */]: new InterestRate(0.02, 0.85, 0.2, 2),
  ["ORCA" /* ORCA */]: new InterestRate(0.02, 0.85, 0.2, 2),
  ["SBR" /* SBR */]: new InterestRate(0.02, 0.85, 0.2, 2),
  ["FTT" /* FTT */]: new InterestRate(0.02, 0.85, 0.2, 2),
  ["SRM" /* SRM */]: new InterestRate(0.02, 0.85, 0.2, 2),
  ["USDT" /* USDT */]: new InterestRate(0.01, 0.85, 0.08, 1),
  ["USDC" /* USDC */]: new InterestRate(0.01, 0.85, 0.08, 1),
  ["UST" /* UST */]: new InterestRate(0.01, 0.85, 0.2, 30),
  ["USTv2" /* USTv2 */]: new InterestRate(0.01, 0.9, 0.2, 30)
};
var FEES = {
  ["BTC" /* BTC */]: 0.2,
  ["ETH" /* ETH */]: 0.2,
  ["mSOL" /* mSOL */]: 0.2,
  ["SOL" /* SOL */]: 0.2,
  ["stSOL" /* stSOL */]: 0.2,
  ["whETH" /* whETH */]: 0.2,
  ["scnSOL" /* scnSOL */]: 0.2,
  ["APT" /* APT */]: 0.2,
  ["RAY" /* RAY */]: 0.2,
  ["ORCA" /* ORCA */]: 0.2,
  ["FTT" /* FTT */]: 0.2,
  ["SRM" /* SRM */]: 0.2,
  ["USDT" /* USDT */]: 0.2,
  ["USDC" /* USDC */]: 0.2,
  ["UST" /* UST */]: 0.2,
  ["USTv2" /* USTv2 */]: 0.2,
  ["USDT_USDC_SABER" /* USDT_USDC_SABER */]: 0,
  ["mSOL_SOL_SABER" /* mSOL_SOL_SABER */]: 0,
  ["stSOL_SOL_SABER" /* stSOL_SOL_SABER */]: 0,
  ["USDC_USDT_ORCA" /* USDC_USDT_ORCA */]: 0.2,
  ["SOL_USDC_RAYDIUM" /* SOL_USDC_RAYDIUM */]: 0.2,
  ["RAY_USDC_RAYDIUM" /* RAY_USDC_RAYDIUM */]: 0.2,
  ["SOL_USDT_RAYDIUM" /* SOL_USDT_RAYDIUM */]: 0.2,
  ["SOL_USDC_ORCA" /* SOL_USDC_ORCA */]: 0.2,
  ["mSOL_SOL_ORCA" /* mSOL_SOL_ORCA */]: 0.2,
  ["ORCA_USDC_ORCA" /* ORCA_USDC_ORCA */]: 0.2,
  ["ORCA_SOL_ORCA" /* ORCA_SOL_ORCA */]: 0.2,
  ["ETH_USDC_ORCA" /* ETH_USDC_ORCA */]: 0.2,
  ["SOL_USDT_ORCA" /* SOL_USDT_ORCA */]: 0.2,
  ["mSOL_SOL_RAYDIUM" /* mSOL_SOL_RAYDIUM */]: 0,
  ["ETH_SOL_ORCA" /* ETH_SOL_ORCA */]: 0.2,
  ["BTC_mSOL_ORCA" /* BTC_mSOL_ORCA */]: 0.2,
  ["mSOL_USDC_ORCA" /* mSOL_USDC_ORCA */]: 0.2,
  ["USTv2_USDC_SABER" /* USTv2_USDC_SABER */]: 0.2,
  ["APT_USDC_ORCA" /* APT_USDC_ORCA */]: 0.2,
  ["RAY_USDT_RAYDIUM" /* RAY_USDT_RAYDIUM */]: 0.2,
  ["RAY_ETH_RAYDIUM" /* RAY_ETH_RAYDIUM */]: 0.2,
  ["RAY_SOL_RAYDIUM" /* RAY_SOL_RAYDIUM */]: 0.2,
  ["SRM_USDC_RAYDIUM" /* SRM_USDC_RAYDIUM */]: 0.2,
  ["stSOL_USTv2_ORCA" /* stSOL_USTv2_ORCA */]: 0.2,
  ["ORCA_whETH_ORCA" /* ORCA_whETH_ORCA */]: 0.2
};
var CATEGORY = {
  ["BTC" /* BTC */]: "volatile" /* Volatile */,
  ["ETH" /* ETH */]: "volatile" /* Volatile */,
  ["SOL" /* SOL */]: "volatile" /* Volatile */,
  ["mSOL" /* mSOL */]: "volatile" /* Volatile */,
  ["stSOL" /* stSOL */]: "volatile" /* Volatile */,
  ["whETH" /* whETH */]: "volatile" /* Volatile */,
  ["scnSOL" /* scnSOL */]: "volatile" /* Volatile */,
  ["APT" /* APT */]: "volatile" /* Volatile */,
  ["RAY" /* RAY */]: "volatile" /* Volatile */,
  ["ORCA" /* ORCA */]: "volatile" /* Volatile */,
  ["SBR" /* SBR */]: "volatile" /* Volatile */,
  ["MERC" /* MERC */]: "volatile" /* Volatile */,
  ["MNDE" /* MNDE */]: "volatile" /* Volatile */,
  ["FTT" /* FTT */]: "volatile" /* Volatile */,
  ["SRM" /* SRM */]: "volatile" /* Volatile */,
  ["wLDO" /* wLDO */]: "volatile" /* Volatile */,
  ["SOCN" /* SOCN */]: "volatile" /* Volatile */,
  ["wLUNA" /* wLUNA */]: "volatile" /* Volatile */,
  ["USDT" /* USDT */]: "stable" /* Stable */,
  ["USDC" /* USDC */]: "stable" /* Stable */,
  ["UST" /* UST */]: "stable" /* Stable */,
  ["USTv2" /* USTv2 */]: "stable" /* Stable */,
  ["USDT_USDC_SABER" /* USDT_USDC_SABER */]: "lp" /* Lp */,
  ["mSOL_SOL_SABER" /* mSOL_SOL_SABER */]: "lp" /* Lp */,
  ["stSOL_SOL_SABER" /* stSOL_SOL_SABER */]: "lp" /* Lp */,
  ["USDC_USDT_ORCA" /* USDC_USDT_ORCA */]: "lp" /* Lp */,
  ["UST_USDC_SABER" /* UST_USDC_SABER */]: "lp" /* Lp */,
  ["SOL_USDC_RAYDIUM" /* SOL_USDC_RAYDIUM */]: "lp" /* Lp */,
  ["RAY_USDC_RAYDIUM" /* RAY_USDC_RAYDIUM */]: "lp" /* Lp */,
  ["SOL_USDT_RAYDIUM" /* SOL_USDT_RAYDIUM */]: "lp" /* Lp */,
  ["SOL_USDC_ORCA" /* SOL_USDC_ORCA */]: "lp" /* Lp */,
  ["mSOL_SOL_ORCA" /* mSOL_SOL_ORCA */]: "lp" /* Lp */,
  ["ORCA_USDC_ORCA" /* ORCA_USDC_ORCA */]: "lp" /* Lp */,
  ["ORCA_SOL_ORCA" /* ORCA_SOL_ORCA */]: "lp" /* Lp */,
  ["ETH_USDC_ORCA" /* ETH_USDC_ORCA */]: "lp" /* Lp */,
  ["SOL_USDT_ORCA" /* SOL_USDT_ORCA */]: "lp" /* Lp */,
  ["mSOL_SOL_RAYDIUM" /* mSOL_SOL_RAYDIUM */]: "lp" /* Lp */,
  ["ETH_SOL_ORCA" /* ETH_SOL_ORCA */]: "lp" /* Lp */,
  ["BTC_mSOL_ORCA" /* BTC_mSOL_ORCA */]: "lp" /* Lp */,
  ["mSOL_USDC_ORCA" /* mSOL_USDC_ORCA */]: "lp" /* Lp */,
  ["USTv2_USDC_SABER" /* USTv2_USDC_SABER */]: "lp" /* Lp */,
  ["APT_USDC_ORCA" /* APT_USDC_ORCA */]: "lp" /* Lp */,
  ["RAY_USDT_RAYDIUM" /* RAY_USDT_RAYDIUM */]: "lp" /* Lp */,
  ["RAY_ETH_RAYDIUM" /* RAY_ETH_RAYDIUM */]: "lp" /* Lp */,
  ["RAY_SOL_RAYDIUM" /* RAY_SOL_RAYDIUM */]: "lp" /* Lp */,
  ["SRM_USDC_RAYDIUM" /* SRM_USDC_RAYDIUM */]: "lp" /* Lp */,
  ["stSOL_USTv2_ORCA" /* stSOL_USTv2_ORCA */]: "lp" /* Lp */,
  ["ORCA_whETH_ORCA" /* ORCA_whETH_ORCA */]: "lp" /* Lp */
};
var LIQUIDATION_DISCOUNT = {
  ["BTC" /* BTC */]: 0.04,
  ["ETH" /* ETH */]: 0.04,
  ["SOL" /* SOL */]: 0.04,
  ["mSOL" /* mSOL */]: 0.04,
  ["stSOL" /* stSOL */]: 0.04,
  ["whETH" /* whETH */]: 0.04,
  ["scnSOL" /* scnSOL */]: 0.04,
  ["RAY" /* RAY */]: 0.04,
  ["APT" /* APT */]: 0,
  ["ORCA" /* ORCA */]: 0.04,
  ["FTT" /* FTT */]: 0.04,
  ["SRM" /* SRM */]: 0.04,
  ["USDT" /* USDT */]: 0.04,
  ["USDC" /* USDC */]: 0.04,
  ["UST" /* UST */]: 0.04,
  ["USTv2" /* USTv2 */]: 0.04,
  ["USDT_USDC_SABER" /* USDT_USDC_SABER */]: 0,
  ["mSOL_SOL_SABER" /* mSOL_SOL_SABER */]: 0,
  ["stSOL_SOL_SABER" /* stSOL_SOL_SABER */]: 0,
  ["USDC_USDT_ORCA" /* USDC_USDT_ORCA */]: 0,
  ["UST_USDC_SABER" /* UST_USDC_SABER */]: 0,
  ["SOL_USDC_RAYDIUM" /* SOL_USDC_RAYDIUM */]: 0,
  ["RAY_USDC_RAYDIUM" /* RAY_USDC_RAYDIUM */]: 0,
  ["SOL_USDT_RAYDIUM" /* SOL_USDT_RAYDIUM */]: 0,
  ["SOL_USDC_ORCA" /* SOL_USDC_ORCA */]: 0,
  ["mSOL_SOL_ORCA" /* mSOL_SOL_ORCA */]: 0,
  ["ORCA_USDC_ORCA" /* ORCA_USDC_ORCA */]: 0,
  ["ORCA_SOL_ORCA" /* ORCA_SOL_ORCA */]: 0,
  ["ETH_USDC_ORCA" /* ETH_USDC_ORCA */]: 0,
  ["SOL_USDT_ORCA" /* SOL_USDT_ORCA */]: 0,
  ["mSOL_SOL_RAYDIUM" /* mSOL_SOL_RAYDIUM */]: 0,
  ["ETH_SOL_ORCA" /* ETH_SOL_ORCA */]: 0,
  ["BTC_mSOL_ORCA" /* BTC_mSOL_ORCA */]: 0,
  ["mSOL_USDC_ORCA" /* mSOL_USDC_ORCA */]: 0,
  ["USTv2_USDC_SABER" /* USTv2_USDC_SABER */]: 0,
  ["APT_USDC_ORCA" /* APT_USDC_ORCA */]: 0,
  ["RAY_USDT_RAYDIUM" /* RAY_USDT_RAYDIUM */]: 0,
  ["RAY_ETH_RAYDIUM" /* RAY_ETH_RAYDIUM */]: 0,
  ["RAY_SOL_RAYDIUM" /* RAY_SOL_RAYDIUM */]: 0,
  ["SRM_USDC_RAYDIUM" /* SRM_USDC_RAYDIUM */]: 0,
  ["stSOL_USTv2_ORCA" /* stSOL_USTv2_ORCA */]: 0,
  ["ORCA_whETH_ORCA" /* ORCA_whETH_ORCA */]: 0
};
var LP_TO_LR = {
  ["USDT_USDC_SABER" /* USDT_USDC_SABER */]: ["USDT" /* USDT */, "USDC" /* USDC */],
  ["mSOL_SOL_SABER" /* mSOL_SOL_SABER */]: ["mSOL" /* mSOL */, "SOL" /* SOL */],
  ["stSOL_SOL_SABER" /* stSOL_SOL_SABER */]: ["stSOL" /* stSOL */, "SOL" /* SOL */],
  ["USDC_USDT_ORCA" /* USDC_USDT_ORCA */]: ["USDC" /* USDC */, "USDT" /* USDT */],
  ["UST_USDC_SABER" /* UST_USDC_SABER */]: ["UST" /* UST */, "USDC" /* USDC */],
  ["SOL_USDC_RAYDIUM" /* SOL_USDC_RAYDIUM */]: ["SOL" /* SOL */, "USDC" /* USDC */],
  ["RAY_USDC_RAYDIUM" /* RAY_USDC_RAYDIUM */]: ["RAY" /* RAY */, "USDC" /* USDC */],
  ["SOL_USDT_RAYDIUM" /* SOL_USDT_RAYDIUM */]: ["SOL" /* SOL */, "USDT" /* USDT */],
  ["SOL_USDC_ORCA" /* SOL_USDC_ORCA */]: ["SOL" /* SOL */, "USDC" /* USDC */],
  ["mSOL_SOL_ORCA" /* mSOL_SOL_ORCA */]: ["mSOL" /* mSOL */, "SOL" /* SOL */],
  ["ORCA_USDC_ORCA" /* ORCA_USDC_ORCA */]: ["ORCA" /* ORCA */, "USDC" /* USDC */],
  ["ORCA_SOL_ORCA" /* ORCA_SOL_ORCA */]: ["ORCA" /* ORCA */, "SOL" /* SOL */],
  ["ETH_USDC_ORCA" /* ETH_USDC_ORCA */]: ["ETH" /* ETH */, "USDC" /* USDC */],
  ["SOL_USDT_ORCA" /* SOL_USDT_ORCA */]: ["SOL" /* SOL */, "USDT" /* USDT */],
  ["mSOL_SOL_RAYDIUM" /* mSOL_SOL_RAYDIUM */]: ["mSOL" /* mSOL */, "SOL" /* SOL */],
  ["ETH_SOL_ORCA" /* ETH_SOL_ORCA */]: ["ETH" /* ETH */, "SOL" /* SOL */],
  ["BTC_mSOL_ORCA" /* BTC_mSOL_ORCA */]: ["BTC" /* BTC */, "mSOL" /* mSOL */],
  ["mSOL_USDC_ORCA" /* mSOL_USDC_ORCA */]: ["mSOL" /* mSOL */, "USDC" /* USDC */],
  ["USTv2_USDC_SABER" /* USTv2_USDC_SABER */]: ["USTv2" /* USTv2 */, "USDC" /* USDC */],
  ["APT_USDC_ORCA" /* APT_USDC_ORCA */]: ["APT" /* APT */, "USDC" /* USDC */],
  ["RAY_USDT_RAYDIUM" /* RAY_USDT_RAYDIUM */]: ["RAY" /* RAY */, "USDT" /* USDT */],
  ["RAY_ETH_RAYDIUM" /* RAY_ETH_RAYDIUM */]: ["RAY" /* RAY */, "ETH" /* ETH */],
  ["RAY_SOL_RAYDIUM" /* RAY_SOL_RAYDIUM */]: ["RAY" /* RAY */, "SOL" /* SOL */],
  ["SRM_USDC_RAYDIUM" /* SRM_USDC_RAYDIUM */]: ["SRM" /* SRM */, "USDC" /* USDC */],
  ["stSOL_USTv2_ORCA" /* stSOL_USTv2_ORCA */]: ["stSOL" /* stSOL */, "USTv2" /* USTv2 */],
  ["ORCA_whETH_ORCA" /* ORCA_whETH_ORCA */]: ["ORCA" /* ORCA */, "whETH" /* whETH */]
};
var LP_TO_TARGET_SWAP = {
  ["USDT_USDC_SABER" /* USDT_USDC_SABER */]: SWAP_SABER,
  ["mSOL_SOL_SABER" /* mSOL_SOL_SABER */]: SWAP_SABER,
  ["stSOL_SOL_SABER" /* stSOL_SOL_SABER */]: SWAP_SABER,
  ["USDC_USDT_ORCA" /* USDC_USDT_ORCA */]: SWAP_ORCA,
  ["UST_USDC_SABER" /* UST_USDC_SABER */]: SWAP_SABER,
  ["SOL_USDC_RAYDIUM" /* SOL_USDC_RAYDIUM */]: SWAP_RAYDIUM,
  ["RAY_USDC_RAYDIUM" /* RAY_USDC_RAYDIUM */]: SWAP_RAYDIUM,
  ["SOL_USDT_RAYDIUM" /* SOL_USDT_RAYDIUM */]: SWAP_RAYDIUM,
  ["SOL_USDC_ORCA" /* SOL_USDC_ORCA */]: SWAP_ORCA,
  ["mSOL_SOL_ORCA" /* mSOL_SOL_ORCA */]: SWAP_ORCA,
  ["ORCA_USDC_ORCA" /* ORCA_USDC_ORCA */]: SWAP_ORCA,
  ["ORCA_SOL_ORCA" /* ORCA_SOL_ORCA */]: SWAP_ORCA,
  ["ETH_USDC_ORCA" /* ETH_USDC_ORCA */]: SWAP_ORCA,
  ["SOL_USDT_ORCA" /* SOL_USDT_ORCA */]: SWAP_ORCA,
  ["mSOL_SOL_RAYDIUM" /* mSOL_SOL_RAYDIUM */]: SWAP_RAYDIUM,
  ["ETH_SOL_ORCA" /* ETH_SOL_ORCA */]: SWAP_ORCA,
  ["BTC_mSOL_ORCA" /* BTC_mSOL_ORCA */]: SWAP_ORCA,
  ["mSOL_USDC_ORCA" /* mSOL_USDC_ORCA */]: SWAP_ORCA,
  ["USTv2_USDC_SABER" /* USTv2_USDC_SABER */]: SWAP_SABER,
  ["APT_USDC_ORCA" /* APT_USDC_ORCA */]: SWAP_ORCA,
  ["RAY_USDT_RAYDIUM" /* RAY_USDT_RAYDIUM */]: SWAP_RAYDIUM,
  ["RAY_ETH_RAYDIUM" /* RAY_ETH_RAYDIUM */]: SWAP_RAYDIUM,
  ["RAY_SOL_RAYDIUM" /* RAY_SOL_RAYDIUM */]: SWAP_RAYDIUM,
  ["SRM_USDC_RAYDIUM" /* SRM_USDC_RAYDIUM */]: SWAP_RAYDIUM,
  ["stSOL_USTv2_ORCA" /* stSOL_USTv2_ORCA */]: SWAP_ORCA,
  ["ORCA_whETH_ORCA" /* ORCA_whETH_ORCA */]: SWAP_ORCA
};
var LP_TO_DEX = {
  ["USDT_USDC_SABER" /* USDT_USDC_SABER */]: 2 /* Saber */,
  ["mSOL_SOL_SABER" /* mSOL_SOL_SABER */]: 2 /* Saber */,
  ["stSOL_SOL_SABER" /* stSOL_SOL_SABER */]: 2 /* Saber */,
  ["USDC_USDT_ORCA" /* USDC_USDT_ORCA */]: 4 /* Orca */,
  ["UST_USDC_SABER" /* UST_USDC_SABER */]: 2 /* Saber */,
  ["SOL_USDC_RAYDIUM" /* SOL_USDC_RAYDIUM */]: 1 /* Raydium */,
  ["RAY_USDC_RAYDIUM" /* RAY_USDC_RAYDIUM */]: 1 /* Raydium */,
  ["SOL_USDT_RAYDIUM" /* SOL_USDT_RAYDIUM */]: 1 /* Raydium */,
  ["SOL_USDC_ORCA" /* SOL_USDC_ORCA */]: 4 /* Orca */,
  ["mSOL_SOL_ORCA" /* mSOL_SOL_ORCA */]: 4 /* Orca */,
  ["ORCA_USDC_ORCA" /* ORCA_USDC_ORCA */]: 4 /* Orca */,
  ["ORCA_SOL_ORCA" /* ORCA_SOL_ORCA */]: 4 /* Orca */,
  ["ETH_USDC_ORCA" /* ETH_USDC_ORCA */]: 4 /* Orca */,
  ["SOL_USDT_ORCA" /* SOL_USDT_ORCA */]: 4 /* Orca */,
  ["mSOL_SOL_RAYDIUM" /* mSOL_SOL_RAYDIUM */]: 1 /* Raydium */,
  ["ETH_SOL_ORCA" /* ETH_SOL_ORCA */]: 4 /* Orca */,
  ["BTC_mSOL_ORCA" /* BTC_mSOL_ORCA */]: 4 /* Orca */,
  ["mSOL_USDC_ORCA" /* mSOL_USDC_ORCA */]: 4 /* Orca */,
  ["USTv2_USDC_SABER" /* USTv2_USDC_SABER */]: 2 /* Saber */,
  ["APT_USDC_ORCA" /* APT_USDC_ORCA */]: 4 /* Orca */,
  ["RAY_USDT_RAYDIUM" /* RAY_USDT_RAYDIUM */]: 1 /* Raydium */,
  ["RAY_ETH_RAYDIUM" /* RAY_ETH_RAYDIUM */]: 1 /* Raydium */,
  ["RAY_SOL_RAYDIUM" /* RAY_SOL_RAYDIUM */]: 1 /* Raydium */,
  ["SRM_USDC_RAYDIUM" /* SRM_USDC_RAYDIUM */]: 1 /* Raydium */,
  ["stSOL_USTv2_ORCA" /* stSOL_USTv2_ORCA */]: 4 /* Orca */,
  ["ORCA_whETH_ORCA" /* ORCA_whETH_ORCA */]: 4 /* Orca */
};
var LP_TO_NEED_2ND_STAKE = {
  ["USDT_USDC_SABER" /* USDT_USDC_SABER */]: false,
  ["mSOL_SOL_SABER" /* mSOL_SOL_SABER */]: false,
  ["stSOL_SOL_SABER" /* stSOL_SOL_SABER */]: false,
  ["USDC_USDT_ORCA" /* USDC_USDT_ORCA */]: false,
  ["UST_USDC_SABER" /* UST_USDC_SABER */]: false,
  ["SOL_USDC_RAYDIUM" /* SOL_USDC_RAYDIUM */]: true,
  ["RAY_USDC_RAYDIUM" /* RAY_USDC_RAYDIUM */]: true,
  ["SOL_USDT_RAYDIUM" /* SOL_USDT_RAYDIUM */]: true,
  ["SOL_USDC_ORCA" /* SOL_USDC_ORCA */]: false,
  ["mSOL_SOL_ORCA" /* mSOL_SOL_ORCA */]: true,
  ["ORCA_USDC_ORCA" /* ORCA_USDC_ORCA */]: false,
  ["ORCA_SOL_ORCA" /* ORCA_SOL_ORCA */]: false,
  ["ETH_USDC_ORCA" /* ETH_USDC_ORCA */]: false,
  ["SOL_USDT_ORCA" /* SOL_USDT_ORCA */]: false,
  ["mSOL_SOL_RAYDIUM" /* mSOL_SOL_RAYDIUM */]: false,
  ["ETH_SOL_ORCA" /* ETH_SOL_ORCA */]: false,
  ["BTC_mSOL_ORCA" /* BTC_mSOL_ORCA */]: true,
  ["mSOL_USDC_ORCA" /* mSOL_USDC_ORCA */]: true,
  ["USTv2_USDC_SABER" /* USTv2_USDC_SABER */]: false,
  ["APT_USDC_ORCA" /* APT_USDC_ORCA */]: false,
  ["RAY_USDT_RAYDIUM" /* RAY_USDT_RAYDIUM */]: true,
  ["RAY_ETH_RAYDIUM" /* RAY_ETH_RAYDIUM */]: true,
  ["RAY_SOL_RAYDIUM" /* RAY_SOL_RAYDIUM */]: true,
  ["SRM_USDC_RAYDIUM" /* SRM_USDC_RAYDIUM */]: true,
  ["stSOL_USTv2_ORCA" /* stSOL_USTv2_ORCA */]: false,
  ["ORCA_whETH_ORCA" /* ORCA_whETH_ORCA */]: false
};
var SWAP_METAS = {
  [SWAP_SABER]: {
    stake_program: new (0, _web3js.PublicKey)("QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB"),
    deposit_program: new (0, _web3js.PublicKey)("SSwpkEEcbUqx4vtoEByFjSkhKdCT862DNVb52nZg1UZ"),
    redeem_program: new (0, _web3js.PublicKey)("RDM23yr8pr1kEAmhnFpaabPny6C9UVcEcok3Py5v86X")
  },
  [SWAP_ORCA]: {
    depositProgramPubkey: new (0, _web3js.PublicKey)("9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP"),
    farmProgramPubkey: new (0, _web3js.PublicKey)("82yxjeMsvaURa4MbZZ7WZZHfobirZYkH1zF8fmeGtyaQ")
  },
  [SWAP_RAYDIUM]: {
    depositProgramPubkey: new (0, _web3js.PublicKey)("675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"),
    stakeProgramPubkey: new (0, _web3js.PublicKey)("EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q"),
    stakeProgramV5Pubkey: new (0, _web3js.PublicKey)("9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z")
  }
};
var isPublicOrAlpha = (ownerKey) => {
  const isPublic = ownerKey.toString() === "7Ne6h2w3LpTNTa7CNYcUs7UkjeJT3oW7jcrXWfVScTXW";
  const isAlpha = ownerKey.toString() === "GipxmFXdiJaSevu6StymY2aphKVxgYmAmf2dT3fTEASc";
  if (!isAlpha && !isPublic) {
    throw new Error(`Unknown ownerKey: ${ownerKey.toString()}`);
  }
  return { isPublic, isAlpha };
};
var DUAL_REWARD_CONFIGS = {
  ["mSOL" /* mSOL */]: { tokenId: "MNDE" /* MNDE */, multiplier: new (0, _decimaljs.Decimal)(0.195) },
  ["stSOL" /* stSOL */]: { tokenId: "wLDO" /* wLDO */, multiplier: new (0, _decimaljs.Decimal)(10 / 250) },
  ["scnSOL" /* scnSOL */]: { tokenId: "SOCN" /* SOCN */, multiplier: new (0, _decimaljs.Decimal)(65 / 125) },
  ["USTv2" /* USTv2 */]: { tokenId: "wLUNA" /* wLUNA */, multiplier: new (0, _decimaljs.Decimal)(1.1 / 250) }
};
var SaberLpSwapInfo = class {
  constructor(args) {
    this.swap = args.swap;
    this.swapAuthority = args.swapAuthority;
    this.tokenAVault = args.tokenAVault;
    this.tokenBVault = args.tokenBVault;
    this.tokenAfees = args.tokenAfees;
    this.tokenBfees = args.tokenBfees;
    this.quarry = args.quarry;
    this.rewarder = args.rewarder;
    this.mint = args.mint;
  }
  async getMinerKey(ownerKey) {
    const [key, bump] = await _web3js.PublicKey.findProgramAddress(
      [Buffer.from("Miner"), this.quarry.toBuffer(), ownerKey.toBuffer()],
      SWAP_METAS[SWAP_SABER].stake_program
    );
    return [key, bump];
  }
  async getMinerVault(ownerKey) {
    const [minerKey] = await this.getMinerKey(ownerKey);
    return await _spltoken.Token.getAssociatedTokenAddress(
      _spltoken.ASSOCIATED_TOKEN_PROGRAM_ID,
      _spltoken.TOKEN_PROGRAM_ID,
      this.mint,
      minerKey,
      true
    );
  }
  async getLpDepositKeys(_ownerKey) {
    const smeta = SWAP_METAS[SWAP_SABER];
    return [
      { pubkey: smeta.deposit_program, isSigner: false, isWritable: false },
      { pubkey: this.swap, isSigner: false, isWritable: false },
      { pubkey: this.swapAuthority, isSigner: false, isWritable: false },
      { pubkey: this.tokenAVault, isSigner: false, isWritable: true },
      { pubkey: this.tokenBVault, isSigner: false, isWritable: true },
      { pubkey: this.mint, isSigner: false, isWritable: true },
      { pubkey: _web3js.SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false }
    ];
  }
  async getLpWithdrawKeys() {
    const smeta = SWAP_METAS[SWAP_SABER];
    return [
      { pubkey: smeta.deposit_program, isSigner: false, isWritable: false },
      { pubkey: this.swap, isSigner: false, isWritable: false },
      { pubkey: this.swapAuthority, isSigner: false, isWritable: false },
      { pubkey: this.mint, isSigner: false, isWritable: true },
      { pubkey: this.tokenAVault, isSigner: false, isWritable: true },
      { pubkey: this.tokenBVault, isSigner: false, isWritable: true },
      { pubkey: this.tokenAfees, isSigner: false, isWritable: true },
      { pubkey: this.tokenBfees, isSigner: false, isWritable: true },
      { pubkey: _web3js.SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false }
    ];
  }
  async getLpStakeKeys(ownerKey) {
    const smeta = SWAP_METAS[SWAP_SABER];
    const [minerKey, _minerBump] = await this.getMinerKey(ownerKey);
    const minerVault = await this.getMinerVault(ownerKey);
    return [
      { pubkey: smeta.stake_program, isSigner: false, isWritable: false },
      { pubkey: minerKey, isSigner: false, isWritable: true },
      { pubkey: this.quarry, isSigner: false, isWritable: true },
      { pubkey: minerVault, isSigner: false, isWritable: true },
      { pubkey: _spltoken.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
      { pubkey: this.rewarder, isSigner: false, isWritable: false },
      { pubkey: _web3js.SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false }
    ];
  }
  getLRVaults() {
    const isUSDT_USDC = this.mint.toString() === MINTS.USDT_USDC_SABER.toString();
    if (isUSDT_USDC) {
      return [this.tokenBVault, this.tokenAVault];
    } else {
      return [this.tokenAVault, this.tokenBVault];
    }
  }
};
var OrcaLpSwapInfo = class {
  constructor(args) {
    this.isDoubleDipSupported = false;
    this.lpMintPubkey = args.lpMintPubkey;
    this.swapPubkey = args.swapPubkey;
    this.swapAuthority = args.swapAuthority;
    this.swapTokenAAccount = args.swapTokenAAccount;
    this.swapTokenBAccount = args.swapTokenBAccount;
    this.globalLpVault = args.globalLpVault;
    this.farmTokenMint = args.farmTokenMint;
    this.globalFarmState = args.globalFarmState;
    this.globalRewardTokenVault = args.globalRewardTokenVault;
    this.rewardTokenAuthority = args.rewardTokenAuthority;
    this.feeAccount = args.feeAccount;
    this.publicRewardTokAcc = args.publicRewardTokAcc;
    this.alphaRewardTokAcc = args.alphaRewardTokAcc;
    this.isDoubleDipSupported = !!args.isDoubleDipSupported;
    this.globalLp3Vault = args.globalLp3Vault;
    this.farmTokenLp3Mint = args.farmTokenLp3Mint;
    this.globalDoubleDipFarmState = args.globalDoubleDipFarmState;
    this.globalDoubleDipRewardTokenVault = args.globalDoubleDipRewardTokenVault;
    this.doubleDipRewardTokenAuthority = args.doubleDipRewardTokenAuthority;
    this.publicDoubleDipRewardAcc = args.publicDoubleDipRewardAcc;
    this.alphaDoubleDipRewardAcc = args.alphaDoubleDipRewardAcc;
    this.doubleDipRewardMint = args.doubleDipRewardMint;
    if (this.isDoubleDipSupported) {
      _tinyinvariant2.default.call(void 0, 
        this.globalLp3Vault && this.farmTokenLp3Mint && this.globalDoubleDipFarmState && this.globalDoubleDipRewardTokenVault && this.doubleDipRewardTokenAuthority && this.publicDoubleDipRewardAcc && this.alphaDoubleDipRewardAcc && this.doubleDipRewardMint
      );
    }
  }
  async getPdaKeys(ownerKey) {
    const smeta = SWAP_METAS[SWAP_ORCA];
    let pdaRewardTokenAccount;
    const { isPublic } = isPublicOrAlpha(ownerKey);
    if (isPublic) {
      pdaRewardTokenAccount = this.publicRewardTokAcc;
    } else {
      pdaRewardTokenAccount = this.alphaRewardTokAcc;
    }
    const pdaFarmTokenAccount = await getAssociatedTokenPubkey(ownerKey, this.farmTokenMint, true);
    const pdaFarmState = (await _web3js.PublicKey.findProgramAddress(
      [this.globalFarmState.toBuffer(), ownerKey.toBuffer(), _spltoken.TOKEN_PROGRAM_ID.toBuffer()],
      smeta.farmProgramPubkey
    ))[0];
    return {
      pdaFarmTokenAccount,
      pdaRewardTokenAccount,
      pdaFarmState
    };
  }
  async getPdaDoubleDipKeys(ownerKey) {
    if (!this.isDoubleDipSupported) {
      throw new Error("Double dip not supported for getting pda keys");
    }
    const smeta = SWAP_METAS[SWAP_ORCA];
    let pdaDoubleDipRewardTokenAccount;
    const { isPublic } = isPublicOrAlpha(ownerKey);
    if (isPublic) {
      pdaDoubleDipRewardTokenAccount = this.publicDoubleDipRewardAcc;
    } else {
      pdaDoubleDipRewardTokenAccount = this.alphaDoubleDipRewardAcc;
    }
    const pdaDoubleDipFarmTokenAccount = await getAssociatedTokenPubkey(
      ownerKey,
      this.farmTokenLp3Mint,
      true
    );
    const pdaDoubleDipFarmState = (await _web3js.PublicKey.findProgramAddress(
      [
        this.globalDoubleDipFarmState.toBuffer(),
        ownerKey.toBuffer(),
        _spltoken.TOKEN_PROGRAM_ID.toBuffer()
      ],
      smeta.farmProgramPubkey
    ))[0];
    return {
      pdaDoubleDipFarmTokenAccount,
      pdaDoubleDipRewardTokenAccount,
      pdaDoubleDipFarmState
    };
  }
  async getLpDepositKeys(_ownerKey) {
    const smeta = SWAP_METAS[SWAP_ORCA];
    return [
      { pubkey: smeta.depositProgramPubkey, isSigner: false, isWritable: false },
      { pubkey: this.swapPubkey, isSigner: false, isWritable: false },
      { pubkey: this.swapAuthority, isSigner: false, isWritable: false },
      { pubkey: this.swapTokenAAccount, isSigner: false, isWritable: true },
      { pubkey: this.swapTokenBAccount, isSigner: false, isWritable: true },
      { pubkey: this.lpMintPubkey, isSigner: false, isWritable: true }
    ];
  }
  async getLpWithdrawKeys(_ownerKey) {
    const smeta = SWAP_METAS[SWAP_ORCA];
    return [
      { pubkey: smeta.depositProgramPubkey, isSigner: false, isWritable: false },
      { pubkey: this.swapPubkey, isSigner: false, isWritable: false },
      { pubkey: this.swapAuthority, isSigner: false, isWritable: false },
      { pubkey: this.lpMintPubkey, isSigner: false, isWritable: true },
      { pubkey: this.swapTokenAAccount, isSigner: false, isWritable: true },
      { pubkey: this.swapTokenBAccount, isSigner: false, isWritable: true },
      { pubkey: this.feeAccount, isSigner: false, isWritable: true }
    ];
  }
  async getLpStakeKeys(ownerKey) {
    if (this.isDoubleDipSupported) {
      return [];
    }
    return await this.getFirstStakeKeys(ownerKey);
  }
  async getFirstStakeKeys(ownerKey) {
    const smeta = SWAP_METAS[SWAP_ORCA];
    const pdaKeys = await this.getPdaKeys(ownerKey);
    return [
      { pubkey: smeta.farmProgramPubkey, isSigner: false, isWritable: false },
      { pubkey: this.globalLpVault, isSigner: false, isWritable: true },
      { pubkey: this.farmTokenMint, isSigner: false, isWritable: true },
      { pubkey: pdaKeys.pdaFarmTokenAccount, isSigner: false, isWritable: true },
      { pubkey: this.globalFarmState, isSigner: false, isWritable: true },
      { pubkey: pdaKeys.pdaFarmState, isSigner: false, isWritable: true },
      { pubkey: this.globalRewardTokenVault, isSigner: false, isWritable: true },
      { pubkey: pdaKeys.pdaRewardTokenAccount, isSigner: false, isWritable: true },
      { pubkey: this.rewardTokenAuthority, isSigner: false, isWritable: false },
      { pubkey: _spltoken.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false }
    ];
  }
  async getSecondStakeKeys(ownerKey) {
    const smeta = SWAP_METAS[SWAP_ORCA];
    const pdaKeys = await this.getPdaDoubleDipKeys(ownerKey);
    return [
      { pubkey: smeta.farmProgramPubkey, isSigner: false, isWritable: false },
      { pubkey: this.globalLp3Vault, isSigner: false, isWritable: true },
      { pubkey: this.farmTokenLp3Mint, isSigner: false, isWritable: true },
      { pubkey: pdaKeys.pdaDoubleDipFarmTokenAccount, isSigner: false, isWritable: true },
      { pubkey: this.globalDoubleDipFarmState, isSigner: false, isWritable: true },
      { pubkey: pdaKeys.pdaDoubleDipFarmState, isSigner: false, isWritable: true },
      { pubkey: this.globalDoubleDipRewardTokenVault, isSigner: false, isWritable: true },
      { pubkey: pdaKeys.pdaDoubleDipRewardTokenAccount, isSigner: false, isWritable: true },
      { pubkey: this.doubleDipRewardTokenAuthority, isSigner: false, isWritable: false },
      { pubkey: _spltoken.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false }
    ];
  }
  getLRVaults() {
    return [this.swapTokenAAccount, this.swapTokenBAccount];
  }
};
var RaydiumLpSwapInfo = class {
  constructor(args) {
    this.lpMintPubkey = args.lpMintPubkey;
    this.ammIdPubkey = args.ammIdPubkey;
    this.ammAuthPubkey = args.ammAuthPubkey;
    this.ammOpenOrdersPubkey = args.ammOpenOrdersPubkey;
    this.ammTargetOrderPubkey = args.ammTargetOrderPubkey;
    this.poolCoinTokenPubkey = args.poolCoinTokenPubkey;
    this.poolPcTokenPubkey = args.poolPcTokenPubkey;
    this.poolWithdrawQueue = args.poolWithdrawQueue;
    this.poolTempLpTokenAccount = args.poolTempLpTokenAccount;
    this.serumProgramId = args.serumProgramId;
    this.serumMarketPubkey = args.serumMarketPubkey;
    this.serumCoinVaultAccount = args.serumCoinVaultAccount;
    this.serumPcVaultAccount = args.serumPcVaultAccount;
    this.serumVaultSigner = args.serumVaultSigner;
    this.rewardAccounts = args.rewardAccounts;
    this.stakeKeys = args.stakeKeys;
    this.stakeProgram = args.stakeProgram || SWAP_METAS[SWAP_RAYDIUM].stakeProgramV5Pubkey;
    this.serumEventQueueAccount = args.serumEventQueueAccount;
    this.serumBidsAccount = args.serumBidsAccount;
    this.serumAsksAccount = args.serumAsksAccount;
  }
  async getLpDepositKeys(_ownerKey) {
    const smeta = SWAP_METAS[SWAP_RAYDIUM];
    return [
      { pubkey: smeta.depositProgramPubkey, isSigner: false, isWritable: false },
      { pubkey: this.ammIdPubkey, isSigner: false, isWritable: true },
      { pubkey: this.ammAuthPubkey, isSigner: false, isWritable: false },
      { pubkey: this.ammOpenOrdersPubkey, isSigner: false, isWritable: false },
      { pubkey: this.ammTargetOrderPubkey, isSigner: false, isWritable: true },
      { pubkey: this.lpMintPubkey, isSigner: false, isWritable: true },
      { pubkey: this.poolCoinTokenPubkey, isSigner: false, isWritable: true },
      { pubkey: this.poolPcTokenPubkey, isSigner: false, isWritable: true },
      { pubkey: this.serumMarketPubkey, isSigner: false, isWritable: false }
    ];
  }
  async getLpWithdrawKeys(_ownerKey) {
    const smeta = SWAP_METAS[SWAP_RAYDIUM];
    return [
      { pubkey: smeta.depositProgramPubkey, isSigner: false, isWritable: false },
      { pubkey: this.ammIdPubkey, isSigner: false, isWritable: true },
      { pubkey: this.ammAuthPubkey, isSigner: false, isWritable: false },
      { pubkey: this.ammOpenOrdersPubkey, isSigner: false, isWritable: true },
      { pubkey: this.ammTargetOrderPubkey, isSigner: false, isWritable: true },
      { pubkey: this.lpMintPubkey, isSigner: false, isWritable: true },
      { pubkey: this.poolCoinTokenPubkey, isSigner: false, isWritable: true },
      { pubkey: this.poolPcTokenPubkey, isSigner: false, isWritable: true },
      { pubkey: this.poolWithdrawQueue, isSigner: false, isWritable: true },
      { pubkey: this.poolTempLpTokenAccount, isSigner: false, isWritable: true },
      { pubkey: this.serumProgramId, isSigner: false, isWritable: false },
      { pubkey: this.serumMarketPubkey, isSigner: false, isWritable: true },
      { pubkey: this.serumCoinVaultAccount, isSigner: false, isWritable: true },
      { pubkey: this.serumPcVaultAccount, isSigner: false, isWritable: true },
      { pubkey: this.serumVaultSigner, isSigner: false, isWritable: false },
      ...this.serumEventQueueAccount ? [
        { pubkey: this.serumEventQueueAccount, isSigner: false, isWritable: true },
        { pubkey: this.serumBidsAccount, isSigner: false, isWritable: true },
        { pubkey: this.serumAsksAccount, isSigner: false, isWritable: true }
      ] : []
    ];
  }
  async getLpStakeKeys(ownerKey) {
    if (!this.stakeKeys) {
      return [];
    } else {
      _tinyinvariant2.default.call(void 0, this.rewardAccounts);
      const stkeys = this.stakeKeys;
      const userLedger = await this.getAssociatedLedger(ownerKey);
      console.log(`user ledger: ${userLedger.toBase58()}`);
      const { isPublic } = isPublicOrAlpha(ownerKey);
      const userRewardFirstAccount = isPublic ? this.rewardAccounts[0].userRewardPublicAccountPubkey : this.rewardAccounts[0].userRewardAlphaAccountPubkey;
      const keys = [
        { pubkey: this.stakeProgram, isSigner: false, isWritable: false },
        { pubkey: stkeys.poolIdPubkey, isSigner: false, isWritable: true },
        { pubkey: stkeys.poolAuthorityPubkey, isSigner: false, isWritable: false },
        { pubkey: userLedger, isSigner: false, isWritable: true },
        { pubkey: stkeys.poolLPVault, isSigner: false, isWritable: true },
        { pubkey: userRewardFirstAccount, isSigner: false, isWritable: true },
        { pubkey: this.rewardAccounts[0].rewardVault, isSigner: false, isWritable: true },
        { pubkey: _web3js.SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },
        { pubkey: _spltoken.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false }
      ];
      if (this.rewardAccounts.length > 1) {
        for (let i = 1; i < this.rewardAccounts.length; i++) {
          const userRewardAccount = isPublic ? this.rewardAccounts[i].userRewardPublicAccountPubkey : this.rewardAccounts[i].userRewardAlphaAccountPubkey;
          keys.push(
            ...[
              { pubkey: userRewardAccount, isSigner: false, isWritable: true },
              { pubkey: this.rewardAccounts[i].rewardVault, isSigner: false, isWritable: true }
            ]
          );
        }
      }
      return keys;
    }
  }
  async getUserRewardAccountsToClaim(ownerKey) {
    const { isPublic } = isPublicOrAlpha(ownerKey);
    return this.rewardAccounts.reduce((pre, cur) => {
      pre[cur.rewardToken] = isPublic ? cur.userRewardPublicAccountPubkey : cur.userRewardAlphaAccountPubkey;
      return pre;
    }, {});
  }
  getLRVaults() {
    return [this.poolCoinTokenPubkey, this.poolPcTokenPubkey];
  }
  async getAssociatedLedger(owner) {
    const poolId = _optionalChain([this, 'access', _ => _.stakeKeys, 'optionalAccess', _2 => _2.poolIdPubkey]);
    _tinyinvariant2.default.call(void 0, poolId);
    const [publicKey] = await _web3js.PublicKey.findProgramAddress(
      [poolId.toBuffer(), owner.toBuffer(), Buffer.from("staker_info_v2_associated_seed", "utf-8")],
      this.stakeProgram
    );
    return publicKey;
  }
};
var SABER_LP_METAS = {
  ["USDT_USDC_SABER" /* USDT_USDC_SABER */]: new SaberLpSwapInfo({
    swap: new (0, _web3js.PublicKey)("YAkoNb6HKmSxQN9L8hiBE5tPJRsniSSMzND1boHmZxe"),
    swapAuthority: new (0, _web3js.PublicKey)("5C1k9yV7y4CjMnKv8eGYDgWND8P89Pdfj79Trk2qmfGo"),
    tokenAVault: new (0, _web3js.PublicKey)("CfWX7o2TswwbxusJ4hCaPobu2jLCb1hfXuXJQjVq3jQF"),
    tokenBVault: new (0, _web3js.PublicKey)("EnTrdMMpdhugeH6Ban6gYZWXughWxKtVGfCwFn78ZmY3"),
    tokenAfees: new (0, _web3js.PublicKey)("XZuQG7CQrAA6y6tHM9CLrDjDUWwuUU2SBoV7pLaGDQT"),
    tokenBfees: new (0, _web3js.PublicKey)("63aJYYuZddSnCGyE8FNrCVQWnXhjh6CQSRwcDeSMhdVC"),
    quarry: new (0, _web3js.PublicKey)("Hs1X5YtXwZACueUtS9azZyXFDWVxAMLvm3tttubpK7ph"),
    rewarder: new (0, _web3js.PublicKey)("rXhAofQCT7NN9TUqigyEAUzV1uLL4boeD8CRkNBSkYk"),
    mint: new (0, _web3js.PublicKey)(MINTS["USDT_USDC_SABER" /* USDT_USDC_SABER */])
  }),
  ["mSOL_SOL_SABER" /* mSOL_SOL_SABER */]: new SaberLpSwapInfo({
    swap: new (0, _web3js.PublicKey)("Lee1XZJfJ9Hm2K1qTyeCz1LXNc1YBZaKZszvNY4KCDw"),
    swapAuthority: new (0, _web3js.PublicKey)("2Sj4MZvmLhud4uRmGHJvDxq612nmF4JJsU1R4ZjNNGMS"),
    tokenAVault: new (0, _web3js.PublicKey)("9DgFSWkPDGijNKcLGbr3p5xoJbHsPgXUTr6QvGBJ5vGN"),
    tokenBVault: new (0, _web3js.PublicKey)("2hNHZg7XBhuhHVZ3JDEi4buq2fPQwuWBdQ9xkH7t1GQX"),
    tokenAfees: new (0, _web3js.PublicKey)("HzZRDMiJSqS5oxzfu17c35DChnkx58LZtas16Pgmuunn"),
    tokenBfees: new (0, _web3js.PublicKey)("3oebZVvPqba2egfdcbNXa1uS13SfSebxMaNVE82FMk7R"),
    quarry: new (0, _web3js.PublicKey)("7193EeecxsPPv9TMoQATTN8i1eTqEUSNU8aDLuFCQy68"),
    rewarder: new (0, _web3js.PublicKey)("rXhAofQCT7NN9TUqigyEAUzV1uLL4boeD8CRkNBSkYk"),
    mint: new (0, _web3js.PublicKey)(MINTS["mSOL_SOL_SABER" /* mSOL_SOL_SABER */])
  }),
  ["stSOL_SOL_SABER" /* stSOL_SOL_SABER */]: new SaberLpSwapInfo({
    swap: new (0, _web3js.PublicKey)("Lid8SLUxQ9RmF7XMqUA8c24RitTwzja8VSKngJxRcUa"),
    swapAuthority: new (0, _web3js.PublicKey)("8eyi347MTDeH5F6eVv2qjPxVnU685FFZLDGcj5QWHZ6y"),
    tokenAVault: new (0, _web3js.PublicKey)("4PgzyzLtds9bKZ2to9PMnKqJzKEUpjvNUaeN23phegax"),
    tokenBVault: new (0, _web3js.PublicKey)("AtymwxoVN9peZo7EXTcDz9jKVc4vRmisJKKrNfe3ewBa"),
    tokenAfees: new (0, _web3js.PublicKey)("2AbLYRQa7PV6gG6XgMjaey18RtPh85sXFmMmP4HsDdQK"),
    tokenBfees: new (0, _web3js.PublicKey)("Cv3YNq8iY1ttMS3iDgwBxd7QxnMC2pwcXUomtR7CTD8W"),
    quarry: new (0, _web3js.PublicKey)("2isVhcqVVpsAeZ94d1DGVErCQ7uZQNSJ85xikN8awHeC"),
    rewarder: new (0, _web3js.PublicKey)("rXhAofQCT7NN9TUqigyEAUzV1uLL4boeD8CRkNBSkYk"),
    mint: new (0, _web3js.PublicKey)(MINTS["stSOL_SOL_SABER" /* stSOL_SOL_SABER */])
  }),
  ["USTv2_USDC_SABER" /* USTv2_USDC_SABER */]: new SaberLpSwapInfo({
    swap: new (0, _web3js.PublicKey)("KwnjUuZhTMTSGAaavkLEmSyfobY16JNH4poL9oeeEvE"),
    swapAuthority: new (0, _web3js.PublicKey)("9osV5a7FXEjuMujxZJGBRXVAyQ5fJfBFNkyAf6fSz9kw"),
    tokenAVault: new (0, _web3js.PublicKey)("J63v6qEZmQpDqCD8bd4PXu2Pq5ZbyXrFcSa3Xt1HdAPQ"),
    tokenBVault: new (0, _web3js.PublicKey)("BnKQtTdLw9qPCDgZkWX3sURkBAoKCUYL1yahh6Mw7mRK"),
    tokenAfees: new (0, _web3js.PublicKey)("BYgyVxdrGa3XNj1cx1XHAVyRG8qYhBnv1DS59Bsvmg5h"),
    tokenBfees: new (0, _web3js.PublicKey)("G9nt2GazsDj3Ey3KdA49Sfaq9K95Dc72Ejps4NKTP2SR"),
    quarry: new (0, _web3js.PublicKey)("BYEUtsLjYAVHRiRR3Avjqnd2RQLRL8n933N52p9kSX2y"),
    rewarder: new (0, _web3js.PublicKey)("rXhAofQCT7NN9TUqigyEAUzV1uLL4boeD8CRkNBSkYk"),
    mint: new (0, _web3js.PublicKey)(MINTS["USTv2_USDC_SABER" /* USTv2_USDC_SABER */])
  })
};
var ORCA_LP_METAS = {
  ["USDC_USDT_ORCA" /* USDC_USDT_ORCA */]: new OrcaLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["USDC_USDT_ORCA" /* USDC_USDT_ORCA */]),
    swapPubkey: new (0, _web3js.PublicKey)("F13xvvx45jVGd84ynK3c8T89UejQVxjCLtmHfPmAXAHP"),
    swapAuthority: new (0, _web3js.PublicKey)("3cGHDS8uWhdxQj14vTmFtYHX3NMouPpE4o9MjQ43Bbf4"),
    swapTokenAAccount: new (0, _web3js.PublicKey)("6uUn2okWk5v4x9Gc4n2LLGHtWoa9tmizHq1363dW7t9W"),
    swapTokenBAccount: new (0, _web3js.PublicKey)("AiwmnLy7xPT28dqZpkRm6i1ZGwELUCzCsuN92v4JkSeU"),
    globalLpVault: new (0, _web3js.PublicKey)("9hPRfmQmZYiL4ZtuvGBk5SjMzmFCQ2h9a4GKoM82BR84"),
    farmTokenMint: new (0, _web3js.PublicKey)("GjpXgKwn4VW4J2pZdS3dovM58hiXWLJtopTfqG83zY2f"),
    globalFarmState: new (0, _web3js.PublicKey)("5psKJrxWnPmoAbCxk3An2CGh7wHAX2cWddf5vZuYbbVw"),
    globalRewardTokenVault: new (0, _web3js.PublicKey)("AYbtHmuJxXpo91m988UdyTtzC6J72WvMAW7XkXqFhAbz"),
    rewardTokenAuthority: new (0, _web3js.PublicKey)("5YGvg6mfuvJtHdVWDXTs4sYy6GwQAUduK8qurDcL111S"),
    feeAccount: new (0, _web3js.PublicKey)("B4RNxMJGRzKFQyTq2Uwkmpyjtew13n7KtdqZy6qgENTu"),
    publicRewardTokAcc: new (0, _web3js.PublicKey)("FSQWYCVXiGXRfKd1NmchusEa9wADez9eQGt5RY5eDjiy"),
    alphaRewardTokAcc: new (0, _web3js.PublicKey)("GUFm5nznu9B8Anfg3pZDxSofs8pUMjQZdVYnhbdvnkeV")
  }),
  ["SOL_USDC_ORCA" /* SOL_USDC_ORCA */]: new OrcaLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["SOL_USDC_ORCA" /* SOL_USDC_ORCA */]),
    swapPubkey: new (0, _web3js.PublicKey)("EGZ7tiLeH62TPV1gL8WwbXGzEPa9zmcpVnnkPKKnrE2U"),
    swapAuthority: new (0, _web3js.PublicKey)("JU8kmKzDHF9sXWsnoznaFDFezLsE5uomX2JkRMbmsQP"),
    swapTokenAAccount: new (0, _web3js.PublicKey)("ANP74VNsHwSrq9uUSjiSNyNWvf6ZPrKTmE4gHoNd13Lg"),
    swapTokenBAccount: new (0, _web3js.PublicKey)("75HgnSvXbWKZBpZHveX68ZzAhDqMzNDS29X6BGLtxMo1"),
    globalLpVault: new (0, _web3js.PublicKey)("7ipefo5V3QEJWeuT2PohFSEUaranZxMSeWQo2rcNigr3"),
    farmTokenMint: new (0, _web3js.PublicKey)("FFdjrSvNALfdgxANNpt3x85WpeVMdQSH5SEP2poM8fcK"),
    globalFarmState: new (0, _web3js.PublicKey)("85HrPbJtrN82aeB74WTwoFxcNgmf5aDNP2ENngbDpd5G"),
    globalRewardTokenVault: new (0, _web3js.PublicKey)("kjjFC8RAF7GuBQ9iYgyTcPmvsRafJ2Ec2AmoS6DjakJ"),
    rewardTokenAuthority: new (0, _web3js.PublicKey)("MDcWkwPqr5HrA91g4GGax7bVP1NDDetnR12nGhoAdYj"),
    feeAccount: new (0, _web3js.PublicKey)("8JnSiuvQq3BVuCU3n4DrSTw9chBSPvEMswrhtifVkr1o"),
    publicRewardTokAcc: new (0, _web3js.PublicKey)("Hr5yQGW35HBP8fJLKfranRbbKzfSPHrhKFf1ZP68LmVp"),
    alphaRewardTokAcc: new (0, _web3js.PublicKey)("85hb3QUq7M8W3dMxCdxQ9vnezV7fRPBUGbq24XTEaLcg")
  }),
  ["mSOL_SOL_ORCA" /* mSOL_SOL_ORCA */]: new OrcaLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["mSOL_SOL_ORCA" /* mSOL_SOL_ORCA */]),
    swapPubkey: new (0, _web3js.PublicKey)("9EQMEzJdE2LDAY1hw1RytpufdwAXzatYfQ3M2UuT9b88"),
    swapAuthority: new (0, _web3js.PublicKey)("6cwehd4xhKkJ2s7iGh4CaDb7KhMgqczSBnyNJieUYbHn"),
    swapTokenAAccount: new (0, _web3js.PublicKey)("6xmki5RtGNHrfhTiHFfp9k3RQ9t8qgL1cYP2YCG2h179"),
    swapTokenBAccount: new (0, _web3js.PublicKey)("Ew2coQtVGLeca31vqB2ssHntjzZgUy1ad9VuuAX8yw7p"),
    globalLpVault: new (0, _web3js.PublicKey)("DuTZUmTRydVc3EN78brdYFUfskn6s93zH4WhY3Fo53AJ"),
    farmTokenMint: new (0, _web3js.PublicKey)("3RTGL7gPF4V1ns1AeGFApT7cBEGVDfmJ77DqQi9AC6uG"),
    globalFarmState: new (0, _web3js.PublicKey)("JADWjBW1Xs8WhW8kj3GTCRQn3LR4gwvbFTEMwv9ZNxQh"),
    globalRewardTokenVault: new (0, _web3js.PublicKey)("7dpUACKvEiuq5kyoGtgiA131hYwdxfFhEeD5TMT4mnzG"),
    rewardTokenAuthority: new (0, _web3js.PublicKey)("CtXKDXJ4wzgto48QQFANestEgtov5dJRrs9qpRw7BV1h"),
    feeAccount: new (0, _web3js.PublicKey)("6j2tt2UVYMQwqG3hRtyydW3odzBFwy3pN33tyB3xCKQ6"),
    publicRewardTokAcc: new (0, _web3js.PublicKey)("CA59mFikUhJYLesKAxx8j8unHrxTfXSEPjzoXFyrG9M1"),
    alphaRewardTokAcc: new (0, _web3js.PublicKey)("3XNau9dqDSjAARS3cvTjzUv2nRU2FEzaGJd31f6NApUU"),
    isDoubleDipSupported: LP_TO_NEED_2ND_STAKE["mSOL_SOL_ORCA" /* mSOL_SOL_ORCA */],
    globalLp3Vault: new (0, _web3js.PublicKey)("AEZpFdJ5hA7MwVS7AReBbS9pMhoYRhLXgDyc1GWbSoXc"),
    farmTokenLp3Mint: new (0, _web3js.PublicKey)("576ABEdvLG1iFU3bLC8AMJ3mo5LhfgPPhMtTeVAGG6u7"),
    globalDoubleDipFarmState: new (0, _web3js.PublicKey)("2SciNw7cEsKJc1PMRDzWCcEzvuScmEaUgmrJXCi9UFxY"),
    globalDoubleDipRewardTokenVault: new (0, _web3js.PublicKey)("DCHpFt1bCk9mTudj6VsKbADvUPT3tAJvJ2rcBZQry8Wz"),
    doubleDipRewardTokenAuthority: new (0, _web3js.PublicKey)("5uk8F4MaFSu1pF9Q7k8xcyWgqyo9q2dqr3Kb4Esvd1n3"),
    publicDoubleDipRewardAcc: new (0, _web3js.PublicKey)("5U5uowAVYyggB6DvVZE12cLZE7EjxkdKGt8VpvbsNbAy"),
    alphaDoubleDipRewardAcc: new (0, _web3js.PublicKey)("GfSzQknESVecnF5z9G1gpEtcaxZkcT742uUdbhJoU5Ap"),
    doubleDipRewardMint: new (0, _web3js.PublicKey)("MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey")
  }),
  ["ORCA_USDC_ORCA" /* ORCA_USDC_ORCA */]: new OrcaLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["ORCA_USDC_ORCA" /* ORCA_USDC_ORCA */]),
    swapPubkey: new (0, _web3js.PublicKey)("2p7nYbtPBgtmY69NsE8DAW6szpRJn7tQvDnqvoEWQvjY"),
    swapAuthority: new (0, _web3js.PublicKey)("3fr1AhdiAmWLeNrS24CMoAu9pPgbzVhwLtJ6QUPmw2ob"),
    swapTokenAAccount: new (0, _web3js.PublicKey)("9vYWHBPz817wJdQpE8u3h8UoY3sZ16ZXdCcvLB7jY4Dj"),
    swapTokenBAccount: new (0, _web3js.PublicKey)("6UczejMUv1tzdvUzKpULKHxrK9sqLm8edR1v9jinVWm9"),
    globalLpVault: new (0, _web3js.PublicKey)("45BAAQCZYd2kP3Z3WvRwdtfUhvuW4FvpqVK4m8qrR5x1"),
    farmTokenMint: new (0, _web3js.PublicKey)("Gc7W5U66iuHQcC1cQyeX9hxkPF2QUVJPTf1NWbW8fNrt"),
    globalFarmState: new (0, _web3js.PublicKey)("9S1BsxbDNQXQccjFamVEGgxiYQHTeudvhEYwFr4oWeaf"),
    globalRewardTokenVault: new (0, _web3js.PublicKey)("DEiqe2Ta9TRMRtWdBqiFV13dhVrqCeG8MMmVwywvXvJo"),
    rewardTokenAuthority: new (0, _web3js.PublicKey)("66xaEjFoYfRcspc18oDj61mXDyznr9zam6tFNeqvs2jK"),
    feeAccount: new (0, _web3js.PublicKey)("7CXZED4jfRp3qdHB9Py3up6v1C4UhHofFvfT6RXbJLRN"),
    publicRewardTokAcc: new (0, _web3js.PublicKey)("G8cPgn6tiQQAQcTQupEi8fTBfo1RpqTii1hW65L4poTY"),
    alphaRewardTokAcc: new (0, _web3js.PublicKey)("8fFHftEm6PJBahCQukV6J27b7xzDeVPFdedjV1f4T36x")
  }),
  ["ORCA_SOL_ORCA" /* ORCA_SOL_ORCA */]: new OrcaLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["ORCA_SOL_ORCA" /* ORCA_SOL_ORCA */]),
    swapPubkey: new (0, _web3js.PublicKey)("2ZnVuidTHpi5WWKUwFXauYGhvdT9jRKYv5MDahtbwtYr"),
    swapAuthority: new (0, _web3js.PublicKey)("2PH1quJj9MHQXATCmNZ6qQ2gZqM8R236DpKaz99ggVpm"),
    swapTokenAAccount: new (0, _web3js.PublicKey)("AioST8HKQJRqjE1mknk4Rydc8wVADhdQwRJmAAYX1T6Z"),
    swapTokenBAccount: new (0, _web3js.PublicKey)("73zdy95DynZP4exdpuXTDsexcrWbDJX9TFi2E6CDzXh4"),
    globalLpVault: new (0, _web3js.PublicKey)("7N7zxoDMMV1sCDiVEzinTyQxS2GoN388QprMCQX38BeT"),
    farmTokenMint: new (0, _web3js.PublicKey)("B5waaKnsmtqFawPspUwcuy1cRjAC7u2LrHSwxPSxK4sZ"),
    globalFarmState: new (0, _web3js.PublicKey)("F6pi7SyXWx56fP96mYQ4Yfh4yZ7oGNtDjwSYHT5Mz7Ld"),
    globalRewardTokenVault: new (0, _web3js.PublicKey)("CSbYA7Cd65Vis2oqX797zmnWmpgENmqrPdmPbTbRPykd"),
    rewardTokenAuthority: new (0, _web3js.PublicKey)("98RAHBKRTTC87nNwug1GEAnLVgouk9nRaa3u14jrp6Zz"),
    feeAccount: new (0, _web3js.PublicKey)("4Zc4kQZhRQeGztihvcGSWezJE1k44kKEgPCAkdeBfras"),
    publicRewardTokAcc: new (0, _web3js.PublicKey)("2G7ZWG9z6WtKJ5k5B32RTmLFB7hLVEnC5RmYD7gvCpG3"),
    alphaRewardTokAcc: new (0, _web3js.PublicKey)("8htfap3Gej5t4araQRHioggu2acsG3tQAc38PMtBhBhD")
  }),
  ["ETH_USDC_ORCA" /* ETH_USDC_ORCA */]: new OrcaLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["ETH_USDC_ORCA" /* ETH_USDC_ORCA */]),
    swapPubkey: new (0, _web3js.PublicKey)("FgZut2qVQEyPBibaTJbbX2PxaMZvT1vjDebiVaDp5BWP"),
    swapAuthority: new (0, _web3js.PublicKey)("4dfCZR32xXhoTgMRhnViNaTFwiKP9A34TDjHCR3xM5rg"),
    swapTokenAAccount: new (0, _web3js.PublicKey)("H9h5yTBfCHcb4eRP87fXczzXgNaMzKihr7bf1sjw7iuZ"),
    swapTokenBAccount: new (0, _web3js.PublicKey)("JA98RXv2VdxQD8pRQq4dzJ1Bp4nH8nokCGmxvPWKJ3hx"),
    globalLpVault: new (0, _web3js.PublicKey)("6zoYTvgLd4UAhKSPwirEU9VNNNkpezwq8AM4jXW1Qop9"),
    farmTokenMint: new (0, _web3js.PublicKey)("HDP2AYFmvLz6sWpoSuNS62JjvW4HjMKp7doXucqpWN56"),
    globalFarmState: new (0, _web3js.PublicKey)("FpezTR76RRjgpBb9HhR6ap8BgQfkHyNMQSqJDcoXpjAb"),
    globalRewardTokenVault: new (0, _web3js.PublicKey)("9MWJmWVAGQ9C9SxwWKidStAA8HjDHpnZ7KfKgVJdrNtj"),
    rewardTokenAuthority: new (0, _web3js.PublicKey)("DFTLJrgsn7cLNX9hbqiUwM8C1y6f7AfyvEmbsFSkjQNR"),
    feeAccount: new (0, _web3js.PublicKey)("DLWewB12jzGn4wXJmFCddWDeof1Ma4cZYNRv9CP5hTvX"),
    publicRewardTokAcc: new (0, _web3js.PublicKey)("CtVJtQHSAcSQ3b4FD3A3Zk8vb2PaC4wn1oTnHtUMS8rf"),
    alphaRewardTokAcc: new (0, _web3js.PublicKey)("BSpFLmCAzJp5XMSfVXC2rq4LjJ2NSs2jqFS8agcENAkH")
  }),
  ["SOL_USDT_ORCA" /* SOL_USDT_ORCA */]: new OrcaLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["SOL_USDT_ORCA" /* SOL_USDT_ORCA */]),
    swapPubkey: new (0, _web3js.PublicKey)("Dqk7mHQBx2ZWExmyrR2S8X6UG75CrbbpK2FSBZsNYsw6"),
    swapAuthority: new (0, _web3js.PublicKey)("2sxKY7hxVFrY5oNE2DgaPAJFamMzsmFLM2DgVcjK5yTy"),
    swapTokenAAccount: new (0, _web3js.PublicKey)("DTb8NKsfhEJGY1TrA7RXN6MBiTrjnkdMAfjPEjtmTT3M"),
    swapTokenBAccount: new (0, _web3js.PublicKey)("E8erPjPEorykpPjFV9yUYMYigEWKQUxuGfL2rJKLJ3KU"),
    globalLpVault: new (0, _web3js.PublicKey)("EXxH5tKDHLy68nWXS8w1BRUsiDEHMbKACLUmFWv8Q9tu"),
    farmTokenMint: new (0, _web3js.PublicKey)("71vZ7Jvu8fTyFzpX399dmoSovoz24rVbipLrRn2wBNzW"),
    globalFarmState: new (0, _web3js.PublicKey)("4RRRJkscV2DmwJUxTQgRdYock75GfwYJn7LTxy9rGTmY"),
    globalRewardTokenVault: new (0, _web3js.PublicKey)("H3ozvCeEwnsqnM2naCnXVxLLwH2XPC5kU8BH97XDpDwS"),
    rewardTokenAuthority: new (0, _web3js.PublicKey)("EavNUagNtD7DEdV4atcm3dEBXafARKCNJyNkyfz426m6"),
    feeAccount: new (0, _web3js.PublicKey)("BBKgw75FivTYXj85D2AWyVdaTdTWuSuHVXRm1Xu7fipb"),
    publicRewardTokAcc: new (0, _web3js.PublicKey)("9AfsnfPwRrJLjcCAasUcaYeVunpmxgev6yCVa6HiLkp7"),
    alphaRewardTokAcc: new (0, _web3js.PublicKey)("93xUo4bmSXdGxCNSDvk2xYH7YAY6KqDZ4mPMbwBuiyfm")
  }),
  ["ETH_SOL_ORCA" /* ETH_SOL_ORCA */]: new OrcaLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["ETH_SOL_ORCA" /* ETH_SOL_ORCA */]),
    swapPubkey: new (0, _web3js.PublicKey)("EuK3xDa4rWuHeMQCBsHf1ETZNiEQb5C476oE9u9kp8Ji"),
    swapAuthority: new (0, _web3js.PublicKey)("DffrDbzPiswDJaiicBBo9CjqztKgFLrqXGwNJH4XQefZ"),
    swapTokenAAccount: new (0, _web3js.PublicKey)("7F2cLdio3i6CCJaypj9VfNDPW2DwT3vkDmZJDEfmxu6A"),
    swapTokenBAccount: new (0, _web3js.PublicKey)("5pUTGvN2AA2BEzBDU4CNDh3LHER15WS6J8oJf5XeZFD8"),
    globalLpVault: new (0, _web3js.PublicKey)("6ckhPnn6tCr88aq9SxhWaAA5G7izuXNKhVk1Xa62zhFD"),
    farmTokenMint: new (0, _web3js.PublicKey)("CGFTRh4jKLPbS9r4hZtbDfaRuC7qcA8rZpbLnVTzJBer"),
    globalFarmState: new (0, _web3js.PublicKey)("3ARgavt1NhqLmJWj3wAJy6XBarG6pJbEKRv1wzzRbbaN"),
    globalRewardTokenVault: new (0, _web3js.PublicKey)("FYTTVMqWPzbnhTsukgiWmPiNJam4yLTxHM9mpzdan2zo"),
    rewardTokenAuthority: new (0, _web3js.PublicKey)("HXY2Vvj2XyqiPNXV3PhM9YYKgfjqzXUX4tUFRnvqihdY"),
    feeAccount: new (0, _web3js.PublicKey)("unxKgWEc71ZiHwMqZs3VLqjcjmZhfTZEg94ZLGvjdMP"),
    publicRewardTokAcc: new (0, _web3js.PublicKey)("2NYnAKhCwCMoe5unHuaEQEYL1ugLypK8Hrx4Qp5ugSUf"),
    alphaRewardTokAcc: new (0, _web3js.PublicKey)("6uupGx988A2yiPEhZEayNSewkp45owfbQVrJcbcKoiC6")
  }),
  ["BTC_mSOL_ORCA" /* BTC_mSOL_ORCA */]: new OrcaLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["BTC_mSOL_ORCA" /* BTC_mSOL_ORCA */]),
    swapPubkey: new (0, _web3js.PublicKey)("8DRw5wQE1pyg6RB1UwypGNFgb2Pzp2hpyDDNwo76Lcc8"),
    swapAuthority: new (0, _web3js.PublicKey)("3X1aLdyvcQNc8TvBMPiucMsRCnGMBnGsjJHpZEyCf3pn"),
    swapTokenAAccount: new (0, _web3js.PublicKey)("6D3sxC6yEe84FUnF5Kpbgx6gN57N9poJCKAtrCeCWdJo"),
    swapTokenBAccount: new (0, _web3js.PublicKey)("EPoVJLhi9QtVPVo8n31M5k5Knvb48j8zbYyRrUbrHwC5"),
    globalLpVault: new (0, _web3js.PublicKey)("75gpvckCXk49zTUwG8QrzUSP4NpWh3JXdyELBrnAhimL"),
    farmTokenMint: new (0, _web3js.PublicKey)("DzpLz78wuwyFsQToin8iDv6YK6aBEymRqQq82swiFh7r"),
    globalFarmState: new (0, _web3js.PublicKey)("GBrpFtiTabs14mc4Hi1RX9YiQY7res6JxrVfMTADfcQV"),
    globalRewardTokenVault: new (0, _web3js.PublicKey)("CNe5S831UP4YkumU7UsusTkf7uxJnAVdmPe6jhF51k4y"),
    rewardTokenAuthority: new (0, _web3js.PublicKey)("8sVCTztvytajkdczYEZVkSmuoRLjnMezwpT46L5w4RWR"),
    feeAccount: new (0, _web3js.PublicKey)("AqiLHbUAy4UWWKGVVgbHsaUVCMg1zemNkgsYBPSirT92"),
    publicRewardTokAcc: new (0, _web3js.PublicKey)("7Sfy525w1dpCQqXb2sEKuacV57333VCSCKGuubsxXvCc"),
    alphaRewardTokAcc: new (0, _web3js.PublicKey)("Bag2RfLUzSXYbnsnVAFeYYzfG6M4EGseUJsmJnC64Vrn"),
    isDoubleDipSupported: LP_TO_NEED_2ND_STAKE["BTC_mSOL_ORCA" /* BTC_mSOL_ORCA */],
    globalLp3Vault: new (0, _web3js.PublicKey)("DuyHVLzsqg6SZeFNbpUWfJf67kvAXPWUdUGJYWJK5vTu"),
    farmTokenLp3Mint: new (0, _web3js.PublicKey)("6uA1ADUJbvwYJZpzUn9z9LuyKoRVngBKcQTKdXsSivA8"),
    globalDoubleDipFarmState: new (0, _web3js.PublicKey)("Cn7QNyosNQ8DyKEeMDPmtg66R7vKMXigcQ561kTkFD8E"),
    globalDoubleDipRewardTokenVault: new (0, _web3js.PublicKey)("Ea3FYh9RMJxwsyu3xS7BesLMtpX32DURohiEigG2iJCx"),
    doubleDipRewardTokenAuthority: new (0, _web3js.PublicKey)("9Lg5wBjcYDgY8S2ZAEqjtXAQ4UdHuw65aP1WmmWss4QX"),
    doubleDipRewardMint: new (0, _web3js.PublicKey)("MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey"),
    alphaDoubleDipRewardAcc: new (0, _web3js.PublicKey)("J5cxhkPf25Ff4NT7WfWhLQzp58dksfhBT1vqprxBY7D3"),
    publicDoubleDipRewardAcc: new (0, _web3js.PublicKey)("AoeNmMDdDBS7xyvXjtG79pCa8Duf4qFALs4KY49okdx2")
  }),
  ["mSOL_USDC_ORCA" /* mSOL_USDC_ORCA */]: new OrcaLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["mSOL_USDC_ORCA" /* mSOL_USDC_ORCA */]),
    swapPubkey: new (0, _web3js.PublicKey)("Hme4Jnqhdz2jAPUMnS7jGE5zv6Y1ynqrUEhmUAWkXmzn"),
    swapAuthority: new (0, _web3js.PublicKey)("9Z7E42k46kxnBjAh8YGXDw3rRGwwxQUBYM7Ccrmwg6ZP"),
    swapTokenAAccount: new (0, _web3js.PublicKey)("GBa7G5f1FqAXEgByuHXsqsEdpyMjRgT9SNxZwmmnEJAY"),
    swapTokenBAccount: new (0, _web3js.PublicKey)("7hFgNawzzmpDM8TTVCKm8jykBrym8C3TQdb8TDAfAVkD"),
    globalLpVault: new (0, _web3js.PublicKey)("8F6NCo1PiakW7m3eeEZvdxsjXF5bkLD3QZsTxaNg9jvv"),
    farmTokenMint: new (0, _web3js.PublicKey)("5r3vDsNTGXXb9cGQfqyNuYD2bjhRPymGJBfDmKosR9Ev"),
    globalFarmState: new (0, _web3js.PublicKey)("EvtMzreDMq1U8ytV5fEmfoWNfPhrjZ87za835GuRvZCc"),
    globalRewardTokenVault: new (0, _web3js.PublicKey)("A1enLcj9XmuVeYCQScEruwnfAz7ksQhbuGFUgvgeS1a6"),
    rewardTokenAuthority: new (0, _web3js.PublicKey)("9czgZkSxLFtxmvWSb1PEHmUyBuNpAUxj9XAcHKikYnzt"),
    feeAccount: new (0, _web3js.PublicKey)("3W3Skj2vQsNEMhGRQprFXQy3Q8ZbM6ojdgiDCokVPWno"),
    publicRewardTokAcc: new (0, _web3js.PublicKey)("B16JMAgpR84Dr6rucq4GYLZV7pdk1uPF533P9KVwNUq4"),
    alphaRewardTokAcc: new (0, _web3js.PublicKey)("C7L8DS3ytgueAkcFojeshc2SEtePDPDXjv6gajyinGyL"),
    isDoubleDipSupported: LP_TO_NEED_2ND_STAKE["mSOL_USDC_ORCA" /* mSOL_USDC_ORCA */],
    globalLp3Vault: new (0, _web3js.PublicKey)("CdbgqE5B9oADrSAWc51Mgw6c3B6nvYJ4c431rftpoVqZ"),
    farmTokenLp3Mint: new (0, _web3js.PublicKey)("9y3QYM5mcaB8tU7oXRzAQnzHVa75P8riDuPievLp64cY"),
    globalDoubleDipFarmState: new (0, _web3js.PublicKey)("5fhDMuGKRDPWVWXf7BBEwifRFrp6XwXctDQoG7UHGVt6"),
    globalDoubleDipRewardTokenVault: new (0, _web3js.PublicKey)("XbkV9HZpLdv3CjMUfoq4t8nkxR6UguHb4oP8aAKBGV2"),
    doubleDipRewardTokenAuthority: new (0, _web3js.PublicKey)("FvXa954NiCqE2jAthxV5oVcuuPAJCggwYtAihYDRhVUw"),
    doubleDipRewardMint: new (0, _web3js.PublicKey)("MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey"),
    alphaDoubleDipRewardAcc: new (0, _web3js.PublicKey)("H6pK9gb58SxvyCRZzgCj4kuX758sjYAcqPJpY1aBJzLv"),
    publicDoubleDipRewardAcc: new (0, _web3js.PublicKey)("3QaNhP4vT6PG3eoQwg2DRbH9ecmy7pR2f1PBPWCwDBYd")
  }),
  ["APT_USDC_ORCA" /* APT_USDC_ORCA */]: new OrcaLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["APT_USDC_ORCA" /* APT_USDC_ORCA */]),
    swapPubkey: new (0, _web3js.PublicKey)("Fg3UabVqnfycMtkiTVoaia9eNafehtT9Y4TicH2iBtvK"),
    swapAuthority: new (0, _web3js.PublicKey)("JDEYn1JsacdxoB4v4mbctFSVrSUPttacX3gxWphFHJKZ"),
    swapTokenAAccount: new (0, _web3js.PublicKey)("636crNdZTf46gFUKuedaBCZDBMLahf7KGud2LyTMskU5"),
    swapTokenBAccount: new (0, _web3js.PublicKey)("DGEYFkEHyiuHWtHeCGiQGn1JbkGHqYrNwaP44miRbgxu"),
    globalLpVault: new (0, _web3js.PublicKey)("Ha7NSMkfjQt2pWF8JY5p89T38NpKdm5da4FR3sYednin"),
    farmTokenMint: new (0, _web3js.PublicKey)("Dx7DYSuaBufhXyQG7155ePkLmHyn6w7WeKKtQB9zscZV"),
    globalFarmState: new (0, _web3js.PublicKey)("3YZ5GYL625vWibn7d8hMdrMBawy9HGUyeTe4AoXoME1Q"),
    globalRewardTokenVault: new (0, _web3js.PublicKey)("HyCJbQkccvMwC5FHAYBMjQCKXEjDo9fbhBa5pj8sc2v5"),
    rewardTokenAuthority: new (0, _web3js.PublicKey)("53y344S5Cv32ViwajrHxnsgcmam7Mw2nydcRgJEkqdGd"),
    feeAccount: new (0, _web3js.PublicKey)("41H5mWwsZKewJeV4wWiNjQ3U4VYBnwqCpzvAWt86baHd"),
    publicRewardTokAcc: new (0, _web3js.PublicKey)("EgFva9mEFCV31AkhoZb6rN6zvbNGE1xdaRYAkKTtdNjN"),
    alphaRewardTokAcc: new (0, _web3js.PublicKey)("Cd5ijQFj1V7V5VwuoSkG6pEaPyeX2D9ZmqS7pE1RVdFX")
  }),
  ["stSOL_USTv2_ORCA" /* stSOL_USTv2_ORCA */]: new OrcaLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["stSOL_USTv2_ORCA" /* stSOL_USTv2_ORCA */]),
    swapPubkey: new (0, _web3js.PublicKey)("9F3J6RY7PTkDb3SUUpg725uXyCceBGCpZrtmYGJwgMwF"),
    swapAuthority: new (0, _web3js.PublicKey)("wJydc21tAMxYDif8uvy5rWNGWDFNZnPPmqCvegyZRod"),
    swapTokenAAccount: new (0, _web3js.PublicKey)("GFso9SAGakm8ZFa3rmuonuerbcQ8ZbACNZN7idkKR5nw"),
    swapTokenBAccount: new (0, _web3js.PublicKey)("EZ7pJskN2a4pDknrdkLzGDHpzjbfgdBj3Tt594K9HZbL"),
    globalLpVault: new (0, _web3js.PublicKey)("EQBy5YqWkLxr1xx1CZh2dDdX57XR9Ata4jNJebtuR61h"),
    farmTokenMint: new (0, _web3js.PublicKey)("3Q44iV4URXdbS4Tk1PGs5VdWQoCxHB7zdcdMnemo8jfH"),
    globalFarmState: new (0, _web3js.PublicKey)("GxhewC22S6wsXT156yC9SARvDnijoc3YEYyLVcQFDUCx"),
    globalRewardTokenVault: new (0, _web3js.PublicKey)("FFjuVr4FYdRGkPwaQREVQWHsBFGwQ1LH6VkmVSJL5Vva"),
    rewardTokenAuthority: new (0, _web3js.PublicKey)("8za7LwVuYbP2PivS3KbeohpUkSmRqLdTDxhrVzsHyFZf"),
    feeAccount: new (0, _web3js.PublicKey)("5rCbmppxMBHwBjCkLUP6fireQ12cL8LRa26QRUimoxN6"),
    publicRewardTokAcc: new (0, _web3js.PublicKey)("6P4frmXufUBsT2s39zbQ5k5UDrzSpFcNKmZAgWZLHgMv"),
    alphaRewardTokAcc: new (0, _web3js.PublicKey)("DpBG9h4UWMfwRKXUzN1zo3jEkJLGE5RVz5Zt6Qr4Xt7c")
  }),
  ["ORCA_whETH_ORCA" /* ORCA_whETH_ORCA */]: new OrcaLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["ORCA_whETH_ORCA" /* ORCA_whETH_ORCA */]),
    swapPubkey: new (0, _web3js.PublicKey)("D67u6UEuFp9Q4Fu2gnu5thxBoVj2eRgDDDirdWsMVsgm"),
    swapAuthority: new (0, _web3js.PublicKey)("4kwchkCnCaZPkBdnk85j9bJ9F1P883rwjbvsXGV7H5rM"),
    swapTokenAAccount: new (0, _web3js.PublicKey)("EMxDw1NjdddQjPk9gCUN4iDMy8HJ5siKYMVjGbjuUCrh"),
    swapTokenBAccount: new (0, _web3js.PublicKey)("DQyhcuEvE1K9DSd51agcNLg4CDrgthnKMVhU7q6R55LV"),
    globalLpVault: new (0, _web3js.PublicKey)("CYSwKVGEaPazRXUcCo2Ve9wyovK44E9ftLNSsvVqRuf1"),
    farmTokenMint: new (0, _web3js.PublicKey)("A7EAHvFEWzW8qSTFNLrEHN894GAZWZesNiebttEwtUGJ"),
    globalFarmState: new (0, _web3js.PublicKey)("AgWH92f8cPAuURyqehF6A9wFgupEsnDX3VP5eHyytabA"),
    globalRewardTokenVault: new (0, _web3js.PublicKey)("DoaerVHonB3FYpzKtqADug9UtrPLzgY1gbzZm6cRuymi"),
    rewardTokenAuthority: new (0, _web3js.PublicKey)("B1pahxFpN3GX4TKsw7fEDLw5MuuzmHNUbVcPZ6bp7KBM"),
    feeAccount: new (0, _web3js.PublicKey)("GdHXLai5M8FKedXUsECSzrV72nb1RTCCooFyTWT8WYmT"),
    publicRewardTokAcc: new (0, _web3js.PublicKey)("9jJVuB2UhzcGED6h476kieHwTVPmhY7EJsQyud38Q4r1"),
    alphaRewardTokAcc: new (0, _web3js.PublicKey)("HqTUasro97QUByk1LEbXGJCh672Bu1b5gnj31tLbbJfi")
  })
};
var RAYDIUM_LP_METAS = {
  ["SOL_USDC_RAYDIUM" /* SOL_USDC_RAYDIUM */]: new RaydiumLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["SOL_USDC_RAYDIUM" /* SOL_USDC_RAYDIUM */]),
    ammIdPubkey: new (0, _web3js.PublicKey)("58oQChx4yWmvKdwLLZzBi4ChoCc2fqCUWBkwMihLYQo2"),
    ammAuthPubkey: new (0, _web3js.PublicKey)("5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1"),
    ammOpenOrdersPubkey: new (0, _web3js.PublicKey)("HRk9CMrpq7Jn9sh7mzxE8CChHG8dneX9p475QKz4Fsfc"),
    ammTargetOrderPubkey: new (0, _web3js.PublicKey)(
      "CZza3Ej4Mc58MnxWA385itCC9jCo3L1D7zc3LKy1bZMR"
    ),
    poolCoinTokenPubkey: new (0, _web3js.PublicKey)("DQyrAcCrDXQ7NeoqGgDCZwBvWDcYmFCjSb9JtteuvPpz"),
    poolPcTokenPubkey: new (0, _web3js.PublicKey)("HLmqeL62xR1QoZ1HKKbXRrdN1p3phKpxRMb2VVopvBBz"),
    poolWithdrawQueue: new (0, _web3js.PublicKey)("G7xeGGLevkRwB5f44QNgQtrPKBdMfkT6ZZwpS9xcC97n"),
    poolTempLpTokenAccount: new (0, _web3js.PublicKey)(
      "Awpt6N7ZYPBa4vG4BQNFhFxDj4sxExAA9rpBAoBw2uok"
    ),
    serumProgramId: new (0, _web3js.PublicKey)("9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"),
    serumMarketPubkey: new (0, _web3js.PublicKey)("9wFFyRfZBsuAha4YcuxcXLKwMxJR43S7fPfQLusDBzvT"),
    serumCoinVaultAccount: new (0, _web3js.PublicKey)(
      "36c6YqAwyGKQG66XEp2dJc5JqjaBNv7sVghEtJv4c7u6"
    ),
    serumPcVaultAccount: new (0, _web3js.PublicKey)("8CFo8bL8mZQK8abbFyypFMwEDd8tVJjHTTojMLgQTUSZ"),
    serumVaultSigner: new (0, _web3js.PublicKey)("F8Vyqk3unwxkXukZFQeYyGmFfTG3CAX4v24iyrjEYBJV"),
    serumEventQueueAccount: new (0, _web3js.PublicKey)("5KKsLVU6TcbVDK4BS6K1DGDxnh4Q9xjYJ8XaDCG5t8ht"),
    serumBidsAccount: new (0, _web3js.PublicKey)("14ivtgssEBoBjuZJtSAPKYgpUK7DmnSwuPMqJoVTSgKJ"),
    serumAsksAccount: new (0, _web3js.PublicKey)("CEQdAFKdycHugujQg9k2wbmxjcpdYZyVLfV9WerTnafJ"),
    rewardAccounts: [
      {
        rewardToken: "RAY" /* RAY */,
        userRewardAlphaAccountPubkey: new (0, _web3js.PublicKey)("3ycsskwZL584nSTikjMR9DhVKRHFpYUbbx4m93kn6Djx"),
        userRewardPublicAccountPubkey: new (0, _web3js.PublicKey)("44tSF4Sisrsy7YXmtSYnFLzQnZeVvwgd5PTMzRvAqtq4"),
        rewardVault: new (0, _web3js.PublicKey)("38YS2N7VUb856QDsXHS1h8zv5556YgEy9zKbbL2mefjf")
      },
      {
        rewardToken: "SRM" /* SRM */,
        userRewardAlphaAccountPubkey: new (0, _web3js.PublicKey)("21rySZr2pQCaoGjdJy6gPx31vi5igVsKFAMRtqhgPgVX"),
        userRewardPublicAccountPubkey: new (0, _web3js.PublicKey)("BzqrcDc7wpciqtsSj7MsDajDdjHuS7XBdqaprSm8GaiB"),
        rewardVault: new (0, _web3js.PublicKey)("ANDJUfDryy3jY6DngwGRXVyxCJBT5JfojLDXwZYSpnEL")
      }
    ],
    stakeKeys: {
      poolIdPubkey: new (0, _web3js.PublicKey)("GUzaohfNuFbBqQTnPgPSNciv3aUvriXYjQduRE3ZkqFw"),
      poolAuthorityPubkey: new (0, _web3js.PublicKey)("DgbCWnbXg43nmeiAveMCkUUPEpAr3rZo3iop3TyP6S63"),
      poolLPVault: new (0, _web3js.PublicKey)("J6ECnRDZEXcxuruvErXDWsPZn9czowKynUr9eDSQ4QeN")
    }
  }),
  ["RAY_USDC_RAYDIUM" /* RAY_USDC_RAYDIUM */]: new RaydiumLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["RAY_USDC_RAYDIUM" /* RAY_USDC_RAYDIUM */]),
    ammIdPubkey: new (0, _web3js.PublicKey)("6UmmUiYoBjSrhakAobJw8BvkmJtDVxaeBtbt7rxWo1mg"),
    ammAuthPubkey: new (0, _web3js.PublicKey)("5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1"),
    ammOpenOrdersPubkey: new (0, _web3js.PublicKey)("J8u8nTHYtvudyqwLrXZboziN95LpaHFHpd97Jm5vtbkW"),
    ammTargetOrderPubkey: new (0, _web3js.PublicKey)(
      "3cji8XW5uhtsA757vELVFAeJpskyHwbnTSceMFY5GjVT"
    ),
    poolCoinTokenPubkey: new (0, _web3js.PublicKey)("FdmKUE4UMiJYFK5ogCngHzShuVKrFXBamPWcewDr31th"),
    poolPcTokenPubkey: new (0, _web3js.PublicKey)("Eqrhxd7bDUCH3MepKmdVkgwazXRzY6iHhEoBpY7yAohk"),
    poolWithdrawQueue: new (0, _web3js.PublicKey)("ERiPLHrxvjsoMuaWDWSTLdCMzRkQSo8SkLBLYEmSokyr"),
    poolTempLpTokenAccount: new (0, _web3js.PublicKey)(
      "D1V5GMf3N26owUFcbz2qR5N4G81qPKQvS2Vc4SM73XGB"
    ),
    serumProgramId: new (0, _web3js.PublicKey)("9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"),
    serumMarketPubkey: new (0, _web3js.PublicKey)("2xiv8A5xrJ7RnGdxXB42uFEkYHJjszEhaJyKKt4WaLep"),
    serumCoinVaultAccount: new (0, _web3js.PublicKey)(
      "GGcdamvNDYFhAXr93DWyJ8QmwawUHLCyRqWL3KngtLRa"
    ),
    serumPcVaultAccount: new (0, _web3js.PublicKey)("22jHt5WmosAykp3LPGSAKgY45p7VGh4DFWSwp21SWBVe"),
    serumVaultSigner: new (0, _web3js.PublicKey)("FmhXe9uG6zun49p222xt3nG1rBAkWvzVz7dxERQ6ouGw"),
    serumEventQueueAccount: new (0, _web3js.PublicKey)("H9dZt8kvz1Fe5FyRisb77KcYTaN8LEbuVAfJSnAaEABz"),
    serumBidsAccount: new (0, _web3js.PublicKey)("Hf84mYadE1VqSvVWAvCWc9wqLXak4RwXiPb4A91EAUn5"),
    serumAsksAccount: new (0, _web3js.PublicKey)("DC1HsWWRCXVg3wk2NndS5LTbce3axwUwUZH1RgnV4oDN"),
    rewardAccounts: [
      {
        rewardToken: "RAY" /* RAY */,
        userRewardAlphaAccountPubkey: new (0, _web3js.PublicKey)("496NG3Ym9UAmDoYe1YdJMnEhAGJhfrY4Wz2Poc85VcMZ"),
        userRewardPublicAccountPubkey: new (0, _web3js.PublicKey)("49i8NSa6z2DcWxBnnsZjyxKvLxEqXGZ833B4jUDNmxnT"),
        rewardVault: new (0, _web3js.PublicKey)("DpRueBHHhrQNvrjZX7CwGitJDJ8eZc3AHcyFMG4LqCQR")
      }
    ],
    stakeKeys: {
      poolIdPubkey: new (0, _web3js.PublicKey)("CHYrUBX2RKX8iBg7gYTkccoGNBzP44LdaazMHCLcdEgS"),
      poolAuthorityPubkey: new (0, _web3js.PublicKey)("5KQFnDd33J5NaMC9hQ64P5XzaaSz8Pt7NBCkZFYn1po"),
      poolLPVault: new (0, _web3js.PublicKey)("BNnXLFGva3K8ACruAc1gaP49NCbLkyE6xWhGV4G2HLrs")
    },
    stakeProgram: SWAP_METAS[SWAP_RAYDIUM].stakeProgramPubkey
  }),
  ["SOL_USDT_RAYDIUM" /* SOL_USDT_RAYDIUM */]: new RaydiumLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["SOL_USDT_RAYDIUM" /* SOL_USDT_RAYDIUM */]),
    ammIdPubkey: new (0, _web3js.PublicKey)("7XawhbbxtsRcQA8KTkHT9f9nc6d69UwqCDh6U5EEbEmX"),
    ammAuthPubkey: new (0, _web3js.PublicKey)("5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1"),
    ammOpenOrdersPubkey: new (0, _web3js.PublicKey)("4NJVwEAoudfSvU5kdxKm5DsQe4AAqG6XxpZcNdQVinS4"),
    ammTargetOrderPubkey: new (0, _web3js.PublicKey)(
      "9x4knb3nuNAzxsV7YFuGLgnYqKArGemY54r2vFExM1dp"
    ),
    poolCoinTokenPubkey: new (0, _web3js.PublicKey)("876Z9waBygfzUrwwKFfnRcc7cfY4EQf6Kz1w7GRgbVYW"),
    poolPcTokenPubkey: new (0, _web3js.PublicKey)("CB86HtaqpXbNWbq67L18y5x2RhqoJ6smb7xHUcyWdQAQ"),
    poolWithdrawQueue: new (0, _web3js.PublicKey)("52AfgxYPTGruUA9XyE8eF46hdR6gMQiA6ShVoMMsC6jQ"),
    poolTempLpTokenAccount: new (0, _web3js.PublicKey)(
      "2JKZRQc92TaH3fgTcUZyxfD7k7V7BMqhF24eussPtkwh"
    ),
    serumProgramId: new (0, _web3js.PublicKey)("9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"),
    serumMarketPubkey: new (0, _web3js.PublicKey)("HWHvQhFmJB3NUcu1aihKmrKegfVxBEHzwVX6yZCKEsi1"),
    serumCoinVaultAccount: new (0, _web3js.PublicKey)(
      "29cTsXahEoEBwbHwVc59jToybFpagbBMV6Lh45pWEmiK"
    ),
    serumPcVaultAccount: new (0, _web3js.PublicKey)("EJwyNJJPbHH4pboWQf1NxegoypuY48umbfkhyfPew4E"),
    serumVaultSigner: new (0, _web3js.PublicKey)("CzZAjoEqA6sjqtaiZiPqDkmxG6UuZWxwRWCenbBMc8Xz"),
    serumEventQueueAccount: new (0, _web3js.PublicKey)("GR363LDmwe25NZQMGtD2uvsiX66FzYByeQLcNFr596FK"),
    serumBidsAccount: new (0, _web3js.PublicKey)("2juozaawVqhQHfYZ9HNcs66sPatFHSHeKG5LsTbrS2Dn"),
    serumAsksAccount: new (0, _web3js.PublicKey)("ANXcuziKhxusxtthGxPxywY7FLRtmmCwFWDmU5eBDLdH"),
    rewardAccounts: [
      {
        rewardToken: "RAY" /* RAY */,
        userRewardAlphaAccountPubkey: new (0, _web3js.PublicKey)("BrDvLLjYtTPyaBN2kDxRCSDzoNPdYiozPfggcgEJt3Pd"),
        userRewardPublicAccountPubkey: new (0, _web3js.PublicKey)("4aryP8pemzEuJjMteEPHFbM1SJdgoahx4AG1ZpdCvJZQ"),
        rewardVault: new (0, _web3js.PublicKey)("Bgj3meVYds8ficJc9xntbjmMBPVUuyn6CvDUm1AD39yq")
      },
      {
        rewardToken: "SRM" /* SRM */,
        userRewardAlphaAccountPubkey: new (0, _web3js.PublicKey)("6Cp9hLDQpbmiXZopk9oJMqGj8nSUbQpGLqm9VxYmZbFB"),
        userRewardPublicAccountPubkey: new (0, _web3js.PublicKey)("HBrRwtFzrL7CyngExF4N3LrKzSEf1ViFRLHJcVEwmphw"),
        rewardVault: new (0, _web3js.PublicKey)("DJifNDjNt7iHbkNHs9V6Wm5pdiuddtF9w3o4WEiraKrP")
      }
    ],
    stakeKeys: {
      poolIdPubkey: new (0, _web3js.PublicKey)("5r878BSWPtoXgnqaeFJi7BCycKZ5CodBB2vS9SeiV8q"),
      poolAuthorityPubkey: new (0, _web3js.PublicKey)("DimG1WK9N7NdbhddweGTDDBRaBdCmcbPtoWZJ4Fi4rn4"),
      poolLPVault: new (0, _web3js.PublicKey)("jfhZy3B6sqeu95z71GukkxpkDtfHXJiFAMULM6STWxb")
    }
  }),
  ["mSOL_SOL_RAYDIUM" /* mSOL_SOL_RAYDIUM */]: new RaydiumLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["mSOL_SOL_RAYDIUM" /* mSOL_SOL_RAYDIUM */]),
    ammIdPubkey: new (0, _web3js.PublicKey)("EGyhb2uLAsRUbRx9dNFBjMVYnFaASWMvD6RE1aEf2LxL"),
    ammAuthPubkey: new (0, _web3js.PublicKey)("5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1"),
    ammOpenOrdersPubkey: new (0, _web3js.PublicKey)("6c1u1cNEELKPmuH352WPNNEPdfTyVPHsei39DUPemC42"),
    ammTargetOrderPubkey: new (0, _web3js.PublicKey)(
      "CLuMpSesLPqdxewQTxfiLdifQfDfRsxkFhPgiChmdGfk"
    ),
    poolCoinTokenPubkey: new (0, _web3js.PublicKey)("85SxT7AdDQvJg6pZLoDf7vPiuXLj5UYZLVVNWD1NjnFK"),
    poolPcTokenPubkey: new (0, _web3js.PublicKey)("BtGUR6y7uwJ6UGXNMcY3gCLm7dM3WaBdmgtKVgGnE1TJ"),
    poolWithdrawQueue: new (0, _web3js.PublicKey)("7vvoHxA6di9EvzJKL6bmojbZnH3YaRXu2LitufrQhM21"),
    poolTempLpTokenAccount: new (0, _web3js.PublicKey)(
      "ACn8TZ27fQ85kgdPKUfkETB4dS5JPFoq53z7uCgtHDai"
    ),
    serumProgramId: new (0, _web3js.PublicKey)("9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"),
    serumMarketPubkey: new (0, _web3js.PublicKey)("5cLrMai1DsLRYc1Nio9qMTicsWtvzjzZfJPXyAoF4t1Z"),
    serumCoinVaultAccount: new (0, _web3js.PublicKey)(
      "2qmHPJn3URkrboLiJkQ5tBB4bmYWdb6MyhQzZ6ms7wf9"
    ),
    serumPcVaultAccount: new (0, _web3js.PublicKey)("A6eEM36Vpyti2PoHK8h8Dqk5zu7YTaSRTQb7XXL8tcrV"),
    serumVaultSigner: new (0, _web3js.PublicKey)("EHMK3DdPiPBd9aBjeRU4aZjD7z568rmwHCSAAxRooPq6"),
    stakeKeys: null
  }),
  ["RAY_USDT_RAYDIUM" /* RAY_USDT_RAYDIUM */]: new RaydiumLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["RAY_USDT_RAYDIUM" /* RAY_USDT_RAYDIUM */]),
    ammIdPubkey: new (0, _web3js.PublicKey)("DVa7Qmb5ct9RCpaU7UTpSaf3GVMYz17vNVU67XpdCRut"),
    ammAuthPubkey: new (0, _web3js.PublicKey)("5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1"),
    ammOpenOrdersPubkey: new (0, _web3js.PublicKey)("7UF3m8hDGZ6bNnHzaT2YHrhp7A7n9qFfBj6QEpHPv5S8"),
    ammTargetOrderPubkey: new (0, _web3js.PublicKey)(
      "3K2uLkKwVVPvZuMhcQAPLF8hw95somMeNwJS7vgWYrsJ"
    ),
    poolCoinTokenPubkey: new (0, _web3js.PublicKey)("3wqhzSB9avepM9xMteiZnbJw75zmTBDVmPFLTQAGcSMN"),
    poolPcTokenPubkey: new (0, _web3js.PublicKey)("5GtSbKJEPaoumrDzNj4kGkgZtfDyUceKaHrPziazALC1"),
    poolWithdrawQueue: new (0, _web3js.PublicKey)("8VuvrSWfQP8vdbuMAP9AkfgLxU9hbRR6BmTJ8Gfas9aK"),
    poolTempLpTokenAccount: new (0, _web3js.PublicKey)(
      "FBzqDD1cBgkZ1h6tiZNFpkh4sZyg6AG8K5P9DSuJoS5F"
    ),
    serumProgramId: new (0, _web3js.PublicKey)("9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"),
    serumMarketPubkey: new (0, _web3js.PublicKey)("teE55QrL4a4QSfydR9dnHF97jgCfptpuigbb53Lo95g"),
    serumCoinVaultAccount: new (0, _web3js.PublicKey)(
      "2kVNVEgHicvfwiyhT2T51YiQGMPFWLMSp8qXc1hHzkpU"
    ),
    serumPcVaultAccount: new (0, _web3js.PublicKey)("5AXZV7XfR7Ctr6yjQ9m9dbgycKeUXWnWqHwBTZT6mqC7"),
    serumVaultSigner: new (0, _web3js.PublicKey)("HzWpBN6ucpsA9wcfmhLAFYqEUmHjE9n2cGHwunG5avpL"),
    serumEventQueueAccount: new (0, _web3js.PublicKey)("58KcficuUqPDcMittSddhT8LzsPJoH46YP4uURoMo5EB"),
    serumBidsAccount: new (0, _web3js.PublicKey)("AvKStCiY8LTp3oDFrMkiHHxxhxk4sQUWnGVcetm4kRpy"),
    serumAsksAccount: new (0, _web3js.PublicKey)("Hj9kckvMX96mQokfMBzNCYEYMLEBYKQ9WwSc1GxasW11"),
    rewardAccounts: [
      {
        rewardToken: "RAY" /* RAY */,
        userRewardAlphaAccountPubkey: new (0, _web3js.PublicKey)("Bq2M2YHcMVB9RDBjJsra4nP81qvJaAapY6fdCFoDNY61"),
        userRewardPublicAccountPubkey: new (0, _web3js.PublicKey)("3YUuGZJSF5Jdy3mXBXgWh86t2msj4d2WvNGawSsDZbHC"),
        rewardVault: new (0, _web3js.PublicKey)("HCHNuGzkqSnw9TbwpPv1gTnoqnqYepcojHw9DAToBrUj")
      }
    ],
    stakeKeys: {
      poolIdPubkey: new (0, _web3js.PublicKey)("AvbVWpBi2e4C9HPmZgShGdPoNydG4Yw8GJvG9HUcLgce"),
      poolAuthorityPubkey: new (0, _web3js.PublicKey)("8JYVFy3pYsPSpPRsqf43KSJFnJzn83nnRLQgG88XKB8q"),
      poolLPVault: new (0, _web3js.PublicKey)("4u4AnMBHXehdpP5tbD6qzB5Q4iZmvKKR5aUr2gavG7aw")
    },
    stakeProgram: SWAP_METAS[SWAP_RAYDIUM].stakeProgramPubkey
  }),
  ["RAY_ETH_RAYDIUM" /* RAY_ETH_RAYDIUM */]: new RaydiumLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["RAY_ETH_RAYDIUM" /* RAY_ETH_RAYDIUM */]),
    ammIdPubkey: new (0, _web3js.PublicKey)("8iQFhWyceGREsWnLM8NkG9GC8DvZunGZyMzuyUScgkMK"),
    ammAuthPubkey: new (0, _web3js.PublicKey)("5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1"),
    ammOpenOrdersPubkey: new (0, _web3js.PublicKey)("7iztHknuo7FAXVrrpAjsHBEEjRTaNH4b3hecVApQnSwN"),
    ammTargetOrderPubkey: new (0, _web3js.PublicKey)(
      "JChSqhn6yyEWqD95t8UR5DaZZtEZ1RGGjdwgMc8S6UUt"
    ),
    poolCoinTokenPubkey: new (0, _web3js.PublicKey)("G3Szi8fUqxfZjZoNx17kQbxeMTyXt2ieRvju4f3eJt9j"),
    poolPcTokenPubkey: new (0, _web3js.PublicKey)("7MgaPPNa7ySdu5XV7ik29Xoav4qcDk4wznXZ2Muq9MnT"),
    poolWithdrawQueue: new (0, _web3js.PublicKey)("C9aijsE3tLbVyYaXXHi45qneDL5jfyN8befuJh8zzpou"),
    poolTempLpTokenAccount: new (0, _web3js.PublicKey)(
      "3CDnyBsNnexdvfvo6ASde5Q4e72jzMQFHRRkSQr49vEG"
    ),
    serumProgramId: new (0, _web3js.PublicKey)("9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"),
    serumMarketPubkey: new (0, _web3js.PublicKey)("6jx6aoNFbmorwyncVP5V5ESKfuFc9oUYebob1iF6tgN4"),
    serumCoinVaultAccount: new (0, _web3js.PublicKey)(
      "EVVtYo4AeCbmn2dYS1UnhtfjpzCXCcN26G1HmuHwMo7w"
    ),
    serumPcVaultAccount: new (0, _web3js.PublicKey)("6ZT6KwvjLnJLpFdVfiRD9ifVUo4gv4MUie7VvPTuk69v"),
    serumVaultSigner: new (0, _web3js.PublicKey)("HXbRDLcX2FyqWJY95apnsTgBoRHyp7SWYXcMYod6EBrQ"),
    serumEventQueueAccount: new (0, _web3js.PublicKey)("EgcugBBSwM2FxqLQx5S6zAiU9x9qRS8qMVRMDFFU4Zty"),
    serumBidsAccount: new (0, _web3js.PublicKey)("Hdvh4ZGL9MkiQApNqfZtdmd4jM6Sz8e9akCUuxxkYhb8"),
    serumAsksAccount: new (0, _web3js.PublicKey)("7vWmTv9Mh8XbAxcduEqed2dLtro4N7hFroqch6mMxYKM"),
    rewardAccounts: [
      {
        rewardToken: "RAY" /* RAY */,
        userRewardAlphaAccountPubkey: new (0, _web3js.PublicKey)("B2LykyWkPGVcqwRgozr4WRst5x9s5pCHhT9CA4NLwtui"),
        userRewardPublicAccountPubkey: new (0, _web3js.PublicKey)("5PzDUuUYWmkymdNznZmvWAj5nn89xwFbD844rMJveHY3"),
        rewardVault: new (0, _web3js.PublicKey)("7YfTgYQFGEJ4kb8jCF8cBrrUwEFskLin3EbvE1crqiQh")
      }
    ],
    stakeKeys: {
      poolIdPubkey: new (0, _web3js.PublicKey)("B6fbnZZ7sbKHR18ffEDD5Nncgp54iKN1GbCgjTRdqhS1"),
      poolAuthorityPubkey: new (0, _web3js.PublicKey)("6amoZ7YBbsz3uUUbkeEH4vDTNwjvgjxTiu6nGi9z1JGe"),
      poolLPVault: new (0, _web3js.PublicKey)("BjAfXpHTHz2kipraNddS6WwQvGGtbvyobn7MxLEEYfrH")
    },
    stakeProgram: SWAP_METAS[SWAP_RAYDIUM].stakeProgramPubkey
  }),
  ["RAY_SOL_RAYDIUM" /* RAY_SOL_RAYDIUM */]: new RaydiumLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["RAY_SOL_RAYDIUM" /* RAY_SOL_RAYDIUM */]),
    ammIdPubkey: new (0, _web3js.PublicKey)("AVs9TA4nWDzfPJE9gGVNJMVhcQy3V9PGazuz33BfG2RA"),
    ammAuthPubkey: new (0, _web3js.PublicKey)("5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1"),
    ammOpenOrdersPubkey: new (0, _web3js.PublicKey)("6Su6Ea97dBxecd5W92KcVvv6SzCurE2BXGgFe9LNGMpE"),
    ammTargetOrderPubkey: new (0, _web3js.PublicKey)(
      "5hATcCfvhVwAjNExvrg8rRkXmYyksHhVajWLa46iRsmE"
    ),
    poolCoinTokenPubkey: new (0, _web3js.PublicKey)("Em6rHi68trYgBFyJ5261A2nhwuQWfLcirgzZZYoRcrkX"),
    poolPcTokenPubkey: new (0, _web3js.PublicKey)("3mEFzHsJyu2Cpjrz6zPmTzP7uoLFj9SbbecGVzzkL1mJ"),
    poolWithdrawQueue: new (0, _web3js.PublicKey)("FSHqX232PHE4ev9Dpdzrg9h2Tn1byChnX4tuoPUyjjdV"),
    poolTempLpTokenAccount: new (0, _web3js.PublicKey)(
      "87CCkBfthmyqwPuCDwFmyqKWJfjYqPFhm5btkNyoALYZ"
    ),
    serumProgramId: new (0, _web3js.PublicKey)("9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"),
    serumMarketPubkey: new (0, _web3js.PublicKey)("C6tp2RVZnxBPFbnAsfTjis8BN9tycESAT4SgDQgbbrsA"),
    serumCoinVaultAccount: new (0, _web3js.PublicKey)(
      "6U6U59zmFWrPSzm9sLX7kVkaK78Kz7XJYkrhP1DjF3uF"
    ),
    serumPcVaultAccount: new (0, _web3js.PublicKey)("4YEx21yeUAZxUL9Fs7YU9Gm3u45GWoPFs8vcJiHga2eQ"),
    serumVaultSigner: new (0, _web3js.PublicKey)("7SdieGqwPJo5rMmSQM9JmntSEMoimM4dQn7NkGbNFcrd"),
    serumEventQueueAccount: new (0, _web3js.PublicKey)("4HGvdannxvmAhszVVig9auH6HsqVH17qoavDiNcnm9nj"),
    serumBidsAccount: new (0, _web3js.PublicKey)("C1nEbACFaHMUiKAUsXVYPWZsuxunJeBkqXHPFr8QgSj9"),
    serumAsksAccount: new (0, _web3js.PublicKey)("4DNBdnTw6wmrK4NmdSTTxs1kEz47yjqLGuoqsMeHvkMF"),
    rewardAccounts: [
      {
        rewardToken: "RAY" /* RAY */,
        userRewardAlphaAccountPubkey: new (0, _web3js.PublicKey)("B7ewVyAG7YMDemDGKQNBxyGAuoN94w4J5K8NZa72A4BM"),
        userRewardPublicAccountPubkey: new (0, _web3js.PublicKey)("ChJUMQNtVNznGWaFUeNAqKD95hd1gmz9CRHobw3aMRbm"),
        rewardVault: new (0, _web3js.PublicKey)("6zA5RAQYgazm4dniS8AigjGFtRi4xneqjL7ehrSqCmhr")
      }
    ],
    stakeKeys: {
      poolIdPubkey: new (0, _web3js.PublicKey)("HUDr9BDaAGqi37xbQHzxCyXvfMCKPTPNF8g9c9bPu1Fu"),
      poolAuthorityPubkey: new (0, _web3js.PublicKey)("9VbmvaaPeNAke2MAL3h2Fw82VubH1tBCzwBzaWybGKiG"),
      poolLPVault: new (0, _web3js.PublicKey)("A4xQv2BQPB1WxsjiCC7tcMH7zUq255uCBkevFj8qSCyJ")
    },
    stakeProgram: SWAP_METAS[SWAP_RAYDIUM].stakeProgramPubkey
  }),
  ["SRM_USDC_RAYDIUM" /* SRM_USDC_RAYDIUM */]: new RaydiumLpSwapInfo({
    lpMintPubkey: new (0, _web3js.PublicKey)(MINTS["SRM_USDC_RAYDIUM" /* SRM_USDC_RAYDIUM */]),
    ammIdPubkey: new (0, _web3js.PublicKey)("8tzS7SkUZyHPQY7gLqsMCXZ5EDCgjESUHcB17tiR1h3Z"),
    ammAuthPubkey: new (0, _web3js.PublicKey)("5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1"),
    ammOpenOrdersPubkey: new (0, _web3js.PublicKey)("GJwrRrNeeQKY2eGzuXGc3KBrBftYbidCYhmA6AZj2Zur"),
    ammTargetOrderPubkey: new (0, _web3js.PublicKey)(
      "26LLpo8rscCpMxyAnJsqhqESPnzjMGiFdmXA4eF2Jrk5"
    ),
    poolCoinTokenPubkey: new (0, _web3js.PublicKey)("zuLDJ5SEe76L3bpFp2Sm9qTTe5vpJL3gdQFT5At5xXG"),
    poolPcTokenPubkey: new (0, _web3js.PublicKey)("4usvfgPDwXBX2ySX11ubTvJ3pvJHbGEW2ytpDGCSv5cw"),
    poolWithdrawQueue: new (0, _web3js.PublicKey)("7c1VbXTB7Xqx5eQQeUxAu5o6GHPq3P1ByhDsnRRUWYxB"),
    poolTempLpTokenAccount: new (0, _web3js.PublicKey)(
      "2sozAi6zXDUCCkpgG3usphzeCDm4e2jTFngbm5atSdC9"
    ),
    serumProgramId: new (0, _web3js.PublicKey)("9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin"),
    serumMarketPubkey: new (0, _web3js.PublicKey)("ByRys5tuUWDgL73G8JBAEfkdFf8JWBzPBDHsBVQ5vbQA"),
    serumCoinVaultAccount: new (0, _web3js.PublicKey)(
      "Ecfy8et9Mft9Dkavnuh4mzHMa2KWYUbBTA5oDZNoWu84"
    ),
    serumPcVaultAccount: new (0, _web3js.PublicKey)("hUgoKy5wjeFbZrXDW4ecr42T4F5Z1Tos31g68s5EHbP"),
    serumVaultSigner: new (0, _web3js.PublicKey)("GVV4ZT9pccwy9d17STafFDuiSqFbXuRTdvKQ1zJX6ttX"),
    rewardAccounts: [
      {
        rewardToken: "RAY" /* RAY */,
        userRewardAlphaAccountPubkey: new (0, _web3js.PublicKey)("4jnfVscrBTf77bjkR2JSHQT6q7N7BWFyufG6YdZCR8re"),
        userRewardPublicAccountPubkey: new (0, _web3js.PublicKey)("2qgtUtNopD3ZCrQCbVsvYd1BrPeWxn4TcrXjwvTzLCYi"),
        rewardVault: new (0, _web3js.PublicKey)("9gs6XnKs3RMMSSQAZm3VCbRpoNmPMrGaQQGMmRKjPeSU")
      },
      {
        rewardToken: "SRM" /* SRM */,
        userRewardAlphaAccountPubkey: new (0, _web3js.PublicKey)("6E4seHTUoufVwALGE8XBYEMh5n7t4irwYXD6jtqgqzeM"),
        userRewardPublicAccountPubkey: new (0, _web3js.PublicKey)("2iy54EuEMgUVFMaRzxusiMSawgcHUgR34SZWaKkMosMc"),
        rewardVault: new (0, _web3js.PublicKey)("BsuQ3XCCapopam8byEzHzazyxcRn5dCT3UX9kUzozhw")
      }
    ],
    stakeKeys: {
      poolIdPubkey: new (0, _web3js.PublicKey)("27bysJaX5eu5Urb5kftR66otiVc6DKK7TnifKwnpNzYu"),
      poolAuthorityPubkey: new (0, _web3js.PublicKey)("HAWwtFc4MFNSXFyQbUZd2GefSwZLntCiumt1D6XM8jfk"),
      poolLPVault: new (0, _web3js.PublicKey)("HVEm5BG4jMHtwgrUtuiC9K17bjp9CjFpgqmzVABmzLxr")
    }
  })
};
var LP_SWAP_METAS = {};
for (const key in ORCA_LP_METAS) {
  const tokId = key;
  _tinyinvariant2.default.call(void 0, tokId in TokenID, `Invalid tokId: ${key}`);
  _tinyinvariant2.default.call(void 0, !(tokId in LP_SWAP_METAS), `${tokId} is duplicated`);
  const value = ORCA_LP_METAS[tokId];
  _tinyinvariant2.default.call(void 0, value);
  LP_SWAP_METAS[tokId] = value;
}
for (const key in SABER_LP_METAS) {
  const tokId = key;
  _tinyinvariant2.default.call(void 0, tokId in TokenID, `Invalid tokId: ${key}`);
  _tinyinvariant2.default.call(void 0, !(tokId in LP_SWAP_METAS), `${tokId} is duplicated`);
  const value = SABER_LP_METAS[tokId];
  _tinyinvariant2.default.call(void 0, value);
  LP_SWAP_METAS[tokId] = value;
}
for (const key in RAYDIUM_LP_METAS) {
  const tokId = key;
  _tinyinvariant2.default.call(void 0, tokId in TokenID, `Invalid tokId: ${key}`);
  _tinyinvariant2.default.call(void 0, !(tokId in LP_SWAP_METAS), `${tokId} is duplicated`);
  const value = RAYDIUM_LP_METAS[tokId];
  _tinyinvariant2.default.call(void 0, value);
  LP_SWAP_METAS[tokId] = value;
}
var SWITCHBOARD_PRICE = {
  ["BTC" /* BTC */]: new (0, _web3js.PublicKey)("74YzQPGUT9VnjrBz8MuyDLKgKpbDqGot5xZJvTtMi6Ng"),
  ["ETH" /* ETH */]: new (0, _web3js.PublicKey)("QJc2HgGhdtW4e7zjvLB1TGRuwEpTre2agU5Lap2UqYz"),
  ["SOL" /* SOL */]: new (0, _web3js.PublicKey)("AdtRGGhmqvom3Jemp5YNrxd9q9unX36BZk1pujkkXijL"),
  ["mSOL" /* mSOL */]: new (0, _web3js.PublicKey)("CEPVH2t11KS4CaL3w4YxT9tRiijoGA4VEbnQ97cEpDmQ"),
  ["stSOL" /* stSOL */]: new (0, _web3js.PublicKey)("9r2p6vyF8Wp5YB2DASK95yuXEakQth6wmUmV2DpH91WX"),
  ["whETH" /* whETH */]: new (0, _web3js.PublicKey)("QJc2HgGhdtW4e7zjvLB1TGRuwEpTre2agU5Lap2UqYz"),
  ["scnSOL" /* scnSOL */]: new (0, _web3js.PublicKey)("DpzEKDSszosuzRUdRYzEcEbt6iZ4xhVEANQSRAYDYw8h"),
  ["APT" /* APT */]: new (0, _web3js.PublicKey)("CvLZbNUPLkbMuVK9YPqhvLu4UkXmrJbF98odXtPL6VRu"),
  ["RAY" /* RAY */]: new (0, _web3js.PublicKey)("CppyF6264uKZkGua1brTUa2fSVdMFSCszwzDs76HCuzU"),
  ["ORCA" /* ORCA */]: new (0, _web3js.PublicKey)("EHwSRkm2ErRjWxCxrTxrmC7sT2kGb5jJcsiindUHAX7W"),
  ["SBR" /* SBR */]: new (0, _web3js.PublicKey)("Lp3VNoRQi699VZe6u59TV8J38ELEUzxkaisoWsDuJgB"),
  ["FTT" /* FTT */]: new (0, _web3js.PublicKey)("6SqRewrr5f4ycWy7NvLmNgpXJbhwXrtTc1erL9aq2gP3"),
  ["SRM" /* SRM */]: new (0, _web3js.PublicKey)("BAoygKcKN7wk8yKzLD6sxzUQUqLvhBV1rjMA4UJqfZuH"),
  ["USDT" /* USDT */]: new (0, _web3js.PublicKey)("5mp8kbkTYwWWCsKSte8rURjTuyinsqBpJ9xAQsewPDD"),
  ["USDC" /* USDC */]: new (0, _web3js.PublicKey)("CZx29wKMUxaJDq6aLVQTdViPL754tTR64NAgQBUGxxHb"),
  ["UST" /* UST */]: new (0, _web3js.PublicKey)("8o8gN6VnW45R8pPfQzUJUwJi2adFmsWwfGcFNmicWt61"),
  ["USTv2" /* USTv2 */]: new (0, _web3js.PublicKey)("8o8gN6VnW45R8pPfQzUJUwJi2adFmsWwfGcFNmicWt61")
};
var PYTH_PRICE = {
  ["BTC" /* BTC */]: new (0, _web3js.PublicKey)("GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU"),
  ["ETH" /* ETH */]: new (0, _web3js.PublicKey)("JBu1AL4obBcCMqKBBxhpWCNUt136ijcuMZLFvTP7iWdB"),
  ["SOL" /* SOL */]: new (0, _web3js.PublicKey)("H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG"),
  ["mSOL" /* mSOL */]: new (0, _web3js.PublicKey)("E4v1BBgoso9s64TQvmyownAVJbhbEPGyzA3qn4n46qj9"),
  ["stSOL" /* stSOL */]: new (0, _web3js.PublicKey)("Bt1hEbY62aMriY1SyQqbeZbm8VmSbQVGBFzSzMuVNWzN"),
  ["whETH" /* whETH */]: new (0, _web3js.PublicKey)("JBu1AL4obBcCMqKBBxhpWCNUt136ijcuMZLFvTP7iWdB"),
  ["RAY" /* RAY */]: new (0, _web3js.PublicKey)("AnLf8tVYCM816gmBjiy8n53eXKKEDydT5piYjjQDPgTB"),
  ["SBR" /* SBR */]: new (0, _web3js.PublicKey)("8Td9VML1nHxQK6M8VVyzsHo32D7VBk72jSpa9U861z2A"),
  ["FTT" /* FTT */]: new (0, _web3js.PublicKey)("8JPJJkmDScpcNmBRKGZuPuG2GYAveQgP3t5gFuMymwvF"),
  ["SRM" /* SRM */]: new (0, _web3js.PublicKey)("3NBReDRTLKMQEKiLD5tGcx4kXbTf88b7f2xLS9UuGjym"),
  ["USDT" /* USDT */]: new (0, _web3js.PublicKey)("3vxLXJqLqF3JG5TCbYycbKWRBbCJQLxQmBGCkyqEEefL"),
  ["USDC" /* USDC */]: new (0, _web3js.PublicKey)("Gnt27xtC473ZT2Mw5u8wZ68Z3gULkSTb5DuxJy7eJotD"),
  ["UST" /* UST */]: new (0, _web3js.PublicKey)("H8DvrfSaRfUyP1Ytse1exGf7VSinLWtmKNNaBhA4as9P"),
  ["USTv2" /* USTv2 */]: new (0, _web3js.PublicKey)("H8DvrfSaRfUyP1Ytse1exGf7VSinLWtmKNNaBhA4as9P")
};
var COINGECKO_PRICE_ID = {
  ["MNDE" /* MNDE */]: "marinade",
  ["wLDO" /* wLDO */]: "lido-dao",
  ["wLUNA" /* wLUNA */]: "terra-luna",
  ["SOCN" /* SOCN */]: "temp-socn"
};
var FIREBASE_READER_CONFIG = {
  alpha: {
    apiKey: "AIzaSyDWBTlo8oeJGnpV0CnQEBpeloMbHgN6xY8",
    authDomain: "apricot-website-96904.firebaseapp.com",
    projectId: "apricot-website-96904",
    storageBucket: "apricot-website-96904.appspot.com",
    messagingSenderId: "181748660172",
    appId: "1:181748660172:web:fea7b301ef6a09c3d60f69",
    measurementId: "G-W2RX0BF87Q"
  },
  public: {
    apiKey: "AIzaSyAGpQxt6PUaLf1vhfhxL5hzWcP1QDIeOSc",
    authDomain: "apricot-public.firebaseapp.com",
    projectId: "apricot-public",
    storageBucket: "apricot-public.appspot.com",
    messagingSenderId: "735163506624",
    appId: "1:735163506624:web:e6406687d889d993e93225",
    measurementId: "G-VBTE0406R3"
  }
};
var ALPHA_CONFIG = new AppConfig(
  new (0, _web3js.PublicKey)("5dtKmAzoJu4qDxMjjK7gWY2pPe6NWAX6HWQk5QUHaKQZ"),
  new (0, _web3js.PublicKey)("EFo9V7mFQgxz7xPMrJ6qLyrjfGXPgsEFEfGEtVQx2xKt"),
  new (0, _web3js.PublicKey)("3cWR2VDrVhQ43VX8B43MwTazfx66naioXurUh8vrkidt"),
  new (0, _web3js.PublicKey)("4DUvqxvab2BiJEYR7YHi3nM5tfyLNXFBQbJuExQPK9rf"),
  new (0, _web3js.PublicKey)("Ff9WeFriS8DoJkiZPEZRpmiFu5jzYx3xZzoGNpwWMp5J"),
  new (0, _web3js.PublicKey)("EQWujCg9fTnj2wi2oVWWkWsJmtRU2tpEUMhhiVSMtHCH"),
  new (0, _web3js.PublicKey)("Cuf4Hbuv9RDZ1vzuUE833MKzjeX7odsBeewEjhmVwVRk"),
  MINTS,
  DECIMAL_MULT,
  CATEGORY,
  POOL_IDS,
  LIQUIDATION_DISCOUNT,
  LTVS,
  LP_TO_LR,
  LP_TO_DEX,
  LP_TO_TARGET_SWAP,
  LP_TO_NEED_2ND_STAKE,
  SWITCHBOARD_PRICE,
  PYTH_PRICE,
  INTEREST_RATES,
  FEES,
  LP_SWAP_METAS,
  FIREBASE_READER_CONFIG.alpha
);
var PUBLIC_CONFIG = new AppConfig(
  new (0, _web3js.PublicKey)("6UeJYTLU1adaoHWeApWsoj1xNEDbWA2RhM2DLc8CrDDi"),
  new (0, _web3js.PublicKey)("6L2QoTpr8WUd76eLAGnvow8i3WQzRP36C1qdUna9iwMn"),
  new (0, _web3js.PublicKey)("F5m8gNjC6pjynywcbw9kK1miSNJMw1nQGeviWykfCCXd"),
  new (0, _web3js.PublicKey)("FsSq4dqugLgZbsyLNt7bngtBkDApXaHUFXVQ6od5TeQ3"),
  new (0, _web3js.PublicKey)("GttyqdmooMEcgWqZPrb8FcdwjgaTLweLzuvVpnCMq5q1"),
  new (0, _web3js.PublicKey)("4aWV85p4o115qVo5p9sgbAGqYXmh34838xFpwuN1nxEP"),
  new (0, _web3js.PublicKey)("C1k4CehboSgUkmL3BJfw32Xj9HPs9NKTzhT5WXsYwWh4"),
  MINTS,
  DECIMAL_MULT,
  CATEGORY,
  POOL_IDS,
  LIQUIDATION_DISCOUNT,
  LTVS,
  LP_TO_LR,
  LP_TO_DEX,
  LP_TO_TARGET_SWAP,
  LP_TO_NEED_2ND_STAKE,
  SWITCHBOARD_PRICE,
  PYTH_PRICE,
  INTEREST_RATES,
  FEES,
  LP_SWAP_METAS,
  FIREBASE_READER_CONFIG.public
);

// src/addresses.ts

var _Addresses = class {
  constructor(config) {
    this.POOL_SUMMARIES_SEED = "PoolSummaries";
    this.config = config;
  }
  getProgramKey() {
    return this.config.programPubkey;
  }
  getAdminKey() {
    return this.config.adminPubkey;
  }
  mintKeyStrToPoolId(mintKeyStr) {
    return this.config.mintKeyStrToPoolId(mintKeyStr);
  }
  getBasePda() {
    return _web3js.PublicKey.findProgramAddress([Buffer.from("2")], this.config.programPubkey);
  }
  getPricePda() {
    return _web3js.PublicKey.findProgramAddress([Buffer.from("PRICE")], this.config.programPubkey);
  }
  getPoolListKey(basePda) {
    return _web3js.PublicKey.createWithSeed(basePda, "PoolList", this.config.programPubkey);
  }
  getPoolSummariesKey() {
    return _web3js.PublicKey.createWithSeed(this.config.adminPubkey, this.POOL_SUMMARIES_SEED, this.config.programPubkey);
  }
  getPriceSummariesKey(basePda) {
    return _web3js.PublicKey.createWithSeed(basePda, "PriceSummaries", this.config.programPubkey);
  }
  getUserPagesStatsKey() {
    return _web3js.PublicKey.createWithSeed(this.config.adminPubkey, _Addresses.USER_STATS_SEED, this.config.programPubkey);
  }
  getUsersPageKey(basePda, page_id) {
    return _web3js.PublicKey.createWithSeed(basePda, "UsersPage_" + page_id, this.config.programPubkey);
  }
  getLmAptVault() {
    return this.config.lmAptVault;
  }
  getAssetPoolKey(basePda, mintKeyStr) {
    const poolSeedStr = this.mintKeyStrToPoolSeedStr(mintKeyStr);
    return _web3js.PublicKey.createWithSeed(basePda, poolSeedStr, this.config.programPubkey);
  }
  getAssetPriceKey(pricePda, mintKeyStr) {
    const poolSeedStr = this.mintKeyStrToPoolSeedStr(mintKeyStr);
    return _web3js.PublicKey.createWithSeed(pricePda, poolSeedStr, this.config.programPubkey);
  }
  getAssetPoolSplKey(basePda, mintKeyStr) {
    const poolSeedStr = this.mintKeyStrToPoolSeedStr(mintKeyStr);
    return _web3js.PublicKey.createWithSeed(basePda, poolSeedStr, _spltoken.TOKEN_PROGRAM_ID);
  }
  async getAssetPoolStakeTableKey(mintKeyStr) {
    const [basePda] = await this.getBasePda();
    const stakeSeedStr = this.mintKeyStrToStakeTableSeedStr(mintKeyStr);
    return _web3js.PublicKey.createWithSeed(basePda, stakeSeedStr, this.config.programPubkey);
  }
  getUserInfoKey(walletKey) {
    return _web3js.PublicKey.createWithSeed(walletKey, "UserInfo", this.config.programPubkey);
  }
  poolIdToSeedStr(pool_id) {
    const char1 = String.fromCharCode(pool_id / 16 + "a".charCodeAt(0));
    const char2 = String.fromCharCode(pool_id % 16 + "a".charCodeAt(0));
    return "POOL__" + char1 + char2;
  }
  poolIdToStakeTableSeedStr(pool_id) {
    const char1 = String.fromCharCode(pool_id / 16 + "a".charCodeAt(0));
    const char2 = String.fromCharCode(pool_id % 16 + "a".charCodeAt(0));
    return "STAK__" + char1 + char2;
  }
  mintKeyStrToPoolSeedStr(mintKeyStr) {
    const poolId = this.config.mintKeyStrToPoolId(mintKeyStr);
    return this.poolIdToSeedStr(poolId);
  }
  mintKeyStrToStakeTableSeedStr(mintKeyStr) {
    const poolId = this.config.mintKeyStrToPoolId(mintKeyStr);
    return this.poolIdToStakeTableSeedStr(poolId);
  }
  getLpTargetSwap(tokenId) {
    return LP_TO_TARGET_SWAP[tokenId];
  }
  async getLpDepositKeys(tokenId) {
    const [ownerKey, _bump] = await this.getBasePda();
    const lpSwapInfo = LP_SWAP_METAS[tokenId];
    _tinyinvariant2.default.call(void 0, lpSwapInfo);
    return await lpSwapInfo.getLpDepositKeys(ownerKey);
  }
  async getLpWithdrawKeys(tokenId) {
    const [ownerKey, _bump] = await this.getBasePda();
    const lpSwapInfo = LP_SWAP_METAS[tokenId];
    _tinyinvariant2.default.call(void 0, lpSwapInfo);
    return await lpSwapInfo.getLpWithdrawKeys(ownerKey);
  }
  async getLpStakeKeys(tokenId) {
    const [ownerKey, _bump] = await this.getBasePda();
    const lpSwapInfo = LP_SWAP_METAS[tokenId];
    _tinyinvariant2.default.call(void 0, lpSwapInfo);
    const keys = await lpSwapInfo.getLpStakeKeys(ownerKey);
    return keys;
  }
  async getLpFirstStakeKeys(tokenId) {
    const [ownerKey, _bump] = await this.getBasePda();
    const lpSwapInfo = LP_SWAP_METAS[tokenId];
    _tinyinvariant2.default.call(void 0, lpSwapInfo);
    _tinyinvariant2.default.call(void 0, lpSwapInfo.isDoubleDipSupported);
    return await lpSwapInfo.getFirstStakeKeys(ownerKey);
  }
  async getLpSecondStakeKeys(tokenId) {
    const [ownerKey, _bump] = await this.getBasePda();
    const lpSwapInfo = LP_SWAP_METAS[tokenId];
    _tinyinvariant2.default.call(void 0, lpSwapInfo);
    _tinyinvariant2.default.call(void 0, lpSwapInfo.isDoubleDipSupported);
    return await lpSwapInfo.getSecondStakeKeys(ownerKey);
  }
  async getFloatingLpTokenAccount(tokenId) {
    const lpSwapInfo = LP_SWAP_METAS[tokenId];
    _tinyinvariant2.default.call(void 0, lpSwapInfo instanceof OrcaLpSwapInfo);
    const [ownerKey] = await this.getBasePda();
    const { pdaFarmTokenAccount: floatingLpSplKey } = await lpSwapInfo.getPdaKeys(ownerKey);
    return floatingLpSplKey;
  }
};
var Addresses = _Addresses;
Addresses.USER_STATS_SEED = "UserPagesStats";

// src/utils/index.ts


function assert(cond, msg) {
  if (!cond) {
    throw new Error(msg);
  }
}
var getAssociatedTokenPubkey = async (ownerPubkey, mintPubkey, allowOwnerOffCurve = false) => {
  let address;
  if (allowOwnerOffCurve) {
    [address] = await _web3js.PublicKey.findProgramAddress(
      [ownerPubkey.toBuffer(), _spltoken.TOKEN_PROGRAM_ID.toBuffer(), mintPubkey.toBuffer()],
      _spltoken.ASSOCIATED_TOKEN_PROGRAM_ID
    );
  } else {
    address = await _spltoken.Token.getAssociatedTokenAddress(
      _spltoken.ASSOCIATED_TOKEN_PROGRAM_ID,
      _spltoken.TOKEN_PROGRAM_ID,
      mintPubkey,
      ownerPubkey,
      allowOwnerOffCurve
    );
  }
  return address;
};
var delay = async (ms) => {
  return new Promise((resolve) => {
    setTimeout(resolve, ms);
  });
};






































































exports.ALPHA_CONFIG = ALPHA_CONFIG; exports.AMOUNT_MULTIPLIER = AMOUNT_MULTIPLIER; exports.ASSIST_MODE_STABLE_ONLY = ASSIST_MODE_STABLE_ONLY; exports.Addresses = Addresses; exports.AppConfig = AppConfig; exports.CATEGORY = CATEGORY; exports.CMD_ADD_USER_AND_DEPOSIT = CMD_ADD_USER_AND_DEPOSIT; exports.CMD_BORROW = CMD_BORROW; exports.CMD_CLAIM_APT_LM_REWARD = CMD_CLAIM_APT_LM_REWARD; exports.CMD_DEPOSIT = CMD_DEPOSIT; exports.CMD_EXTERN_LIQUIDATE = CMD_EXTERN_LIQUIDATE; exports.CMD_LP_CREATE = CMD_LP_CREATE; exports.CMD_LP_OP_CHECK = CMD_LP_OP_CHECK; exports.CMD_LP_OP_ENDCHECK = CMD_LP_OP_ENDCHECK; exports.CMD_LP_REDEEM = CMD_LP_REDEEM; exports.CMD_LP_STAKE = CMD_LP_STAKE; exports.CMD_LP_STAKE_SECOND = CMD_LP_STAKE_SECOND; exports.CMD_LP_UNSTAKE = CMD_LP_UNSTAKE; exports.CMD_LP_UNSTAKE_SECOND = CMD_LP_UNSTAKE_SECOND; exports.CMD_MAKE_LM_REWARD_AVAILABLE = CMD_MAKE_LM_REWARD_AVAILABLE; exports.CMD_MARGIN_SWAP = CMD_MARGIN_SWAP; exports.CMD_REFRESH_USER = CMD_REFRESH_USER; exports.CMD_REPAY = CMD_REPAY; exports.CMD_UPDATE_USER_ASSET_CONFIG = CMD_UPDATE_USER_ASSET_CONFIG; exports.CMD_UPDATE_USER_CONFIG = CMD_UPDATE_USER_CONFIG; exports.CMD_WITHDRAW = CMD_WITHDRAW; exports.CMD_WITHDRAW_AND_REMOVE_USER = CMD_WITHDRAW_AND_REMOVE_USER; exports.COINGECKO_PRICE_ID = COINGECKO_PRICE_ID; exports.DECIMAL_MULT = DECIMAL_MULT; exports.DUAL_REWARD_CONFIGS = DUAL_REWARD_CONFIGS; exports.Dex = Dex; exports.FAKE_KEY = FAKE_KEY; exports.FORCE_ASSIST_LIMIT = FORCE_ASSIST_LIMIT; exports.INVALID_PAGE = INVALID_PAGE; exports.InterestRate = InterestRate; exports.LIQUIDATION_DISCOUNT = LIQUIDATION_DISCOUNT; exports.LIQUIDATION_LIMIT = LIQUIDATION_LIMIT; exports.LP_SWAP_METAS = LP_SWAP_METAS; exports.LP_TO_DEX = LP_TO_DEX; exports.LP_TO_LR = LP_TO_LR; exports.LP_TO_NEED_2ND_STAKE = LP_TO_NEED_2ND_STAKE; exports.LP_TO_TARGET_SWAP = LP_TO_TARGET_SWAP; exports.MAX_ASSIST_ACTIONS = MAX_ASSIST_ACTIONS; exports.MINTS = MINTS; exports.ORCA_LP_METAS = ORCA_LP_METAS; exports.OrcaLpSwapInfo = OrcaLpSwapInfo; exports.PUBLIC_CONFIG = PUBLIC_CONFIG; exports.PYTH_PRICE = PYTH_PRICE; exports.PoolConfig = PoolConfig; exports.PoolFlag = PoolFlag; exports.RAYDIUM_LP_METAS = RAYDIUM_LP_METAS; exports.RPC = RPC; exports.RaydiumLpSwapInfo = RaydiumLpSwapInfo; exports.SABER_LP_METAS = SABER_LP_METAS; exports.SAFE_LIMIT = SAFE_LIMIT; exports.SWAP_FAKE = SWAP_FAKE; exports.SWAP_MERCURIAL = SWAP_MERCURIAL; exports.SWAP_METAS = SWAP_METAS; exports.SWAP_ORCA = SWAP_ORCA; exports.SWAP_RAYDIUM = SWAP_RAYDIUM; exports.SWAP_SABER = SWAP_SABER; exports.SWAP_SERUM = SWAP_SERUM; exports.SWITCHBOARD_PRICE = SWITCHBOARD_PRICE; exports.SaberLpSwapInfo = SaberLpSwapInfo; exports.TokenCategory = TokenCategory; exports.TokenID = TokenID; exports.assert = assert; exports.delay = delay; exports.getAssociatedTokenPubkey = getAssociatedTokenPubkey;
//# sourceMappingURL=index.js.map