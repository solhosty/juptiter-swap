{"version":3,"sources":["../src/instructions/lending/borrowObligationLiquidity.ts","../src/serialization/layout.ts","../src/utils/Instructions.ts","../src/constants.ts","../src/models/QuantityContext.ts","../src/instructions/lending/depositObligationCollateral.ts","../src/instructions/lending/depositReserveLiquidity.ts","../src/instructions/lending/redeemReserveCollateral.ts","../src/instructions/lending/refreshReserve.ts","../src/models/basic/Comparable.ts","../src/models/basic/Decimal.ts","../src/serialization/Field.ts","../src/serialization/BigField.ts","../src/models/basic/Numerical.ts","../src/models/basic/Id.ts","../src/models/basic/Lamport.ts","../src/models/basic/Percentage.ts","../src/serialization/BigType.ts","../src/serialization/BlobField.ts","../src/serialization/UIntField.ts","../src/models/basic/Ratio.ts","../src/models/basic/WrappedDecimal.ts","../src/models/basic/WrappedLamport.ts","../src/models/basic/Token.ts","../src/models/staking/StakingPoolId.ts","../src/serialization/PublicKeyField.ts","../src/models/AdditionalReward.ts","../src/models/Apy.ts","../src/models/Asset.ts","../src/models/Value.ts","../src/models/ValueRatio.ts","../src/models/MarginRatio.ts","../src/models/Margin.ts","../src/models/QuoteValue.ts","../src/models/Share.ts","../src/models/MintId.ts","../src/models/AssetConfig.ts","../src/models/AssetDisplayConfig.ts","../src/models/AssetPriceConfig.ts","../src/utils/defaultAssetConfig.ts","../src/models/AssetContext.ts","../src/models/AssetDepositConfig.ts","../src/models/AssetExchangeRate.ts","../src/models/AssetPrice.ts","../src/models/AssetValue.ts","../src/models/AuthorityId.ts","../src/models/ProfileEntry.ts","../src/models/Collateral.ts","../src/models/ExchangeRate.ts","../src/models/Loan.ts","../src/models/MarketId.ts","../src/models/OracleId.ts","../src/models/PortProfileId.ts","../src/models/ReserveId.ts","../src/models/PortProfile.ts","../src/structs/ReserveData.ts","../src/models/TokenAccountId.ts","../src/serialization/Optional.ts","../src/structs/SlotInfo.ts","../src/models/WalletId.ts","../src/structs/PortProfileData.ts","../src/models/PortProfileContext.ts","../src/models/PriceOracle.ts","../src/models/ProgramId.ts","../src/models/ProposedAction.ts","../src/models/ReserveBorrowRate.ts","../src/models/ReserveContext.ts","../src/models/ReserveUtilizationRatio.ts","../src/models/ReserveInfo.ts","../src/models/Slot.ts","../src/models/TokenAccount.ts","../src/models/TokenAccountContext.ts"],"names":["BufferLayout","BN","PublicKey","SYSVAR_CLOCK_PUBKEY","TransactionInstruction","TOKEN_PROGRAM_ID","Big","blob","normalizedFactor","borrowRateDiff","u64"],"mappings":"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","sourcesContent":["import {\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport * as Layout from \"../../serialization/layout\";\nimport { AccessType } from \"../../utils/Instructions\";\nimport { getAccess } from \"../../utils/Instructions\";\nimport { LendingInstruction } from \"./instruction\";\nimport BN from \"bn.js\";\nimport { PORT_LENDING } from \"../../constants\";\n\n// Borrow liquidity from a reserve by depositing collateral tokens. Requires a refreshed\n// obligation and reserve.\n//\n// Accounts expected by this instruction:\n//\n//   0. `[writable]` Source borrow reserve liquidity supply SPL Token account.\n//   1. `[writable]` Destination liquidity token account.\n//                     Minted by borrow reserve liquidity mint.\n//   2. `[writable]` Borrow reserve account - refreshed.\n//   3. `[writable]` Borrow reserve liquidity fee receiver account.\n//                     Must be the fee account specified at InitReserve.\n//   4. `[writable]` Obligation account - refreshed.\n//   5. `[]` Lending market account.\n//   6. `[]` Derived lending market authority.\n//   7. `[signer]` Obligation owner.\n//   8. `[]` Clock sysvar.\n//   9. `[]` Token program id.\nexport const borrowObligationLiquidityInstruction = (\n  liquidityAmount: number | BN,\n  srcLiquidityPubkey: PublicKey, // 0\n  dstLiquidityPubkey: PublicKey, // 1\n  borrowReservePubkey: PublicKey, // 2\n  borrowReserveFeeReceiverPubkey: PublicKey, // 3\n  obligationPubkey: PublicKey, // 4\n  lendingMarketPubkey: PublicKey, // 5\n  marketAuthorityPubkey: PublicKey, // 6\n  obligationOwner: PublicKey, // 7\n  lendingProgramId: PublicKey = PORT_LENDING\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    Layout.uint64(\"liquidityAmount\"),\n  ]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: LendingInstruction.BorrowObligationLiquidity,\n      liquidityAmount: new BN(liquidityAmount),\n    },\n    data\n  );\n\n  const keys = [\n    getAccess(srcLiquidityPubkey, AccessType.WRITE),\n    getAccess(dstLiquidityPubkey, AccessType.WRITE),\n    getAccess(borrowReservePubkey, AccessType.WRITE),\n    getAccess(borrowReserveFeeReceiverPubkey, AccessType.WRITE),\n    getAccess(obligationPubkey, AccessType.WRITE),\n    getAccess(lendingMarketPubkey, AccessType.READ),\n    getAccess(marketAuthorityPubkey, AccessType.READ),\n    getAccess(obligationOwner, AccessType.SIGNER),\n    getAccess(SYSVAR_CLOCK_PUBKEY, AccessType.READ),\n    getAccess(TOKEN_PROGRAM_ID, AccessType.READ),\n  ];\n\n  return new TransactionInstruction({\n    keys,\n    programId: lendingProgramId,\n    data,\n  });\n};\n","import { PublicKey } from \"@solana/web3.js\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport BN from \"bn.js\";\n\nexport const publicKey = (property: string): BufferLayout.Layout => {\n  const publicKeyLayout = BufferLayout.blob(\n    32,\n    property\n  ) as BufferLayout.Layout;\n\n  const _decode = publicKeyLayout.decode.bind(publicKeyLayout);\n  const _encode = publicKeyLayout.encode.bind(publicKeyLayout);\n\n  publicKeyLayout.decode = (buffer: Buffer, offset: number) => {\n    const data = _decode(buffer, offset);\n    return new PublicKey(data);\n  };\n\n  publicKeyLayout.encode = (key: PublicKey, buffer: Buffer, offset: number) => {\n    return _encode(key.toBuffer(), buffer, offset);\n  };\n\n  return publicKeyLayout;\n};\n\nexport const uint64 = (property = \"uint64\"): BufferLayout.Layout => {\n  return _uint(8, property);\n};\n\nexport const uint128 = (property = \"uint128\"): BufferLayout.Layout => {\n  return _uint(16, property);\n};\n\nconst _uint = (length: number, property: string): BufferLayout.Layout => {\n  const layout = BufferLayout.blob(length, property) as BufferLayout.Layout;\n\n  const _decode = layout.decode.bind(layout);\n  const _encode = layout.encode.bind(layout);\n\n  layout.decode = (buffer: Buffer, offset: number) => {\n    const data = _decode(buffer, offset);\n    return new BN(\n      [...data]\n        .reverse()\n        .map((i) => `00${i.toString(16)}`.slice(-2))\n        .join(\"\"),\n      16\n    );\n  };\n\n  layout.encode = (num: BN, buffer: Buffer, offset: number) => {\n    const a = num.toArray().reverse();\n    let b = Buffer.from(a);\n    if (b.length !== length) {\n      const zeroPad = Buffer.alloc(length);\n      b.copy(zeroPad);\n      b = zeroPad;\n    }\n\n    return _encode(b, buffer, offset);\n  };\n\n  return layout;\n};\n","import { AccountMeta, PublicKey } from \"@solana/web3.js\";\n\nexport enum AccessType {\n  UNKNOWN = 0,\n  READ = 1,\n  WRITE = 2,\n  SIGNER = 3,\n}\n\nexport function getAccess(key: PublicKey, type: AccessType): AccountMeta {\n  switch (type) {\n    case AccessType.READ:\n      return { pubkey: key, isSigner: false, isWritable: false };\n    case AccessType.WRITE:\n      return { pubkey: key, isSigner: false, isWritable: true };\n    case AccessType.SIGNER:\n      return { pubkey: key, isSigner: true, isWritable: false };\n    default:\n      throw new Error(`Unknown access type ${type}`);\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { QuantityContext } from \"./models/QuantityContext\";\n\nexport const PORT_LENDING = new PublicKey(\n  \"Port7uDYB3wk6GJAw4KT1WpTeMtSu9bTcChBHkX2LfR\"\n);\nexport const PORT_STAKING = new PublicKey(\n  \"stkarvwmSzv2BygN5e2LeTwimTczLWHCKPKGC2zVLiq\"\n);\nexport const DEFAULT_PORT_LENDING_MARKET = new PublicKey(\n  \"6T4XxKerq744sSuj3jaoV6QiZ8acirf4TrPwQzHAoSy5\"\n);\n\nexport const PORT_QUANTITY_CONTEXT = QuantityContext.fromDecimals(6);\n\nexport const MARKET_MAP: Record<string, string> = {\n  H27Quk3DSbu55T4dCr1NddTTSAezXwHU67FPCZVKLhSW: \"dev market\",\n  \"6T4XxKerq744sSuj3jaoV6QiZ8acirf4TrPwQzHAoSy5\": \"prod market\",\n};\n","import Big from \"big.js\";\n\nexport class QuantityContext {\n  readonly decimals: number;\n  readonly multiplier: Big;\n\n  private constructor(decimals: number, increment: Big) {\n    this.decimals = decimals;\n    this.multiplier = increment;\n  }\n\n  public static fromDecimals(decimals: number): QuantityContext {\n    console.assert(Number.isInteger(decimals));\n    console.assert(decimals >= 0);\n    return new QuantityContext(decimals, new Big(10).pow(decimals));\n  }\n}\n","import {\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport * as Layout from \"../../serialization/layout\";\n\nimport { LendingInstruction } from \"./instruction\";\nimport { AccessType, getAccess } from \"../../utils/Instructions\";\nimport BN from \"bn.js\";\nimport { PORT_LENDING, PORT_STAKING } from \"../../constants\";\n\n// Deposit collateral to an obligation. Requires a refreshed reserve.\n//\n// Accounts expected by this instruction:\n//\n//   0. `[writable]` Source collateral token account.\n//                     Minted by deposit reserve collateral mint.\n//                     $authority can transfer $collateral_amount.\n//   1. `[writable]` Destination deposit reserve collateral supply SPL Token account.\n//   2. `[]` Deposit reserve account - refreshed.\n//   3. `[writable]` Obligation account.\n//   4. `[]` Lending market account.\n//   5. `[]` Derived lending market authority.\n//   6. `[signer]` Obligation owner.\n//   7. `[signer]` User transfer authority ($authority).\n//   8. `[]` Clock sysvar.\n//   9. `[]` Token program id.\nexport const depositObligationCollateralInstruction = (\n  collateralAmount: number | BN,\n  srcCollateralPubkey: PublicKey, // 0\n  dstCollateralPubkey: PublicKey, // 1\n  depositReservePubkey: PublicKey, // 2\n  obligationPubkey: PublicKey, // 3\n  lendingMarketPubkey: PublicKey, // 4\n  marketAuthorityPubkey: PublicKey, // 5\n  obligationOwnerPubkey: PublicKey, // 6\n  transferAuthorityPubkey: PublicKey, // 7\n  lendingProgramId: PublicKey = PORT_LENDING,\n  stakeAccountPubkey?: PublicKey, // 8\n  stakingPoolPubkey?: PublicKey // 9\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    Layout.uint64(\"collateralAmount\"),\n  ]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: LendingInstruction.DepositObligationCollateral,\n      collateralAmount: new BN(collateralAmount),\n    },\n    data\n  );\n\n  const keys = [\n    getAccess(srcCollateralPubkey, AccessType.WRITE),\n    getAccess(dstCollateralPubkey, AccessType.WRITE),\n    getAccess(depositReservePubkey, AccessType.READ),\n    getAccess(obligationPubkey, AccessType.WRITE),\n    getAccess(lendingMarketPubkey, AccessType.READ),\n    getAccess(marketAuthorityPubkey, AccessType.READ),\n    getAccess(obligationOwnerPubkey, AccessType.SIGNER),\n    getAccess(transferAuthorityPubkey, AccessType.SIGNER),\n    getAccess(SYSVAR_CLOCK_PUBKEY, AccessType.READ),\n    getAccess(TOKEN_PROGRAM_ID, AccessType.READ),\n  ];\n\n  if (stakeAccountPubkey && stakingPoolPubkey) {\n    keys.push(\n      getAccess(stakeAccountPubkey, AccessType.WRITE),\n      getAccess(stakingPoolPubkey, AccessType.WRITE),\n      getAccess(PORT_STAKING, AccessType.READ)\n    );\n  }\n\n  return new TransactionInstruction({\n    keys,\n    programId: lendingProgramId,\n    data,\n  });\n};\n","import {\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport * as Layout from \"../../serialization/layout\";\nimport { LendingInstruction } from \"./instruction\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { AccessType, getAccess } from \"../../utils/Instructions\";\nimport BN from \"bn.js\";\nimport { PORT_LENDING } from \"../../constants\";\n\n// Deposit liquidity into a reserve in exchange for collateral. Collateral represents a share\n// of the reserve liquidity pool.\n//\n// Accounts expected by this instruction:\n//\n//   0. `[writable]` Source liquidity token account.\n//                     $authority can transfer $liquidity_amount.\n//   1. `[writable]` Destination collateral token account.\n//   2. `[writable]` Reserve account.\n//   3. `[writable]` Reserve liquidity supply SPL Token account.\n//   4. `[writable]` Reserve collateral SPL Token mint.\n//   5. `[]` Lending market account.\n//   6. `[]` Derived lending market authority.\n//   7. `[signer]` User transfer authority ($authority).\n//   8. `[]` Clock sysvar.\n//   9. `[]` Token program id.\nexport const depositReserveLiquidityInstruction = (\n  liquidityAmount: number | BN,\n  srcLiquidityPubkey: PublicKey, // 0\n  dstCollateralPubkey: PublicKey, // 1\n  reservePubkey: PublicKey, // 2\n  reserveLiquiditySupplyPubkey: PublicKey, // 3\n  reserveCollateralMintPubkey: PublicKey, // 4\n  lendingMarketPubkey: PublicKey, // 5\n  lendingMarketAuthorityPubkey: PublicKey, // 6\n  transferAuthorityPubkey: PublicKey, // 7\n  lendingProgramId: PublicKey = PORT_LENDING\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    Layout.uint64(\"liquidityAmount\"),\n  ]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: LendingInstruction.DepositReserveLiquidity,\n      liquidityAmount: new BN(liquidityAmount),\n    },\n    data\n  );\n\n  const keys = [\n    getAccess(srcLiquidityPubkey, AccessType.WRITE),\n    getAccess(dstCollateralPubkey, AccessType.WRITE),\n    getAccess(reservePubkey, AccessType.WRITE),\n    getAccess(reserveLiquiditySupplyPubkey, AccessType.WRITE),\n    getAccess(reserveCollateralMintPubkey, AccessType.WRITE),\n    getAccess(lendingMarketPubkey, AccessType.READ),\n    getAccess(lendingMarketAuthorityPubkey, AccessType.READ),\n    getAccess(transferAuthorityPubkey, AccessType.SIGNER),\n    getAccess(SYSVAR_CLOCK_PUBKEY, AccessType.READ),\n    getAccess(TOKEN_PROGRAM_ID, AccessType.READ),\n  ];\n\n  return new TransactionInstruction({\n    keys,\n    programId: lendingProgramId,\n    data,\n  });\n};\n","import {\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport * as Layout from \"../../serialization/layout\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { LendingInstruction } from \"./instruction\";\nimport { PORT_LENDING } from \"../../constants\";\nimport { AccessType, getAccess } from \"../../utils/Instructions\";\n\n// Redeem collateral from a reserve in exchange for liquidity.\n//\n// Accounts expected by this instruction:\n//\n//   0. `[writable]` Source collateral token account.\n//                     $authority can transfer $collateral_amount.\n//   1. `[writable]` Destination liquidity token account.\n//   2. `[writable]` Reserve account.\n//   3. `[writable]` Reserve collateral SPL Token mint.\n//   4. `[writable]` Reserve liquidity supply SPL Token account.\n//   5. `[]` Lending market account.\n//   6. `[]` Derived lending market authority.\n//   7. `[signer]` User transfer authority ($authority).\n//   8. `[]` Clock sysvar.\n//   9. `[]` Token program id.\nexport const redeemReserveCollateralInstruction = (\n  collateralAmount: number | BN,\n  sourceCollateral: PublicKey,\n  destinationLiquidity: PublicKey,\n  reserve: PublicKey,\n  reserveCollateralMint: PublicKey,\n  reserveLiquiditySupply: PublicKey,\n  lendingMarket: PublicKey,\n  lendingMarketAuthority: PublicKey,\n  transferAuthority: PublicKey,\n  lendingProgramId: PublicKey = PORT_LENDING\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    Layout.uint64(\"collateralAmount\"),\n  ]);\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: LendingInstruction.RedeemReserveCollateral,\n      collateralAmount: new BN(collateralAmount),\n    },\n    data\n  );\n\n  const keys = [\n    getAccess(sourceCollateral, AccessType.WRITE),\n    getAccess(destinationLiquidity, AccessType.WRITE),\n    getAccess(reserve, AccessType.WRITE),\n    getAccess(reserveCollateralMint, AccessType.WRITE),\n    getAccess(reserveLiquiditySupply, AccessType.WRITE),\n    getAccess(lendingMarket, AccessType.READ),\n    getAccess(lendingMarketAuthority, AccessType.READ),\n    getAccess(transferAuthority, AccessType.SIGNER),\n    getAccess(SYSVAR_CLOCK_PUBKEY, AccessType.READ),\n    getAccess(TOKEN_PROGRAM_ID, AccessType.READ),\n  ];\n\n  return new TransactionInstruction({\n    keys,\n    programId: lendingProgramId,\n    data,\n  });\n};\n","import {\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport { PORT_LENDING } from \"../../constants\";\nimport { AccessType, getAccess } from \"../../utils/Instructions\";\nimport { LendingInstruction } from \"./instruction\";\n\n// interface Data {\n//   instruction: number;\n// }\n\nconst DataLayout = BufferLayout.struct([BufferLayout.u8(\"instruction\")]);\n\n// Accrue interest and update market price of liquidity on a reserve.\n//\n// Accounts expected by this instruction:\n//\n//   0. `[writable]` Reserve account.\n//   1. `[]` Clock sysvar.\n//   2. `[]` Reserve liquidity oracle account.\n//             Must be the Pyth price account specified at InitReserve.\nexport const refreshReserveInstruction = (\n  reserve: PublicKey,\n  oracle: PublicKey | null,\n  lendingProgramId: PublicKey = PORT_LENDING\n): TransactionInstruction => {\n  const data = Buffer.alloc(DataLayout.span);\n  DataLayout.encode({ instruction: LendingInstruction.RefreshReserve }, data);\n\n  const keys = [\n    getAccess(reserve, AccessType.WRITE),\n    getAccess(SYSVAR_CLOCK_PUBKEY, AccessType.READ),\n  ];\n\n  if (oracle) {\n    keys.push(getAccess(oracle, AccessType.READ));\n  }\n\n  return new TransactionInstruction({\n    keys,\n    programId: lendingProgramId,\n    data,\n  });\n};\n","import { Comparison } from \"big.js\";\n\nexport abstract class Comparable<C extends Comparable<C>> {\n  public eq(that?: C): boolean {\n    if (!that) {\n      return false;\n    }\n    return this.checkAndCompare(that) === 0;\n  }\n\n  public lt(that?: C): boolean {\n    if (!that) {\n      return false;\n    }\n    return this.checkAndCompare(that) < 0;\n  }\n\n  public lte(that?: C): boolean {\n    if (!that) {\n      return false;\n    }\n    return this.checkAndCompare(that) <= 0;\n  }\n\n  public gt(that?: C): boolean {\n    if (!that) {\n      return false;\n    }\n    return this.checkAndCompare(that) > 0;\n  }\n\n  public gte(that?: C): boolean {\n    if (!that) {\n      return false;\n    }\n    return this.checkAndCompare(that) >= 0;\n  }\n\n  protected abstract compare(that: C): Comparison;\n\n  protected abstract isCompatibleWith(that: C): boolean;\n\n  protected checkCompatible(that: C): void {\n    console.assert(this.isCompatibleWith(that));\n  }\n\n  private checkAndCompare(that: C): Comparison {\n    this.checkCompatible(that);\n    return this.compare(that);\n  }\n}\n","import Big, { BigSource } from \"big.js\";\nimport { BigField } from \"../../serialization/BigField\";\nimport { Field } from \"../../serialization/Field\";\nimport { Numerical } from \"./Numerical\";\nimport { BigType } from \"../../serialization/BigType\";\n\nexport abstract class Decimal<D extends Decimal<D>> extends Numerical<D> {\n  protected readonly raw: Big;\n\n  protected constructor(raw: BigSource) {\n    super();\n    this.raw = new Big(raw);\n  }\n\n  public getRaw(): Big {\n    return this.raw;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected isCompatibleWith(that: D): boolean {\n    return true;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport abstract class DecimalField<T extends Decimal<any>> extends Field<T> {\n  private readonly delegate: BigField;\n\n  protected constructor(type: BigType, property: string) {\n    super(type.getBytes(), property);\n    this.delegate = BigField.forType(type, property);\n  }\n\n  public decode(b: Uint8Array, offset?: number): T {\n    return this.fromBig(this.delegate.decode(b, offset));\n  }\n\n  protected abstract fromBig(big: Big): T;\n}\n","import * as BufferLayout from \"@solana/buffer-layout\";\n\nexport abstract class Field<T> extends BufferLayout.Layout {\n  public abstract decode(b: Uint8Array, offset?: number): T;\n}\n","import { Field } from \"./Field\";\nimport Big from \"big.js\";\nimport { BigType } from \"./BigType\";\n\nexport class BigField extends Field<Big> {\n  private readonly type: BigType;\n\n  private constructor(type: BigType, property: string) {\n    super(type.getBytes(), property);\n    this.type = type;\n  }\n\n  public static forType(type: BigType, property: string): BigField {\n    return new BigField(type, property);\n  }\n\n  public decode(b: Uint8Array, offset?: number): Big {\n    const bn = this.type.getLayout().decode(b, offset);\n    const big = new Big(bn.toString());\n    const multiplier = this.type.getMultiplier();\n    if (!multiplier) {\n      return big;\n    }\n    return big.div(multiplier);\n  }\n}\n","import Big, { BigSource, Comparison } from \"big.js\";\nimport { Comparable } from \"./Comparable\";\n\nexport abstract class Numerical<N extends Numerical<N>> extends Comparable<N> {\n  private static readonly BIG_ZERO = new Big(0);\n\n  protected constructor() {\n    super();\n  }\n\n  public static sum<D extends Numerical<D>>(a: D, b: D): D {\n    return a.add(b);\n  }\n\n  public min(that: N): N {\n    this.checkCompatible(that);\n    if (this.getRaw().lte(that.getRaw())) {\n      return this.replaceWithValue(this.getRaw());\n    }\n    return this.replaceWithValue(that.getRaw());\n  }\n\n  public max(that: N): N {\n    this.checkCompatible(that);\n    if (this.getRaw().gte(that.getRaw())) {\n      return this.replaceWithValue(this.getRaw());\n    }\n    return this.replaceWithValue(that.getRaw());\n  }\n\n  public add(that: N): N {\n    this.checkCompatible(that);\n    return this.replaceWithValue(this.getRaw().add(that.getRaw()));\n  }\n\n  public subtract(that: N): N {\n    this.checkCompatible(that);\n    return this.replaceWithValue(this.getRaw().sub(that.getRaw()));\n  }\n\n  public multiply(pct: BigSource): N {\n    return this.replaceWithValue(this.getRaw().mul(pct));\n  }\n\n  public divide(pct: BigSource): N {\n    return this.replaceWithValue(this.getRaw().div(pct));\n  }\n\n  public compare(that: N): Comparison {\n    return this.compareRaw(that.getRaw());\n  }\n\n  public isZero(): boolean {\n    return this.getSignum() === 0;\n  }\n\n  public isPositive(): boolean {\n    return this.getSignum() > 0;\n  }\n\n  public isNegative(): boolean {\n    return this.getSignum() < 0;\n  }\n\n  public getSignum(): number {\n    return this.compareRaw(Numerical.BIG_ZERO);\n  }\n\n  public abstract getRaw(): Big;\n\n  public abstract replaceWithValue(value: BigSource): N;\n\n  private compareRaw(raw: BigSource): Comparison {\n    return this.getRaw().cmp(raw);\n  }\n}\n","import { AccountMeta, PublicKey } from \"@solana/web3.js\";\nimport { AccessType, getAccess } from \"../../utils/Instructions\";\n\nexport abstract class Id extends PublicKey {\n  public getAccess(type: AccessType): AccountMeta {\n    return getAccess(this, type);\n  }\n}\n","import Big, { BigSource } from \"big.js\";\nimport { u64 } from \"@solana/spl-token\";\n\nimport { Decimal, DecimalField } from \"./Decimal\";\nimport { BigType } from \"../../serialization/BigType\";\nimport { Field } from \"../../serialization/Field\";\n\nexport class Lamport extends Decimal<Lamport> {\n  protected static readonly ZERO = new Lamport(0);\n  protected static readonly ONE = new Lamport(1);\n  protected static readonly MAX = new Lamport(\"18446744073709551615\");\n\n  private constructor(raw: BigSource) {\n    super(raw);\n  }\n\n  public static zero(): Lamport {\n    return Lamport.ZERO;\n  }\n\n  public static max(): Lamport {\n    return Lamport.MAX;\n  }\n\n  public static of(raw: BigSource): Lamport {\n    return new Lamport(raw);\n  }\n\n  public static field(type: BigType, property: string): Field<Lamport> {\n    return new LamportField(type, property);\n  }\n\n  public isTrivial(): boolean {\n    return this.lt(Lamport.ONE);\n  }\n\n  public isMax(): boolean {\n    return this.eq(Lamport.MAX);\n  }\n\n  public toU64(): u64 {\n    // eslint-disable-next-line new-cap\n    return new u64(this.raw.toFixed(0, 0)); // RoundDown\n  }\n\n  public replaceWithValue(value: BigSource): Lamport {\n    return Lamport.of(value);\n  }\n}\n\nclass LamportField extends DecimalField<Lamport> {\n  public constructor(type: BigType, property: string) {\n    super(type, property);\n  }\n\n  protected fromBig(big: Big): Lamport {\n    return Lamport.of(big);\n  }\n}\n","import Big, { BigSource } from \"big.js\";\nimport { Decimal, DecimalField } from \"./Decimal\";\nimport { Field } from \"../../serialization/Field\";\nimport { BigType } from \"../../serialization/BigType\";\n\nexport class Percentage extends Decimal<Percentage> {\n  private static PCT_BIP = new Percentage(0.0001);\n  private static PCT_ZERO = new Percentage(0);\n  private static PCT_HUNDRED = new Percentage(1);\n  private static PCT_THOUSAND = new Percentage(10);\n\n  private constructor(value: BigSource) {\n    super(value);\n  }\n\n  public static zero(): Percentage {\n    return Percentage.PCT_ZERO;\n  }\n\n  public static hundred(): Percentage {\n    return Percentage.PCT_HUNDRED;\n  }\n\n  public static fromOneBased(oneBased: BigSource): Percentage {\n    return Percentage.fromRaw(oneBased, false);\n  }\n\n  public static fromHundredBased(hundredBased: BigSource): Percentage {\n    return Percentage.fromRaw(hundredBased, true);\n  }\n\n  public static fromRaw(raw: BigSource, isHundredBased: boolean): Percentage {\n    const big = new Big(raw);\n    if (!isHundredBased) {\n      return new Percentage(big);\n    }\n    return new Percentage(big.div(100));\n  }\n\n  public static field(property: string): Field<Percentage> {\n    return new PercentageField(true, property);\n  }\n\n  public isTrivial(): boolean {\n    return this.lt(Percentage.PCT_BIP);\n  }\n\n  public isHundredPct(): boolean {\n    return this.eq(Percentage.PCT_HUNDRED);\n  }\n\n  public toOneBasedNumber(dp: number): number {\n    return this.raw.round(dp).toNumber();\n  }\n\n  public toHundredBasedNumber(dp: number): number {\n    return this.raw.mul(100).round(dp, 0).toNumber();\n  }\n\n  public print(): string {\n    if (this.gt(Percentage.PCT_THOUSAND)) {\n      return this.raw.round(1, 1).toString() + \"x\"; // RoundHalfUp\n    }\n    return this.raw.mul(100).round(2, 1).toString() + \"%\"; // RoundHalfUp\n  }\n\n  public replaceWithValue(value: BigSource): Percentage {\n    return new Percentage(value);\n  }\n}\n\nclass PercentageField extends DecimalField<Percentage> {\n  private readonly isHundredBased: boolean;\n\n  public constructor(isHundredBased: boolean, property: string) {\n    super(BigType.U8, property);\n    this.isHundredBased = isHundredBased;\n  }\n\n  protected fromBig(big: Big): Percentage {\n    return Percentage.fromRaw(big, this.isHundredBased);\n  }\n}\n","import Big from \"big.js\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport { UintField } from \"./UIntField\";\n\nexport class BigType {\n  private static readonly WAD = new Big(10).pow(18);\n\n  public static readonly U8 = new BigType(1);\n  public static readonly U16 = new BigType(2);\n  public static readonly U32 = new BigType(4);\n  public static readonly U64 = new BigType(8);\n  public static readonly U128 = new BigType(16);\n  public static readonly D64 = new BigType(8, BigType.WAD);\n  public static readonly D128 = new BigType(16, BigType.WAD);\n\n  private readonly bytes: number;\n  private readonly multiplier?: Big;\n\n  private constructor(bytes: number, multiplier?: Big) {\n    this.bytes = bytes;\n    this.multiplier = multiplier;\n  }\n\n  public getLayout(): BufferLayout.Layout {\n    if (this.bytes === 1) {\n      return BufferLayout.u8();\n    }\n    if (this.bytes === 2) {\n      return BufferLayout.u16();\n    }\n    if (this.bytes === 3) {\n      return BufferLayout.u24();\n    }\n    if (this.bytes === 4) {\n      return BufferLayout.u32();\n    }\n    return new UintField(this.bytes);\n  }\n\n  public getBytes(): number {\n    return this.bytes;\n  }\n\n  public getMultiplier(): Big | undefined {\n    return this.multiplier;\n  }\n}\n","import * as BufferLayout from \"@solana/buffer-layout\";\nimport { Field } from \"./Field\";\n\nexport abstract class BlobField<T> extends Field<T> {\n  private readonly delegate: BufferLayout.Blob;\n\n  protected constructor(span: number, property?: string) {\n    super(span, property);\n    this.delegate = new BufferLayout.Blob(span, property);\n  }\n\n  public decode(b: Uint8Array, offset?: number): T {\n    const blob = this.delegate.decode(b, offset);\n    return this.fromBuffer(blob);\n  }\n\n  protected abstract fromBuffer(buffer: Buffer): T;\n}\n","import { BlobField } from \"./BlobField\";\nimport BN from \"bn.js\";\n\nexport class UintField extends BlobField<BN> {\n  public constructor(bytes: number, property?: string) {\n    super(bytes, property);\n  }\n\n  protected fromBuffer(buffer: Buffer): BN {\n    return new BN(\n      [...buffer]\n        .reverse()\n        .map((i) => `00${i.toString(16)}`.slice(-2))\n        .join(\"\"),\n      16\n    );\n  }\n}\n","import { Percentage } from \"./Percentage\";\nimport Big, { Comparison } from \"big.js\";\nimport { Comparable } from \"./Comparable\";\n\nexport abstract class Ratio<R extends Ratio<R>> extends Comparable<R> {\n  private readonly pct?: Percentage;\n\n  protected constructor(pct?: Percentage) {\n    super();\n    this.pct = pct;\n  }\n\n  public isTrivial(): boolean {\n    const pct = this.getPct();\n    return !pct || pct.isTrivial();\n  }\n\n  public isPresent(): boolean {\n    return !!this.pct;\n  }\n\n  public isPositive(): boolean {\n    return !!this.getPct()?.isPositive();\n  }\n\n  public isNegative(): boolean {\n    return !!this.getPct()?.isNegative();\n  }\n\n  public getUnchecked(): Big {\n    if (!this.pct) {\n      throw new Error(\"No value available\");\n    }\n\n    return this.pct.getRaw();\n  }\n\n  public getPct(): Percentage | undefined {\n    return this.pct;\n  }\n\n  public print(): string {\n    return !this.pct ? \"--\" : this.pct.print();\n  }\n\n  public compare(that: R): Comparison {\n    const thisPct = this.getPct();\n    const thatPct = that.getPct();\n    if (!thisPct || !thatPct) {\n      return 0;\n    }\n\n    return thisPct.compare(thatPct);\n  }\n\n  public toString(): string {\n    return this.print();\n  }\n}\n","import { Numerical } from \"./Numerical\";\nimport { Decimal } from \"./Decimal\";\nimport Big, { BigSource } from \"big.js\";\n\nexport abstract class WrappedDecimal<\n  D extends Decimal<D>,\n  W extends WrappedDecimal<D, W>\n> extends Numerical<W> {\n  private readonly wrapped: D;\n\n  protected constructor(wrapped: D) {\n    super();\n    this.wrapped = wrapped;\n  }\n\n  public getRaw(): Big {\n    return this.getWrapped().getRaw();\n  }\n\n  public getWrapped(): D {\n    return this.wrapped;\n  }\n\n  public replaceWithValue(value: BigSource): W {\n    return this.wrap(this.getWrapped().replaceWithValue(value));\n  }\n\n  protected abstract wrap(value: D): W;\n}\n","import { WrappedDecimal } from \"./WrappedDecimal\";\nimport { Lamport } from \"./Lamport\";\nimport { u64 } from \"@solana/spl-token\";\n\nexport abstract class WrappedLamport<\n  T extends WrappedLamport<T>\n> extends WrappedDecimal<Lamport, T> {\n  public isMax(): boolean {\n    return this.getWrapped().isMax();\n  }\n\n  public toU64(): u64 {\n    return this.getAmount().toU64();\n  }\n\n  public getAmount(): Lamport {\n    return this.getWrapped();\n  }\n}\n","import { Lamport } from \"./Lamport\";\nimport { MintId } from \"../MintId\";\nimport { WrappedLamport } from \"./WrappedLamport\";\n\nexport abstract class Token<T extends Token<T>> extends WrappedLamport<T> {\n  private readonly mintId: MintId;\n\n  protected constructor(mintId: MintId, lamport: Lamport) {\n    super(lamport);\n    this.mintId = mintId;\n  }\n\n  public isNative(): boolean {\n    return this.getMintId().isNative();\n  }\n\n  public getMintId(): MintId {\n    return this.mintId;\n  }\n\n  protected isCompatibleWith(that: T): boolean {\n    return this.mintId.equals(that.mintId);\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { Id } from \"../basic\";\nimport { PublicKeyField } from \"../../serialization/PublicKeyField\";\nimport { Field } from \"../../serialization/Field\";\n\nexport class StakingPoolId extends Id {\n  private constructor(key: PublicKey) {\n    super(key);\n  }\n\n  public static fromBase58(base58: string): StakingPoolId {\n    return StakingPoolId.of(new PublicKey(base58));\n  }\n\n  public static of(key: PublicKey): StakingPoolId {\n    return new StakingPoolId(key);\n  }\n\n  public static field(property: string): Field<StakingPoolId> {\n    return new StakingPoolIdField(property);\n  }\n}\n\nclass StakingPoolIdField extends PublicKeyField<StakingPoolId> {\n  public constructor(property: string) {\n    super(property);\n  }\n\n  protected fromPublicKey(pubKey: PublicKey): StakingPoolId {\n    return StakingPoolId.of(pubKey);\n  }\n}\n","import { MAX_SEED_LENGTH, PublicKey } from \"@solana/web3.js\";\nimport { BlobField } from \"./BlobField\";\n\nexport abstract class PublicKeyField<T extends PublicKey> extends BlobField<T> {\n  protected constructor(property?: string) {\n    super(MAX_SEED_LENGTH, property);\n  }\n\n  protected fromBuffer(buffer: Buffer): T {\n    return this.fromPublicKey(new PublicKey(buffer));\n  }\n\n  protected abstract fromPublicKey(pubKey: PublicKey): T;\n}\n","import { Apy } from \"./Apy\";\nimport { ReserveId } from \"./ReserveId\";\nimport { MintId } from \"./MintId\";\n\nexport class AdditionalReward {\n  private readonly reserveId: ReserveId;\n  private readonly apy: Apy;\n  private readonly accurate: boolean;\n  private readonly mintId?: MintId;\n\n  constructor(\n    reserveId: ReserveId,\n    apy: Apy,\n    accurate?: boolean,\n    mintId?: MintId\n  ) {\n    this.reserveId = reserveId;\n    this.apy = apy;\n    this.accurate = !!accurate;\n    this.mintId = mintId;\n  }\n\n  public getReserveId(): ReserveId {\n    return this.reserveId;\n  }\n\n  public getApy(): Apy {\n    return this.apy;\n  }\n\n  public getAccurate(): boolean {\n    return this.accurate;\n  }\n\n  public getMintId(): MintId | undefined {\n    return this.mintId;\n  }\n}\n","import { Ratio, Percentage } from \"./basic\";\nimport { BigSource } from \"big.js\";\n\nexport class Apy extends Ratio<Apy> {\n  private static APY_NA = new Apy();\n\n  private constructor(pct?: Percentage) {\n    super(pct);\n  }\n\n  public static na(): Apy {\n    return Apy.APY_NA;\n  }\n\n  public static of(raw: BigSource): Apy {\n    return new Apy(Percentage.fromOneBased(raw));\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected isCompatibleWith(that: Apy): boolean {\n    return true;\n  }\n}\n","import Big from \"big.js\";\n\nimport { Token, Lamport, Percentage } from \"./basic\";\nimport { Apy } from \"./Apy\";\nimport { QuoteValue } from \"./QuoteValue\";\nimport { AssetPrice } from \"./AssetPrice\";\nimport { QuantityContext } from \"./QuantityContext\";\nimport { Share } from \"./Share\";\nimport { AssetExchangeRate } from \"./AssetExchangeRate\";\nimport { MintId } from \"./MintId\";\nimport { TokenAccount } from \"./TokenAccount\";\n\nexport class Asset extends Token<Asset> {\n  public static readonly MIN_NATIVE_LAMPORT = Asset.native(\n    Lamport.of(5_000_000)\n  );\n\n  private static SIGNIFICANT_DIGITS = 6;\n  private static LARGE_THRESHOLD = new Big(10).pow(6).toNumber();\n  private static FORMATTER_NORMAL = new Intl.NumberFormat(\"en-US\", {\n    style: \"decimal\",\n    maximumSignificantDigits: Asset.SIGNIFICANT_DIGITS,\n  });\n  private static FORMATTER_LARGE = new Intl.NumberFormat(\"en-US\", {\n    style: \"decimal\",\n    maximumFractionDigits: 0,\n  });\n\n  private constructor(mintId: MintId, lamport: Lamport) {\n    super(mintId, lamport);\n  }\n\n  public static fromString(\n    str: string,\n    mintId: MintId,\n    context: QuantityContext\n  ): Asset {\n    const increment = context.multiplier;\n    const lamport = Lamport.of(new Big(str).mul(increment).round(0, 0));\n    return new Asset(mintId, lamport);\n  }\n\n  public static zero(mintId: MintId): Asset {\n    return Asset.of(mintId);\n  }\n\n  public static max(mintId: MintId): Asset {\n    return Asset.of(mintId, Lamport.max());\n  }\n\n  public static native(lamport: Lamport): Asset {\n    return Asset.of(MintId.native(), lamport);\n  }\n\n  public static fromTokenAccount(account: TokenAccount): Asset {\n    return Asset.of(account.getMintId(), account.getAmount());\n  }\n\n  public static of(mintId: MintId, lamport?: Lamport): Asset {\n    return new Asset(mintId, lamport || Lamport.zero());\n  }\n\n  public isNative(): boolean {\n    return this.getMintId().isNative();\n  }\n\n  public toValue(\n    price: AssetPrice,\n    quantityContext: QuantityContext\n  ): QuoteValue {\n    console.assert(\n      this.getMintId().equals(price.getMintId()),\n      `asset id: ${this.getMintId()} price id: ${price.getMintId()}`\n    );\n    if (!price) {\n      return QuoteValue.zero();\n    }\n\n    const increment = quantityContext.multiplier;\n    const value = this.getRaw().div(increment).mul(price.getRaw());\n    return QuoteValue.of(value);\n  }\n\n  public toInterest(supplyApy: Apy): Asset {\n    if (!supplyApy.isPresent()) {\n      return Asset.zero(this.getMintId());\n    }\n\n    const lamport = Lamport.of(this.getRaw().mul(supplyApy.getUnchecked()));\n    return Asset.of(this.getMintId(), lamport);\n  }\n\n  public toShare(exchangeRatio: AssetExchangeRate): Share {\n    console.assert(this.getMintId().equals(exchangeRatio.getAssetMintId()));\n\n    if (!exchangeRatio.isPresent()) {\n      return Share.zero(exchangeRatio.getShareMintId());\n    }\n\n    const lamport = Lamport.of(\n      this.getRaw().mul(exchangeRatio.getUnchecked()).round(0)\n    );\n    return Share.of(exchangeRatio.getShareMintId(), lamport);\n  }\n\n  public addFee(pct: Percentage): Asset {\n    return this.multiply(new Big(1).add(pct.getRaw()));\n  }\n\n  public toNumber(context: QuantityContext): number {\n    const multiplier = context.multiplier;\n    const decimals = context.decimals;\n    return this.getRaw().div(multiplier).round(decimals, 0).toNumber();\n  }\n\n  public plain(context: QuantityContext): string {\n    return this.toLimitRoundNumber(context).toString();\n  }\n\n  public toLimitRoundNumber(context: QuantityContext): number {\n    const multiplier = context.multiplier;\n    const decimals = context.decimals;\n    return this.getRaw()\n      .div(multiplier)\n      .round(Math.min(decimals, 6), 0)\n      .toNumber();\n  }\n\n  public print(context: QuantityContext | undefined, symbol?: string): string {\n    if (!context) {\n      return \"--\";\n    }\n\n    const num = this.toLimitRoundNumber(context);\n    const formatted =\n      num > Asset.LARGE_THRESHOLD\n        ? Asset.FORMATTER_LARGE.format(num)\n        : Asset.FORMATTER_NORMAL.format(num);\n    if (!symbol) {\n      return formatted;\n    }\n    return formatted + \" \" + symbol;\n  }\n\n  protected wrap(value: Lamport): Asset {\n    return Asset.of(this.getMintId(), value);\n  }\n}\n","import { BigSource } from \"big.js\";\nimport { Decimal, Lamport } from \"./basic\";\nimport { AssetPrice } from \"./AssetPrice\";\nimport { Asset } from \"./Asset\";\nimport { QuantityContext } from \"./QuantityContext\";\n\nexport abstract class Value<V extends Value<V>> extends Decimal<V> {\n  // eslint-disable-next-line new-cap\n  private static FORMATTER = Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  });\n\n  protected constructor(raw: BigSource) {\n    super(raw);\n  }\n\n  public toAsset(price: AssetPrice, context: QuantityContext): Asset {\n    const lamport = Lamport.of(\n      this.raw.div(price.getRaw()).mul(context.multiplier)\n    );\n    return Asset.of(price.getMintId(), lamport);\n  }\n\n  public toNumber(): number {\n    return this.raw.round(2, 0).toNumber();\n  }\n\n  public print(): string {\n    return Value.FORMATTER.format(this.toNumber());\n  }\n\n  public toString(): string {\n    return this.print();\n  }\n}\n","import { Ratio, Percentage } from \"./basic\";\n\nexport class ValueRatio extends Ratio<ValueRatio> {\n  private static VALUE_RATIO_NA = new ValueRatio();\n\n  private constructor(pct?: Percentage) {\n    super(pct);\n  }\n\n  public static of(pct?: Percentage): ValueRatio {\n    if (!pct) {\n      return ValueRatio.na();\n    }\n    return new ValueRatio(pct);\n  }\n\n  public static na(): ValueRatio {\n    return ValueRatio.VALUE_RATIO_NA;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected isCompatibleWith(that: ValueRatio): boolean {\n    return true;\n  }\n}\n","import { Ratio, Percentage } from \"./basic\";\n\nexport class MarginRatio extends Ratio<MarginRatio> {\n  private static MARGIN_RATIO_NA = new MarginRatio();\n\n  private constructor(pct?: Percentage) {\n    super(pct);\n  }\n\n  public static of(pct?: Percentage): MarginRatio {\n    if (!pct) {\n      return MarginRatio.na();\n    }\n    return new MarginRatio(pct);\n  }\n\n  public static na(): MarginRatio {\n    return MarginRatio.MARGIN_RATIO_NA;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected isCompatibleWith(that: MarginRatio): boolean {\n    return true;\n  }\n}\n","import Big, { BigSource } from \"big.js\";\n\nimport { Value } from \"./Value\";\nimport { MarginRatio } from \"./MarginRatio\";\nimport { Percentage, DecimalField } from \"./basic\";\nimport { BigType } from \"../serialization/BigType\";\nimport { Field } from \"../serialization/Field\";\nimport { QuoteValue } from \"./QuoteValue\";\n\nexport class Margin extends Value<Margin> {\n  private static MARGIN_ZERO = new Margin(0);\n\n  private constructor(value: BigSource) {\n    super(value);\n  }\n\n  public static of(raw: Big): Margin {\n    return new Margin(raw);\n  }\n\n  public static zero(): Margin {\n    return Margin.MARGIN_ZERO;\n  }\n\n  public static field(property: string): Field<Margin> {\n    return new MarginField(property);\n  }\n\n  public toCollateralValue(loanToValue: Percentage): QuoteValue {\n    return QuoteValue.of(this.getRaw().div(loanToValue.getRaw()));\n  }\n\n  public toRatioAgainst(threshold: Margin): MarginRatio {\n    if (threshold.isZero()) {\n      return MarginRatio.na();\n    }\n\n    return MarginRatio.of(\n      Percentage.fromOneBased(this.getRaw().div(threshold.raw))\n    );\n  }\n\n  public replaceWithValue(value: BigSource): Margin {\n    return new Margin(value);\n  }\n}\n\nclass MarginField extends DecimalField<Margin> {\n  public constructor(property: string) {\n    super(BigType.D128, property);\n  }\n\n  protected fromBig(big: Big): Margin {\n    return Margin.of(big);\n  }\n}\n","import Big, { BigSource } from \"big.js\";\nimport { Value } from \"./Value\";\nimport { ValueRatio } from \"./ValueRatio\";\nimport { Percentage, DecimalField } from \"./basic\";\nimport { BigType } from \"../serialization/BigType\";\nimport { Field } from \"../serialization/Field\";\nimport { Margin } from \"./Margin\";\n\nexport class QuoteValue extends Value<QuoteValue> {\n  private static readonly QUOTE_VALUE_ZERO = new QuoteValue(0);\n\n  private constructor(raw: BigSource) {\n    super(raw);\n  }\n\n  public static of(raw: BigSource): QuoteValue {\n    const result = new QuoteValue(raw);\n    if (result.isZero()) {\n      return QuoteValue.zero();\n    }\n\n    return result;\n  }\n\n  public static zero(): QuoteValue {\n    return QuoteValue.QUOTE_VALUE_ZERO;\n  }\n\n  public static field(property: string): Field<QuoteValue> {\n    return new QuoteValueField(property);\n  }\n\n  public toCollateralMargin(loanToValue: Percentage): Margin {\n    return Margin.of(this.getRaw().mul(loanToValue.getRaw()));\n  }\n\n  public toLoanMargin(): Margin {\n    return Margin.of(this.getRaw());\n  }\n\n  public toRatioAgainst(threshold: QuoteValue): ValueRatio {\n    if (threshold.isZero()) {\n      return ValueRatio.na();\n    }\n    const pct = Percentage.fromOneBased(this.getRaw().div(threshold.raw));\n    return ValueRatio.of(pct);\n  }\n\n  public replaceWithValue(value: BigSource): QuoteValue {\n    return new QuoteValue(value);\n  }\n}\n\nclass QuoteValueField extends DecimalField<QuoteValue> {\n  public constructor(property: string) {\n    super(BigType.D128, property);\n  }\n\n  protected fromBig(big: Big): QuoteValue {\n    return QuoteValue.of(big);\n  }\n}\n","import { MintId } from \"./MintId\";\nimport { AssetExchangeRate } from \"./AssetExchangeRate\";\nimport { Asset } from \"./Asset\";\nimport { Token, Lamport } from \"./basic\";\nimport { TokenAccount } from \"./TokenAccount\";\n\nexport class Share extends Token<Share> {\n  private constructor(mintId: MintId, lamport: Lamport) {\n    super(mintId, lamport);\n  }\n\n  public static zero(mintId: MintId): Share {\n    return Share.of(mintId, Lamport.zero());\n  }\n\n  public static max(mintId: MintId): Share {\n    return Share.of(mintId, Lamport.max());\n  }\n\n  public static fromTokenAccount(account: TokenAccount): Share {\n    return Share.of(account.getMintId(), account.getAmount());\n  }\n\n  public static of(mintId: MintId, lamport: Lamport): Share {\n    return new Share(mintId, lamport);\n  }\n\n  public toAsset(exchangeRatio: AssetExchangeRate): Asset {\n    console.assert(this.getMintId().equals(exchangeRatio.getShareMintId()));\n\n    if (!exchangeRatio.isPresent()) {\n      return Asset.zero(exchangeRatio.getAssetMintId());\n    }\n\n    const pct = exchangeRatio.getUnchecked();\n    const lamport = Lamport.of(this.getRaw().div(pct).round(0));\n    return Asset.of(exchangeRatio.getAssetMintId(), lamport);\n  }\n\n  protected wrap(value: Lamport): Share {\n    return Share.of(this.getMintId(), value);\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { Id } from \"./basic\";\nimport { NATIVE_MINT } from \"@solana/spl-token\";\nimport { PublicKeyField } from \"../serialization/PublicKeyField\";\nimport { Field } from \"../serialization/Field\";\n\nexport class MintId extends Id {\n  private constructor(key: PublicKey) {\n    super(key);\n  }\n\n  public static native(): MintId {\n    return MintId.of(NATIVE_MINT);\n  }\n\n  public static fromBase58(base58: string): MintId {\n    return MintId.of(new PublicKey(base58));\n  }\n\n  public static of(key: PublicKey): MintId {\n    return new MintId(key);\n  }\n\n  public static field(property: string): Field<MintId> {\n    return new MintIdField(property);\n  }\n\n  public isNative(): boolean {\n    return this.equals(NATIVE_MINT);\n  }\n}\n\nclass MintIdField extends PublicKeyField<MintId> {\n  public constructor(property: string) {\n    super(property);\n  }\n\n  protected fromPublicKey(pubKey: PublicKey): MintId {\n    return MintId.of(pubKey);\n  }\n}\n","import { MintId } from \"./MintId\";\nimport { ReserveId } from \"./ReserveId\";\nimport { AssetDisplayConfig } from \"./AssetDisplayConfig\";\nimport { AssetPriceConfig } from \"./AssetPriceConfig\";\nimport { AssetDepositConfig } from \"./AssetDepositConfig\";\nimport { Asset } from \"./Asset\";\nimport { Lamport } from \"./basic\";\n\nexport class AssetConfig {\n  private readonly mintId: MintId;\n  private readonly display: AssetDisplayConfig;\n  private readonly price: AssetPriceConfig;\n  private readonly deposit: AssetDepositConfig | undefined;\n  private readonly isDefault: boolean;\n\n  constructor(\n    mintId: MintId,\n    display: AssetDisplayConfig,\n    price: AssetPriceConfig,\n    deposit?: AssetDepositConfig,\n    isDefault?: boolean\n  ) {\n    this.mintId = mintId;\n    this.display = display;\n    this.price = price;\n    this.deposit = deposit;\n    this.isDefault = isDefault ?? false;\n  }\n\n  public checkIsDefault(): boolean {\n    return this.isDefault;\n  }\n\n  public getMintId(): MintId {\n    return this.mintId;\n  }\n\n  public getName(): string {\n    return this.getDisplayConfig().getName();\n  }\n\n  public getSymbol(): string {\n    return this.getDisplayConfig().getSymbol();\n  }\n\n  public getColor(): string | undefined {\n    return this.getDisplayConfig().getColor();\n  }\n\n  public getDisplayConfig(): AssetDisplayConfig {\n    return this.display;\n  }\n\n  public getPriceDecimals(): number {\n    return this.getPriceConfig().getDecimals();\n  }\n\n  public getPriceConfig(): AssetPriceConfig {\n    return this.price;\n  }\n\n  public getReserveId(): ReserveId | undefined {\n    return this.getDepositConfig()?.getReserveId();\n  }\n\n  public getMaxDeposit(): Asset | undefined {\n    const raw = this.getDepositConfig()?.getMax();\n    return raw ? Asset.of(this.mintId, Lamport.of(raw)) : undefined;\n  }\n\n  public getMinDeposit(): Asset | undefined {\n    const raw = this.getDepositConfig()?.getMin();\n    return raw ? Asset.of(this.mintId, Lamport.of(raw)) : undefined;\n  }\n\n  public getRemainAsset(): Asset | undefined {\n    const raw = this.getDepositConfig()?.getRemain();\n    return raw ? Asset.of(this.mintId, Lamport.of(raw)) : undefined;\n  }\n\n  public getDepositConfig(): AssetDepositConfig | undefined {\n    return this.deposit;\n  }\n}\n","export class AssetDisplayConfig {\n  private readonly name: string;\n  private readonly symbol: string;\n  // private readonly icon: string;\n  private readonly color?: string;\n\n  constructor(name: string, symbol: string, color?: string) {\n    this.name = name;\n    this.symbol = symbol;\n    // this.icon = icon;\n    this.color = color;\n  }\n\n  public getName(): string {\n    return this.name;\n  }\n\n  public getSymbol(): string {\n    return this.symbol;\n  }\n\n  // public getIcon(): string {\n  //   return this.icon;\n  // }\n\n  public getColor(): string | undefined {\n    return this.color;\n  }\n}\n","import Big from \"big.js\";\n\nexport class AssetPriceConfig {\n  private readonly decimals: number;\n  private readonly increment: Big;\n\n  private constructor(decimals: number, increment: Big) {\n    this.decimals = decimals;\n    this.increment = increment;\n  }\n\n  public static fromDecimals(decimals: number): AssetPriceConfig {\n    console.assert(Number.isInteger(decimals));\n    console.assert(decimals >= 0);\n    return new AssetPriceConfig(decimals, new Big(10).pow(decimals));\n  }\n\n  public getDecimals(): number {\n    return this.decimals;\n  }\n\n  public getIncrement(): Big {\n    return this.increment;\n  }\n}\n","// be careful with circular references.\nimport { AssetConfig } from \"../models/AssetConfig\";\nimport { AssetDisplayConfig } from \"../models/AssetDisplayConfig\";\nimport { AssetPriceConfig } from \"../models/AssetPriceConfig\";\nimport { MintId } from \"../models/MintId\";\n\nexport const DEFAULT_ASSET_CONFIG = new AssetConfig(\n  MintId.fromBase58(\"So11111111111111111111111111111111111111112\"),\n  new AssetDisplayConfig(\"Default Token\", \"Default\"),\n  AssetPriceConfig.fromDecimals(3)\n);\n","import { DEFAULT_ASSET_CONFIG } from \"../utils/defaultAssetConfig\";\nimport { AssetConfig } from \"./AssetConfig\";\nimport { MintId } from \"./MintId\";\nimport { ReserveId } from \"./ReserveId\";\n\nexport class AssetContext {\n  private readonly cache: Map<string, AssetConfig>;\n  private readonly bySymbol: Map<string, AssetConfig>;\n  private readonly byReserveId: Map<string, AssetConfig>;\n\n  private constructor(\n    cache: Map<string, AssetConfig>,\n    bySymbol: Map<string, AssetConfig>,\n    byReserveId: Map<string, AssetConfig>\n  ) {\n    this.cache = cache;\n    this.bySymbol = bySymbol;\n    this.byReserveId = byReserveId;\n  }\n\n  public static index(configs: AssetConfig[]): AssetContext {\n    const cache = new Map<string, AssetConfig>();\n    configs.forEach((config) =>\n      cache.set(config.getMintId().toString(), config)\n    );\n    const bySymbol = new Map<string, AssetConfig>();\n    configs.forEach((config) => bySymbol.set(config.getSymbol(), config));\n    const byReserveId = new Map<string, AssetConfig>();\n    for (const config of configs) {\n      const reserveId = config.getReserveId();\n      if (reserveId) {\n        byReserveId.set(reserveId.toBase58(), config);\n      }\n    }\n    return new AssetContext(cache, bySymbol, byReserveId);\n  }\n\n  public getAllConfigs(): AssetConfig[] {\n    return Array.from(this.cache.values());\n  }\n\n  public findConfig(mintId: MintId): AssetConfig {\n    const key = mintId.toString();\n    return this.cache.get(key) ?? DEFAULT_ASSET_CONFIG;\n  }\n\n  public findConfigBySymbol(symbol: string): AssetConfig {\n    return this.bySymbol.get(symbol) ?? DEFAULT_ASSET_CONFIG;\n  }\n\n  public findConfigByReserveId(reserveId: ReserveId): AssetConfig {\n    return this.byReserveId.get(reserveId.toBase58()) ?? DEFAULT_ASSET_CONFIG;\n  }\n}\n","import Big, { BigSource } from \"big.js\";\nimport { ReserveId } from \"./ReserveId\";\n\nexport class AssetDepositConfig {\n  private readonly reserveId: ReserveId;\n  private readonly min?: Big;\n  private readonly max?: Big;\n  private readonly remain?: Big;\n\n  constructor(\n    reserveId: ReserveId,\n    args?: { min?: BigSource; max?: BigSource; remain?: BigSource }\n  ) {\n    this.reserveId = reserveId;\n    this.min = args?.min ? new Big(args.min) : undefined;\n    this.max = args?.max ? new Big(args.max) : undefined;\n    this.remain = args?.remain ? new Big(args.remain) : undefined;\n  }\n\n  public getReserveId(): ReserveId {\n    return this.reserveId;\n  }\n\n  public getMin(): Big | undefined {\n    return this.min;\n  }\n\n  public getMax(): Big | undefined {\n    return this.max;\n  }\n\n  public getRemain(): Big | undefined {\n    return this.remain;\n  }\n}\n","import { MintId } from \"./MintId\";\nimport { Ratio, Percentage } from \"./basic\";\n\nexport class AssetExchangeRate extends Ratio<AssetExchangeRate> {\n  private readonly shareMintId: MintId;\n  private readonly assetMintId: MintId;\n\n  constructor(shareMintId: MintId, assetMintId: MintId, pct?: Percentage) {\n    super(pct);\n    this.shareMintId = shareMintId;\n    this.assetMintId = assetMintId;\n  }\n\n  public getShareMintId(): MintId {\n    return this.shareMintId;\n  }\n\n  public getAssetMintId(): MintId {\n    return this.assetMintId;\n  }\n\n  protected isCompatibleWith(that: AssetExchangeRate): boolean {\n    return (\n      this.shareMintId.equals(that.shareMintId) &&\n      this.assetMintId.equals(that.assetMintId)\n    );\n  }\n}\n","import Big, { BigSource } from \"big.js\";\nimport { Decimal, Percentage } from \"./basic\";\nimport { AssetConfig } from \"./AssetConfig\";\nimport { MintId } from \"./MintId\";\n\nexport class AssetPrice extends Decimal<AssetPrice> {\n  private readonly mintId: MintId;\n\n  private constructor(mintId: MintId, value: BigSource) {\n    super(value);\n    this.mintId = mintId;\n  }\n\n  public static of(mintId: MintId, value: BigSource): AssetPrice {\n    return new AssetPrice(mintId, value);\n  }\n\n  public getMintId(): MintId {\n    return this.mintId;\n  }\n\n  public addFee(pct: Percentage): AssetPrice {\n    return this.multiply(new Big(1).add(pct.getRaw()));\n  }\n\n  public print(config: AssetConfig): string {\n    const decimals = config.getPriceDecimals();\n    return \"$\" + this.raw.round(decimals, 1).toFixed(decimals); // RoundHalfUp\n  }\n\n  public replaceWithValue(value: BigSource): AssetPrice {\n    return new AssetPrice(this.getMintId(), value);\n  }\n\n  protected isCompatibleWith(that: AssetPrice): boolean {\n    return this.getMintId().equals(that.getMintId());\n  }\n}\n","import { QuoteValue } from \"./QuoteValue\";\nimport { MintId } from \"./MintId\";\nimport { Asset } from \"./Asset\";\n\nexport class AssetValue {\n  private readonly asset: Asset;\n  private readonly value: QuoteValue;\n\n  constructor(asset: Asset, value: QuoteValue) {\n    this.asset = asset;\n    this.value = value;\n  }\n\n  public static zero(mintId: MintId): AssetValue {\n    return new AssetValue(Asset.zero(mintId), QuoteValue.zero());\n  }\n\n  public getMintId(): MintId {\n    return this.getAsset().getMintId();\n  }\n\n  public getAsset(): Asset {\n    return this.asset;\n  }\n\n  public getValue(): QuoteValue {\n    return this.value;\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { Id } from \"./basic\";\nimport { PublicKeyField } from \"../serialization/PublicKeyField\";\nimport { Field } from \"../serialization/Field\";\n\nexport class AuthorityId extends Id {\n  private constructor(pubKey: PublicKey) {\n    super(pubKey);\n  }\n\n  public static fromBase58(base58: string): AuthorityId {\n    return AuthorityId.of(new PublicKey(base58));\n  }\n\n  public static of(pubKey: PublicKey): AuthorityId {\n    return new AuthorityId(pubKey);\n  }\n\n  public static field(property: string): Field<AuthorityId> {\n    return new AuthorityIdField(property);\n  }\n}\n\nclass AuthorityIdField extends PublicKeyField<AuthorityId> {\n  public constructor(property: string) {\n    super(property);\n  }\n\n  protected fromPublicKey(pubKey: PublicKey): AuthorityId {\n    return AuthorityId.of(pubKey);\n  }\n}\n","import { ReserveId } from \"./ReserveId\";\nimport { Lamport, WrappedLamport } from \"./basic\";\n\nexport abstract class ProfileEntry<\n  T extends ProfileEntry<T>\n> extends WrappedLamport<T> {\n  private readonly reserveId: ReserveId;\n\n  protected constructor(reserveId: ReserveId, amount: Lamport) {\n    super(amount);\n    this.reserveId = reserveId;\n  }\n\n  public getReserveId(): ReserveId {\n    return this.reserveId;\n  }\n\n  protected isCompatibleWith(that: T): boolean {\n    return this.getReserveId().equals(that.getReserveId());\n  }\n}\n","import { ReserveId } from \"./ReserveId\";\nimport { Lamport } from \"./basic\";\nimport { ProfileEntry } from \"./ProfileEntry\";\n\nexport class Collateral extends ProfileEntry<Collateral> {\n  public constructor(reserveId: ReserveId, amount: Lamport) {\n    super(reserveId, amount);\n  }\n\n  public static zero(reserveId: ReserveId): Collateral {\n    return new Collateral(reserveId, Lamport.zero());\n  }\n\n  protected wrap(value: Lamport): Collateral {\n    return new Collateral(this.getReserveId(), value);\n  }\n}\n","import Big, { BigSource } from \"big.js\";\nimport { Decimal, DecimalField } from \"./basic\";\nimport { Field } from \"../serialization/Field\";\nimport { BigType } from \"../serialization/BigType\";\n\nexport class ExchangeRate extends Decimal<ExchangeRate> {\n  private static ZERO = ExchangeRate.of(0);\n\n  private constructor(value: BigSource) {\n    super(value);\n  }\n\n  public static zero(): ExchangeRate {\n    return ExchangeRate.ZERO;\n  }\n\n  public static of(raw: BigSource): ExchangeRate {\n    return new ExchangeRate(raw);\n  }\n\n  public static field(type: BigType, property: string): Field<ExchangeRate> {\n    return new ExchangeRateField(type, property);\n  }\n\n  public replaceWithValue(value: BigSource): ExchangeRate {\n    return ExchangeRate.of(value);\n  }\n}\n\nclass ExchangeRateField extends DecimalField<ExchangeRate> {\n  public constructor(type: BigType, property: string) {\n    super(type, property);\n  }\n\n  protected fromBig(big: Big): ExchangeRate {\n    return ExchangeRate.of(big);\n  }\n}\n","import { ReserveId } from \"./ReserveId\";\nimport { Lamport } from \"./basic\";\nimport { ProfileEntry } from \"./ProfileEntry\";\nimport { ExchangeRate } from \"./ExchangeRate\";\nimport { ReserveInfo } from \"./ReserveInfo\";\n\nexport class Loan extends ProfileEntry<Loan> {\n  private readonly cumulativeBorrowRate: ExchangeRate;\n\n  public constructor(\n    reserveId: ReserveId,\n    amount: Lamport,\n    cumulativeBorrowRate: ExchangeRate\n  ) {\n    super(reserveId, amount);\n    this.cumulativeBorrowRate = cumulativeBorrowRate;\n  }\n\n  public static zero(reserve: ReserveInfo): Loan {\n    return new Loan(\n      reserve.getReserveId(),\n      Lamport.zero(),\n      reserve.asset.getCumulativeBorrowRate()\n    );\n  }\n\n  public accrueInterest(newCumulativeBorrowRate: ExchangeRate): Loan {\n    const compoundedInterestRate = newCumulativeBorrowRate.divide(\n      this.cumulativeBorrowRate.getRaw()\n    );\n    const newAmount = this.getAmount().multiply(\n      compoundedInterestRate.getRaw()\n    );\n    return new Loan(this.getReserveId(), newAmount, newCumulativeBorrowRate);\n  }\n\n  public getCumulativeBorrowRate(): ExchangeRate {\n    return this.cumulativeBorrowRate;\n  }\n\n  protected wrap(value: Lamport): Loan {\n    return new Loan(this.getReserveId(), value, this.cumulativeBorrowRate);\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { Id } from \"./basic\";\nimport { PublicKeyField } from \"../serialization/PublicKeyField\";\nimport { Field } from \"../serialization/Field\";\nimport { MARKET_MAP } from \"../constants\";\n\nexport class MarketId extends Id {\n  private constructor(key: PublicKey) {\n    super(key);\n  }\n\n  public static fromBase58(base58: string): MarketId {\n    return MarketId.of(new PublicKey(base58));\n  }\n\n  public static of(key: PublicKey): MarketId {\n    return new MarketId(key);\n  }\n\n  public static field(property: string): Field<MarketId> {\n    return new MarketIdField(property);\n  }\n\n  public getName(): string {\n    return MARKET_MAP[this.toBase58()] ?? \"unknown\";\n  }\n}\n\nclass MarketIdField extends PublicKeyField<MarketId> {\n  public constructor(property: string) {\n    super(property);\n  }\n\n  protected fromPublicKey(pubKey: PublicKey): MarketId {\n    return MarketId.of(pubKey);\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { Id } from \"./basic\";\n\nexport class OracleId extends Id {\n  static fromBase58(base58: string): OracleId {\n    return new OracleId(new PublicKey(base58));\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { Id } from \"./basic\";\nimport { PublicKeyField } from \"../serialization/PublicKeyField\";\nimport { Field } from \"../serialization/Field\";\n\nexport class PortProfileId extends Id {\n  private constructor(key: PublicKey) {\n    super(key);\n  }\n\n  public static of(pubKey: PublicKey): PortProfileId {\n    return new PortProfileId(pubKey);\n  }\n\n  public static fromBase58(base58: string): PortProfileId {\n    return PortProfileId.of(new PublicKey(base58));\n  }\n\n  public static field(property: string): Field<PortProfileId> {\n    return new PortProfileIdField(property);\n  }\n}\n\nclass PortProfileIdField extends PublicKeyField<PortProfileId> {\n  public constructor(property: string) {\n    super(property);\n  }\n\n  protected fromPublicKey(pubKey: PublicKey): PortProfileId {\n    return PortProfileId.of(pubKey);\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { Id } from \"./basic\";\nimport { PublicKeyField } from \"../serialization/PublicKeyField\";\nimport { Field } from \"../serialization/Field\";\n\nexport class ReserveId extends Id {\n  private constructor(key: PublicKey) {\n    super(key);\n  }\n\n  public static fromBase58(base58: string): ReserveId {\n    return ReserveId.of(new PublicKey(base58));\n  }\n\n  public static of(pubKey: PublicKey): ReserveId {\n    return new ReserveId(pubKey);\n  }\n\n  public static field(property: string): Field<ReserveId> {\n    return new ReserveIdField(property);\n  }\n}\n\nclass ReserveIdField extends PublicKeyField<ReserveId> {\n  public constructor(property: string) {\n    super(property);\n  }\n\n  protected fromPublicKey(pubKey: PublicKey): ReserveId {\n    return ReserveId.of(pubKey);\n  }\n}\n","import { PortProfileId } from \"./PortProfileId\";\nimport { Collateral } from \"./Collateral\";\nimport { Loan } from \"./Loan\";\nimport { ReserveId } from \"./ReserveId\";\nimport { Margin } from \"./Margin\";\nimport { MarginRatio } from \"./MarginRatio\";\nimport { Parsed } from \"../serialization/Parsed\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport { RawData } from \"../serialization/RawData\";\nimport {\n  ObligationCollateralLayout,\n  ObligationLayout,\n  ObligationLiquidityLayout,\n  PortProfileCollateralData,\n  PortProfileData,\n  PortProfileLoanData,\n  ProtoObligation,\n} from \"../structs\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { QuoteValue } from \"./QuoteValue\";\n\nexport class PortProfile implements Parsed<PortProfileId> {\n  private readonly profileId: PortProfileId;\n  private readonly collaterals: Collateral[];\n  private readonly loans: Loan[];\n  private readonly loanMargin: Margin;\n  private readonly initialMargin: Margin;\n  private readonly maintenanceMargin: Margin;\n\n  // use in api-server\n  private readonly owner: PublicKey | undefined;\n  private readonly depositedValue: QuoteValue | undefined;\n\n  private constructor(\n    profileId: PortProfileId,\n    collaterals: Collateral[],\n    loans: Loan[],\n    loanMargin: Margin,\n    initialMargin: Margin,\n    maintenanceMargin: Margin,\n    owner?: PublicKey,\n    depositedValue?: QuoteValue\n  ) {\n    this.profileId = profileId;\n    this.collaterals = collaterals;\n    this.loans = loans;\n    this.loanMargin = loanMargin;\n    this.initialMargin = initialMargin;\n    this.maintenanceMargin = maintenanceMargin;\n    this.owner = owner;\n    this.depositedValue = depositedValue;\n  }\n\n  public static newAccount(profileId: PortProfileId): PortProfile {\n    return new PortProfile(\n      profileId,\n      [],\n      [],\n      Margin.zero(),\n      Margin.zero(),\n      Margin.zero()\n    );\n  }\n\n  public static fromRaw(raw: RawData): PortProfile {\n    const profileId = PortProfileId.of(raw.pubkey);\n    // eslint-disable-next-line new-cap\n    const proto = PortProfileParser(raw.account.data);\n\n    const collaterals = proto.deposits.map(\n      (c) => new Collateral(ReserveId.of(c.depositReserve), c.depositedAmount)\n    );\n    const loans = proto.borrows.map(\n      (l) =>\n        new Loan(\n          l.borrowReserve,\n          l.borrowedAmountWads,\n          l.cumulativeBorrowRateWads\n        )\n    );\n    const loanMargin = proto.borrowedValue;\n    const initialMargin = proto.allowedBorrowValue;\n    const maintenanceMargin = proto.unhealthyBorrowValue;\n    const depositedValue = proto.depositedValue;\n    const owner = proto.owner;\n    return new PortProfile(\n      profileId,\n      collaterals,\n      loans,\n      loanMargin,\n      initialMargin,\n      maintenanceMargin,\n      owner,\n      depositedValue\n    );\n  }\n\n  public getDepositedValue(): QuoteValue | undefined {\n    return this.depositedValue;\n  }\n\n  public getOwner(): PublicKey | undefined {\n    return this.owner;\n  }\n\n  public getId(): PortProfileId {\n    return this.getProfileId();\n  }\n\n  public getProfileId(): PortProfileId {\n    return this.profileId;\n  }\n\n  public getCollateral(reserveId: ReserveId): Collateral | undefined {\n    return this.getCollaterals().find((c) =>\n      c.getReserveId().equals(reserveId)\n    );\n  }\n\n  public getCollateralReserveIds(): ReserveId[] {\n    return this.getCollaterals().map((c) => c.getReserveId());\n  }\n\n  public getCollaterals(): Collateral[] {\n    return this.collaterals;\n  }\n\n  public getLoan(reserveId: ReserveId): Loan | undefined {\n    return this.getLoans().find((l) => l.getReserveId().equals(reserveId));\n  }\n\n  public getLoanReserveIds(): ReserveId[] {\n    return this.getLoans().map((l) => l.getReserveId());\n  }\n\n  public getLoans(): Loan[] {\n    return this.loans;\n  }\n\n  public getLoanMargin(): Margin {\n    return this.loanMargin;\n  }\n\n  public getInitialMargin(): Margin {\n    return this.initialMargin;\n  }\n\n  public getMaintenanceMargin(): Margin {\n    return this.maintenanceMargin;\n  }\n\n  public getRiskFactor(): MarginRatio {\n    return this.getLoanMargin().toRatioAgainst(this.getMaintenanceMargin());\n  }\n\n  public getLoanToValue(): MarginRatio {\n    return this.getLoanMargin().toRatioAgainst(this.getInitialMargin());\n  }\n}\n\nconst PortProfileParser = (buffer: Buffer) => {\n  const {\n    version,\n    lastUpdate,\n    lendingMarket,\n    owner,\n    depositedValue,\n    borrowedValue,\n    allowedBorrowValue,\n    unhealthyBorrowValue,\n    depositsLen,\n    borrowsLen,\n    dataFlat,\n  } = ObligationLayout.decode(buffer) as ProtoObligation;\n\n  const depositsBuffer = dataFlat.slice(\n    0,\n    depositsLen * ObligationCollateralLayout.span\n  );\n  const deposits = BufferLayout.seq(\n    ObligationCollateralLayout,\n    depositsLen\n  ).decode(depositsBuffer) as PortProfileCollateralData[];\n\n  const borrowsBuffer = dataFlat.slice(\n    depositsBuffer.length,\n    depositsBuffer.length + borrowsLen * ObligationLiquidityLayout.span\n  );\n  const borrows = BufferLayout.seq(\n    ObligationLiquidityLayout,\n    borrowsLen\n  ).decode(borrowsBuffer) as PortProfileLoanData[];\n\n  return {\n    version,\n    lastUpdate,\n    lendingMarket,\n    owner,\n    depositedValue,\n    borrowedValue,\n    allowedBorrowValue,\n    unhealthyBorrowValue,\n    deposits,\n    borrows,\n  } as PortProfileData;\n};\n","/* eslint-disable new-cap */\nimport { AccountInfo, PublicKey } from \"@solana/web3.js\";\nimport Big from \"big.js\";\n\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport { Lamport, Percentage } from \"../models/basic\";\nimport { ExchangeRate } from \"../models/ExchangeRate\";\nimport { MintId } from \"../models/MintId\";\nimport { StakingPoolId } from \"../models/staking\";\nimport { TokenAccountId } from \"../models/TokenAccountId\";\nimport { BigField } from \"../serialization/BigField\";\nimport { BigType } from \"../serialization/BigType\";\nimport { Optional } from \"../serialization/Optional\";\nimport * as Layout from \"../serialization/layout\";\nimport { SlotInfo, SlotInfoLayout } from \"./SlotInfo\";\nimport BN from \"bn.js\";\n\nexport interface ReserveData {\n  version: number;\n  lastUpdate: SlotInfo;\n  lendingMarket: PublicKey;\n  liquidity: ReserveLiquidity;\n  collateral: ReserveCollateral;\n  config: ReserveConfig;\n}\n\nexport interface ReserveLiquidity {\n  mintPubkey: MintId;\n  mintDecimals: number;\n  supplyPubkey: TokenAccountId;\n  feeReceiver: TokenAccountId;\n  oracleOption: number;\n  oraclePubkey: PublicKey;\n  availableAmount: Lamport;\n  borrowedAmountWads: Lamport;\n  cumulativeBorrowRateWads: ExchangeRate;\n  marketPrice: Big;\n}\n\nexport interface ReserveCollateral {\n  mintPubkey: MintId;\n  mintTotalSupply: Lamport;\n  supplyPubkey: TokenAccountId;\n}\n\n// only use in create-reserve instruction.\nexport interface ReserveConfigProto {\n  optimalUtilizationRate: number;\n  loanToValueRatio: number;\n  liquidationBonus: number;\n  liquidationThreshold: number;\n  minBorrowRate: number;\n  optimalBorrowRate: number;\n  maxBorrowRate: number;\n  fees: {\n    borrowFeeWad: BN;\n    flashLoanFeeWad: BN;\n    hostFeePercentage: number;\n  };\n  stakingPoolOption: number;\n  stakingPool: PublicKey;\n}\n\n// only use in create-reserve instruction.\nexport const ReserveConfigProtoLayout = (\n  property: string\n): BufferLayout.Structure =>\n  BufferLayout.struct(\n    [\n      BufferLayout.u8(\"optimalUtilizationRate\"),\n      BufferLayout.u8(\"loanToValueRatio\"),\n      BufferLayout.u8(\"liquidationBonus\"),\n      BufferLayout.u8(\"liquidationThreshold\"),\n      BufferLayout.u8(\"minBorrowRate\"),\n      BufferLayout.u8(\"optimalBorrowRate\"),\n      BufferLayout.u8(\"maxBorrowRate\"),\n      ReserveFeesProtoLayout(\"fees\"),\n      BufferLayout.u8(\"stakingPoolOption\"),\n      Layout.publicKey(\"stakingPool\"),\n    ],\n    property\n  );\n\n// only use in create-reserve instruction.\nconst ReserveFeesProtoLayout = (property: string): BufferLayout.Structure =>\n  BufferLayout.struct(\n    [\n      Layout.uint64(\"borrowFeeWad\"),\n      Layout.uint64(\"flashLoanFeeWad\"),\n      BufferLayout.u8(\"hostFeePercentage\"),\n    ],\n    property\n  );\n\nexport interface ReserveConfig {\n  optimalUtilizationRate: Percentage;\n  loanToValueRatio: Percentage;\n  liquidationBonus: Percentage;\n  liquidationThreshold: Percentage;\n  minBorrowRate: Percentage;\n  optimalBorrowRate: Percentage;\n  maxBorrowRate: Percentage;\n  fees: {\n    borrowFeeWad: Big;\n    flashLoanFeeWad: Big;\n    hostFeePercentage: number;\n  };\n  stakingPoolId: StakingPoolId | undefined;\n}\n\nexport const ReserveLiquidityLayout = (\n  property: string\n): BufferLayout.Structure =>\n  BufferLayout.struct(\n    [\n      MintId.field(\"mintPubkey\"),\n      BufferLayout.u8(\"mintDecimals\"),\n      TokenAccountId.field(\"supplyPubkey\"),\n      TokenAccountId.field(\"feeReceiver\"),\n      BufferLayout.u32(\"oracleOption\"),\n      Layout.publicKey(\"oraclePubkey\"),\n      Lamport.field(BigType.U64, \"availableAmount\"),\n      Lamport.field(BigType.D128, \"borrowedAmountWads\"),\n      ExchangeRate.field(BigType.D128, \"cumulativeBorrowRateWads\"),\n      BigField.forType(BigType.D128, \"marketPrice\"),\n    ],\n    property\n  );\n\nexport const ReserveCollateralLayout = (\n  property: string\n): BufferLayout.Structure =>\n  BufferLayout.struct(\n    [\n      MintId.field(\"mintPubkey\"),\n      Lamport.field(BigType.U64, \"mintTotalSupply\"),\n      TokenAccountId.field(\"supplyPubkey\"),\n    ],\n    property\n  );\n\nexport const ReserveFeesLayout = (property: string): BufferLayout.Structure =>\n  BufferLayout.struct(\n    [\n      BigField.forType(BigType.D64, \"borrowFeeWad\"),\n      BigField.forType(BigType.D64, \"flashLoanFeeWad\"),\n      BufferLayout.u8(\"hostFeePercentage\"),\n    ],\n    property\n  );\n\nexport const ReserveConfigLayout = (property: string): BufferLayout.Structure =>\n  BufferLayout.struct(\n    [\n      Percentage.field(\"optimalUtilizationRate\"),\n      Percentage.field(\"loanToValueRatio\"),\n      Percentage.field(\"liquidationBonus\"),\n      Percentage.field(\"liquidationThreshold\"),\n      Percentage.field(\"minBorrowRate\"),\n      Percentage.field(\"optimalBorrowRate\"),\n      Percentage.field(\"maxBorrowRate\"),\n      ReserveFeesLayout(\"fees\"),\n      Optional.of(StakingPoolId.field(\"stakingPoolId\")),\n    ],\n    property\n  );\n\nexport const ReserveLayout = BufferLayout.struct([\n  BufferLayout.u8(\"version\"),\n  SlotInfoLayout(\"lastUpdate\"),\n  Layout.publicKey(\"lendingMarket\"),\n  ReserveLiquidityLayout(\"liquidity\"),\n  ReserveCollateralLayout(\"collateral\"),\n  ReserveConfigLayout(\"config\"),\n  BufferLayout.blob(215, \"padding2\"),\n]);\n\nexport const isReserve = (info: AccountInfo<Buffer>): boolean => {\n  return info.data.length === ReserveLayout.span;\n};\n\nexport const RESERVE_DATA_SIZE = ReserveLayout.span;\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { Id } from \"./basic\";\nimport { WalletId } from \"./WalletId\";\nimport { PublicKeyField } from \"../serialization/PublicKeyField\";\nimport { Field } from \"../serialization/Field\";\n\nexport class TokenAccountId extends Id {\n  private constructor(key: PublicKey) {\n    super(key);\n  }\n\n  public static native(walletId: WalletId): TokenAccountId {\n    return TokenAccountId.of(walletId);\n  }\n\n  public static of(pubKey: PublicKey): TokenAccountId {\n    return new TokenAccountId(pubKey);\n  }\n\n  public static field(property: string): Field<TokenAccountId> {\n    return new SplAccountIdField(property);\n  }\n}\n\nclass SplAccountIdField extends PublicKeyField<TokenAccountId> {\n  public constructor(property: string) {\n    super(property);\n  }\n\n  protected fromPublicKey(pubKey: PublicKey): TokenAccountId {\n    return TokenAccountId.of(pubKey);\n  }\n}\n","import * as BufferLayout from \"@solana/buffer-layout\";\nimport { Field } from \"./Field\";\n\nexport class Optional<T> extends Field<T | undefined> {\n  private readonly delegate: Field<T>;\n\n  private constructor(field: Field<T>) {\n    super(field.span + 1, field.property);\n    this.delegate = field;\n  }\n\n  public static of<T>(field: Field<T>): Optional<T> {\n    return new Optional(field);\n  }\n\n  public decode(b: Uint8Array, offset?: number): T | undefined {\n    const flag = BufferLayout.u8().decode(b, offset);\n    if (!flag) {\n      return undefined;\n    }\n\n    return this.delegate.decode(b, (offset || 0) + 1);\n  }\n}\n","import BN from \"bn.js\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport * as Layout from \"../serialization/layout\";\n\nexport const SlotInfoLayout = (property: string): BufferLayout.Structure =>\n  BufferLayout.struct(\n    [Layout.uint64(\"slot\"), BufferLayout.u8(\"stale\")],\n    property\n  );\n\nexport interface SlotInfo {\n  slot: BN;\n  stale: boolean;\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { Id } from \"./basic\";\nimport { PublicKeyField } from \"../serialization/PublicKeyField\";\nimport { Field } from \"../serialization/Field\";\n\nexport class WalletId extends Id {\n  private constructor(key: PublicKey) {\n    super(key);\n  }\n\n  public static fromBase58(base58: string): WalletId {\n    return WalletId.of(new PublicKey(base58));\n  }\n\n  public static of(key: PublicKey): WalletId {\n    return new WalletId(key);\n  }\n\n  public static field(property: string): Field<WalletId> {\n    return new WalletIdField(property);\n  }\n}\n\nclass WalletIdField extends PublicKeyField<WalletId> {\n  public constructor(property: string) {\n    super(property);\n  }\n\n  protected fromPublicKey(pubKey: PublicKey): WalletId {\n    return WalletId.of(pubKey);\n  }\n}\n","import { Margin } from \"../models/Margin\";\nimport { QuoteValue } from \"../models/QuoteValue\";\nimport { WalletId } from \"../models/WalletId\";\nimport { SlotInfo, SlotInfoLayout } from \"./SlotInfo\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport * as Layout from \"../serialization/layout\";\nimport { ReserveId } from \"../models/ReserveId\";\nimport { Lamport } from \"../models/basic\";\nimport { BigType } from \"../serialization/BigType\";\nimport { ExchangeRate } from \"../models/ExchangeRate\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nexport const ObligationLayout = BufferLayout.struct([\n  BufferLayout.u8(\"version\"),\n  // eslint-disable-next-line new-cap\n  SlotInfoLayout(\"lastUpdate\"),\n  Layout.publicKey(\"lendingMarket\"),\n  WalletId.field(\"owner\"),\n  QuoteValue.field(\"depositedValue\"),\n  Margin.field(\"borrowedValue\"),\n  Margin.field(\"allowedBorrowValue\"),\n  Margin.field(\"unhealthyBorrowValue\"),\n\n  BufferLayout.u8(\"depositsLen\"),\n  BufferLayout.u8(\"borrowsLen\"),\n  BufferLayout.blob(776, \"dataFlat\"),\n]);\n\nexport const ObligationCollateralLayout = BufferLayout.struct([\n  ReserveId.field(\"depositReserve\"),\n  Lamport.field(BigType.U64, \"depositedAmount\"),\n  QuoteValue.field(\"marketValue\"),\n]);\n\nexport const ObligationLiquidityLayout = BufferLayout.struct([\n  ReserveId.field(\"borrowReserve\"),\n  ExchangeRate.field(BigType.D128, \"cumulativeBorrowRateWads\"),\n  Lamport.field(BigType.D128, \"borrowedAmountWads\"),\n  QuoteValue.field(\"marketValue\"),\n]);\n\nexport interface ProtoObligation {\n  version: number;\n  lastUpdate: SlotInfo;\n  lendingMarket: PublicKey;\n  owner: WalletId;\n  depositedValue: QuoteValue;\n  borrowedValue: Margin;\n  allowedBorrowValue: Margin;\n  unhealthyBorrowValue: Margin;\n  depositsLen: number;\n  borrowsLen: number;\n  dataFlat: Buffer;\n}\n\nexport interface PortProfileData {\n  version: number;\n  lastUpdate: SlotInfo;\n  lendingMarket: PublicKey;\n  owner: PublicKey;\n  deposits: PortProfileCollateralData[];\n  borrows: PortProfileLoanData[];\n  depositedValue: QuoteValue;\n  borrowedValue: Margin;\n  allowedBorrowValue: Margin;\n  unhealthyBorrowValue: Margin;\n}\n\nexport interface PortProfileCollateralData {\n  depositReserve: ReserveId;\n  depositedAmount: Lamport;\n  marketValue: QuoteValue;\n}\n\nexport interface PortProfileLoanData {\n  borrowReserve: ReserveId;\n  cumulativeBorrowRateWads: ExchangeRate;\n  borrowedAmountWads: Lamport;\n  marketValue: QuoteValue;\n}\n\nexport const PORT_PROFILE_DATA_SIZE = ObligationLayout.span;\n","import { PortProfile } from \"./PortProfile\";\nimport { PortProfileId } from \"./PortProfileId\";\n\nexport class PortProfileContext {\n  private readonly selectedProfile: PortProfile | undefined;\n  private readonly allProfiles: PortProfile[];\n\n  private constructor(\n    selectedProfile: PortProfile | undefined,\n    allProfiles: PortProfile[]\n  ) {\n    this.selectedProfile = selectedProfile;\n    this.allProfiles = allProfiles;\n  }\n\n  public static index(\n    profiles: PortProfile[],\n    whitelist: PortProfileId | undefined\n  ): PortProfileContext {\n    profiles = profiles.sort(byCollateralAndLoanCountDesc);\n    let selected = whitelist\n      ? profiles.find((p) => p.getProfileId().equals(whitelist))\n      : undefined;\n    if (!selected && profiles.length) {\n      selected = profiles[0];\n    }\n    return new PortProfileContext(selected, profiles);\n  }\n\n  public getSelectedProfile(): PortProfile | undefined {\n    return this.selectedProfile;\n  }\n\n  public getAllProfiles(): PortProfile[] {\n    return this.allProfiles;\n  }\n}\n\nfunction byCollateralAndLoanCountDesc(a: PortProfile, b: PortProfile): number {\n  const aCount = a.getCollaterals().length + a.getLoans().length;\n  const bCount = b.getCollaterals().length + b.getLoans().length;\n  return bCount - aCount;\n}\n","import { AssetPrice } from \"./AssetPrice\";\nimport { MintId } from \"./MintId\";\n\nexport class PriceOracle {\n  readonly cache: Map<string, AssetPrice>;\n\n  constructor(cache: Map<string, AssetPrice>) {\n    this.cache = cache;\n  }\n\n  public static index(prices: AssetPrice[]): PriceOracle {\n    const cache = new Map<string, AssetPrice>();\n    prices.forEach((price) => cache.set(price.getMintId().toString(), price));\n    return new PriceOracle(cache);\n  }\n\n  public getPrice(mintId: MintId): AssetPrice | undefined {\n    const key = mintId.toString();\n    return this.cache.get(key);\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { Id } from \"./basic\";\n\nexport class ProgramId extends Id {\n  private constructor(key: PublicKey) {\n    super(key);\n  }\n\n  public static fromBase58(base58: string): ProgramId {\n    return ProgramId.of(new PublicKey(base58));\n  }\n\n  public static of(key: PublicKey): ProgramId {\n    return new ProgramId(key);\n  }\n}\n","import { Loan } from \"./Loan\";\nimport { Collateral } from \"./Collateral\";\nimport { ProfileEntry } from \"./ProfileEntry\";\nimport { Asset } from \"./Asset\";\nimport { Share } from \"./Share\";\nimport { MintId } from \"./MintId\";\nimport { ReserveId } from \"./ReserveId\";\n\nexport class ProposedAction {\n  private readonly assets: Asset[];\n  private readonly shares: Share[];\n  private readonly collaterals: Collateral[];\n  private readonly loans: Loan[];\n\n  constructor(\n    assets: Asset[],\n    shares: Share[],\n    collaterals: Collateral[],\n    loans: Loan[]\n  ) {\n    this.assets = assets;\n    this.shares = shares;\n    this.collaterals = collaterals;\n    this.loans = loans;\n  }\n\n  public static newProposal(args: {\n    newAsset?: Asset;\n    newShare?: Share;\n    newCollateral?: Collateral;\n    newLoan?: Loan;\n  }): ProposedAction {\n    const assets: Asset[] = [];\n    const shares: Share[] = [];\n    const collaterals: Collateral[] = [];\n    const loans: Loan[] = [];\n    if (args.newAsset) {\n      assets.push(args.newAsset);\n    }\n    if (args.newShare) {\n      shares.push(args.newShare);\n    }\n    if (args.newCollateral) {\n      collaterals.push(args.newCollateral);\n    }\n    if (args.newLoan) {\n      loans.push(args.newLoan);\n    }\n    return new ProposedAction(assets, shares, collaterals, loans);\n  }\n\n  public getUpdatedAsset(assetMintId: MintId): Asset | undefined {\n    return this.assets.find((a) => a.getMintId().equals(assetMintId));\n  }\n\n  public getUpdatedShare(shareMintId: MintId): Share | undefined {\n    return this.shares.find((s) => s.getMintId().equals(shareMintId));\n  }\n\n  public getUpdatedCollateral(reserveId: ReserveId): Collateral | undefined {\n    return this.collaterals.find((c) => c.getReserveId().equals(reserveId));\n  }\n\n  public getUpdatedLoan(reserveId: ReserveId): Loan | undefined {\n    return this.loans.find((l) => l.getReserveId().equals(reserveId));\n  }\n\n  public getUpdatedCollaterals(collaterals: Collateral[]): Collateral[] {\n    return ProposedAction.proposal(collaterals, this.collaterals);\n  }\n\n  public getUpdatedLoans(loans: Loan[]): Loan[] {\n    return ProposedAction.proposal(loans, this.loans);\n  }\n\n  private static proposal<T extends ProfileEntry<T>>(\n    entries: T[],\n    proposal: T[]\n  ): T[] {\n    if (!proposal.length) {\n      return entries;\n    }\n\n    const map = new Map<string, T>();\n    for (const e of entries) {\n      map.set(e.getReserveId().toBase58(), e);\n    }\n    for (const e of proposal) {\n      map.set(e.getReserveId().toBase58(), e);\n    }\n    return Array.from(map.values());\n  }\n}\n","import { MintId } from \"./MintId\";\nimport { Ratio, Percentage } from \"./basic\";\nexport class ReserveBorrowRate extends Ratio<ReserveBorrowRate> {\n  private readonly mintId: MintId;\n\n  constructor(mintId: MintId, pct?: Percentage) {\n    super(pct);\n    this.mintId = mintId;\n  }\n\n  static na(mintId: MintId): ReserveBorrowRate {\n    return new ReserveBorrowRate(mintId);\n  }\n\n  public getMintId(): MintId {\n    return this.mintId;\n  }\n\n  protected isCompatibleWith(that: ReserveBorrowRate): boolean {\n    return this.mintId.equals(that.mintId);\n  }\n}\n","import { MintId } from \"./MintId\";\nimport { ReserveInfo } from \"./ReserveInfo\";\nimport { ReserveId } from \"./ReserveId\";\nimport { StakingPoolId } from \"./staking/StakingPoolId\";\nimport { OracleId } from \"./OracleId\";\nimport type { TokenInfo } from \"@solana/spl-token-registry\";\n\nexport class ReserveContext {\n  private static readonly RESERVE_CONTEXT_EMPTY = new ReserveContext(\n    [],\n    new Map(),\n    new Map(),\n    new Map(),\n    new Map()\n  );\n\n  private readonly reserves: ReserveInfo[];\n  private readonly byReserveId: Map<string, ReserveInfo>;\n  private readonly byAssetMintId: Map<string, ReserveInfo>;\n  private readonly byShareMintId: Map<string, ReserveInfo>;\n  private readonly byStakingPoolId: Map<string, ReserveInfo>;\n\n  private constructor(\n    reserves: ReserveInfo[],\n    byReserveId: Map<string, ReserveInfo>,\n    byAssetMintId: Map<string, ReserveInfo>,\n    byShareMintId: Map<string, ReserveInfo>,\n    byStakingPoolId: Map<string, ReserveInfo>\n  ) {\n    this.reserves = reserves;\n    this.byReserveId = byReserveId;\n    this.byAssetMintId = byAssetMintId;\n    this.byShareMintId = byShareMintId;\n    this.byStakingPoolId = byStakingPoolId;\n  }\n\n  public static empty(): ReserveContext {\n    return ReserveContext.RESERVE_CONTEXT_EMPTY;\n  }\n\n  public static index(\n    reserves: ReserveInfo[],\n    tokenMap?: Map<string, TokenInfo>\n  ): ReserveContext {\n    if (!reserves.length) {\n      return ReserveContext.empty();\n    }\n\n    const readyToSortReserves = tokenMap\n      ? reserves.filter((r) => {\n          return tokenMap.has(r.getAssetMintId().toString());\n        })\n      : reserves;\n\n    const sorted = readyToSortReserves.sort(\n      (a, b) =>\n        -a.getMarketCap().getValue().compare(b.getMarketCap().getValue())\n    );\n\n    const byReserveId = new Map<string, ReserveInfo>();\n    const byAssetMintId = new Map<string, ReserveInfo>();\n    const byShareMintId = new Map<string, ReserveInfo>();\n    const byStakingPoolId = new Map<string, ReserveInfo>();\n    sorted.forEach((reserve) =>\n      byReserveId.set(reserve.getReserveId().toString(), reserve)\n    );\n    sorted.forEach((reserve) =>\n      byAssetMintId.set(reserve.getAssetMintId().toString(), reserve)\n    );\n    sorted.forEach((reserve) =>\n      byShareMintId.set(reserve.getShareMintId().toString(), reserve)\n    );\n    sorted.forEach((reserve) => {\n      const stakingPoolId = reserve.getStakingPoolId();\n      if (stakingPoolId) {\n        byStakingPoolId.set(stakingPoolId.toString(), reserve);\n      }\n    });\n    return new ReserveContext(\n      sorted,\n      byReserveId,\n      byAssetMintId,\n      byShareMintId,\n      byStakingPoolId\n    );\n  }\n\n  public isReady(): boolean {\n    return this.reserves.length > 0;\n  }\n\n  public getAllReserves(): ReserveInfo[] {\n    return this.reserves;\n  }\n\n  public getAllReservesPricePubKey(): (OracleId | null)[] {\n    return this.reserves.map((r) => r.getOracleId());\n  }\n\n  public getReserve(reserveId: ReserveId): ReserveInfo {\n    const result = this.findReserve(reserveId);\n    if (!result) {\n      throw new Error(`No reserve for ${reserveId}`);\n    }\n\n    return result;\n  }\n\n  public getByAssetMintId(mintId: MintId): ReserveInfo {\n    const result = this.findByAssetMintId(mintId);\n    if (!result) {\n      throw new Error(`No reserve for asset mint ${mintId}`);\n    }\n\n    return result;\n  }\n\n  public getByShareMintId(mintId: MintId): ReserveInfo {\n    const result = this.findByShareMintId(mintId);\n    if (!result) {\n      throw new Error(`No reserve for share mint ${mintId}`);\n    }\n\n    return result;\n  }\n\n  public findReserve(reserveId: ReserveId): ReserveInfo | undefined {\n    const key = reserveId.toString();\n    return this.byReserveId.get(key);\n  }\n\n  public findByAssetMintId(mintId: MintId): ReserveInfo | undefined {\n    const key = mintId.toString();\n    return this.byAssetMintId.get(key);\n  }\n\n  public findByShareMintId(mintId: MintId): ReserveInfo | undefined {\n    const key = mintId.toString();\n    return this.byShareMintId.get(key);\n  }\n\n  public findByStakingPoolId(\n    stakingPoolId: StakingPoolId\n  ): ReserveInfo | undefined {\n    if (!stakingPoolId) {\n      return undefined;\n    }\n\n    const key = stakingPoolId.toString();\n    return this.byStakingPoolId.get(key);\n  }\n}\n","import { MintId } from \"./MintId\";\nimport { Ratio, Percentage } from \"./basic\";\n\nexport class ReserveUtilizationRatio extends Ratio<ReserveUtilizationRatio> {\n  private readonly mintId: MintId;\n\n  constructor(mintId: MintId, pct?: Percentage) {\n    super(pct);\n    this.mintId = mintId;\n  }\n\n  public static na(mintId: MintId): ReserveUtilizationRatio {\n    return new ReserveUtilizationRatio(mintId);\n  }\n\n  public getMintId(): MintId {\n    return this.mintId;\n  }\n\n  protected isCompatibleWith(that: ReserveUtilizationRatio): boolean {\n    return this.mintId.equals(that.mintId);\n  }\n}\n","/* eslint-disable new-cap */\nimport { ReserveId } from \"./ReserveId\";\nimport { Asset } from \"./Asset\";\nimport { Share } from \"./Share\";\nimport { AssetExchangeRate } from \"./AssetExchangeRate\";\nimport { ReserveUtilizationRatio } from \"./ReserveUtilizationRatio\";\nimport { ReserveBorrowRate } from \"./ReserveBorrowRate\";\nimport Big from \"big.js\";\nimport { MintId } from \"./MintId\";\nimport { Apy } from \"./Apy\";\nimport { OracleId } from \"./OracleId\";\nimport { MarketId } from \"./MarketId\";\nimport { TokenAccountId } from \"./TokenAccountId\";\nimport { Percentage } from \"./basic\";\nimport { AssetPrice } from \"./AssetPrice\";\nimport { QuantityContext } from \"./QuantityContext\";\nimport { AssetValue } from \"./AssetValue\";\nimport { Parsed } from \"../serialization/Parsed\";\nimport { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport {\n  borrowObligationLiquidityInstruction,\n  depositObligationCollateralInstruction,\n  depositReserveLiquidityInstruction,\n  redeemReserveCollateralInstruction,\n  refreshReserveInstruction,\n} from \"../instructions\";\nimport {\n  ReserveCollateral,\n  ReserveConfig,\n  ReserveData,\n  ReserveLayout,\n  ReserveLiquidity,\n} from \"../structs\";\nimport { RawData } from \"../serialization/RawData\";\nimport { StakingPoolId } from \"./staking/StakingPoolId\";\nimport { ExchangeRate } from \"./ExchangeRate\";\nimport { PORT_LENDING } from \"../constants\";\nimport BN from \"bn.js\";\n\nexport class ReserveInfo implements Parsed<ReserveId> {\n  private readonly reserveId: ReserveId;\n  readonly marketId: MarketId;\n  readonly asset: ReserveAssetInfo;\n  readonly share: ReserveTokenInfo;\n  readonly params: ReserveParams;\n  private readonly stakingPoolId: StakingPoolId | undefined;\n\n  // tricky\n  readonly proto: ReserveData;\n\n  constructor(\n    reserveId: ReserveId,\n    marketId: MarketId,\n    asset: ReserveAssetInfo,\n    share: ReserveTokenInfo,\n    params: ReserveParams,\n    stakingPoolId: StakingPoolId | undefined,\n    proto: ReserveData\n  ) {\n    this.reserveId = reserveId;\n    this.marketId = marketId;\n    this.asset = asset;\n    this.share = share;\n    this.params = params;\n    this.stakingPoolId = stakingPoolId;\n    this.proto = proto;\n  }\n\n  public static fromRaw(raw: RawData): ReserveInfo {\n    const buffer = raw.account.data;\n    const proto = ReserveLayout.decode(buffer) as ReserveData;\n\n    const marketId = MarketId.of(proto.lendingMarket);\n    const asset = ReserveAssetInfo.fromRaw(proto.liquidity);\n    const token = ReserveTokenInfo.fromRaw(proto.collateral);\n    const params = ReserveParams.fromRaw(asset.getMintId(), proto.config);\n    const stakingPoolId = proto.config.stakingPoolId;\n    return new ReserveInfo(\n      ReserveId.of(raw.pubkey),\n      marketId,\n      asset,\n      token,\n      params,\n      stakingPoolId,\n      proto\n    );\n  }\n\n  getProto(): ReserveData {\n    return this.proto;\n  }\n\n  getId(): ReserveId {\n    return this.getReserveId();\n  }\n\n  public getReserveId(): ReserveId {\n    return this.reserveId;\n  }\n\n  public getMarketId(): MarketId {\n    return this.marketId;\n  }\n\n  public getAssetMintId(): MintId {\n    return this.asset.getMintId();\n  }\n\n  public getAssetBalanceId(): TokenAccountId {\n    return this.asset.getSplAccountId();\n  }\n\n  public getShareMintId(): MintId {\n    return this.share.getMintId();\n  }\n\n  public getShareBalanceId(): TokenAccountId {\n    return this.share.getSplAccountId();\n  }\n\n  public getOracleId(): OracleId | null {\n    return this.asset.getOracleId();\n  }\n\n  public getFeeBalanceId(): TokenAccountId {\n    return this.asset.getFeeAccountId();\n  }\n\n  // new input arg\n  public getMarketCap(price?: AssetPrice): AssetValue {\n    const asset = this.getTotalAsset();\n    return new AssetValue(\n      asset,\n      asset.toValue(price ?? this.getMarkPrice(), this.getQuantityContext())\n    );\n  }\n\n  public getTotalAsset(): Asset {\n    return this.getAvailableAsset().add(this.getBorrowedAsset());\n  }\n\n  // new input arg\n  public getAvailableAssetValue(price?: AssetPrice): AssetValue {\n    const asset = this.getAvailableAsset();\n    return new AssetValue(\n      asset,\n      asset.toValue(price ?? this.getMarkPrice(), this.getQuantityContext())\n    );\n  }\n\n  public getAvailableAsset(): Asset {\n    return this.asset.getAvailableAsset();\n  }\n\n  // new input arg\n  public getBorrowedAssetValue(price?: AssetPrice): AssetValue {\n    const asset = this.getBorrowedAsset();\n    return new AssetValue(\n      asset,\n      asset.toValue(price ?? this.getMarkPrice(), this.getQuantityContext())\n    );\n  }\n\n  public getBorrowedAsset(): Asset {\n    return this.asset.getBorrowedAsset();\n  }\n\n  public getQuantityContext(): QuantityContext {\n    return this.asset.getQuantityContext();\n  }\n\n  public getMarkPrice(): AssetPrice {\n    return this.asset.getMarkPrice();\n  }\n\n  public getExchangeRatio(): AssetExchangeRate {\n    const asset = this.getTotalAsset();\n    const share = this.share.getIssuedShare();\n\n    const assetMintId = asset.getMintId();\n    const shareMintId = share.getMintId();\n    if (asset.isZero()) {\n      return new AssetExchangeRate(shareMintId, assetMintId);\n    }\n    const ratio = Percentage.fromOneBased(share.getRaw().div(asset.getRaw()));\n    return new AssetExchangeRate(shareMintId, assetMintId, ratio);\n  }\n\n  public getUtilizationRatio(): ReserveUtilizationRatio {\n    const total = this.getTotalAsset();\n    if (total.isZero()) {\n      return ReserveUtilizationRatio.na(total.getMintId());\n    }\n\n    const pct = Percentage.fromOneBased(\n      this.getBorrowedAsset().getRaw().div(total.getRaw())\n    );\n    return new ReserveUtilizationRatio(total.getMintId(), pct);\n  }\n\n  public getSupplyApy(): Apy {\n    const utilizationRatio = this.getUtilizationRatio();\n    const borrowApy = this.getBorrowApy();\n\n    if (!utilizationRatio.isPresent() || !borrowApy.isPresent()) {\n      return Apy.na();\n    }\n\n    const utilizationRatioRaw = utilizationRatio.getUnchecked();\n    const borrowApyRaw = borrowApy.getUnchecked();\n    return Apy.of(utilizationRatioRaw.mul(borrowApyRaw));\n  }\n\n  public getBorrowApy(): Apy {\n    const params = this.params;\n    const utilizationRatio = this.getUtilizationRatio();\n    const optimalUtilizationRatio = params.optimalUtilizationRatio;\n    const optimalBorrowRate = params.optimalBorrowRate;\n\n    if (\n      !utilizationRatio.isPresent() ||\n      !optimalUtilizationRatio.isPresent() ||\n      !optimalBorrowRate.isPresent()\n    ) {\n      return Apy.na();\n    }\n\n    const utilizationRatioRaw = utilizationRatio.getUnchecked();\n    const optimalUtilizationRatioRaw = optimalUtilizationRatio.getUnchecked();\n    const optimalBorrowRateRaw = optimalBorrowRate.getUnchecked();\n    if (\n      optimalUtilizationRatioRaw.eq(1) ||\n      utilizationRatioRaw.lt(optimalUtilizationRatioRaw)\n    ) {\n      const minBorrowRate = params.minBorrowRate;\n      if (!minBorrowRate.isPresent()) {\n        return Apy.na();\n      }\n\n      const minBorrowRateRaw = minBorrowRate.getUnchecked();\n      const normalizedFactor = utilizationRatioRaw.div(\n        optimalUtilizationRatioRaw\n      );\n      const borrowRateDiff = optimalBorrowRateRaw.sub(minBorrowRateRaw);\n      return Apy.of(normalizedFactor.mul(borrowRateDiff).add(minBorrowRateRaw));\n    }\n\n    const maxBorrowRate = params.maxBorrowRate;\n    if (!maxBorrowRate.isPresent()) {\n      return Apy.na();\n    }\n\n    const maxBorrowRateRaw = maxBorrowRate.getUnchecked();\n    const normalizedFactor = utilizationRatioRaw\n      .sub(optimalUtilizationRatioRaw)\n      .div(new Big(1).sub(optimalUtilizationRatioRaw));\n    const borrowRateDiff = maxBorrowRateRaw.sub(optimalBorrowRateRaw);\n\n    return Apy.of(\n      normalizedFactor.mul(borrowRateDiff).add(optimalBorrowRateRaw)\n    );\n  }\n\n  public getStakingPoolId(): StakingPoolId | undefined {\n    return this.stakingPoolId;\n  }\n\n  // add reserve instructions ,use in Sundial\n  public async getMarketAuthority(): Promise<[PublicKey, number]> {\n    return await PublicKey.findProgramAddress(\n      [this.getMarketId().toBuffer()],\n      PORT_LENDING\n    );\n  }\n\n  public async depositReserve({\n    amount,\n    userLiquidityWallet,\n    destinationCollateralWallet,\n    userTransferAuthority,\n  }: {\n    amount: BN;\n    userLiquidityWallet: PublicKey;\n    destinationCollateralWallet: PublicKey;\n    userTransferAuthority: PublicKey;\n  }): Promise<TransactionInstruction[]> {\n    const [authority] = await this.getMarketAuthority();\n    const ixs: TransactionInstruction[] = [];\n\n    ixs.push(\n      refreshReserveInstruction(\n        this.getReserveId(),\n        this.getOracleId() ?? null\n      ),\n      depositReserveLiquidityInstruction(\n        amount,\n        userLiquidityWallet,\n        destinationCollateralWallet,\n        this.getReserveId(),\n        this.getAssetBalanceId(),\n        this.getShareMintId(),\n        this.getMarketId(),\n        authority,\n        userTransferAuthority\n      )\n    );\n    return ixs;\n  }\n\n  public async depositObligationCollateral({\n    amount,\n    userCollateralWallet,\n    obligation,\n    obligationOwner,\n    userTransferAuthority,\n  }: {\n    amount: BN;\n    userCollateralWallet: PublicKey;\n    obligation: PublicKey;\n    obligationOwner: PublicKey;\n    userTransferAuthority: PublicKey;\n  }): Promise<TransactionInstruction[]> {\n    const [authority] = await this.getMarketAuthority();\n    const ixs: TransactionInstruction[] = [];\n\n    ixs.push(\n      refreshReserveInstruction(\n        this.getReserveId(),\n        this.getOracleId() ?? null\n      ),\n      depositObligationCollateralInstruction(\n        amount,\n        userCollateralWallet,\n        this.getShareBalanceId(),\n        this.getReserveId(),\n        obligation,\n        this.getMarketId(),\n        authority,\n        obligationOwner,\n        userTransferAuthority\n      )\n    );\n    return ixs;\n  }\n\n  public async borrowObligationLiquidity({\n    amount,\n    userWallet,\n    owner,\n    obligation,\n  }: {\n    amount: BN;\n    userWallet: PublicKey;\n    obligation: PublicKey;\n    owner: PublicKey;\n    userTransferAuthority: PublicKey;\n  }): Promise<TransactionInstruction[]> {\n    const [authority] = await this.getMarketAuthority();\n    const ixs: TransactionInstruction[] = [];\n\n    ixs.push(\n      borrowObligationLiquidityInstruction(\n        amount,\n        this.getAssetBalanceId(),\n        userWallet,\n        this.getReserveId(),\n        this.getFeeBalanceId(),\n        obligation,\n        this.getMarketId(),\n        authority,\n        owner\n      )\n    );\n    return ixs;\n  }\n\n  public async redeemCollateral({\n    amount,\n    userCollateralWallet,\n    destinationLiquidityWallet,\n    userTransferAuthority,\n  }: {\n    amount: BN;\n    userCollateralWallet: PublicKey;\n    destinationLiquidityWallet: PublicKey;\n    userTransferAuthority: PublicKey;\n  }): Promise<TransactionInstruction[]> {\n    const [authority] = await this.getMarketAuthority();\n    const ixs: TransactionInstruction[] = [];\n\n    ixs.push(\n      redeemReserveCollateralInstruction(\n        amount,\n        userCollateralWallet,\n        destinationLiquidityWallet,\n        this.getReserveId(),\n        this.getShareMintId(),\n        this.getAssetBalanceId(),\n        this.getMarketId(),\n        authority,\n        userTransferAuthority\n      )\n    );\n    return ixs;\n  }\n}\n\nexport class ReserveAssetInfo {\n  private readonly mintId: MintId;\n  private readonly oracleId: OracleId | null;\n  private readonly feeAccountId: TokenAccountId;\n  private readonly supplyAccountId: TokenAccountId;\n  private readonly available: Asset;\n  private readonly borrowed: Asset;\n  private readonly markPrice: AssetPrice;\n  private readonly cumulativeBorrowRate: ExchangeRate;\n  private readonly quantityContext: QuantityContext;\n\n  constructor(\n    mintId: MintId,\n    oracleId: OracleId | null,\n    feeBalanceId: TokenAccountId,\n    supplyAccountId: TokenAccountId,\n    available: Asset,\n    borrowed: Asset,\n    markPrice: AssetPrice,\n    cumulativeBorrowRate: ExchangeRate,\n    quantityContext: QuantityContext\n  ) {\n    this.mintId = mintId;\n    this.oracleId = oracleId;\n    this.feeAccountId = feeBalanceId;\n    this.supplyAccountId = supplyAccountId;\n    this.available = available;\n    this.borrowed = borrowed;\n    this.markPrice = markPrice;\n    this.cumulativeBorrowRate = cumulativeBorrowRate;\n    this.quantityContext = quantityContext;\n  }\n\n  public static fromRaw(raw: ReserveLiquidity): ReserveAssetInfo {\n    const mintId = raw.mintPubkey;\n    const oracleId =\n      raw.oracleOption === 1 ? MintId.of(raw.oraclePubkey) : null;\n    const feeAccountId = raw.feeReceiver;\n    const supplyBalanceId = raw.supplyPubkey;\n    const available = Asset.of(mintId, raw.availableAmount);\n    const borrowed = Asset.of(mintId, raw.borrowedAmountWads);\n    const markPrice = AssetPrice.of(mintId, raw.marketPrice);\n    const cumulativeBorrowRate = raw.cumulativeBorrowRateWads;\n    const quantityContext = QuantityContext.fromDecimals(raw.mintDecimals);\n    return new ReserveAssetInfo(\n      mintId,\n      oracleId,\n      feeAccountId,\n      supplyBalanceId,\n      available,\n      borrowed,\n      markPrice,\n      cumulativeBorrowRate,\n      quantityContext\n    );\n  }\n\n  public getMintId(): MintId {\n    return this.mintId;\n  }\n\n  public getOracleId(): OracleId | null {\n    return this.oracleId;\n  }\n\n  public getFeeAccountId(): TokenAccountId {\n    return this.feeAccountId;\n  }\n\n  public getSplAccountId(): TokenAccountId {\n    return this.supplyAccountId;\n  }\n\n  public getAvailableAsset(): Asset {\n    return this.available;\n  }\n\n  public getBorrowedAsset(): Asset {\n    return this.borrowed;\n  }\n\n  public getMarkPrice(): AssetPrice {\n    return this.markPrice;\n  }\n\n  public getCumulativeBorrowRate(): ExchangeRate {\n    return this.cumulativeBorrowRate;\n  }\n\n  public getQuantityContext(): QuantityContext {\n    return this.quantityContext;\n  }\n}\n\nexport class ReserveTokenInfo {\n  private readonly mintId: MintId;\n  private readonly splAccountId: TokenAccountId;\n  private readonly issuedShare: Share;\n\n  constructor(mintId: MintId, splAccount: TokenAccountId, issuedShare: Share) {\n    this.mintId = mintId;\n    this.splAccountId = splAccount;\n    this.issuedShare = issuedShare;\n  }\n\n  public static fromRaw(raw: ReserveCollateral): ReserveTokenInfo {\n    const mintId = raw.mintPubkey;\n    const splAccountId = raw.supplyPubkey;\n    const issuedShare = Share.of(mintId, raw.mintTotalSupply);\n    return new ReserveTokenInfo(mintId, splAccountId, issuedShare);\n  }\n\n  public getMintId(): MintId {\n    return this.mintId;\n  }\n\n  public getSplAccountId(): TokenAccountId {\n    return this.splAccountId;\n  }\n\n  public getIssuedShare(): Share {\n    return this.issuedShare;\n  }\n}\n\nexport class ReserveParams {\n  loanToValueRatio: Percentage;\n  optimalUtilizationRatio: ReserveUtilizationRatio;\n  optimalBorrowRate: ReserveBorrowRate;\n  minBorrowRate: ReserveBorrowRate;\n  maxBorrowRate: ReserveBorrowRate;\n  liquidationThreshold: Percentage;\n  liquidationPenalty: Percentage;\n  borrowFee: Percentage;\n\n  constructor(\n    loanToValueRatio: Percentage,\n    optimalUtilizationRatio: ReserveUtilizationRatio,\n    optimalBorrowRate: ReserveBorrowRate,\n    minBorrowRate: ReserveBorrowRate,\n    maxBorrowRate: ReserveBorrowRate,\n    liquidationThreshold: Percentage,\n    liquidationPenalty: Percentage,\n    borrowFee: Percentage\n  ) {\n    this.loanToValueRatio = loanToValueRatio;\n    this.optimalUtilizationRatio = optimalUtilizationRatio;\n    this.optimalBorrowRate = optimalBorrowRate;\n    this.minBorrowRate = minBorrowRate;\n    this.maxBorrowRate = maxBorrowRate;\n    this.liquidationThreshold = liquidationThreshold;\n    this.liquidationPenalty = liquidationPenalty;\n    this.borrowFee = borrowFee;\n  }\n\n  static fromRaw(mintId: MintId, config: ReserveConfig): ReserveParams {\n    const loanToValueRatio = config.loanToValueRatio;\n    const optimalUtilizationRatio = new ReserveUtilizationRatio(\n      mintId,\n      config.optimalUtilizationRate\n    );\n    const optimalBorrowRate = new ReserveBorrowRate(\n      mintId,\n      config.optimalBorrowRate\n    );\n    const minBorrowRate = new ReserveBorrowRate(mintId, config.minBorrowRate);\n    const maxBorrowRate = new ReserveBorrowRate(mintId, config.maxBorrowRate);\n    const liquidationThreshold = config.liquidationThreshold;\n    const liquidationPenalty = config.liquidationBonus;\n    const borrowFee = Percentage.fromOneBased(config.fees.borrowFeeWad);\n    return new ReserveParams(\n      loanToValueRatio,\n      optimalUtilizationRatio,\n      optimalBorrowRate,\n      minBorrowRate,\n      maxBorrowRate,\n      liquidationThreshold,\n      liquidationPenalty,\n      borrowFee\n    );\n  }\n}\n","import Big, { BigSource } from \"big.js\";\nimport { Decimal, DecimalField } from \"./basic\";\nimport { Field } from \"../serialization/Field\";\nimport { BigType } from \"../serialization/BigType\";\n\nexport class Slot extends Decimal<Slot> {\n  private static SLOT_ZERO = Slot.of(0);\n\n  private constructor(value: BigSource) {\n    super(value);\n  }\n\n  public static zero(): Slot {\n    return Slot.SLOT_ZERO;\n  }\n\n  public static of(raw: BigSource): Slot {\n    return new Slot(raw);\n  }\n\n  public static field(property: string): Field<Slot> {\n    return new SlotField(property);\n  }\n\n  public replaceWithValue(value: BigSource): Slot {\n    return Slot.of(value);\n  }\n}\n\nclass SlotField extends DecimalField<Slot> {\n  public constructor(property: string) {\n    super(BigType.U64, property);\n  }\n\n  protected fromBig(big: Big): Slot {\n    return Slot.of(big);\n  }\n}\n","import { TokenAccountId } from \"./TokenAccountId\";\nimport { MintId } from \"./MintId\";\nimport { Lamport } from \"./basic\";\nimport { Parsed } from \"../serialization/Parsed\";\nimport { WalletId } from \"./WalletId\";\nimport { RawData } from \"../serialization/RawData\";\nimport { AccountLayout, u64 } from \"@solana/spl-token\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nexport class TokenAccount implements Parsed<TokenAccountId> {\n  private readonly splAccountId: TokenAccountId;\n  private readonly walletId: WalletId;\n  private readonly mintId: MintId;\n  private readonly amount: Lamport;\n\n  public constructor(\n    balanceId: TokenAccountId,\n    walletId: WalletId,\n    mintId: MintId,\n    amount: Lamport\n  ) {\n    this.splAccountId = balanceId;\n    this.walletId = walletId;\n    this.mintId = mintId;\n    this.amount = amount;\n  }\n\n  public static forNative(raw: RawData): TokenAccount {\n    return new TokenAccount(\n      TokenAccountId.of(raw.pubkey),\n      WalletId.of(raw.pubkey),\n      MintId.native(),\n      Lamport.of(raw.account.lamports)\n    );\n  }\n\n  public static fromRaw(raw: RawData): TokenAccount {\n    const buffer = Buffer.from(raw.account.data);\n    const accountInfo = AccountLayout.decode(buffer);\n\n    accountInfo.mint = new PublicKey(accountInfo.mint);\n    accountInfo.owner = new PublicKey(accountInfo.owner);\n    accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n    return new TokenAccount(\n      TokenAccountId.of(raw.pubkey),\n      WalletId.of(accountInfo.owner),\n      MintId.of(accountInfo.mint),\n      Lamport.of(accountInfo.amount)\n    );\n  }\n\n  public getId(): TokenAccountId {\n    return this.getSplAccountId();\n  }\n\n  public getSplAccountId(): TokenAccountId {\n    return this.splAccountId;\n  }\n\n  public getWalletId(): WalletId {\n    return this.walletId;\n  }\n\n  public isNative(): boolean {\n    return this.getMintId().isNative();\n  }\n\n  public getMintId(): MintId {\n    return this.mintId;\n  }\n\n  public isPositive(): boolean {\n    return this.amount.isPositive();\n  }\n\n  public getAmount(): Lamport {\n    return this.amount;\n  }\n}\n","import { MintId } from \"./MintId\";\nimport { TokenAccount } from \"./TokenAccount\";\nimport { TokenAccountId } from \"./TokenAccountId\";\n\nexport class TokenAccountContext {\n  private static readonly SPL_ACCOUNT_CONTEXT_EMPTY = TokenAccountContext.index(\n    []\n  );\n\n  private readonly accounts: TokenAccount[];\n  private readonly bySplAccountId: Map<string, TokenAccount>;\n\n  private constructor(\n    accounts: TokenAccount[],\n    bySplAccountId: Map<string, TokenAccount>\n  ) {\n    this.accounts = accounts;\n    this.bySplAccountId = bySplAccountId;\n  }\n\n  public static empty(): TokenAccountContext {\n    return TokenAccountContext.SPL_ACCOUNT_CONTEXT_EMPTY;\n  }\n\n  public static index(accounts: TokenAccount[]): TokenAccountContext {\n    const bySplAccountId = new Map<string, TokenAccount>();\n    accounts.forEach((a) =>\n      bySplAccountId.set(a.getSplAccountId().toString(), a)\n    );\n    return new TokenAccountContext(accounts, bySplAccountId);\n  }\n\n  public isReady(): boolean {\n    return this.accounts.length > 0;\n  }\n\n  public getAllTokenAccounts(): TokenAccount[] {\n    return this.accounts;\n  }\n\n  public getSplAccount(splAccountId: TokenAccountId): TokenAccount {\n    const result = this.findSplAccount(splAccountId);\n    if (!result) {\n      throw new Error(`No account for ${splAccountId}`);\n    }\n\n    return result;\n  }\n\n  public findSplAccount(\n    splAccountId: TokenAccountId\n  ): TokenAccount | undefined {\n    const key = splAccountId.toString();\n    return this.bySplAccountId.get(key);\n  }\n\n  public getSplAccountByMintId(mintId: MintId): TokenAccount {\n    const result = this.findSplAccountByMintId(mintId);\n    if (!result) {\n      throw new Error(`No account for mint ${mintId}`);\n    }\n\n    return result;\n  }\n\n  public findSplAccountByMintId(mintId: MintId): TokenAccount | undefined {\n    const accounts = this.accounts\n      .filter((account) => account.getMintId().equals(mintId))\n      .sort((a, b) => -a.getAmount().compare(b.getAmount()));\n    return accounts[0];\n  }\n}\n"]}